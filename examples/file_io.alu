use std::fs::File;
use std::io::{Error, Readable, Writable};

fn copy<S: Readable<S>, D: Writable<D>>(
    src: &mut S, 
    dst: &mut D
) -> Result<(), Error> {
    let buf: [u8; 1024];
    let buf = buf.as_slice_mut();

    loop {
        let n = try!(src.read(buf));
        if n == 0 {
            break;
        }
        try!(dst.write_all(buf[0..n]));
    }

    dst.flush()
}

fn copy_file(src: &[u8], dst: &[u8]) -> Result<(), Error> {
    let src = try!(File::open(src);
    defer src.close();

    let dst = try!(File::create(dst));
    defer dst.close();

    try!(copy(&src, &dst));

    Result::ok(())
}

fn main() -> i32 {
    use std::io::lines;

    let ret = copy_file("/proc/mounts", "./mounts.txt");

    if !ret.is_ok {
        eprintln!("failed: {}", ret.unwrap_err());
        1
    } else {
        0
    }
}
