use std::string::StringBuf;

fn accept_vector(vec: StringBuf) {
    // do something with it
    println!("moved: {}", vec[..]);
    vec.free();
}

fn main() {
    let vec = StringBuf::new();
    defer vec.free(); // vec will now be automatically freed when `main` exits

    vec.extend_from_slice("Hello, world!");

    // This would be wrong and lead to double free, as the same vector would be
    // freed both in `accept_vector` and `main`.
    // accept_vector(vec);

    // If we need to transfer ownership, we can use the move() function. This
    // creates an efficient shallow copy of the vector and leaves the original
    // `vec` nulled, so free is a no-op.
    accept_vector(vec.move());

    println!("original: {}", vec[..])
}
