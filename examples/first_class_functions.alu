use std::builtins::Callable;

// This function will accept a function pointer as a parameter.
fn say_twice_pointer<T>(sayer: fn(T), what: T) {
    sayer(what);
    sayer(what);
}

// say_twice_mono will be monomorphized using a specific function say<T> for a given T it is invoked
// with. This allows for e.g. inlining and other optimizations. Unlike function pointers,
// function types are zero-sized (each function type is a unit type containing only one
// function), so the "sayer" parameter will be elided away and `say` will be called directly
// from the body of the function.
fn say_twice_mono<T>(sayer: say<T>, what: T) {
    sayer(what);
    sayer(what);
}

// Similar to the previous example, but much more useful. This will accept any function matching
// the given Callable protocol, but will still be monomorphized with a specific function.
fn say_twice_protocol<T, F: Callable<(T), ()>>(sayer: F, what: T) {
    sayer(what);
    sayer(what);
}

fn say<T>(what: T) {
    println!("{}", what);
}

fn main() {
    say_twice_pointer(say, "hello");
    say_twice_mono(say, "world");

    // Unfortunately type inference is not yet smart enough to figure out the T parameter
    // of say if it is only constrained by the protocol bound, so we need to add a type
    // hint.
    say_twice_protocol(say::<&[u8]>, "!");
}
