use std::io::{print, println};

fn print_slice<T>(arr: &[T]) {
    print!("[");
    let i = 0usize;
    while i < arr.len {
        if i > 0 {
            print!(", ");
        }
        print!("{}", arr[i]);
        i += 1;
    }
    print!("]\n");
}

fn quicksort<T>(arr: &mut [T]) {
    if arr.len <= 1 {
        return;
    }

    let p = partition(arr);
    quicksort(arr[..p]);
    quicksort(arr[p+1..]);
}

fn partition<T>(arr: &mut [T]) -> usize {
    use std::mem::swap;

    let pivot = arr[arr.len - 1];

    let i = 0usize;
    let j = 0usize;
    while j < arr.len - 1 {
        if arr[j] <= pivot {
            swap(&arr[i], &arr[j]);
            i += 1;
        }
        j += 1;
    }
    swap(&arr[i], &arr[arr.len - 1]);

    i
}


fn main() {
    let values = [
        1i64, 13, 1597, 233, 2, 8, 3,
        610, 4181, 377, 5, 6765, 987,
        144, 2584, 21, 55, 0, 1, 34, 89
    ];

    print!("Original: ");
    print_slice(&values);

    quicksort(&values);

    print!("Sorted:   ");
    print_slice(&values);
}
