use std::fmt::{Formattable, Formatter, write, Error};

struct PrintableSlice<T> {
    inner: &[T]
}

impl PrintableSlice {
    fn fmt<T: Formattable<T, F>, F: Formatter<F>>(self: &PrintableSlice<T>, formatter: &mut F) -> Result<(), Error> {
        write!(formatter, "[ ")?;
        for item in self.inner {
            write!(formatter, "{} ", item)?;
        }
        write!(formatter, "]")
    }
}

fn printable<T>(slice: &[T]) -> PrintableSlice<T> {
    PrintableSlice { inner: slice }
}


fn main() {
    let words: &mut [&[u8]] = &[
        "amende",
        "burgrave",
        "egestion",
        "entropion",
        "episcope",
        "ginnel",
        "gleek",
        "janker",
        "jetavator",
        "mangabey",
        "triarchy",
        "tumid",
        "uranomancy",
        "vapography",
        "venule",
        "wearish",
        "yuft",
        "yulo",
    ];

    println!("Original: {}", words.printable());

    use std::random::{thread_rng, shuffle};
    thread_rng().shuffle(words);
    println!("Shuffled: {}", words.printable());

    std::collections::sort(words);
    println!("Sorted:   {}", words.printable());
}
