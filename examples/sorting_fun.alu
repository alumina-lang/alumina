use std::fmt::{Formattable, Formatter, write};

struct PrintableSlice<T> {
    inner: &[T]
}

impl PrintableSlice {
    fn new<T>(inner: &[T]) -> PrintableSlice<T> {
        PrintableSlice {
            inner: inner
        }
    }

    fn fmt<T: Formattable<T, F>, F: Formatter<F>>(self: &PrintableSlice<T>, formatter: &mut F) {
        write!(formatter, "[ ");
        for item in self.inner {
            write!(formatter, "{} ", item);
        }
        write!(formatter, "]");
    }
}


fn main() {
    let words: &mut [&[u8]] = &[
        "amende",
        "burgrave",
        "egestion",
        "entropion",
        "episcope",
        "ginnel",
        "gleek",
        "janker",
        "jetavator",
        "mangabey",
        "triarchy",
        "tumid",
        "uranomancy",
        "vapography",
        "venule",
        "wearish",
        "yuft",
        "yulo",
    ];

    println!("Original: {}", PrintableSlice::new(words));
    
    use std::random::{DEFAULT_RNG, shuffle};
    DEFAULT_RNG.shuffle(words);
    println!("Shuffled: {}", PrintableSlice::new(words));
    
    std::collections::sort(words);
    println!("Sorted:   {}", PrintableSlice::new(words));
}
