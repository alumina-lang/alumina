//! Tests for various language features and constructs.

use std::runtime::const_eval;
use std::runtime::is_const_evaluable;

#[test]
fn test_linear_scope_shadowing_fn() {
    fn foo() -> i32 {
        1
    }
    assert_eq!(foo(), 1);

    fn foo() -> i32 {
        2
    }
    assert_eq!(foo(), 2);
}

#[test]
fn test_linear_scope_shadowing_impl() {
    struct Foo {}
    impl Foo {
        fn foo(self: &Foo) -> i32 {
            1
        }
    }

    assert_eq!(Foo{}.foo(), 1);

    struct Foo {}
    impl Foo {
        fn foo(self: &Foo) -> i32 {
            2
        }
    }

    assert_eq!(Foo{}.foo(), 2);
}

#[test]
fn test_linear_scope_shadowing_mixed() {
    let foo = 1;
    assert_eq!(foo, 1);

    fn foo() -> i32 {
        1
    }
    assert_eq!(foo(), 1);

    struct foo {}
    impl foo { fn foo() -> i32 { 2 } }

    assert_eq!(foo::foo(), 2);

    const foo: i32 = 3;
    assert_eq!(foo, 3);

    fn bar() -> i32 { 4 }

    use bar as foo;
    assert_eq!(foo(), 4);
}


#[test]
fn test_no_int_promotion() {
    let a = 63u8;
    assert!(a < ~a);
}

fn assert_layout<T>(size: usize, align: usize) {
    use std::mem::{align_of, size_of};

    assert_eq!(size_of::<T>(), size);
    assert_eq!(align_of::<T>(), align);

    // Check that our own layout computation agrees with C's.
    when !std::typing::is_zero_sized::<T>() {
        assert_eq!(std::intrinsics::codegen_type_func::<T, usize>("sizeof"), size);
        assert_eq!(std::intrinsics::codegen_type_func::<T, usize>("_Alignof"), align);
    }
}

#[test]
#[allow(zst_pointer_offset)]
fn test_zst_pointer_arithmetic() {
    let f: &void = null;

    assert_eq!((f + 1), f);

    // test side effects

    let counter = 0;
    let f1 = |&counter| -> &void { counter += 1; null };
    let f2 = |&counter| -> isize { counter *= 3; 1 };

    assert_eq!(f1() + 1, null);
    assert_eq!(counter, 1);

    assert_eq!(null + f2(), null);
    assert_eq!(counter, 3);

    // test order of evaluation
    assert_eq!(f1() + f2(), null);
    assert_eq!(counter, 12); // not 10

    // compound assignment
    let f = null;
    f += 1;

    assert_eq!(f, null);

    // test side effects

    let counter = 0;
    let val: &void = null;

    let f1 = |&counter, &val| -> &mut &void { counter += 1; &val };
    let f2 = |&counter| -> isize { counter *= 3; 1 };

    *f1() += 1;
    assert_eq!(counter, 1);

    // test order of evaluation
    *f1() += f2();
    assert_eq!(counter, 6); // not 4
}


#[test]
fn test_builtin_layout() {
    assert_layout::<bool>(1, 1);
    assert_layout::<u8>(1, 1);
    assert_layout::<u16>(2, 2);
    assert_layout::<u32>(4, 4);
    assert_layout::<u64>(8, 8);

    #[cfg(target_pointer_width = "64")]
    assert_layout::<usize>(8, 8);
    #[cfg(target_pointer_width = "32")]
    assert_layout::<usize>(4, 4);

    assert_layout::<u128>(16, 16);

    assert_layout::<i8>(1, 1);
    assert_layout::<i16>(2, 2);
    assert_layout::<i32>(4, 4);
    assert_layout::<i64>(8, 8);

    #[cfg(target_pointer_width = "64")]
    assert_layout::<isize>(8, 8);
    #[cfg(target_pointer_width = "32")]
    assert_layout::<isize>(4, 4);

    assert_layout::<i128>(16, 16);

    assert_layout::<f32>(4, 4);
    assert_layout::<f64>(8, 8);

    assert_layout::<()>(0, 1);
    assert_layout::<!>(0, 1);

    #[cfg(target_pointer_width = "64")]
    {
        assert_layout::<&u8>(8, 8);
        assert_layout::<&mut u8>(8, 8);
        assert_layout::<fn()>(8, 8);
    }

    #[cfg(target_pointer_width = "32")]
    {
        assert_layout::<&u8>(4, 4);
        assert_layout::<&mut u8>(4, 4);
        assert_layout::<fn()>(4, 4);
    }

    // named functions are ZSTs
    assert_layout::<test_builtin_layout>(0, 1);
}

#[test]
fn test_struct_layout() {
    struct S {}
    assert_layout::<S>(0, 1);

    struct S { a: u8 }
    assert_layout::<S>(1, 1);

    struct S { a: u8, b: u8 }
    assert_layout::<S>(2, 1);

    struct S { a: u8, b: u32, c: u8 }
    assert_layout::<S>(12, 4);

    struct S { a: u32, b: u8, c: u8 }
    assert_layout::<S>(8, 4);

    struct S { a: (), b: u32, c: () }
    assert_layout::<S>(4, 4);

    struct S { a: (), b: u128, c: () }
    assert_layout::<S>(16, 16);

    #[packed] struct S { a: u32, b: u8, c: u8 }
    assert_layout::<S>(6, 1);

    #[packed(2)] struct S { b: u8, a: i32 }
    assert_layout::<S>(6, 2);

    #[packed(4)] struct S { b: u8, a: i32 }
    assert_layout::<S>(8, 4);

    #[packed(16)] struct S { b: u8, a: i32 }
    assert_layout::<S>(8, 4);

    // tuple is still padded internally, but struct is not
    #[packed] struct S { a: u32, b: (u8, u128), c: u8 }
    assert_layout::<S>(37, 1);

    #[packed] struct Inner { a: u8, b: u128 }
    #[packed] struct S { a: u32, b: Inner, c: u8 }
    assert_layout::<S>(22, 1);

    #[align(2)] struct S { val: u8 }
    assert_layout::<S>(2, 2);

    #[align(4)] struct S { val: u8 }
    assert_layout::<S>(4, 4);

    #[align(8)] struct S { val: u8 }
    assert_layout::<S>(8, 8);

    #[align(16)] struct S { val: u8 }
    assert_layout::<S>(16, 16);

    #[align(32)] struct S { val: u8 }
    assert_layout::<S>(32, 32);

    #[align(64)] struct S { val: u8 }
    assert_layout::<S>(64, 64);

    // align attribute is minimum, not exact alignment
    #[align(2)] struct S { a: u8, b: u32 }
    assert_layout::<S>(8, 4);
}

#[test]
fn test_union_layout() {
    union U { }
    assert_layout::<U>(0, 1);

    union U { a: () }
    assert_layout::<U>(0, 1);

    union U { a: u8, b: u8 }
    assert_layout::<U>(1, 1);

    union U { a: u8, b: u32 }
    assert_layout::<U>(4, 4);

    union U { a: u32, b: u8 }
    assert_layout::<U>(4, 4);

    union U { a: u32, b: u8, c: u8 }
    assert_layout::<U>(4, 4);

    union U { a: (), b: u32, c: () }
    assert_layout::<U>(4, 4);

    union U { a: (), b: u128, c: () }
    assert_layout::<U>(16, 16);

    #[packed] union U { a: u32, b: u8, c: u8 }
    assert_layout::<U>(4, 1);

    #[packed(2)] union U { b: u8, a: i32 }
    assert_layout::<U>(4, 2);

    #[packed(4)] union U { b: u8, a: i32 }
    assert_layout::<U>(4, 4);

    #[packed(16)] union U { b: u8, a: i32 }
    assert_layout::<U>(4, 4);

    union Inner { a: u8, b: u128 }
    #[packed] union U { a: u32, b: Inner, c: u8 }
    assert_layout::<U>(16, 1);

    #[packed] union Inner { a: u8, b: u128 }
    #[packed] union U { a: u32, b: Inner, c: u8 }
    assert_layout::<U>(16, 1);

    union U { a: [u8; 12], b: u64 }
    assert_layout::<U>(16, 8);
}

#[test]
fn test_tuple_layout() {
    assert_layout::<()>(0, 1);
    assert_layout::<(u8,)>(1, 1);

    assert_layout::<((), u64)>(8, 8);
    assert_layout::<(u8, u64)>(16, 8);
    assert_layout::<(u8, u64)>(16, 8);
}

#[test]
#[allow(pure_statement)]
fn test_closure_layout() {
    let f = || {};
    assert_layout::<typeof(f)>(0, 1);

    let f = |_a: u8| {};
    assert_layout::<typeof(f)>(0, 1);

    let a: ();
    let b: u8;
    let c: u64;

    let f = |=a| { a; };
    assert_layout::<typeof(f)>(0, 1);
    let f = |=a, =b| { a; b; };
    assert_layout::<typeof(f)>(1, 1);
    let f = |=a, =b, =c| { a; b; c; };
    assert_layout::<typeof(f)>(16, 8);
}

#[test]
fn test_array_layout() {
    assert_layout::<[u8; 0]>(0, 1);
    assert_layout::<[u8; 1]>(1, 1);
    assert_layout::<[u8; 2]>(2, 1);
    assert_layout::<[u8; 3]>(3, 1);

    assert_layout::<[u64; 0]>(0, 8);
    assert_layout::<[u64; 1]>(8, 8);
    assert_layout::<[u64; 2]>(16, 8);
    assert_layout::<[u64; 3]>(24, 8);
}

#[test]
fn test_nested_zst_layout() {
    #[packed] struct S { a: u8, b: [u64; 0] }
    assert_layout::<S>(1, 1);

    // ZST structs do not affect the size of the aggregate they are nested in,
    // but they do affect the alignment.

    #[align(64)] struct BigZst {}

    struct S { a: u8, b: [u64; 0] }
    assert_layout::<S>(8, 8);

    struct S { b: BigZst }
    assert_layout::<S>(0, 64);

    struct S { a: u8, b: BigZst }
    assert_layout::<S>(64, 64);

    struct S { a: u8, b: [[u64; 0]; 1] }
    assert_layout::<S>(8, 8);

    union U { a: u8, b: [u64; 0] }
    assert_layout::<U>(8, 8);
}


// Define them in random order; not that it matters.
static A3: i32 = A2 + 1 + A1;
static A7: i32 = A6 + 1 + A5;
static A6: i32 = A5 + 1 + A4;
static A5: i32 = A4 + 1 + A3;
static A0: i32 = 1;
static A2: i32 = A1 + 1 + A0;
static A4: i32 = A3 + 1 + A2;
static A8: i32 = A7 + 1 + A6;
static A1: i32 = 1;

#[test]
fn test_static_initialization_order() {
    // https://oeis.org/A001595
    assert_eq!(A0, 1);
    assert_eq!(A1, 1);
    assert_eq!(A2, 3);
    assert_eq!(A3, 5);
    assert_eq!(A4, 9);
    assert_eq!(A5, 15);
    assert_eq!(A6, 25);
    assert_eq!(A7, 41);
    assert_eq!(A8, 67);
}



#[test]
fn test_const_eval_basic() {
    const A = 1;
    assert_eq!(A, 1);

    const A = 1 + 1;
    assert_eq!(A, 2);

    const A = {
        let a = 1;
        a + 2
    };

    assert_eq!(A, 3);

    const A = "hello world";
    assert_eq!(A, "hello world");

    const A = [1, 2, 3];
    assert_eq!(A, [1, 2, 3]);

    const A = [1, 2, 3][1];
    assert_eq!(A, 2);

    const A = [1, 2, 3][1] + 1;
    assert_eq!(A, 3);

    const A = "hello world"[2..5];
    assert_eq!(A, "llo");

    const A = "hello world"[2..5].len();
    assert_eq!(A, 3);
}


fn fib(n: i32) -> i32 {
    if n < 2 {
        n
    } else {
        fib(n - 1) + fib(n - 2)
    }
}

#[test]
fn test_const_eval_fancy() {
    const FIB_50 = {
        let a = 0u64;
        let b = 1u64;

        for _ in 0..50 {
            let c = a + b;
            a = b;
            b = c;
        }

        a
    };
    assert_eq!(FIB_50, 12586269025u64);

    const FIB_10 = fib(10);
    assert_eq!(FIB_10, 55);
}


#[test]
fn test_const_eval_uninitialized() {
    const MATRIX = {
        let a: [[i32; 3]; 3];

        for i in 0usize..3 {
            for j in 0usize..3 {
                a[i][j] = (i + j) as i32;
            }
        }

        a
    };

    assert_eq!(MATRIX, [
        [0, 1, 2],
        [1, 2, 3],
        [2, 3, 4],
    ]);
}

#[test]
fn test_const_pointer_operations() {
    assert_eq!(const_eval!({ let a: [i32; 10]; &a[7] - &a[3] }), 4);
    assert_eq!(const_eval!({ let a = "hello world"; &a[7] - &a[3] }), 4);

    assert!(const_eval!({ let a: [i32; 10]; &a[7] > &a[3] }));
    assert!(const_eval!({ let a = "hello world"; &a[7] > &a[3] }));
    assert!(const_eval!({ let a: [i32; 10]; &a[3] < &a[7] }));
    assert!(const_eval!({ let a = "hello world"; &a[3] < &a[7] }));
    assert!(const_eval!({ let a: [i32; 10]; &a[7] >= &a[3] }));
    assert!(const_eval!({ let a = "hello world"; &a[7] >= &a[3] }));
    assert!(const_eval!({ let a: [i32; 10]; &a[3] <= &a[7] }));
    assert!(const_eval!({ let a = "hello world"; &a[3] <= &a[7] }));
    assert!(const_eval!({ let a: [i32; 10]; &a[3] == &a[3] }));
    assert!(const_eval!({ let a = "hello world"; &a[3] == &a[3] }));
    assert!(const_eval!({ let a: [i32; 10]; &a[3] != &a[7] }));
    assert!(const_eval!({ let a = "hello world"; &a[3] != &a[7] }));

    // This is a (surprising) special case for strings. Since the provenance checker
    // compares the underlying buffer by value and not by address, we can do pointer
    // operations across string literals that are identical.
    assert_eq!(const_eval!({
        let a = "hello world";
        let b = "hello world";
        &a[0] - &b[0]
    }), 0);

    assert!(!is_const_evaluable!({
        let a = "bye world";
        let b = "hello world";
        &a[0] - &b[0]
    }));

    assert_eq!(const_eval!({ let a: i32; &a - &a }), 0);
    assert!(const_eval!({ let a: i32; &a == &a }));
    assert!(!is_const_evaluable!({ let a: i32; let b: i32; &a - &b }));

    assert!(const_eval!({
        let func = || {};
        let a: fn() = func;
        let b: fn() = func;

        a == b
    }));
}

#[test]
#[allow(pure_statement)]
#[allow(unused_variable)]
fn test_const_pointer_punning() {
    assert!(is_const_evaluable!({
        let a = [1, 2, 3];
        let b = (&a[0] as &u8);
    }));

    assert!(!is_const_evaluable!({
        let a = [1, 2, 3];
        let b = (&a[0] as &u8) + 1;
    }));

    assert!(!is_const_evaluable!({
        let a = [1, 2, 3];
        let b = (&a[0] as &u8) - (&a[0] as &u8);
    }));

    // Comparison through incompatible pointer type is allowed, just dereferencing
    // and arithmetic are not
    assert!(is_const_evaluable!({
        let a = [1, 2, 3];
        let b = (&a[0] as &u8) == (&a[0] as &u8);
    }));

    assert!(is_const_evaluable!({
        let a = [1, 2, 3];
        let b = (&a[0] as &u8) < (&a[0] as &u8);
    }));

    assert!(is_const_evaluable!({
        let a = [1, 2, 3];
        let b = (&a[0] as &u8 as &i32) + 1;
    }));
}

#[test]
fn test_const_eval_library_functions() {
    fn calc() -> ([i32; 10], bool) {
        let rng = std::random::Pcg32 {
            state: 0xa285d44c06ab9542,
            increment: 0x71bc6da31db36d8d,
        };

        let ret: [i32; 10];
        (0..10)
            .map(|&rng, _: i32| -> i32 { rng.next(0..10) })
            .fill_slice(&ret);

        (ret, std::runtime::in_const_context())
    }

    const RANDOM_VALUES = calc();
    let random_values = calc();

    assert_eq!(RANDOM_VALUES.0, random_values.0);

    assert!(RANDOM_VALUES.1);
    assert!(!random_values.1);
}

#[test]
fn test_const_eval_const() {
    const A: [i32; 3] = [1, 2, 3];
    const B: &i32 = &A[2];

    const C: i32 = 5;
    const D: &i32 = &C;

    assert_eq!(*B, 3);
    assert_eq!(*D, 5);
}


#[test]
fn test_const_zst() {
    struct S<T> {
        a: T,
        b: i32,
    };

    const A = ();
    const B1: [i32; 0] = [];
    const B2: [(); 3] = [(), (), ()];
    const C = ((),(()),((())));
    const D1 = S { a: (), b: 5 };
    const D2 = S { a: [(), (), ()], b: 5 };
    const E = ((), 5);

    const F = &A;
    const G1 = &B1;
    const G2 = &B2[1];
    const H = &C;
    const I1 = &D1.a;
    const I2 = &D2.a[1];
    const J = &E.0;

    assert_eq!(A, ());
    assert_eq!(B1, []);
    assert_eq!(B2, [(), (), ()]);
    assert_eq!(C, ((),(()),((()))));
    assert_eq!(D1.b, 5);
    assert_eq!(D2.b, 5);
    assert_eq!(E.1, 5);

    assert_eq!(F, &());
    assert_eq!(G1, &[]);
    assert_eq!(G2, &());
    assert_eq!(H, &((),(()),((()))));
    assert_eq!(I1, &());
    assert_eq!(I2, &());
    assert_eq!(J, &());
}

#[test]
fn test_const_eval_intrinsics() {
    std::compile_note!("this is a warning"[3..7]);
}


#[test]
#[allow(unused_parameter)]
#[allow(unused_closure_binding)]
#[allow(unused_variable)]
#[allow(pure_statement)]
fn test_pretty_print() {
    use std::stringify;

    let a = 1;
    let b = 2;
    let c = 3;

    fn foo() {}
    fn bar<T>() {}

    enum E {
        A,
        B,
        Card,
    }

    struct S {
        a: i32,
        b: i32,
        c: i32,
    }

    /*
        Block(&'ast [Statement<'ast>], ExprP<'ast>),
        Call(ExprP<'ast>, &'ast [ExprP<'ast>]),
        Static(ItemP<'ast>, Option<&'ast [TyP<'ast>]>),
        Const(ItemP<'ast>, Option<&'ast [TyP<'ast>]>),
    */

    // Test all expression types
    assert_eq!(stringify!(()), "()");
    assert_eq!(stringify!(a), "a");
    assert_eq!(stringify!(a + b), "a + b");
    assert_eq!(stringify!(a = b), "a = b");
    assert_eq!(stringify!(a += b), "a += b");
    assert_eq!(stringify!(-a), "-a");
    assert_eq!(stringify!(*a), "*a");
    assert_eq!(stringify!(&a), "&a");
    assert_eq!(stringify!({ a; b; c }), "{ a; b; c }");
    assert_eq!(stringify!({ a; b; }), "{ a; b; }");
    assert_eq!(stringify!({ a }), "a");
    assert_eq!(stringify!({}), "()");
    assert_eq!(stringify!(defer a), "defer a");
    assert_eq!(stringify!(a as i32), "a as i32");
    assert_eq!(stringify!(a is i32), "a is i32");
    assert_eq!(stringify!(a..b), "a..b");
    assert_eq!(stringify!(a..=b), "a..=b");
    assert_eq!(stringify!(a..), "a..");
    assert_eq!(stringify!(..b), "..b");
    assert_eq!(stringify!(..=b), "..=b");
    assert_eq!(stringify!(..), "..");
    assert_eq!(stringify!(return), "return");
    assert_eq!(stringify!(return a), "return a");
    assert_eq!(stringify!(yield), "yield");
    assert_eq!(stringify!(yield a), "yield a");

    loop {
        // We need to use a loop here because using them outside of a loop
        // is a compile error.
        assert_eq!(stringify!(break), "break");
        assert_eq!(stringify!(break a), "break a");
        assert_eq!(stringify!(continue), "continue");
        break;
    }

    assert_eq!(stringify!(if a { b } else { c }), "if a { b } else { c }");
    assert_eq!(stringify!(if a { b }), "if a { b }");
    assert_eq!(stringify!(if a { b } else { }), "if a { b }");

    assert_eq!(stringify!(when a { b } else { c }), "when a { b } else { c }");
    assert_eq!(stringify!(when a { b }), "when a { b }");
    assert_eq!(stringify!(when a { b } else { }), "when a { b }");

    assert_eq!(stringify!(E::A), "E::A");
    assert_eq!(stringify!(S { a: 1, b: 2, c: 3 }), "S { a: 1, b: 2, c: 3 }");
    assert_eq!(stringify!((1, 2, 3)), "(1, 2, 3)");
    assert_eq!(stringify!([1, 2, 3]), "[1, 2, 3]");
    assert_eq!(stringify!(foo()), "foo()");
    assert_eq!(stringify!(foo(a, b, c)), "foo(a, b, c)");
    assert_eq!(stringify!("ahoj"), "\"ahoj\"");
    assert_eq!(stringify!("\0\r\t\n\"'\xff\x01"), "\"\\0\\r\\t\\n\\\"'\\xff\\x01\"");
    assert_eq!(stringify!('A'), "65u8");
    assert_eq!(stringify!(true), "true");
    assert_eq!(stringify!(false), "false");
    assert_eq!(stringify!(3.14159), "3.14159");
    assert_eq!(stringify!(-3.14159e12), "-3.14159e12");
    assert_eq!(stringify!(3.14159f32), "3.14159f32");
    assert_eq!(stringify!(3.14159f64), "3.14159f64");
    assert_eq!(stringify!(3i32), "3i32");
    assert_eq!(stringify!(-3i32), "-3i32");
    assert_eq!(stringify!(null), "null");
    assert_eq!(stringify!(a.0), "a.0");
    assert_eq!(stringify!(a.field), "a.field");
    assert_eq!(stringify!(a.0.nested.field.1), "a.0.nested.field.1");
    assert_eq!(stringify!(a[b]), "a[b]");

    assert_eq!(stringify!(|x: i32| {}), "|x: i32| {}");
    assert_eq!(stringify!(|x: i32| -> i32 {}), "|x: i32| -> i32 {}");
    assert_eq!(stringify!(|=a, &b, x: i32| -> i32 { x }), "|=a, &b, x: i32| -> i32 { x }");
    assert_eq!(stringify!(|=a, &b, x: i32| -> i32 { a }), "|=a, &b, x: i32| -> i32 { a }");

    let _: ();

    assert_eq!(stringify!(_ as (i32, i64)), "_ as (i32, i64)");
    assert_eq!(stringify!(_ as Fn(i32) -> i32), "_ as Fn(i32) -> i32");
    assert_eq!(stringify!(_ as &i32), "_ as &i32");
    assert_eq!(stringify!(_ as &mut i32), "_ as &mut i32");
    assert_eq!(stringify!(_ as &[i32]), "_ as &[i32]");
    assert_eq!(stringify!(_ as &mut [i32]), "_ as &mut [i32]");
    assert_eq!(stringify!(_ as &dyn i32), "_ as &dyn i32");
    assert_eq!(stringify!(_ as &mut dyn i32), "_ as &mut dyn i32");
    assert_eq!(stringify!(_ as &mut dyn (i32 + i64)), "_ as &mut dyn (i32 + i64)");

    assert_eq!(stringify!(_ as [i32; 3]), "_ as [i32; 3]");
    assert_eq!(stringify!(_ as [i32; 1 + 2]), "_ as [i32; 1 + 2]");
    assert_eq!(stringify!(_ as typeof(1 + 2)), "_ as typeof(1 + 2)");

    fn generic<T>(_: ()) {
        assert_eq!(stringify!(_ as T), "_ as T");
        // Defered name resolution
        assert_eq!(stringify!(_ as T::associated_type), "_ as T::associated_type");
        assert_eq!(stringify!(T::associated_function()), "T::associated_function()");
    }
    generic::<i32>(_);

    assert_eq!(stringify!(_ as generic<i32>), "_ as generic<i32>");
    assert_eq!(stringify!(generic::<i32>()), "generic::<i32>()");

    // Loops are desugared during 'src -> 'ast
    assert_eq!(stringify!(loop {}), "loop {}");
    assert_eq!(stringify!(while true {}), "loop { if /* loop_condition */ true {} else { break } }");

    // for loop is too complex to assert on and it uses anonymous let bindings
    // that we cannot predict the name of
    stringify!(for i in a {});

    // Macros are eagerly expanded during 'src -> 'ast (except if defered, but it
    // doesn't matter here)
    assert_eq!(stringify!(stringify!(a)), "\"a\"");

    macro try($expr) {
        std::concat!("I tried ", stringify!($expr), " but I could not")
    }
    assert_eq!(stringify!(a?), "\"I tried a but I could not\"");
    assert_eq!(stringify!(libc::abort), "abort");
    assert_eq!(stringify!(stringify), "stringify");

    // Test parentheses
    assert_eq!(stringify!((a)), "a");
    assert_eq!(stringify!(a + b + c), "(a + b) + c");
    assert_eq!(stringify!(a + b(c)), "a + b(c)");
    assert_eq!(stringify!(a + (a + b)..(b +c) + c), "(a + (a + b))..((b + c) + c)");
    assert_eq!(stringify!(a + ((a + b)..(b +c)) + c), "(a + ((a + b)..(b + c))) + c");
}


#[test]
#[location("test/location.alu", 1337)]
fn test_location() {
    assert_eq!(std::file!(), "test/location.alu");
    assert_eq!(std::line!(), 1341); // 1337 + 4, the location attribute offsets from the whole item it is attached to (including any previous attributes)
    assert_eq!(std::column!(), 0); // Column information is discarded when location is overridden
}


#[test]
#[location("test/location.alu", 1337)]
fn test_location_nested() {

    #[location("test/other.alu", 1337)]
    fn nested() {
        assert_eq!(std::file!(), "test/other.alu");
        assert_eq!(std::line!(), 1340);
        assert_eq!(std::column!(), 0);
    }

    nested();
}


#[test]
fn test_tuple_invoke() {
    fn regular(a: i32, b: i32) -> i32 {
        a + b
    }

    assert_eq!(std::intrinsics::tuple_invoke(regular, (1, 2)), 3);

    let func_pointer: fn(i32, i32) -> i32 = regular;
    assert_eq!(std::intrinsics::tuple_invoke(func_pointer, (1, 2)), 3);

    let c = 3;
    let closure = |=c, a: i32, b: i32| -> i32 {
        a + b + c
    };
    assert_eq!(std::intrinsics::tuple_invoke(closure, (1, 2)), 6);
}

#[test]
fn test_tuple_args_inference() {
    #[tuple_args]
    fn a<T>(tup: (i32, T)) -> T {
        tup.1
    }

    a(1, "hello");
    1.a("hello");

    #[tuple_args]
    fn b<T>(tup: T) -> T {
        tup
    }

    b(1, 2, 3);
    b(1, "foo", 3, 4);


    struct S<T> {}
    impl S<T> {
        #[tuple_args]
        fn c(tup: (&S<T>, i32, T)) -> T {
            tup.2
        }
    }

    let s: S<&[u8]> = S{};
    s.c(1, "hello");
}


#[test]
fn test_coroutine_inference() {
    fn* empty<T>(_: Option<T>) -> Coroutine<T> {
    }

    let _gen: Coroutine<i32> = empty(Option::none());
    let _gen = empty(Option::some(12));
}


#[test]
fn test_tuple_slicing() {
    let a = (0, 1, 2, 3, 4, 5, 6, 7, 8);

    assert_eq!(a.0, 0);
    assert_eq!(a.(0), 0);
    assert_eq!(a.(..), (0, 1, 2, 3, 4, 5, 6, 7, 8));
    assert_eq!(a.(..5), (0, 1, 2, 3, 4));
    assert_eq!(a.(5..), (5, 6, 7, 8));
    assert_eq!(a.(2..5), (2, 3, 4));
    assert_eq!(a.(2..=5), (2, 3, 4, 5));
    assert_eq!(a.(..=5), (0, 1, 2, 3, 4, 5));
}

type types_match<L, R> = when typing::is_same::<L, R>() {
    ()
} else {
    typeof(std::compile_fail!("types do not match"))
};

#[test]
fn test_tuple_slicing_types() {
    type a = (u8, u16, u32, u64, u128, i8, i16, i32, i64, i128);

    let _: types_match<a.0, u8>;
    let _: types_match<a.(0), u8>;
    let _: types_match<a.(..), (u8, u16, u32, u64, u128, i8, i16, i32, i64, i128)>;
    let _: types_match<a.(..5), (u8, u16, u32, u64, u128)>;
    let _: types_match<a.(5..), (i8, i16, i32, i64, i128)>;
    let _: types_match<a.(2..5), (u32, u64, u128)>;
    let _: types_match<a.(2..=5), (u32, u64, u128, i8)>;
    let _: types_match<a.(..=5), (u8, u16, u32, u64, u128, i8)>;
}


#[test]
fn test_tuple_unpack() {
    assert_eq!((1, (2, 3)..., 4, 5), (1, 2, 3, 4, 5));
    assert_eq!((()...,), ());

    // Test side effects & order of evaluation
    let counter = 0;

    let a = (1, {
        assert_eq!(counter, 0);
        counter += 1;
        (2, 3)
    }..., {
        assert_eq!(counter, 1);
        counter += 1;
        ()
    }..., {
        assert_eq!(counter, 2);
        counter += 1;
        (4, 5)
    }..., {
        assert_eq!(counter, 3);
        counter += 1;
        ()
    }...);

    assert_eq!(a, (1, 2, 3, 4, 5));
}

#[test]
fn test_enum_values() {
    enum Foo {
        A = 1,
        B,
        C = 5,
        D
    }

    assert_eq!(Foo::A as i32, 1);
    assert_eq!(Foo::B as i32, 0);
    assert_eq!(Foo::C as i32, 5);
    assert_eq!(Foo::D as i32, 2);
}
