use std::result::{Result, try};
use std::typing::matches;
use tree_sitter::{Node, TSFieldId};
use node_kinds::{FieldKind};

macro child_by($node, $field) {
    $node.child_by_field_id($field as TSFieldId)
}

macro children_by($node, $field, $cursor) {
    $node.children_by_field_id($field as TSFieldId, $cursor)
}

protocol NodeVisitorExt<Self, ReturnType> {
    fn visit_children(self: &mut Self, node: Node) -> ReturnType {
        let cursor = node.walk();
        defer cursor.free();

        when matches::<ReturnType, ()>() {
            for node in node.children(&cursor) {
                self.visit(node);
            }
        } else {
            for node in node.children(&cursor) {
                self.visit(node)?;
            }
            ReturnType::ok(())
        }
    }

    fn visit_children_by_field(self: &mut Self, node: Node, field: FieldKind) -> ReturnType {
        let cursor = node.walk();
        defer cursor.free();

        when matches::<ReturnType, ()>() {
            for node in children_by!(node, field, &cursor) {
                self.visit(node);
            }
        } else {
            for node in children_by!(node, field, &cursor) {
                self.visit(node)?;
            }
            ReturnType::ok(())
        }
    }
}

struct Error {}
