use std::result::{Result, try};
use tree_sitter::{TSLanguage, Node, Parser, TSTreeCursor, TSFieldId};
use aluminac::lib::common::{NodeVisitorExt, child_by, Error};
use aluminac::lib::node_kinds::{NodeVisitor, FieldKind};
use std::fs::File;

extern "C" fn tree_sitter_alumina() -> &TSLanguage;
use llvm::core;

struct SampleVisitor {
    cursor: &mut TSTreeCursor,
    source: &[u8]
}

impl SampleVisitor {
    fn new(source: &[u8], cursor: &mut TSTreeCursor) -> SampleVisitor {
        SampleVisitor {
            cursor: cursor,
            source: source
        }
    }

    fn visit_source_file(self: &mut SampleVisitor, node: Node) -> Result<(), Error> {
        self.visit_children(node)
    }

    fn visit_function_definition(self: &mut SampleVisitor, node: Node) -> Result<(), Error> {
        let name = child_by!(node, FieldKind::Name).unwrap();

        println!("function: {}", name.text(self.source));
        Result::ok(())
    } 

    fn visit_macro_definition(self: &mut SampleVisitor, node: Node) -> Result<(), Error> {
        let name = child_by!(node, FieldKind::Name).unwrap();

        println!("function: {}", name.text(self.source));
        Result::ok(())
    }

    fn visit_struct_definition(self: &mut SampleVisitor, node: Node) -> Result<(), Error> {
        let name = child_by!(node, FieldKind::Name).unwrap();

        println!("function: {}", name.text(self.source));
        Result::ok(())
    }

    fn visit_impl_block(self: &mut SampleVisitor, node: Node) -> Result<(), Error> {
        let name = child_by!(node, FieldKind::Name).unwrap();

        println!("impl: {}", name.text(self.source));
        Result::ok(())
    }
    
    fn visit_protocol_definition(self: &mut SampleVisitor, node: Node) -> Result<(), Error> {
        let name = child_by!(node, FieldKind::Name).unwrap();

        println!("protocol: {}", name.text(self.source));
        Result::ok(())
    }

    fn visit_use_declaration(self: &mut SampleVisitor, node: Node) -> Result<(), Error> {
        Result::ok(())
    }
    
    mixin NodeVisitor<SampleVisitor, Result<(), Error>>;
    mixin NodeVisitorExt<SampleVisitor, Result<(), Error>>;
}

use llvm::core::*;
use llvm::execution_engine::*;
use llvm::target::*;

fn llvm_example() {
    use std::util::{cast, transmute};

    let context = LLVMContextCreate();
    defer context.LLVMContextDispose();

    let module = LLVMModuleCreateWithNameInContext(cast("sum\0".ptr), context);
    let builder = LLVMCreateBuilderInContext(context);

    // get a type for sum function
    let i64t = LLVMInt64TypeInContext(context);
    let argts = [i64t, i64t, i64t].as_slice_mut();
    let function_type = LLVMFunctionType(i64t, argts.ptr, argts.len as u32, 0);

    // add it to our module
    let function = LLVMAddFunction(module, cast("sum\0".ptr), function_type);

    // Create a basic block in the function and set our builder to generate
    // code in it.
    let bb = LLVMAppendBasicBlockInContext(context, function, cast("entry\0".ptr));

    LLVMPositionBuilderAtEnd(builder, bb);

    // get the function's arguments
    let x = LLVMGetParam(function, 0);
    let y = LLVMGetParam(function, 1);
    let z = LLVMGetParam(function, 2);

    let sum = LLVMBuildAdd(builder, x, y, cast("sum.1\0".ptr));
    let sum = LLVMBuildAdd(builder, sum, z, cast("sum.2\0".ptr));

    // Emit a `ret void` into the function
    LLVMBuildRet(builder, sum);

    // done building
    LLVMDisposeBuilder(builder);

    // Dump the module as IR to stdout.
    LLVMDumpModule(module);

    // build an execution engine
    let ee: LLVMExecutionEngineRef;
    let out: &mut std::libc::c_char = null;

    // robust code should check that these calls complete successfully
    // each of these calls is necessary to setup an execution engine which compiles to native
    // code
    LLVMLinkInMCJIT();
    LLVM_InitializeNativeTarget();
    LLVM_InitializeNativeAsmPrinter();

    // takes ownership of the module
    LLVMCreateExecutionEngineForModule(&ee, module, &out);
    defer ee.LLVMDisposeExecutionEngine();

    let addr = LLVMGetFunctionAddress(ee, cast("sum\0".ptr));

    let f: fn(u64, u64, u64) -> u64 = std::util::transmute(addr);

    let x: u64 = 1;
    let y: u64 = 1;
    let z: u64 = 1;
    let res = f(x, y, z);

    println!("{} + {} + {} = {}", x, y, z, res);

    // Clean up the rest.
}

fn main() {
    let parser = Parser::new();
    defer parser.free();

    parser.set_language(tree_sitter_alumina()).unwrap()
    let source = std::fs::File::read_to_string("./src/aluminac/main.alu").unwrap();
    defer source.free();
    
    let tree = parser.parse(source.as_slice());
    defer tree.free();
    
    let root_node = tree.root_node().unwrap();
    let cursor = root_node.walk();
    defer cursor.free();

    let visitor = SampleVisitor::new(source.as_slice(), &cursor);
    visitor.visit(root_node);

    llvm_example();
}


