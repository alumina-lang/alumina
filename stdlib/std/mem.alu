use marker::Pointer;
use std::option::Option;

// Freable protocol is used for types that can be "freed". Usually these types contain something that
// is heap-allocated.
protocol Freeable<Self> {
    fn free(self: &mut Self);
}

// "Move semantics"
protocol Movable<Self> {
    fn move(self: &mut Self) -> Self;
}

protocol AsSlice<Self, T> {
    fn as_slice(self: &Self) -> &[T];
}

protocol AsSliceMut<Self, T> {
    fn as_slice_mut(self: &mut Self) -> &mut [T];
}


// Slice fat "pointers" are just regular structs that compiler handles in a special way with regards
// to syntax, implicit coercion and type inference. They are generic over the pointer-to-element type
// rather than the element type itself. This is an implementation detail to ensure that &mut [T] and 
// &[T] are distinguished without having to have two distinct types for mutable and const slices.
#[lang(slice)]
struct slice<Ptr: Pointer> {
    ptr: Ptr,
    len: usize,
}

impl slice {
    use std::cmp::{Equatable, Comparable, Ordering};
    use std::hash::{Hasher, Hashable};
    use std::marker::{Primitive, PointerOf, ZeroSized};
    use std::libc::{memcmp};

    #[force_inline]
    fn empty<Ptr: Pointer>() -> slice<Ptr> {
        slice::<Ptr> { ptr: null, len: 0 }
    }

    #[force_inline]
    #[lang(slice_new)]
    fn from_raw<Ptr: Pointer>(ptr: Ptr, len: usize) -> slice<Ptr> {
        slice::<Ptr> { ptr: ptr, len: len }
    }

    #[force_inline]
    fn iter<Ptr: Pointer>(self: &slice<Ptr>) -> SliceIterator<Ptr> {
        SliceIterator::new(*self)
    }

    fn as_slice<T>(self: &&[T]) -> &[T] {
        *self
    }

    fn as_slice_mut<T>(self: &mut &mut [T]) -> &mut [T] {
        *self
    }

    fn fill<T>(slice: &mut [T], value: T) {
        when T: ZeroSized {
            // nop
        } else when T: u8 {
            libc::memset(slice.ptr as &mut void, value as libc::c_int, slice.len);
        } else {
            for i in 0..slice.len {
                slice[i] = value;
            }
        }
    }

    fn equals<T: Equatable<T>, Ptr: PointerOf<T>>(lhs: &slice<Ptr>, rhs: &slice<Ptr>) -> bool {
        if lhs.len != rhs.len {
            return false;
        }
        
        when T: ZeroSized {
            true
        } else when T: Primitive {
            // Optimization for slices of primitive types
            memcmp(lhs.ptr as &void, rhs.ptr as &void, lhs.len * size_of::<T>()) == 0
        } else {
            let idx = 0usize;
            while idx < lhs.len {
                if lhs[idx] != rhs[idx] {
                    return false;
                }
                idx += 1;
            }
            true
        }
    }

    fn compare<T: Comparable<T>, Ptr: PointerOf<T>>(lhs: &slice<Ptr>, rhs: &slice<Ptr>) -> Ordering {
        use std::math::min;

        when T: ZeroSized {
            lhs.len.compare(&rhs.len)
        } else when T: u8 {
            let cmp = memcmp(lhs.ptr as &void, rhs.ptr as &void, min(lhs.len, rhs.len) * size_of::<T>());
            if cmp < 0 {
                Ordering::Less
            } else if cmp > 0 {
                Ordering::Greater
            } else {
                lhs.len.compare(&rhs.len)
            }
        } else {
            let idx = 0usize;
            let len = min(lhs.len, rhs.len);
            while idx < len {
                let cmp = lhs[idx].compare(rhs[idx]);
                if cmp != Ordering::Equal {
                    return cmp;
                }
                idx += 1;
            }
            lhs.len.compare(&rhs.len)
        }
    }
    
    fn hash<T: Hashable<T, H>, Ptr: PointerOf<T>, H: Hasher<H>>(self: &slice<Ptr>, hasher: &mut H) {
        when T: ZeroSized {
            // no-op
        } when T: u8 {
            hasher.write(*self);
        } else {
            let idx = 0usize;
            while idx < self.len {
                self[idx].hash(hasher);
                idx += 1;
            }
        }
    }

    fn fmt<Ptr: PointerOf<u8>, F: fmt::Formatter<F>>(self: &slice<Ptr>, f: &mut F) -> Result<(), fmt::Error> {
        f.write_str(*self)
    }
    
    mixin<T: Equatable<T>, Ptr: PointerOf<T>> Equatable<slice<Ptr>>;
    mixin<T: Comparable<T>, Ptr: PointerOf<T>> Comparable<slice<Ptr>>;
}

struct SliceIterator<Ptr: Pointer> {
    inner: slice<Ptr>,
}

impl SliceIterator<Ptr: Pointer> {
    #[force_inline]
    fn new(inner: slice<Ptr>) -> SliceIterator<Ptr> {
        SliceIterator { inner: inner }
    }

    #[force_inline]
    fn next(self: &mut SliceIterator<Ptr>) -> Option<builtins::deref_of<Ptr>> {
        if self.inner.len > 0 {
            let result = Option::some(*self.inner.ptr);
            self.inner.ptr = self.inner.ptr + 1;
            self.inner.len -= 1;
            result
        } else {
            Option::none()
        }
    }

    fn size_hint(self: &SliceIterator<Ptr>) -> Option<usize> {
        Option::some(self.inner.len)
    }

    mixin iter::Iterator<SliceIterator<Ptr>, builtins::deref_of<Ptr>>;
    mixin iter::IteratorExt<SliceIterator<Ptr>, builtins::deref_of<Ptr>>;
}

mod internal {
    use marker::{Primitive, Pointer}; 
    
    #[force_inline]
    #[lang(slice_index)]
    fn slice_index<Ptr: Pointer>(a: slice<Ptr>, idx: usize) -> Ptr {
        debug_assert!(idx < a.len);

        a.ptr + idx
    }
    
    #[force_inline]
    #[lang(slice_range_index)]
    fn slice_range_index<Ptr: Pointer, T>(a: slice<Ptr>, range: T) -> slice<Ptr> {
        when T: iter::Range<usize> {
            debug_assert!(range.lower <= range.upper);
            debug_assert!(range.upper <= a.len);

            slice::from_raw::<Ptr>(a.ptr + range.lower, range.upper - range.lower)
        } else when T: iter::RangeTo<usize> {
            debug_assert!(range.upper <= a.len);

            slice::from_raw::<Ptr>(a.ptr, range.upper)
        } else when T: iter::RangeFrom<usize> {
            debug_assert!(range.lower <= a.len);

            slice::from_raw::<Ptr>(a.ptr + range.lower, a.len - range.lower)
        } else when T: iter::RangeFull<usize> {
            a
        } else {
            compile_fail!("unsupported range type");
        }
    }

    #[force_inline]
    #[lang(slice_coerce)]
    fn slice_coerce<T>(a: slice<&mut T>) -> slice<&T> {
        slice::from_raw::<&T>(a.ptr, a.len)
    }
}

fn new<T>() -> &mut T {
    when T: marker::ZeroSized {
        null as &mut T
    } else {
        libc::malloc(size_of::<T>()) as &mut T
    }
}

fn alloc<T>(len: usize) -> &mut [T] {
    let ret: &mut [T];
    when T: marker::ZeroSized {
        ret.ptr = null as &mut T;
    } else {
        ret.ptr = libc::malloc(size_of::<T>() * len) as &mut T;
        if ret.ptr == null {
            panic!("out of memory")
        }
    };
    ret.len = len;
    ret
}

fn realloc<T>(slice: &mut [T], len: usize) -> &mut [T] {
    let ret: &mut [T];
    ret.ptr = when T: marker::ZeroSized {
        null as &mut T
    } else {
        libc::realloc(slice.ptr as &mut void, size_of::<T>() * len) as &mut T
    };
    ret.len = len;
    ret
}

fn alloc_zeroed<T>(len: usize) -> &mut [T] {
    let ret: &mut [T];
    ret.ptr = when T: marker::ZeroSized {
        null as &mut T
    } else {
        libc::calloc(len, size_of::<T>()) as &mut T
    };
    ret.len = len;
    ret
}

#[force_inline]
fn stack_alloc<T>(len: usize) -> &mut [T] {
    // TODO: this is broken until inlining in IR is implemented, since __builtin_alloca_with_align
    // cannot leave the function it was called in even if the function was force-inlined.
    let ret: &mut [T];
    ret.ptr = intrinsics::aligned_alloca(
        size_of::<T>() * len, 
        if intrinsics::align_of::<T>() >= 8 {
            8 * intrinsics::align_of::<T>()
        } else { 
            8usize 
        }
    ) as &mut T;
    ret.len = len;
    ret
}

#[force_inline]
fn size_of<T>() -> usize {
    intrinsics::size_of::<T>()
}

#[force_inline]
fn align_of<T>() -> usize {
    intrinsics::align_of::<T>()
}

fn swap<T>(a: &mut T, b: &mut T) {
    let tmp = *a;
    *a = *b;
    *b = tmp;
}

fn replace<T>(a: &mut T, b: T) -> T {
    swap(a, &b);
    b
}

fn copy_nonoverlapping<T>(src: &[T], dst: &mut T) {
    when T: !marker::ZeroSized {
        libc::memcpy(dst as &mut void, src.ptr as &void, src.len * size_of::<T>());
    }
}

fn copy<T>(src: &[T], dst: &mut T) {
    when T: !marker::ZeroSized {
        libc::memmove(dst as &mut void, src.ptr as &void, src.len * size_of::<T>());
    }
}

fn free<T>(a: &mut [T]) {
    libc::free(a.ptr as &mut void);
}

fn zeroed<T>() -> T {
    let ret: T;
    when T: !marker::ZeroSized {
        libc::memset(&ret as &mut void, 0, size_of::<T>());
    }
    ret
}

#[cfg(all(test, test_std))]
mod tests {
    #[test]
    fn slice_range_index() {
        let a = [1, 2, 3, 4, 5].as_slice();

        assert_eq!(a[..], &[1, 2, 3, 4, 5]);
        assert_eq!(a[..3], &[1, 2, 3]);
        assert_eq!(a[1..], &[2, 3, 4, 5]);
        assert_eq!(a[1..5], &[2, 3, 4, 5]);
    }

    #[test]
    fn size_of_zst() {
        assert_eq!(size_of::<()>(), 0usize);
        assert_eq!(size_of::<[u8; 0]>(), 0usize);
        assert_eq!(size_of::<((), (), ())>(), 0usize);
    }

    #[test]
    fn align_of_zst() {
        assert_eq!(align_of::<()>(), 1usize);
        assert_eq!(align_of::<[u8; 0]>(), 1usize);
        assert_eq!(align_of::<((), (), ())>(), 1usize);
    }

    #[test]
    fn test_fill() {
        let a: [u8; 10];
        a.as_slice_mut().fill('a');

        assert_eq!(a.as_slice(), "aaaaaaaaaa");
    }
}
