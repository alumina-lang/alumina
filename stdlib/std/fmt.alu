protocol Formatter<Self> {
    fn write_str(self: &mut Self, buf: &[u8]);
    
    fn write_char(self: &mut Self, byte: u8) {
        self.write_str(mem::slice::from_raw(&byte, 1));
    }
}

protocol Formattable<Self, F: Formatter<F> = internal::_NullFormatter> {
    fn fmt(self: &Self, f: &mut F);
}

macro write($fmt, $fmt_str, $arg...) {
    internal::printf(
        concat!($fmt_str), 
        &[internal::FormatArg::new(&$arg)...], 
        $fmt
    )
}

macro writeln($fmt, $fmt_str, $arg...) {
    internal::printf(
        concat!($fmt_str, "\n"), 
        &[internal::FormatArg::new(&$arg)...], 
        $fmt
    )
}

macro format($fmt_str, $arg...) { 
    let fmt = collections::Vector::with_capacity::<u8>($fmt_str.len);
    fmt::write!(&fmt, $fmt_str, $arg...);
    fmt
}

macro format_in($buf, $fmt_str, $arg...) { 
    let fmt = SliceFormatter::new($buf);
    fmt::write!(&fmt, $fmt_str, $arg...);
    fmt.get()
}

struct SliceFormatter {
    buf: &mut [u8],
    buf_pos: usize
}

impl SliceFormatter {
    fn new(buf: &mut [u8]) -> SliceFormatter {
        SliceFormatter {
            buf: buf,
            buf_pos: 0
        }
    }

    #[inline]
    fn write_str(self: &mut SliceFormatter, buf: &[u8]) {
        use mem::copy;
        if self.buf_pos + buf.len > self.buf.len {
            panic!("buffer overflow");
        }
        buf.copy(&self.buf[self.buf_pos]);
        self.buf_pos += buf.len;
    }

    #[inline]
    fn write_char(self: &mut SliceFormatter, byte: u8) {
        if self.buf_pos >= self.buf.len {
            panic!("buffer overflow");
        }
        self.buf[self.buf_pos] = byte;
        self.buf_pos += 1;
    }

    #[inline]
    fn get(self: &SliceFormatter) -> &[u8] {
        self.buf[..self.buf_pos]
    }
}

struct BufferedFormatter<F: Formatter<F>> {
    buf: &mut [u8],
    buf_pos: usize,
    inner: &mut F
}

impl BufferedFormatter<F: Formatter<F>> {
    fn new(buf: &mut [u8], inner: &mut F) -> BufferedFormatter<F> {
        BufferedFormatter {
            buf: buf,
            buf_pos: 0,
            inner: inner
        }
    }

    #[inline]
    fn write_str(self: &mut BufferedFormatter<F>, buf: &[u8]) {
        use std::mem::copy_nonoverlapping;
        
        let fill_len = math::min(self.buf.len - self.buf_pos, buf.len);
        if fill_len > 0 {
            buf[0..fill_len].copy_nonoverlapping(&self.buf[self.buf_pos]);
            self.buf_pos += fill_len;
            buf = buf[fill_len..];
        }

        if self.buf_pos == self.buf.len {
            self.inner.write_str(self.buf);
            self.buf_pos = 0;
        }

        if buf.len >= self.buf.len {
            self.inner.write_str(buf);
        } else if buf.len > 0 {
            buf.copy_nonoverlapping(&self.buf[0]);
            self.buf_pos += buf.len;
        }
    }

    #[inline]
    fn write_char(self: &mut BufferedFormatter<F>, byte: u8) {
        if self.buf_pos == self.buf.len {
            self.inner.write_str(self.buf);
            self.buf_pos = 0;
        }

        self.buf[self.buf_pos] = byte;
        self.buf_pos += 1;
    }

    #[inline]
    fn flush(self: &mut BufferedFormatter<F>) {
        if self.buf_pos > 0 {
            self.inner.write_str(self.buf[0..self.buf_pos]);
            self.buf_pos = 0;
        }
    }
}

mod internal {
    struct _NullFormatter {}
    impl _NullFormatter {
        fn write_str(self: &mut _NullFormatter, buf: &[u8]) { }
        fn write_char(self: &mut _NullFormatter, byte: u8) {}
    }

    // Type-erased wrapper of a formattable object
    struct FormatArg<F: Formatter<F>> {
        inner: &void,
        format_func: fn(&void, &mut F)
    }

    fn __fmt<F: Formatter<F>, T: Formattable<T, F>>(ptr: &void, fmt: &mut F) {
        T::fmt(ptr as &T, fmt);
    }

    impl FormatArg {
        fn new<F: Formatter<F>, T: Formattable<T, F>>(inner: &T) -> FormatArg<F> {
            FormatArg::<F> {
                inner: inner as &void,
                format_func: __fmt::<F, T>,
            }
        }

        fn fmt<F: Formatter<F>>(self: &FormatArg<F>, f: &mut F) {
            self.format_func(self.inner, f)
        }
    }

    static DIGITS: &[u8] = "0123456789abcdef";

    fn format_integer<T: proto::Integer, F: Formatter<F>>(val: T, radix: u16, pad: usize, fmt: &mut F) {
        assert!(radix >= 2 && radix <= 16);
        
        let buf: [u8; 128];
        let buf = buf.as_slice_mut();
        
        when T: proto::Signed {
            if val < 0 {
                fmt.write_char('-');
            }
        }

        let val_u = math::widening_abs(val);

        let i: usize = 0;
        loop {
            buf[buf.len - i - 1] = DIGITS[(val_u % (radix as builtins::unsigned_of<T>)) as usize];
            val_u /= radix as builtins::unsigned_of<T>;
            
            if val_u == 0 {
                while i + 1 < pad {
                    fmt.write_char('0');
                    pad -= 1;
                }
                fmt.write_str(buf[buf.len - i - 1..]);
                break;
            }
            i += 1;
        }
    }

    fn format_float<T: proto::FloatingPoint, F: Formatter<F>>(val: T, fmt: &mut F, precision: u16) {
        // TODO: this is very very bad, replace with Grisu3 or Dragon4 or alike. Correct float parsing
        // and formatting is a very complicated thing. Using libc instead is an option, but that has a
        // host of other problems: locale-awareness (ideally, Alumina's stdlib is locale-invariant), 
        // use of C-strings, varargs, etc. etc.

        debug_assert!(precision <= 18);

        if val.is_nan() {
            fmt.write_str("NaN");
            return;
        }
        if val.is_sign_negative() {
            fmt.write_char('-');
        }
        val = math::abs(val)

        if val.is_infinite() {
            fmt.write_str("Inf");
            return;
        }

        let steps = 0usize;
        while val >= 1.0e18 {
            val /= 1.0e18;
            steps += 1;
        }

        let pad = 0usize;
        while steps > 0 {
            let part = val as u64;
            format_integer(part, 10, pad, fmt);
            val = (val - (part as T)) * 1.0e18;
            steps -= 1;
            pad = 18;
        }

        let frac = val;
        let frac_i = 1u64;
        frac -= (val as u64) as T;
        
        for i in iter::range(0u16, precision) {
            frac *= 10.0;
            frac_i *= 10;
        }

        let rounded = (frac + 0.5) as u64;
        if rounded == frac_i {
            format_integer(val as u64 + 1, 10, pad, fmt);
            fmt.write_char('.');
            format_integer(0, 10, precision as usize, fmt);
        } else {
            format_integer(val as u64, 10, pad, fmt);
            fmt.write_char('.');
            format_integer(rounded, 10, precision as usize, fmt);
        }
    }

    enum State {
        NORMAL,
        BRACE_OPEN,
        BRACE_CLOSE,
    }
    
    fn printf<F: Formatter<F>>(fmt_str: &[u8], args: &[FormatArg<F>], fmt: &mut F) {
        let i = 0usize;

        let state = State::NORMAL;
        while i < fmt_str.len {
            let ch = fmt_str[i];
            state = switch state {
                State::NORMAL => {
                    switch ch {
                        '{' => State::BRACE_OPEN,
                        '}' => State::BRACE_CLOSE,
                        _ => {
                            fmt.write_char(ch);
                            State::NORMAL
                        }
                    }
                }
                State::BRACE_CLOSE => {
                    switch ch {
                        '}' => fmt.write_char(ch),
                        _ => panic!("invalid format string")
                    };
                    State::NORMAL
                }
                State::BRACE_OPEN => {
                    switch ch {
                        '}' => {
                            if args.len == 0 {
                                panic!("too few arguments");
                            }
                            args[0].fmt(fmt);
                            args = args[1..];
                        },
                        '{' => fmt.write_char(ch),
                        _ => panic!("invalid format string")
                    };
                    State::NORMAL
                }
                _ => std::intrinsics::unreachable()
            };
            i += 1;
        }

        if state != State::NORMAL {
            panic!("invalid format string");
        }

        if args.len > 0 {
            panic!("too many arguments");
        }
    }

    struct NumFormatAdapter<T: proto::Integer> {
        radix: u16,
        _pad: usize,
        value: T
    }

    impl NumFormatAdapter<T: proto::Integer> {
        fn fmt<F: Formatter<F>>(self: &NumFormatAdapter<T>, fmt: &mut F) {
            format_integer(self.value, self.radix, self._pad, fmt);
        }

        fn hex(self: NumFormatAdapter<T>) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: 16, _pad: self._pad, value: self.value }
        }

        fn oct(self: NumFormatAdapter<T>) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: 8, _pad: self._pad, value: self.value }
        }

        fn bin(self: NumFormatAdapter<T>) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: 2, _pad: self._pad, value: self.value }
        }

        fn pad(self: NumFormatAdapter<T>, pad: usize) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: self.radix, _pad: pad, value: self.value }
        }
    }

    struct FloatFormatAdapter<T: proto::FloatingPoint> {
        precision: u16,
        value: T
    }

    impl FloatFormatAdapter<T: proto::FloatingPoint> {
        fn fmt<F: Formatter<F>>(self: &FloatFormatAdapter<T>, fmt: &mut F) {
            format_float::<T, F>(self.value, fmt, self.precision);
        }
    }

    struct RepeatAdapter<T: Formattable<T>> {
        times: usize,
        inner: T
    }

    impl RepeatAdapter {
        fn fmt<T: Formattable<T, F>, F: Formatter<F>>(self: &RepeatAdapter<T>, fmt: &mut F) {
            for i in range(0usize, self.times) {
                self.inner.fmt(fmt);
            }
        }
    }
}

fn hex<T: proto::Integer>(val: T) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 16, _pad: 0, value: val }
}

fn bin<T: proto::Integer>(val: T) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 2, _pad: 0, value: val }
}

fn oct<T: proto::Integer>(val: T) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 8, _pad: 0, value: val }
}

fn pad<T: proto::Integer>(val: T, pad: usize) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 10, _pad: pad, value: val }
}

fn precision<T: proto::FloatingPoint>(val: T, prec: u16) -> internal::FloatFormatAdapter<T> {
    internal::FloatFormatAdapter { precision: prec, value: val }
}

fn repeat<T: Formattable<T>>(times: usize, inner: T) -> internal::RepeatAdapter<T> {
    internal::RepeatAdapter { times: times, inner: inner }
}


#[cfg(test)]
mod tests {
    static BUF: [u8; 1024];
    
    #[test]
    fn test_format_integer() {
        assert_eq!(format_in!(&BUF, "{}", u8::max_value()), "255");
        assert_eq!(format_in!(&BUF, "{}", -23847), "-23847");
        assert_eq!(format_in!(&BUF, "{}", i64::min_value()), "-9223372036854775808");
        assert_eq!(
            format_in!(&BUF, "{}", i128::min_value()), 
            "-170141183460469231731687303715884105728"
        );
    }

    #[test]
    fn test_format_radix() {
        assert_eq!(format_in!(&BUF, "{}", 255u32.hex()), "ff");
        assert_eq!(format_in!(&BUF, "{}", 255u32.bin()), "11111111");
        assert_eq!(format_in!(&BUF, "{}", 255u32.oct()), "377");
    }

    #[test]
    fn test_format_zero_pad() {
        assert_eq!(format_in!(&BUF, "{}", 255u32.pad(4)), "0255");
        assert_eq!(format_in!(&BUF, "{}", 255u32.pad(8)), "00000255");
    }

    #[test]
    fn test_format_radix_and_pad() {
        assert_eq!(format_in!(&BUF, "{}", 15u8.pad(2).hex()), "0f");
        assert_eq!(format_in!(&BUF, "{}", 15u8.hex().pad(2)), "0f");
    }

    #[test]
    fn test_format_repeat() {
        assert_eq!(format_in!(&BUF, "{}", repeat(3, "world")), "worldworldworld");
    }

    #[test]
    fn test_format_float() {
        // These tests do not assert that float formatting logic is correct. It is in fact
        // very incorrect.
        
        assert_eq!(format_in!(&BUF, "{}", f64::nan()), "NaN");
        assert_eq!(format_in!(&BUF, "{}", f64::infinity()), "Inf");
        assert_eq!(format_in!(&BUF, "{}", f64::neg_infinity()), "-Inf");

        assert_eq!(format_in!(&BUF, "{}", 0.0), "0.000000000000000");
        assert_eq!(format_in!(&BUF, "{}", -0.0), "-0.000000000000000");

        assert_eq!(format_in!(&BUF, "{}", 0.1.precision(5)), "0.10000");
        assert_eq!(format_in!(&BUF, "{}", 0.01.precision(5)), "0.01000");
        assert_eq!(format_in!(&BUF, "{}", 0.001.precision(5)), "0.00100");
        assert_eq!(format_in!(&BUF, "{}", 0.0001.precision(5)), "0.00010");
        assert_eq!(format_in!(&BUF, "{}", 0.00001.precision(5)), "0.00001");
        assert_eq!(format_in!(&BUF, "{}", 0.000001.precision(5)), "0.00000");
        
        assert_eq!(format_in!(&BUF, "{}", 1.0.precision(1)), "1.0");
        assert_eq!(format_in!(&BUF, "{}", 11.0.precision(1)), "11.0");
        assert_eq!(format_in!(&BUF, "{}", 111.0.precision(1)), "111.0");
        assert_eq!(format_in!(&BUF, "{}", 1111.0.precision(1)), "1111.0");
        assert_eq!(format_in!(&BUF, "{}", 11111.0.precision(1)), "11111.0");
        assert_eq!(format_in!(&BUF, "{}", 111111.0.precision(1)), "111111.0");
        assert_eq!(format_in!(&BUF, "{}", 1111111.0.precision(1)), "1111111.0");
        assert_eq!(format_in!(&BUF, "{}", 11111111.0.precision(1)), "11111111.0");
        assert_eq!(format_in!(&BUF, "{}", 111111111.0.precision(1)), "111111111.0");
        assert_eq!(format_in!(&BUF, "{}", 1111111111.0.precision(1)), "1111111111.0");
        assert_eq!(format_in!(&BUF, "{}", 11111111111.0.precision(1)), "11111111111.0");
        assert_eq!(format_in!(&BUF, "{}", 111111111111.0.precision(1)), "111111111111.0");
        assert_eq!(format_in!(&BUF, "{}", 1111111111111.0.precision(1)), "1111111111111.0");
        assert_eq!(format_in!(&BUF, "{}", 11111111111111.0.precision(1)), "11111111111111.0");
        assert_eq!(format_in!(&BUF, "{}", 111111111111111.0.precision(1)), "111111111111111.0");
        assert_eq!(format_in!(&BUF, "{}", 1111111111111111.0.precision(1)), "1111111111111111.0");
        
        assert_eq!(format_in!(&BUF, "{}", 10.0.precision(1)), "10.0");
        assert_eq!(format_in!(&BUF, "{}", 100.0.precision(1)), "100.0");
        assert_eq!(format_in!(&BUF, "{}", 1000.0.precision(1)), "1000.0");
        assert_eq!(format_in!(&BUF, "{}", 10000.0.precision(1)), "10000.0");
        assert_eq!(format_in!(&BUF, "{}", 100000.0.precision(1)), "100000.0");
        assert_eq!(format_in!(&BUF, "{}", 1000000.0.precision(1)), "1000000.0");
        assert_eq!(format_in!(&BUF, "{}", 10000000.0.precision(1)), "10000000.0");
        assert_eq!(format_in!(&BUF, "{}", 100000000.0.precision(1)), "100000000.0");
        assert_eq!(format_in!(&BUF, "{}", 1000000000.0.precision(1)), "1000000000.0");
        assert_eq!(format_in!(&BUF, "{}", 10000000000.0.precision(1)), "10000000000.0");
        assert_eq!(format_in!(&BUF, "{}", 100000000000.0.precision(1)), "100000000000.0");
        assert_eq!(format_in!(&BUF, "{}", 1000000000000.0.precision(1)), "1000000000000.0");
        assert_eq!(format_in!(&BUF, "{}", 10000000000000.0.precision(1)), "10000000000000.0");
        assert_eq!(format_in!(&BUF, "{}", 100000000000000.0.precision(1)), "100000000000000.0");
        assert_eq!(format_in!(&BUF, "{}", 1000000000000000.0.precision(1)), "1000000000000000.0");
        assert_eq!(format_in!(&BUF, "{}", 10000000000000000.0.precision(1)), "10000000000000000.0");
        assert_eq!(format_in!(&BUF, "{}", 100000000000000000.0.precision(1)), "100000000000000000.0");
        assert_eq!(format_in!(&BUF, "{}", 1000000000000000000.0.precision(1)), "1000000000000000000.0");
        assert_eq!(format_in!(&BUF, "{}", 10000000000000000000.0.precision(1)), "10000000000000000000.0");

        assert_eq!(format_in!(&BUF, "{}", 9.0.precision(1)), "9.0");
        assert_eq!(format_in!(&BUF, "{}", 99.0.precision(1)), "99.0");
        assert_eq!(format_in!(&BUF, "{}", 999.0.precision(1)), "999.0");
        assert_eq!(format_in!(&BUF, "{}", 9999.0.precision(1)), "9999.0");
        assert_eq!(format_in!(&BUF, "{}", 99999.0.precision(1)), "99999.0");
        assert_eq!(format_in!(&BUF, "{}", 999999.0.precision(1)), "999999.0");
        assert_eq!(format_in!(&BUF, "{}", 9999999.0.precision(1)), "9999999.0");
        assert_eq!(format_in!(&BUF, "{}", 99999999.0.precision(1)), "99999999.0");
        assert_eq!(format_in!(&BUF, "{}", 999999999.0.precision(1)), "999999999.0");
        assert_eq!(format_in!(&BUF, "{}", 9999999999.0.precision(1)), "9999999999.0");
        assert_eq!(format_in!(&BUF, "{}", 99999999999.0.precision(1)), "99999999999.0");
        assert_eq!(format_in!(&BUF, "{}", 999999999999.0.precision(1)), "999999999999.0");
        assert_eq!(format_in!(&BUF, "{}", 9999999999999.0.precision(1)), "9999999999999.0");
        assert_eq!(format_in!(&BUF, "{}", 99999999999999.0.precision(1)), "99999999999999.0");
        assert_eq!(format_in!(&BUF, "{}", 999999999999999.0.precision(1)), "999999999999999.0"); 

    }
}
