//! Optional values

macro try($opt) {
    let opt = $opt;
    if opt.is_some {
        opt.inner
    } else {
        return Option::none()
    }
}

struct Option<T> {
    is_some: bool,
    inner: T
}

impl Option<T> {
    #[force_inline]
    fn some(inner: T) -> Option<T> {
        Option::<T> {
            is_some: true, 
            inner: inner
        }
    }

    #[force_inline]
    fn none() -> Option<T> {
        Option::<T> {
            is_some: false,
            inner: mem::uninitialized()
        }
    }

    fn as_result<E>(self: Option<T>, err: E) -> result::Result<T, E> {
        if self.is_some {
            result::Result::ok(self.inner)
        } else {
            result::Result::err(err)
        }
    }

    fn unwrap(self: Option<T>) -> T {
        if self.is_some {
            self.inner
        } else {
            panic!("unwrap on a none value")
        }
    }

    fn unwrap_or(self: Option<T>, val: T) -> T {
        if self.is_some {
            self.inner
        } else {
            val
        }
    }

    fn map<Tm, F: marker::Callable<(T), Tm>>(self: Option<T>, func: F) -> Option<Tm> {
        if self.is_some {
            Option::some(func(self.inner))
        } else {
            Option::none()
        }
    }

    fn and_then<Tm, F: marker::Callable<(T), Option<Tm>>>(self: Option<T>, func: F) -> Option<Tm> {
        if self.is_some {
            func(self.inner)
        } else {
            Option::none()
        }
    }

    fn or(self: Option<T>, other: Option<T>) -> Option<T> {
        if self.is_some {
            self
        } else {
            other
        }
    }

    fn iter(self: &Option<T>) -> Option<T> {
        *self
    }

    fn next(self: &mut Option<T>) -> Option<T> {
        std::mem::replace(self, Option::none())
    }

    fn move(self: &mut Option<T>) -> Option<T> {
        std::mem::replace(self, Option::none())
    }
}

impl Option {
    use std::cmp::{Equatable, Comparable, Ordering};
    use std::fmt::{write, Formatter, Formattable};
    use std::mem::{Freeable, Movable};
    
    fn transpose<T, E>(self: Option<Result<T, E>>) -> Result<Option<T>, E> {
        if self.is_some {
            if self.inner.is_ok {
                Result::ok(Option::some(self.inner.inner.ok))
            } else {
                Result::err(self.inner.inner.err)
            }
        } else {
            Result::ok(Option::none())
        }
    }

    #[inline]
    fn equals<T: Equatable<T>>(lhs: &Option<T>, rhs: &Option<T>) -> bool {
        if lhs.is_some {
            if rhs.is_some {
                lhs.inner.equals(&rhs.inner)
            } else {
                false
            }
        } else {
            !rhs.is_some
        }
    }

    #[inline]
    fn compare<T: Comparable<T>>(lhs: &Option<T>, rhs: &Option<T>) -> Ordering {
        if lhs.is_some {
            if rhs.is_some {
                lhs.inner.compare(&rhs.inner)
            } else {
                Ordering::Greater
            }
        } else {
            Ordering::Less
        }
    }

    fn fmt<T: Formattable<T, F>, F: Formatter<F>>(self: &Option<T>, formatter: &mut F) -> Result<(), fmt::Error> {
        if self.is_some {
            write!(formatter, "some({})", self.inner)
        } else {
            write!(formatter, "none")
        }
    }

    fn free<T: Freeable<T>>(self: &mut Option<T>) {
        if self.is_some {
            self.inner.free();
        }
    }

    mixin<T: Equatable<T>> Equatable<Option<T>;
    mixin<T: Comparable<T>> Comparable<Option<T>;
}

#[cfg(all(test, test_std))]
mod tests {
    static BUF: [u8; 1024];

    macro fmt($args...) {
        fmt::format_in!(&BUF, $args...).unwrap()
    }

    #[test]
    fn option_ok() {
        let opt = Option::some(42);
        assert!(opt.is_some);
        assert_eq!(opt.inner, 42);
    }

    #[test]
    fn option_none() {
        let opt = Option::none::<i32>();
        assert!(!opt.is_some);
    }

    #[test]
    fn option_equals() {
        let opt1 = Option::some(42);
        let opt2 = Option::some(42);
        let opt3 = Option::some(43);
        assert!(opt1.equals(&opt2));
        assert!(!opt1.equals(&opt3));
    }

    #[test]
    fn option_compare() {
        use cmp::Ordering;

        let opt1 = Option::some(42);
        let opt2 = Option::some(42);
        let opt3 = Option::some(43);
        assert!(opt1.compare(&opt2) == Ordering::Equal);
        assert!(opt1.compare(&opt3) == Ordering::Less);
    }

    #[test]
    fn option_fmt() {

        let opt1 = Option::some(42);
        let opt2 = Option::none::<i32>();
        assert!(fmt!("{}", opt1) == "some(42)");
        assert!(fmt!("{}", opt2) == "none");
    }


    #[test]
    fn option_iter() {
        let opt1 = Option::some(42);
        let opt2 = Option::none::<i32>();
        
        let iter = opt1.iter();
        assert!(iter.next() == opt1);
        assert!(iter.next() == opt2);
    }

    #[test]
    fn option_as_result() {
        let opt1 = Option::some(42);
        let opt2 = Option::none::<i32>();

        assert!(opt1.as_result(0) == result::Result::ok(42));
        assert!(opt2.as_result(0) == result::Result::err(0));
    }
/*
    #[test]
    fn option_move() {
        let opt1 = Option::some(42);
        let opt2 = Option::none::<i32>();

        assert!(opt1.move() == Option::some(42));
        assert!(opt2.move() == Option::none::<i32>());
    }

    #[test]
    fn option_free() {
        let mut opt1 = Option::some(42);
        let mut opt2 = Option::none::<i32>();

        opt1.free();
        opt2.free();
    }
*/
    #[test]
    fn option_unwrap() {
        let opt1 = Option::some(42);
        
        assert!(opt1.unwrap() == 42);
    }

    #[test(should_fail)]
    fn option_unwrap_none() {
        let opt2 = Option::none::<i32>();

        opt2.unwrap();
    }

    #[test]
    fn option_unwrap_or() {
        let opt1 = Option::some(42);
        let opt2 = Option::none::<i32>();

        assert!(opt1.unwrap_or(0) == 42);
        assert!(opt2.unwrap_or(0) == 0);
    }
}
