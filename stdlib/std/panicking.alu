//! Panic support macros and functions

macro panic($reason, $args...) {
    internal::panic_impl(
        concat!($reason), 
        file!(), 
        line!(), 
        column!(),
        &[internal::FormatArg::new(&$args)...]
    )
}

mod internal {
    use fmt::{Formatter, internal::{printf, FormatArg}};

    // Small formatter with as few dependencies as possible. No buffering, no checking
    // for unwritten bytes, etc. This is both for reliability, to allow higher-level IO
    // code to panic safely but also to break potential circular dependencies in static
    // initialization.

    struct PanicFormatter {}
    impl PanicFormatter {
        fn write_str(self: &mut PanicFormatter, buf: &[u8]) -> Result<(), fmt::Error> {
            if libc::write(libc::STDERR_FILENO, buf.ptr as &void, buf.len) < 0 {
                Result::err(fmt::Error::new())
            } else {
                Result::ok(())
            }
        }
        mixin Formatter<PanicFormatter>;
    }
    
    static PANICKING: bool;

    fn print_panic_message(
        fmt_str: &[u8], 
        file: &[u8], 
        line: i32, 
        column: i32, 
        args: &[FormatArg<PanicFormatter>]
    ) -> Result<(), fmt::Error> {
        let formatter = PanicFormatter {};
        
        printf(
            "panic at {}:{}:{}: ", 
            &[FormatArg::new(&file), FormatArg::new(&line), FormatArg::new(&column)], 
            &formatter
        )?;
        printf(fmt_str, args, &formatter)?;
        formatter.write_char('\n')?;

        Result::ok(())
    }

    #[cfg(panic_trap)]
    fn panic_impl(
        fmt_str: &[u8], 
        file: &[u8], 
        line: i32, 
        column: i32, 
        args: &[FormatArg<PanicFormatter>]
    ) -> ! {
        // If we want to trigger a debugger
        std::intrinsics::trap();
    }
    
    #[cfg(not(panic_trap))]
    #[cold]
    #[no_inline]
    fn panic_impl(
        fmt_str: &[u8], 
        file: &[u8], 
        line: i32, 
        column: i32, 
        args: &[FormatArg<PanicFormatter>]
    ) -> ! {
        if mem::replace(&PANICKING, true) {
            // If we panic during a panic handler, nuclear abort.
            std::intrinsics::trap();
        }

        // Swallow errors from print_panic_message, because at this point, what can we do, panic?
        // We still bail early if it fails.
        let _ = print_panic_message(fmt_str, file, line, column, args);
        
        libc::_exit(-1);
    }
}
