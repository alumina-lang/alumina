struct CString {
    ptr: &libc::c_char,
}

impl CString {
    fn new(s: &[u8]) -> CString {
        use std::mem::{slice, alloc, copy_to_nonoverlapping};
        
        let ptr = libc::malloc(s.len + 1) as &mut libc::c_char;
        s.copy_to_nonoverlapping(ptr as &mut u8);
        *(ptr + s.len) = 0;

        CString { ptr: ptr }
    }

    fn from_raw(ptr: &libc::c_char) -> CString {
        CString { ptr: ptr }
    }

    fn as_slice(ptr: &libc::c_char) -> &[u8] {
        mem::slice::from_raw(ptr as &u8, libc::strlen(ptr) as usize)
    }

    fn free(self: &mut CString) {
        libc::free(self.ptr as &mut void);
    }
}
