enum ErrorKind {
    UnexpectedEof,
    Os,
    GetAddrInfo,
    UserDefined
}

union ErrorInner {
    errno: libc::c_int,
    gai_err: libc::c_int,
    message: &[u8]
}

struct Error {
    kind: ErrorKind,
    inner: ErrorInner,
}

impl Error {
    use fmt::Formatter;

    fn from_errno() -> Error {
        Error {
            kind: ErrorKind::Os,
            inner: ErrorInner { errno: *libc::__errno() },
        }
    }

    fn from_gai(gai_err: libc::c_int) -> Error {
        Error {
            kind: ErrorKind::GetAddrInfo,
            inner: ErrorInner { gai_err: gai_err },
        }
    }

    fn custom(message: &[u8]) -> Error {
        Error {
            kind: ErrorKind::UserDefined,
            inner: ErrorInner { message: message },
        }
    }

    fn eof() -> Error {
        Error {
            kind: ErrorKind::UnexpectedEof,
            inner: mem::uninitialized()
        }
    }

    fn as_errno(self: &Error) -> Option<libc::c_int> {
        if self.kind == ErrorKind::Os {
            Option::some(self.inner.errno)
        } else {
            Option::none()
        }
    }

    fn fmt<F: Formatter<F>>(self: &Error, f: &mut F) -> Result<(), fmt::Error> {
        switch self.kind {
            ErrorKind::UnexpectedEof => f.write_str("unexpected end of file"),
            ErrorKind::GetAddrInfo => {
                f.write_str("failed to lookup address information: ")?;
                f.write_str(ffi::CString::from_raw(libc::gai_strerror(self.inner.gai_err)).as_slice())
            }
            ErrorKind::UserDefined => {
                f.write_str(self.inner.message)
            }
            ErrorKind::Os => {
                let buf: [u8; 128];
                let buf = buf.as_slice_mut();

                if libc::strerror_r(self.inner.errno, buf.ptr as &mut libc::c_char, 128) < 0 {
                    panic!("strerror_r failed");
                }

                let len = 0usize;
                while len < 128 && buf[len] != 0 {
                    len += 1;
                }

                f.write_str("os error: ")?;
                f.write_str(buf[0..len])?;

                Result::ok(())
            }
            _ => unreachable!()
        }
    }

    fn equals(self: &Error, other: &Error) -> bool {
        if self.kind != other.kind {
            return false;
        }
        switch self.kind {
            ErrorKind::GetAddrInfo => self.inner.gai_err == other.inner.gai_err,
            ErrorKind::Os => self.inner.errno == other.inner.errno,
            ErrorKind::UnexpectedEof => true,
            ErrorKind::UserDefined => self.inner.message == other.inner.message,
            _ => unreachable!()
        }
    }

    mixin cmp::Equatable<Error>;
}

macro errno_try($ret) {
    let ret = $ret;
    if ret == -1 {
        return result::Result::err(Error::from_errno());
    }
    ret
}

protocol FdReadWrite<Self: AsFileDescriptor<Self>> {
    fn read(self: &mut Self, buf: &mut [u8]) -> Result<usize, Error> {
        let ret = errno_try!(libc::read(self.as_fd().value, buf.ptr as &mut void, buf.len));
        Result::ok(ret as usize)
    }

    fn write(self: &mut Self, buf: &[u8]) -> Result<usize, Error> {
        let ret = errno_try!(libc::write(self.as_fd().value, buf.ptr as &void, buf.len));
        Result::ok(ret as usize)
    }
}

struct FileDescriptor {
    value: libc::c_int
}

impl FileDescriptor {
    fn new(value: libc::c_int) -> FileDescriptor {
        FileDescriptor { value: value }
    }

    fn close(self: &mut FileDescriptor) -> Result<(), Error> {
        if self.value != -1 {
            errno_try!(libc::close(self.value));
        }
        result::Result::ok(())
    }

    #[cfg(target_os = "linux")]
    fn set_nonblocking(self: &mut FileDescriptor, nonblocking: bool) -> Result<(), Error> {
        let nonblocking =  if nonblocking { 1 as libc::c_int } else { 0 as libc::c_int };
        errno_try!(libc::ioctl(self.value, libc::FIONBIO, &nonblocking));

        result::Result::ok(())
    }

    #[cfg(not(target_os = "linux"))]
    fn set_nonblocking(self: &mut FileDescriptor, nonblocking: bool) -> Result<(), Error> {
        let previous = errno_try!(libc::fcntl(self.value, libc::F_GETFL));
        let new = if nonblocking {
            previous | libc::O_NONBLOCK
        } else {
            previous & ~libc::O_NONBLOCK
        };

        if new != previous {
            errno_try!(libc::fcntl(self.value, libc::F_SETFL, new));
        }

        result::Result::ok(())
    }

    #[cfg(not(target_os = "linux"))]
    fn set_cloexec(self: &mut FileDescriptor) -> Result<(), Error> {
        errno_try!(libc::ioctl(self.value, libc::FIOCLEX));

        result::Result::ok(())
    }

    #[cfg(target_os = "linux")]
    fn set_cloexec(self: &mut FileDescriptor) -> Result<(), Error> {
        let previous = errno_try!(libc::fcntl(self.value, libc::F_GETFD));
        let new = previous | libc::FD_CLOEXEC;

        if new != previous {
            errno_try!(libc::fcntl(self.value, libc::F_SETFD, new));
        }

        result::Result::ok(())
    }

    fn move(self: &mut FileDescriptor) -> FileDescriptor {
        let ret = *self;
        self.value = -1;
        ret
    }
}

struct StdioStream {
    fd: FileDescriptor
}

impl StdioStream {
    fn stdin() -> StdioStream {
        StdioStream { fd: FileDescriptor::new(libc::STDIN_FILENO) }
    }

    fn stdout() -> StdioStream {
        StdioStream { fd: FileDescriptor::new(libc::STDOUT_FILENO) }
    }

    fn stderr() -> StdioStream {
        StdioStream { fd: FileDescriptor::new(libc::STDERR_FILENO) }
    }

    fn from_fd(fd: FileDescriptor) -> StdioStream {
        StdioStream { fd: fd }
    }

    fn as_fd(self: &StdioStream) -> FileDescriptor {
        self.fd
    }

    fn close(self: &mut StdioStream) -> Result<(), Error> {
        self.fd.close()
    }

    fn flush(self: &mut StdioStream) -> Result<(), Error> {
        Result::ok(())
    }

    fn move(self: &mut StdioStream) -> StdioStream {
        StdioStream { fd: self.fd.move() }
    }    

    mixin FdReadWrite<StdioStream>;
    mixin Readable<StdioStream>;
    mixin Writable<StdioStream>;
}

struct Pipe {
    fd: FileDescriptor
}

impl Pipe {
    fn anonymous() -> result::Result<(Pipe, Pipe), Error> {
        let fds: [libc::c_int; 2];
    
        #[cfg(target_os = "linux")]
        errno_try!(libc::pipe2(&fds[0], libc::O_CLOEXEC));
        
        #[cfg(not(target_os = "linux"))]
        errno_try!(libc::pipe(&fds[0]));

        let rx = FileDescriptor::new(fds[0]);
        let tx = FileDescriptor::new(fds[1]);

        #[cfg(not(target_os = "linux"))]
        {
            rx.set_cloexec()?;
            tx.set_cloexec()?;
        }

        result::Result::ok((Pipe::from_fd(rx), Pipe::from_fd(tx)))
    }

    fn from_fd(fd: FileDescriptor) -> Pipe {
        Pipe { fd: fd }
    }

    fn as_fd(self: &Pipe) -> FileDescriptor {
        self.fd
    }

    fn close(self: &mut Pipe) -> Result<(), Error> {
        self.fd.close()
    }

    fn move(self: &mut Pipe) -> Pipe {
        Pipe { fd: self.fd.move() }
    }

    mixin FdReadWrite<Pipe>;
    mixin Readable<Pipe>;
    mixin Writable<Pipe>;
}
