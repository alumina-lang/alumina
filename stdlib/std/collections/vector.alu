
struct Vector<T> {
    _data: &mut [T],
    _length: usize,
}

impl Vector<T> {
    use std::mem::{slice, alloc, realloc, copy, copy_nonoverlapping};
    use std::iter::{Iterator, Iterable};

    fn new() -> Vector<T> {
        with_capacity(0)
    }

    fn from_raw(data: &mut [T], length: usize) {
        Vector {
            _data: data,
            _length: length,
        }
    }

    fn with_capacity(capacity: usize) -> Vector<T> {
        Vector {
            _data: alloc::<T>(capacity),
            _length: 0,
        }
    }

    fn from_slice(slice: &[T]) -> Vector<T> {
        let vec = with_capacity::<T>(slice.len);
        slice.copy_nonoverlapping(vec._data.ptr);
        vec._length = slice.len;
        vec
    }

    fn from_iter<I: Iterator<I, T>>(iter: &mut I) -> Vector<T> {
        let vec = Vector::new::<T>();
        vec.extend(iter);
        vec
    }

    fn reserve(self: &mut Vector<T>, additional: usize) {
        if self._length + additional > self._data.len {
            self._data = self._data.realloc(
                math::max(self._length * 2, self._length + additional)
            );
        }
    }

    fn extend_from_slice(self: &mut Vector<T>, value: &[T]) {
        if value.len == 0 {
            return;
        }

        self.reserve(value.len);

        value.copy(&self._data[self._length]);
        self._length += value.len;
    }

    fn extend<I: Iterator<I, T>>(self: &mut Vector<T>, iter: &mut I) {
        self.reserve(iter.size_hint().unwrap_or(0));
        
        loop {
            let item = iter.next();
            if item.is_some {
                self.push(item.inner);
            } else {
                break;
            }
        }
    }

    fn insert(self: &mut Vector<T>, index: usize, value: T) {
        self.reserve(1);

        if index < self._length {
            self._data[index..self._length].copy(&self._data[index + 1]);
        }
        self._data[index] = value;

        self._length += 1;
    }

    fn get(self: &Vector<T>, index: usize) -> Option<T> {
        if index < self._length {
            Option::some(self._data[index])
        } else {
            Option::none()
        }
    }

    fn as_slice(self: &Vector<T>) -> &[T] {
        self._data[0..self._length]
    }

    fn as_slice_mut(self: &mut Vector<T>) -> &mut [T] {
        self._data[0..self._length]
    }

    fn push(self: &mut Vector<T>, value: T) {
        self.reserve(1);

        self._data[self._length] = value;
        self._length += 1;
    }

    fn pop(self: &mut Vector<T>) -> Option<T> {
        if self._length == 0 {
            Option::none()
        } else {
            self._length -= 1;
            Option::some(self._data[self._length])
        }
    }

    fn first(self: &mut Vector<T>) -> Option<T> {
        if self._length == 0 {
            Option::none()
        } else {
            Option::some(self._data[0])
        }
    }

    fn last(self: &mut Vector<T>) -> Option<T> {
        if self._length == 0 {
            Option::none()
        } else {
            Option::some(self._data[self._length - 1])
        }
    }

    fn remove(self: &mut Vector<T>, index: usize) -> T {
        let value = self._data[index];
        self._data[index + 1..self._length].copy(&self._data[index]);
        self._length -= 1;
        value
    }

    fn len(self: &Vector<T>) -> usize {
        self._length
    }

    fn capacity(self: &Vector<T>) -> usize {
        self._data.len
    }

    fn spare_capacity(self: &mut Vector<T>) -> &mut [T] {
        self._data[self._length..]
    }

    #[inline]
    fn empty(self: &Vector<T>) -> bool {
        self._length == 0
    }

    fn clear(self: &mut Vector<T>) {
        self._length = 0;
    }

    fn resize(self: &mut Vector<T>, new_size: usize) {
        debug_assert!(new_size <= self._data.len);

        self._length = new_size;
    }

    #[inline]
    fn iter(self: &Vector<T>) -> mem::SliceIterator<&T> {
        self.as_slice().iter()
    }

    fn shrink_to_fit(self: &mut Vector<T>) {
        if self._length < self._data.len  {
            self._data = self._data.realloc(self._length);
        }
    }

    fn free(self: &mut Vector<T>) {
        use std::mem::free;
        self._data.free();
    }

    fn move(self: &mut Vector<T>) -> Vector<T> {
        let ret = *self;
        self._data = mem::slice::empty();
        self._length = 0;
        ret
    }
}

impl Vector {
    use std::fmt::{Formatter, Formattable};

    fn write_str(self: &mut Vector<u8>, buf: &[u8]) -> Result<(), fmt::Error> {
        self.extend_from_slice(buf);
        Result::ok(())
    }

    fn write_char(self: &mut Vector<u8>, c: u8) -> Result<(), fmt::Error> {
        self.push(c);
        Result::ok(())
    }
}


#[cfg(all(test, test_std))]
mod tests {

    #[test]
    fn test_vector_new() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        assert_eq!(vec.len(), 0);
    }

    #[test]
    fn test_vector_from_slice() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.len(), 3);
        assert_eq!(vec.as_slice(), &[1, 2, 3]);
    }

    #[test]
    fn test_vector_from_iter() {
        let vec : Vector<i32> = Vector::from_iter(&[1, 2, 3].iter());
        defer vec.free();

        assert_eq!(vec.len(), 3);
        assert_eq!(vec.as_slice(), &[1, 2, 3]);
    }

    #[test]
    fn test_vector_reserve() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        vec.reserve(10);
        assert_eq!(vec.len(), 0);
        assert_eq!(vec.as_slice(), &[]);
    }

    #[test]
    fn test_vector_extend_from_slice() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        vec.extend_from_slice(&[1, 2, 3]);
        assert_eq!(vec.len(), 3);
        assert_eq!(vec.as_slice(), &[1, 2, 3]);
    }

    #[test]
    fn test_vector_extend() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        vec.extend(&[1, 2, 3].iter());
        assert_eq!(vec.len(), 3);
        assert_eq!(vec.as_slice(), &[1, 2, 3]);
    }

    #[test]
    fn test_vector_insert() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        vec.insert(0, 1);
        assert_eq!(vec.len(), 1);
        assert_eq!(vec.as_slice(), &[1]);
        vec.insert(0, 2);
        assert_eq!(vec.len(), 2);
        assert_eq!(vec.as_slice(), &[2, 1]);
        vec.insert(1, 3);
        assert_eq!(vec.len(), 3);
        assert_eq!(vec.as_slice(), &[2, 3, 1]);
    }

    #[test]
    fn test_vector_as_slice() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.as_slice(), &[1, 2, 3]);
    }

    #[test]
    fn test_vector_as_slice_mut() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.as_slice_mut(), &[1, 2, 3]);
    }

    #[test]
    fn test_vector_push() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        vec.push(1);
        assert_eq!(vec.len(), 1);
        assert_eq!(vec.as_slice(), &[1]);
        vec.push(2);
        assert_eq!(vec.len(), 2);
        assert_eq!(vec.as_slice(), &[1, 2]);
        vec.push(3);
        assert_eq!(vec.len(), 3);
        assert_eq!(vec.as_slice(), &[1, 2, 3]);
    }

    #[test]
    fn test_vector_pop() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.pop(), Option::some(3));
        assert_eq!(vec.len(), 2);
        assert_eq!(vec.pop(), Option::some(2));
        assert_eq!(vec.len(), 1);
        assert_eq!(vec.pop(), Option::some(1));
        assert_eq!(vec.len(), 0);
        assert_eq!(vec.pop(), Option::none());
        assert_eq!(vec.len(), 0);
    }

    #[test]
    fn test_vector_remove() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.remove(0), 1);
        assert_eq!(vec.len(), 2);
        assert_eq!(vec.remove(0), 2);
        assert_eq!(vec.len(), 1);
        assert_eq!(vec.remove(0), 3);
        assert_eq!(vec.len(), 0);
    }

    #[test]
    fn test_vector_clear() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        vec.clear();
        assert_eq!(vec.len(), 0);
        assert_eq!(vec.as_slice(), &[]);
    }

    #[test]
    fn test_vector_get() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.get(0), Option::some(1));
        assert_eq!(vec.get(1), Option::some(2));
        assert_eq!(vec.get(2), Option::some(3));
        assert_eq!(vec.get(3), Option::none());
    }

    #[test]
    fn test_vector_move() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();
        
        let vec2 = vec.move();
        defer vec2.free();
        
        assert_eq!(vec.len(), 0);
        assert_eq!(vec2.len(), 3);
        assert_eq!(vec2.as_slice(), &[1, 2, 3]);
    }
}
