use std::hash::{Hashable, Hasher, DefaultHash};
use std::option::{Option, try};
use std::iter::{Iterator, Iterable};
use std::cmp::Equatable;

struct HashSetIterator<K> {
    inner: hashmap::HashMapIterator<K, ()>
}

impl HashSetIterator<K> {
    fn next(self: &mut HashSetIterator<K>) -> Option<K> {
        let elem = self.inner.next()?;
        Option::some(elem.0)
    }

    mixin iter::Iterator<HashSetIterator<K>, K>;
    mixin iter::IteratorExt<HashSetIterator<K>, K>;
}

struct HashSet<K: Hashable<K, H> + Equatable<K>, H: Hasher<H> = DefaultHash> {
    _inner: hashmap::HashMap<K, (), H>
}

impl HashSet<K: Hashable<K, H> + Equatable<K>, H: Hasher<H> = DefaultHash> {
    fn new() -> HashSet<K, H> {
        with_capacity(0)
    }

    fn with_capacity(capacity: usize) -> HashSet<K, H> {
        HashSet::<K, H> {
            _inner: hashmap::HashMap::with_capacity::<K, (), H>(capacity)
        }
    }

    fn with_size(size: usize) -> HashSet<K, H> {
        HashSet::<K, H> {
            _inner: hashmap::HashMap::with_size::<K, (), H>(size)
        }
    }

    #[inline]
    fn reserve(self: &mut HashSet<K, H>, additional: usize) {
        self._inner.reserve(additional);
    }

    #[inline]
    fn rehash(self: &mut HashSet<K, H>, new_capacity: usize) {
        self._inner.rehash(new_capacity);
    }

    #[inline]
    fn shrink_to_fit(self: &mut HashSet<K, H>) {
        self._inner.shrink_to_fit()
    }

    #[inline]
    fn insert(self: &mut HashSet<K, H>, item: K) -> bool {
        !self._inner.insert(item, ()).is_some
    }

    #[inline]
    fn remove(self: &mut HashSet<K, H>, item: K) -> bool {
        self._inner.remove(item).is_some
    }

    #[inline]
    fn contains(self: &HashSet<K, H>, item: K) -> bool {
        self._inner.get(item).is_some
    }

    #[inline]
    fn len(self: &HashSet<K, H>) -> usize {
        self._inner.len()
    }

    #[inline]
    fn empty(self: &HashSet<K, H>) -> bool {
        self._inner.empty()
    }

    #[inline]
    fn clear(self: &mut HashSet<K, H>) {
        self._inner.clear();
    }

    #[inline]
    fn iter(self: &HashSet<K, H>) -> HashSetIterator<K> {
        HashSetIterator::<K> {
            inner: self._inner.iter()
        }
    }

    #[inline]
    fn free(self: &mut HashSet<K, H>) {
        self._inner.free();
    }

    fn move(self: &mut HashSet<K, H>) -> HashSet<K, H> {
        HashSet::<K, H> {
            _inner: self._inner.move()
        }
    }
}

impl HashSet<K: Hashable<K, H> + Equatable<K>, I: Iterator<I, K>, H: Hasher<H> = DefaultHash> {
    fn from_iter(iter: &mut I) -> HashSet<K, H> {
        let set = HashSet::new::<K, H>();
        set.extend(iter);
        set
    }

    fn extend(self: &mut HashSet<K, H>, iter: &mut I) {
        self.reserve(iter.size_hint().unwrap_or(0));
        
        loop {
            let item = iter.next();
            if item.is_some {
                self.insert(item.inner);
            } else {
                break;
            }
        }
    }
}

#[cfg(all(test, test_std))]
mod tests {
    use hashmap::tests::DummyHasher;

    #[test]
    fn test_hashset_new() {
        let set = HashSet::new::<i32>();
        defer set.free(); 

        assert!(set.empty());
        assert_eq!(set.len(), 0);
    }

    #[test]
    fn test_hashset_with_capacity() {
        let set = HashSet::with_capacity::<i32>(10);
        defer set.free(); 

        assert!(set.empty());
        assert_eq!(set.len(), 0);
    }

    #[test]
    fn test_hashset_insert() {
        let set = HashSet::new::<i32>();
        defer set.free(); 

        assert!(set.insert(1));
        assert!(!set.insert(1));
        assert_eq!(set.len(), 1);
    }

    #[test]
    fn test_hashset_remove() {
        let set = HashSet::new::<i32>();
        defer set.free(); 

        assert!(set.insert(1));
        assert!(set.remove(1));
        assert!(!set.remove(1));
        assert!(set.empty());
    }

    #[test]
    fn test_hashset_contains() {
        let set = HashSet::new::<i32>();
        defer set.free(); 

        assert!(!set.contains(1));
        assert!(set.insert(1));
        assert!(set.contains(1));
    }

    #[test]
    fn test_hashset_len() {
        let set = HashSet::new::<i32>();
        defer set.free(); 

        assert_eq!(set.len(), 0);
        assert!(set.insert(1));
        assert_eq!(set.len(), 1);
        assert!(set.insert(2));
    }

    #[test]
    fn test_hashset_empty() {
        let set = HashSet::new::<i32>();
        defer set.free(); 

        assert!(set.empty());
        assert!(set.insert(1));
        assert!(!set.empty());
        assert!(set.remove(1));
        assert!(set.empty());
    }

    #[test]
    fn test_hashset_clear() {
        let set = HashSet::new::<i32>();
        defer set.free(); 

        assert!(set.insert(1));
        assert!(set.insert(2));
        assert!(set.insert(3));
        assert_eq!(set.len(), 3);
        set.clear();
        assert!(set.empty());
    }

    #[test]
    fn test_hashset_iter() {
        let set = HashSet::with_capacity::<i32, DummyHasher>(10);
        defer set.free(); 

        assert!(set.insert(1));
        assert!(set.insert(2));
        assert!(set.insert(3));
        let iter = set.iter();
        assert_eq!(iter.next(), Option::some(1));
        assert_eq!(iter.next(), Option::some(2));
        assert_eq!(iter.next(), Option::some(3));
        assert_eq!(iter.next(), Option::none());
    }

    #[test]
    fn test_hashset_move() {
        let set = HashSet::new::<i32>();
        defer set.free(); 

        assert!(set.insert(1));
        assert!(set.insert(2));
        assert!(set.insert(3));

        let set2 = set.move();
        defer set2.free(); 

        assert_eq!(set2.len(), 3);
        assert!(set2.contains(1));
        assert!(set2.contains(2));
        assert!(set2.contains(3));
        assert!(set.empty());
    }

    #[test]
    fn test_hashset_from_iter() {
        let set: HashSet<i32> = HashSet::from_iter(&[1, 2, 3].iter());
        defer set.free(); 

        assert_eq!(set.len(), 3);
        assert!(set.contains(1));
        assert!(set.contains(2));
        assert!(set.contains(3));
    }

    #[test]
    fn test_hashset_extend() {
        let set = HashSet::new::<i32>();
        defer set.free(); 

        set.extend(&[1, 2, 3].iter());
        assert_eq!(set.len(), 3);
        assert!(set.contains(1));
        assert!(set.contains(2));
        assert!(set.contains(3));
    }
}
