use io::{Error, Pipe};
use io::unix::errno_try;

struct EnvIterator {
    ptr: &&libc::c_char
}

impl EnvIterator {
    use ffi::CString;
    use string::find_char;

    fn new() -> EnvIterator {
        EnvIterator {
            ptr: internal::environ
        }
    }

    fn iter(self: &EnvIterator) -> EnvIterator {
        *self
    }

    fn next(self: &mut EnvIterator) -> Option<(&[u8], &[u8])> {
        loop {
            if *self.ptr == null {
                break Option::none();
            }

            let env_str = CString::from_raw(*self.ptr).as_slice();
            self.ptr += 1;

            if env_str.len == 0 {
                continue;
            }

            // Empty environment variable name is consider not valid, so allow
            // it to start with '='
            let sep = env_str[1..].find_char('=');
            if !sep.is_some {
                continue;
            }

            break Option::some((env_str[0..sep.inner + 1], env_str[sep.inner + 2..]));
        }
    }
}


struct Output {
    status: i32,
    stdout: collections::Vector<u8>,
    stderr: collections::Vector<u8>,
}

impl Output {
    fn move(self: &mut Output) -> Output {
        Output {
            status: self.status,
            stdout: self.stdout.move(),
            stderr: self.stderr.move()
        }
    }

    fn free(self: &mut Output) {
        self.stdout.free();
        self.stderr.free();
    }
}

struct Child {
    pid: libc::pid_t,
    stdin: option::Option<io::Pipe>,
    stdout: option::Option<io::Pipe>,
    stderr: option::Option<io::Pipe>,
}

impl Child {
    use collections::Vector;

    fn from_pid(pid: libc::pid_t) -> Child {
        Child {
            pid: pid,
            stdin: Option::none(),
            stdout: Option::none(),
            stderr: Option::none()
        }
    }

    fn wait_with_output(self: &mut Child) -> Result<Output, Error> {
        let stdin = self.stdin.move();
        if stdin.is_some {
            stdin.inner.close()?;
        }

        let stdout : Vector<u8> = Vector::new();
        defer stdout.free();

        let stderr : Vector<u8> = Vector::new();
        defer stderr.free();

        if self.stdout.is_some && self.stderr.is_some {
            internal::read_to_end_2(
                &self.stdout.inner,
                &stdout,
                &self.stderr.inner,
                &stderr
            )?;
        } else if self.stdout.is_some {
            self.stdout.inner.read_to_end(&stdout)?;
        } else if self.stderr.is_some {
            self.stderr.inner.read_to_end(&stderr)?;
        }

        // Close all the pipes if we were able to read them
        // to end. If any of the ?'s above bailed early, 
        // we leave them open, as it may have been something
        // transient and a retry might succeed.
        self.close();

        let status: libc::c_int = 0;
        errno_try!(libc::waitpid(self.pid, &status, 0));

        let res = Output {
            status: status as i32,
            stdout: stdout.move(),
            stderr: stderr.move()
        };

        Result::ok(res)
    }

    fn wait(self: &mut Child) -> Result<i32, Error> {
        let stdin = self.stdin.move();
        if stdin.is_some {
            stdin.inner.close()?;
        }

        let status: libc::c_int = 0;
        errno_try!(libc::waitpid(self.pid, &status, 0));

        Result::ok(status as i32)
    }

    fn kill(self: &mut Child) -> Result<(), Error> {
        let ret = errno_try!(libc::kill(self.pid, libc::SIGKILL));
        Result::ok(())
    }

    fn close(self: &mut Child) -> Result<(), Error> {
        let stdin = self.stdin.move();
        if stdin.is_some {
            stdin.inner.close()?;
        }

        let stdout = self.stdout.move();
        if stdout.is_some {
            stdout.inner.close()?;
        }

        let stderr = self.stderr.move();
        if stderr.is_some {
            stderr.inner.close()?;
        }

        Result::ok(())
    }
}

struct Forked {
    _stdin: Stdio,
    _stdout: Stdio,
    _stderr: Stdio
}

impl Forked {
    use internal::IoRedirection;

    fn new() -> Forked {
        Forked {
            _stdin: Stdio::Inherit,
            _stdout: Stdio::Inherit,
            _stderr: Stdio::Inherit
        }
    }

    fn stdin(self: &mut Forked, stdin: Stdio) -> &mut Forked {
        self._stdin = stdin;
        self
    }

    fn stdout(self: &mut Forked, stdout: Stdio) -> &mut Forked {
        self._stdout = stdout;
        self
    }

    fn stderr(self: &mut Forked, stderr: Stdio) -> &mut Forked {
        self._stderr = stderr;
        self
    }

    fn _after_fork(
        self: &Forked,
        stdin: &mut IoRedirection,
        stdout: &mut IoRedirection,
        stderr: &mut IoRedirection
    ) -> Result<(), Error> {
        stdin.install(libc::STDIN_FILENO)?;
        stdout.install(libc::STDOUT_FILENO)?;
        stderr.install(libc::STDERR_FILENO)?;

        Result::ok(())
    }

    fn spawn(self: &Forked) -> Result<Option<Child>, Error> {
        let stdin = IoRedirection::new(true, self._stdin)?;
        defer stdin.close();

        let stdout = IoRedirection::new(false, self._stdout)?;
        defer stdout.close();

        let stderr = IoRedirection::new(false, self._stderr)?;
        defer stderr.close();

        let (fail_rx, fail_tx) = Pipe::anonymous()?;
        defer fail_rx.close();

        let pid = errno_try!(std::libc::fork());
        if pid == 0 {
            let res = self._after_fork(&stdin, &stdout, &stderr);

            // Since we are already in the child process, we can't just bail here, we need to
            // send the error to the parent process via the pipe.
            if !res.is_ok {
                let msg = mem::slice::from_raw(&res.inner.err as &u8, mem::size_of::<Error>());
                fail_tx.write_all(msg).unwrap();
                libc::_exit(1);
            } else {
                fail_tx.close().unwrap();
            }

            // We have forked
            Result::ok(Option::none())
        } else {
            fail_tx.close().unwrap();

            let exec_err: Error;
            if fail_rx.read_exact(
                mem::slice::from_raw(&exec_err as &mut u8, mem::size_of::<Error>())
            ).is_ok {
                return Result::err(exec_err);
            }

            Result::ok(Option::some(Child {
                pid: pid,
                stdin: stdin.into_inner(),
                stdout: stdout.into_inner(),
                stderr: stderr.into_inner(),
            }))
        }
    }
}

struct Command {
    _name: option::Option<&[u8]>,
    _args: &[&[u8]],
    _environ: Option<&[(&[u8], &[u8])]>,
    _stdin: Stdio,
    _stdout: Stdio,
    _stderr: Stdio
}

impl Command {
    use internal::IoRedirection;
    use ffi::CString;
    use collections::{Vector, free_all};

    fn new(name: &[u8]) -> Command {
        Command {
            _name: Option::some(name),
            _args: mem::slice::empty(),
            _environ: Option::none(),
            _stdin: Stdio::Inherit,
            _stdout: Stdio::Inherit,
            _stderr: Stdio::Inherit
        }
    }

    fn args(self: &mut Command, args: &[&[u8]]) -> &mut Command {
        self._args = args;
        self
    }

    fn env(self: &mut Command, environ: &[(&[u8], &[u8])]) -> &mut Command {
        self._environ = Option::some(environ);
        self
    }

    fn stdin(self: &mut Command, stdin: Stdio) -> &mut Command {
        self._stdin = stdin;
        self
    }

    fn stdout(self: &mut Command, stdout: Stdio) -> &mut Command {
        self._stdout = stdout;
        self
    }

    fn stderr(self: &mut Command, stderr: Stdio) -> &mut Command {
        self._stderr = stderr;
        self
    }

    fn _after_fork(
        self: &Command,
        stdin: &mut IoRedirection,
        stdout: &mut IoRedirection,
        stderr: &mut IoRedirection
    ) -> Result<!, Error> {
        use mem::copy_nonoverlapping;

        stdin.install(libc::STDIN_FILENO)?;
        stdout.install(libc::STDOUT_FILENO)?;
        stderr.install(libc::STDERR_FILENO)?;

        let name = CString::new(self._name.unwrap());
        defer name.free();

        let argv : Vector<CString> = Vector::with_capacity(self._args.len + 2);
        defer argv.free_all();

        argv.push(CString::new(self._name.unwrap()));
        for arg in self._args {
            argv.push(CString::new(arg));
        }
        argv.push(CString::null());

        if !self._environ.is_some {
            errno_try!(libc::execv(name.ptr as &libc::c_char, argv.as_slice().ptr as &&libc::c_char));
        } else {
            let environ_s = self._environ.unwrap();
            let environ : Vector<CString> = Vector::with_capacity(environ_s.len + 1);
            defer environ.free_all();

            for (key, value) in environ_s {
                let var = libc::malloc(key.len + value.len + 2) as &mut u8;
                key.copy_nonoverlapping(var);
                *(var + key.len) = '=';
                value.copy_nonoverlapping(var + key.len + 1);
                *(var + key.len + value.len + 1) = 0;

                environ.push(CString::from_raw(var as &libc::c_char));
            }
            environ.push(CString::null());

            errno_try!(libc::execve(
                name.ptr as &libc::c_char,
                argv.as_slice().ptr as &&libc::c_char,
                environ.as_slice().ptr as &&libc::c_char
            ));
        }
        unreachable!()
    }

    fn spawn(self: &Command) -> Result<Child, Error> {
        let stdin = IoRedirection::new(true, self._stdin)?;
        defer stdin.close();

        let stdout = IoRedirection::new(false, self._stdout)?;
        defer stdout.close();

        let stderr = IoRedirection::new(false, self._stderr)?;
        defer stderr.close();

        let (fail_rx, fail_tx) = Pipe::anonymous()?;
        defer fail_rx.close();

        let pid = errno_try!(std::libc::fork());
        if pid > 0 {
            fail_tx.close().unwrap();

            let exec_err: Error;
            if fail_rx.read_exact(
                mem::slice::from_raw(&exec_err as &mut u8, mem::size_of::<Error>())
            ).is_ok {
                return Result::err(exec_err);
            }

            Result::ok(Child {
                pid: pid,
                stdin: stdin.into_inner(),
                stdout: stdout.into_inner(),
                stderr: stderr.into_inner(),
            })
        } else {
            let res = self._after_fork(&stdin, &stdout, &stderr);

            // Since we are already in the child process, we can't just bail here, we need to
            // send the error to the parent process via the pipe.
            if !res.is_ok {
                let msg = mem::slice::from_raw(&res.inner.err as &u8, mem::size_of::<Error>());
                fail_tx.write_all(msg).unwrap();
                libc::_exit(1);
            } 

            unreachable!()
        }
    }
}

mod internal {
    use io::{Readable, AsFileDescriptor};
    use std::io::unix::{ErrorKind, errno_try};
    use collections::Vector;

    extern "C" static environ: &&libc::c_char;
    
    fn maybe_read_to_end<S1: Readable<S1>>(src: &mut S1, dst: &mut Vector<u8>) -> Result<bool, Error> {
        let maybe_n = src.read_to_end(dst);
        if maybe_n.is_ok {
            Result::ok(true)
        } else {
            let error = maybe_n.unwrap_err();
            let as_errno = error.as_errno();

            if as_errno == Option::some(libc::EWOULDBLOCK) || 
                as_errno == Option::some(libc::EAGAIN) {
                Result::ok(false)
            } else {
                Result::err(error)
            }
        }
    }

    // Reads two pipes (or any other stream) into respecitve buffers at the same time. It uses
    // poll to make sure one pipe is not blocked by the other.
    fn read_to_end_2<
        S1: Readable<S1> + AsFileDescriptor<S1>, 
        S2: Readable<S2> + AsFileDescriptor<S2>, 
    >(
        src1: &mut S1, 
        dst1: &mut Vector<u8>, 
        src2: &mut S2, 
        dst2: &mut Vector<u8>
    ) -> result::Result<(), Error> {
        let s1 = src1.as_fd();
        let s2 = src2.as_fd();

        s1.set_nonblocking(true);
        s2.set_nonblocking(true);

        let fds: [libc::pollfd; 2] = mem::zeroed();
        fds[0].fd = s1.value;
        fds[0].events = libc::POLLIN;
        fds[1].fd = s2.value;
        fds[1].events = libc::POLLIN;

        loop {
            errno_try!(libc::poll(&fds[0], 2, -1));

            if fds[0].revents != 0 {
                if src1.maybe_read_to_end(dst1)? {
                    s2.set_nonblocking(false)?;
                    return src2.read_to_end(dst2).map(util::drop::<usize>);
                }
            }

            if fds[1].revents != 0 {
                if src2.maybe_read_to_end(dst2)? {
                    s1.set_nonblocking(false)?;
                    return src1.read_to_end(dst1).map(util::drop::<usize>);
                }
            }
        }
    }

    struct IoRedirection {
        kind: Stdio,
        pair: Option<(Pipe, Pipe)>
    }
    
    impl IoRedirection {
        fn new(is_stdin: bool, kind: Stdio) -> Result<IoRedirection, Error> {
            let pair: Option<(Pipe, Pipe)> = if kind == Stdio::Piped {
                let (rx, tx) = Pipe::anonymous()?;
    
                if is_stdin {
                    Option::some((tx, rx))
                } else {
                    Option::some((rx, tx))
                }
            } else {
                Option::none()
            };
    
            let res = IoRedirection {
                pair: pair,
                kind: kind
            };
    
            Result::ok(res)
        }
    
        fn close(self: &mut IoRedirection) -> Result<(), Error> {
            if self.pair.is_some {
                self.pair.inner.0.close()?;
                self.pair.inner.1.close()?;
            } 
                
            Result::ok(())
        }
    
        fn install(self: &mut IoRedirection, fd: libc::c_int) -> Result<(), Error> {
            use std::fs::{File, OpenOptions};
    
            switch self.kind {
                Stdio::Piped => {
                    let (_, tgt) = self.pair.unwrap();
    
                    errno_try!(libc::dup2(tgt.fd.value, fd));
                },
                Stdio::Null => {
                    let dev_zero = File::open_with("/dev/null", OpenOptions::new().read(true).write(true))?;
                    defer dev_zero.close();
    
                    errno_try!(std::libc::dup2(dev_zero.fd.value, fd));
                },
                _ => {}
            };
    
            Result::ok(())
        }
    
        fn into_inner(self: &mut IoRedirection) -> Option<Pipe> {
            if self.pair.is_some {
                Option::some(self.pair.inner.0.move())
            } else {
                Option::none()
            }
        }
    }
}


#[cfg(all(test, test_std))]
mod test {
    #[test]
    fn test_spawn() {
        let child = Command::new("/bin/echo")
            .args(&["Hello, World!"])
            .stdout(Stdio::Piped)
            .stderr(Stdio::Piped)
            .spawn()
            .unwrap();

        let output = child.wait_with_output().unwrap();
        defer output.free();

        assert_eq!(output.status, 0);
        assert_eq!(output.stdout.as_slice(), "Hello, World!\n");
        assert_eq!(output.stderr.as_slice(), &[]);
    }

    #[test]
    fn spawn_fails_on_exec_failure() {
        let child = Command::new("some nonexistent program hopefully")
            //.stdout(Stdio::Piped)
            //.stderr(Stdio::Piped)
            .spawn();

        assert!(!child.is_ok);
        assert_eq!(child.unwrap_err().inner.errno, libc::ENOENT);
    }

    #[cfg(any(target_os = "linux"))]
    #[test]
    fn test_kill() {
        let child = Command::new("/bin/sleep")
            .args(&["10000"])
            .spawn()
            .unwrap();

        child.kill().unwrap();

        let status = child.wait().unwrap();
        assert_eq!(status, libc::SIGKILL);
    }


    #[test]
    fn test_fork() {
        let child = Forked::new()
            .stdout(Stdio::Piped)
            .stderr(Stdio::Piped)
            .spawn()
            .unwrap();

        if !child.is_some {
            print!("Hello");
            eprint!("World");
            exit(123);
        } else {
            let output = child.inner.wait_with_output().unwrap();
            defer output.free();

            assert_eq!((output.status & 0xff00) >> 8, 123);
            assert_eq!(output.stdout.as_slice(), "Hello");
            assert_eq!(output.stderr.as_slice(), "World");
        }
    }

    #[test]
    fn test_fork_starvation() {
        use fmt::repeat;

        let child = Forked::new()
            .stdout(Stdio::Piped)
            .stderr(Stdio::Piped)
            .spawn()
            .unwrap();

        if !child.is_some {
            // Write to both pipes and fill up the buffer. Naive implementation would
            // block on write eventually when the pipe capacity is reached. But our's
            // don't!
            for i in 0..1024 {
                print!("{}", "A".repeat(1024));
                eprint!("{}", "B".repeat(1024));
            }
            exit(123);
        } else {
            let output = child.inner.wait_with_output().unwrap();
            defer output.free();

            assert_eq!((output.status & 0xff00) >> 8, 123);
            assert_eq!(output.stdout.len(), 1024 * 1024);
            assert_eq!(output.stderr.len(), 1024 * 1024);
        }
    }
}
