use proto::{Numeric, Unsigned, Integer};

#[inline]
fn max<T: Numeric>(a: T, b: T) -> T {
    if a < b {
        b
    } else {
        a
    }
}

#[inline]
fn min<T: Numeric>(a: T, b: T) -> T {
    if a < b {
        a
    } else {
        b
    }
}

#[inline]
fn abs<T: Numeric>(a: T) -> T {
    when T: Unsigned {
        a
    } else {
        if a < (0 as T) {
            -a
        } else {
            a
        }
    }
}

#[inline]
fn widening_abs<T: Integer>(a: T) -> builtins::unsigned_of<T> {
    when T: Unsigned {
        a
    } else {
        if a < 0 {
            ((~a) as builtins::unsigned_of<T>) + 1
        } else {
            a as builtins::unsigned_of<T>
        }
    }
}

fn div_floor<T: Integer>(a: T, b: T) -> (T, T) {
    when T: Unsigned {
        (a / b, a % b)
    } else {
        let (q, r) = (a / b, a % b);
        if r != 0 && ((r < 0) != (b < 0)) {
            (q - 1, r + b)
        } else {
            (q, r)
        }
    }
}


#[cfg(test)]
mod tests {
    #[test]
    fn test_abs() {
        assert_eq!(abs::<usize>(0), 0);
        assert_eq!(abs::<isize>(-1), 1);
        assert_eq!(abs::<f64>(-1.0), 1.0);
        assert_eq!(abs::<f32>(-1.0), 1.0);
    }

    #[test]
    fn test_div_floor() {
        assert_eq!(div_floor(-3, -3), (1, 0));
        assert_eq!(div_floor(-2, -3), (0, -2));
        assert_eq!(div_floor(-1, -3), (0, -1));
        assert_eq!(div_floor(0, -3), (0, 0));
        assert_eq!(div_floor(1, -3), (-1, -2));
        assert_eq!(div_floor(2, -3), (-1, -1));
        assert_eq!(div_floor(3, -3), (-1, 0));
        assert_eq!(div_floor(-3, -2), (1, -1));
        assert_eq!(div_floor(-2, -2), (1, 0));
        assert_eq!(div_floor(-1, -2), (0, -1));
        assert_eq!(div_floor(0, -2), (0, 0));
        assert_eq!(div_floor(1, -2), (-1, -1));
        assert_eq!(div_floor(2, -2), (-1, 0));
        assert_eq!(div_floor(3, -2), (-2, -1));
        assert_eq!(div_floor(-3, -1), (3, 0));
        assert_eq!(div_floor(-2, -1), (2, 0));
        assert_eq!(div_floor(-1, -1), (1, 0));
        assert_eq!(div_floor(0, -1), (0, 0));
        assert_eq!(div_floor(1, -1), (-1, 0));
        assert_eq!(div_floor(2, -1), (-2, 0));
        assert_eq!(div_floor(3, -1), (-3, 0));
        assert_eq!(div_floor(-3, 1), (-3, 0));
        assert_eq!(div_floor(-2, 1), (-2, 0));
        assert_eq!(div_floor(-1, 1), (-1, 0));
        assert_eq!(div_floor(0, 1), (0, 0));
        assert_eq!(div_floor(1, 1), (1, 0));
        assert_eq!(div_floor(2, 1), (2, 0));
        assert_eq!(div_floor(3, 1), (3, 0));
        assert_eq!(div_floor(-3, 2), (-2, 1));
        assert_eq!(div_floor(-2, 2), (-1, 0));
        assert_eq!(div_floor(-1, 2), (-1, 1));
        assert_eq!(div_floor(0, 2), (0, 0));
        assert_eq!(div_floor(1, 2), (0, 1));
        assert_eq!(div_floor(2, 2), (1, 0));
        assert_eq!(div_floor(3, 2), (1, 1));
        assert_eq!(div_floor(-3, 3), (-1, 0));
        assert_eq!(div_floor(-2, 3), (-1, 1));
        assert_eq!(div_floor(-1, 3), (-1, 2));
        assert_eq!(div_floor(0, 3), (0, 0));
        assert_eq!(div_floor(1, 3), (0, 1));
        assert_eq!(div_floor(2, 3), (0, 2));
        assert_eq!(div_floor(3, 3), (1, 0));
    }
}
