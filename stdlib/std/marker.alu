//! Builtin protocols 
//!
//! These are built-in marker protocols that cannot be implemented by user code,
//! even though they contain no associated functions. They are handled specially
//! by the compiler.

/// Matches any type
#[lang(proto_any)] protocol Any {}

/// Matches zero-sized types (void, named function types, empty structs, empty arrays, ...)
#[lang(proto_zero_sized)] protocol ZeroSized {}

/// Matches all primitive types
#[lang(proto_primitive)] protocol Primitive {}

/// Integer and floating point types
#[lang(proto_numeric)] protocol Numeric {}

/// Integer types
#[lang(proto_integer)] protocol Integer {}

/// Floating point types
#[lang(proto_floating_point)] protocol FloatingPoint {}

/// Signed integer types (`i8`, `i16`, `i32`, ...)
#[lang(proto_signed)] protocol Signed {}

/// Unsigned integer types (`u8`, `u16`, `u32`, ...)
#[lang(proto_unsigned)] protocol Unsigned {}

/// All pointers
#[lang(proto_pointer)] protocol Pointer {}

/// All (fixed-size) arrays
#[lang(proto_array)] protocol Array {}

/// All tuples
#[lang(proto_tuple)] protocol Tuple {}

/// All named functions (including lambdas, but excluding closures)
#[lang(proto_named_function)] protocol NamedFunction {}

/// Function pointers
#[lang(proto_function_pointer)] protocol FunctionPointer {}

/// All callable objects (named functions, closures, and function pointers)
#[lang(proto_callable)] protocol Callable<Args: Tuple, Ret> {}

// These are mostly useful as type inference guides

/// Arrays with element type `T`
#[lang(proto_array_of)] protocol ArrayOf<T> {}

/// Pointers to `T` (regardless of mutability)
#[lang(proto_pointer_of)] protocol PointerOf<T> {}
