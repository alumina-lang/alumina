macro try($res) {
    let res = $res;
    if res.is_ok {
        res.inner.ok
    } else {
        return Result::err(res.inner.err)
    }
}

struct Result<T, E> {
    is_ok: bool,
    inner: ResultT<T, E>
}

union ResultT<T, E> {
    ok: T,
    err: E
}

impl Result<T, E> {
    use std::fmt::{write, Formatter, Formattable};

    #[force_inline]
    fn ok(ok: T) -> Result<T, E> {
        Result::<T, E> {
            is_ok: true, 
            inner: ResultT::<T, E> {
                ok: ok
            }
        }
    }

    #[force_inline]
    fn err(err: E) -> Result<T, E> {
        Result::<T, E> {
            is_ok: false, 
            inner: ResultT::<T, E> {
                err: err
            }
        }
    }

    fn unwrap(self: Result<T, E>) -> T {
        if self.is_ok {
            self.inner.ok
        } else {
            when E: Formattable<E> {
                panic!("unwrap on an err value: {}", self.inner.err)
            } else {
                panic!("unwrap on an err value")
            }
        }
    }

    fn unwrap_or(self: Result<T, E>, val: T) -> T {
        if self.is_ok {
            self.inner.ok
        } else {
            val
        }
    }

    fn unwrap_err(self: Result<T, E>) -> E {
        if !self.is_ok {
            self.inner.err
        } else {
            when T: Formattable<T> {
                panic!("unwrap_err on a ok value: {}", self.inner.ok)
            } else {
                panic!("unwrap_err on a ok value")
            }
        }
    }

    fn map<Tm>(self: Result<T, E>, func: fn(T) -> Tm) -> Result<Tm, E> {
        if self.is_ok {
            Result::ok(func(self.inner.ok))
        } else {
            Result::err(self.inner.err)
        }
    }

    fn map_err<Em>(self: Result<T, E>, func: fn(E) -> Em) -> Result<T, Em> {
        if self.is_ok {
            Result::ok(self.inner.ok)
        } else {
            Result::err(func(self.inner.err))
        }
    }
}

impl Result {
    use std::fmt::{write, Formatter, Formattable};
    use std::hash::{Hashable, Hasher};
    use std::cmp::{Equatable};

    fn fmt<T: Formattable<T, F>, E: Formattable<E, F>, F: Formatter<F>>(self: &Result<T, E>, formatter: &mut F) {
        if self.is_ok {
            write!(formatter, "ok({})", self.inner.ok)
        } else {
            write!(formatter, "err({})", self.inner.err)
        }
    }

    #[inline]
    fn hash<T: Hashable<T, H>, E: Hashable<E, H>, H: Hasher<H>>(self: &Result<T, E>, hasher: &mut H) {
        self.is_ok.hash(hasher);
        if self.is_ok {
            self.inner.ok.hash(hasher);
        } else {
            self.inner.err.hash(hasher);
        }
    }

    #[inline]
    fn equals<T: Equatable<T>, E: Equatable<E>>(lhs: &Result<T, E>, rhs: &Result<T, E>) -> bool {
        if lhs.is_ok && rhs.is_ok {
            lhs.inner.ok.equals(&rhs.inner.ok)
        } else if !lhs.is_ok && !rhs.is_ok {
            lhs.inner.err.equals(&rhs.inner.err)
        } else {
            false
        }
    }

    mixin<T: Equatable<T>, E: Equatable<E>> Equatable<Result<T, E>>;
}
