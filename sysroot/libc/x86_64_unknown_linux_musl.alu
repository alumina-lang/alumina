#![cfg(all(target_env = "musl", target_arch = "x86_64", target_os = "linux"))]

type int8_t = i8;
type int16_t = i16;
type int32_t = i32;
type int64_t = i64;
type uint8_t = u8;
type uint16_t = u16;
type uint32_t = u32;
type uint64_t = u64;
type c_schar = i8;
type c_uchar = u8;
type c_short = i16;
type c_ushort = u16;
type c_int = i32;
type c_uint = u32;
type c_float = f32;
type c_double = f64;
type c_longlong = i64;
type c_ulonglong = u64;
type intmax_t = i64;
type uintmax_t = u64;
type size_t = usize;
type ptrdiff_t = isize;
type intptr_t = isize;
type uintptr_t = usize;
type ssize_t = isize;
type pid_t = i32;
type in_addr_t = u32;
type in_port_t = u16;
type sighandler_t = size_t;
type cc_t = c_uchar;
type uid_t = u32;
type gid_t = u32;
enum DIR {}
type locale_t = &mut c_void;
struct group {
    gr_name: &mut c_char,
    gr_passwd: &mut c_char,
    gr_gid: gid_t,
    gr_mem: &mut &mut c_char,
}
struct utimbuf {
    actime: time_t,
    modtime: time_t,
}
struct timeval {
    tv_sec: time_t,
    tv_usec: suseconds_t,
}
struct timespec {
    tv_sec: time_t,

    tv_nsec: c_long,
}
struct rlimit {
    rlim_cur: rlim_t,
    rlim_max: rlim_t,
}
struct rusage {
    ru_utime: timeval,
    ru_stime: timeval,
    ru_maxrss: c_long,
    ru_ixrss: c_long,
    ru_idrss: c_long,
    ru_isrss: c_long,
    ru_minflt: c_long,
    ru_majflt: c_long,
    ru_nswap: c_long,
    ru_inblock: c_long,
    ru_oublock: c_long,
    ru_msgsnd: c_long,
    ru_msgrcv: c_long,
    ru_nsignals: c_long,
    ru_nvcsw: c_long,
    ru_nivcsw: c_long,

    __reserved: [c_long; 16],
}
struct ipv6_mreq {
    ipv6mr_multiaddr: in6_addr,

    ipv6mr_interface: c_uint,
}
struct hostent {
    h_name: &mut c_char,
    h_aliases: &mut &mut c_char,
    h_addrtype: c_int,
    h_length: c_int,
    h_addr_list: &mut &mut c_char,
}
struct iovec {
    iov_base: &mut c_void,
    iov_len: size_t,
}
struct pollfd {
    fd: c_int,
    events: c_short,
    revents: c_short,
}
struct winsize {
    ws_row: c_ushort,
    ws_col: c_ushort,
    ws_xpixel: c_ushort,
    ws_ypixel: c_ushort,
}
struct linger {
    l_onoff: c_int,
    l_linger: c_int,
}
struct sigval {
    sival_ptr: &mut c_void,
}
struct itimerval {
    it_interval: timeval,
    it_value: timeval,
}
struct tms {
    tms_utime: clock_t,
    tms_stime: clock_t,
    tms_cutime: clock_t,
    tms_cstime: clock_t,
}
struct servent {
    s_name: &mut c_char,
    s_aliases: &mut &mut c_char,
    s_port: c_int,
    s_proto: &mut c_char,
}
struct protoent {
    p_name: &mut c_char,
    p_aliases: &mut &mut c_char,
    p_proto: c_int,
}
const INT_MIN: c_int = -2147483648;
const INT_MAX: c_int = 2147483647;
const SIG_DFL: sighandler_t = 0 as sighandler_t;
const SIG_IGN: sighandler_t = 1 as sighandler_t;
const SIG_ERR: sighandler_t = !0 as sighandler_t;
const DT_UNKNOWN: u8 = 0;
const DT_FIFO: u8 = 1;
const DT_CHR: u8 = 2;
const DT_DIR: u8 = 4;
const DT_BLK: u8 = 6;
const DT_REG: u8 = 8;
const DT_LNK: u8 = 10;
const DT_SOCK: u8 = 12;
const FD_CLOEXEC: c_int = 0x1;
const USRQUOTA: c_int = 0;
const GRPQUOTA: c_int = 1;
const SIGIOT: c_int = 6;
const S_ISUID: mode_t = 0x800;
const S_ISGID: mode_t = 0x400;
const S_ISVTX: mode_t = 0x200;
const IF_NAMESIZE: size_t = 16;
const IFNAMSIZ: size_t = IF_NAMESIZE;
const LOG_EMERG: c_int = 0;
const LOG_ALERT: c_int = 1;
const LOG_CRIT: c_int = 2;
const LOG_ERR: c_int = 3;
const LOG_WARNING: c_int = 4;
const LOG_NOTICE: c_int = 5;
const LOG_INFO: c_int = 6;
const LOG_DEBUG: c_int = 7;
const LOG_KERN: c_int = 0;
const LOG_USER: c_int = 1 << 3;
const LOG_MAIL: c_int = 2 << 3;
const LOG_DAEMON: c_int = 3 << 3;
const LOG_AUTH: c_int = 4 << 3;
const LOG_SYSLOG: c_int = 5 << 3;
const LOG_LPR: c_int = 6 << 3;
const LOG_NEWS: c_int = 7 << 3;
const LOG_UUCP: c_int = 8 << 3;
const LOG_LOCAL0: c_int = 16 << 3;
const LOG_LOCAL1: c_int = 17 << 3;
const LOG_LOCAL2: c_int = 18 << 3;
const LOG_LOCAL3: c_int = 19 << 3;
const LOG_LOCAL4: c_int = 20 << 3;
const LOG_LOCAL5: c_int = 21 << 3;
const LOG_LOCAL6: c_int = 22 << 3;
const LOG_LOCAL7: c_int = 23 << 3;
const LOG_PID: c_int = 0x01;
const LOG_CONS: c_int = 0x02;
const LOG_ODELAY: c_int = 0x04;
const LOG_NDELAY: c_int = 0x08;
const LOG_NOWAIT: c_int = 0x10;
const LOG_PRIMASK: c_int = 7;
const LOG_FACMASK: c_int = 0x3f8;
const PRIO_MIN: c_int = -20;
const PRIO_MAX: c_int = 20;
const IPPROTO_ICMP: c_int = 1;
const IPPROTO_ICMPV6: c_int = 58;
const IPPROTO_TCP: c_int = 6;
const IPPROTO_UDP: c_int = 17;
const IPPROTO_IP: c_int = 0;
const IPPROTO_IPV6: c_int = 41;
const INADDR_LOOPBACK: in_addr_t = 2130706433;
const INADDR_ANY: in_addr_t = 0;
const INADDR_BROADCAST: in_addr_t = 4294967295;
const INADDR_NONE: in_addr_t = 4294967295;
const ARPOP_REQUEST: u16 = 1;
const ARPOP_REPLY: u16 = 2;
const ATF_COM: c_int = 0x02;
const ATF_PERM: c_int = 0x04;
const ATF_PUBL: c_int = 0x08;
const ATF_USETRAILERS: c_int = 0x10;
enum FILE {}
enum fpos_t {}
extern "C" fn isalnum(c: c_int) -> c_int;
extern "C" fn isalpha(c: c_int) -> c_int;
extern "C" fn iscntrl(c: c_int) -> c_int;
extern "C" fn isdigit(c: c_int) -> c_int;
extern "C" fn isgraph(c: c_int) -> c_int;
extern "C" fn islower(c: c_int) -> c_int;
extern "C" fn isprint(c: c_int) -> c_int;
extern "C" fn ispunct(c: c_int) -> c_int;
extern "C" fn isspace(c: c_int) -> c_int;
extern "C" fn isupper(c: c_int) -> c_int;
extern "C" fn isxdigit(c: c_int) -> c_int;
extern "C" fn isblank(c: c_int) -> c_int;
extern "C" fn tolower(c: c_int) -> c_int;
extern "C" fn toupper(c: c_int) -> c_int;
extern "C" fn qsort(base: &mut c_void, num: size_t, size: size_t, compar: fn(&c_void, &c_void) -> c_int);
extern "C" fn bsearch(key: &c_void, base: &c_void, num: size_t, size: size_t, compar: fn(&c_void, &c_void) -> c_int) -> &mut c_void;
extern "C" fn fopen(filename: &c_char, mode: &c_char) -> &mut FILE;
extern "C" fn freopen(filename: &c_char, mode: &c_char, file: &mut FILE) -> &mut FILE;
extern "C" fn fflush(file: &mut FILE) -> c_int;
extern "C" fn fclose(file: &mut FILE) -> c_int;
extern "C" fn remove(filename: &c_char) -> c_int;
extern "C" fn rename(oldname: &c_char, newname: &c_char) -> c_int;
extern "C" fn tmpfile() -> &mut FILE;
extern "C" fn setvbuf(stream: &mut FILE, buffer: &mut c_char, mode: c_int, size: size_t) -> c_int;
extern "C" fn setbuf(stream: &mut FILE, buf: &mut c_char);
extern "C" fn getchar() -> c_int;
extern "C" fn putchar(c: c_int) -> c_int;
extern "C" fn fgetc(stream: &mut FILE) -> c_int;
extern "C" fn fgets(buf: &mut c_char, n: c_int, stream: &mut FILE) -> &mut c_char;
extern "C" fn fputc(c: c_int, stream: &mut FILE) -> c_int;
extern "C" fn fputs(s: &c_char, stream: &mut FILE) -> c_int;
extern "C" fn puts(s: &c_char) -> c_int;
extern "C" fn ungetc(c: c_int, stream: &mut FILE) -> c_int;
extern "C" fn fread(ptr: &mut c_void, size: size_t, nobj: size_t, stream: &mut FILE) -> size_t;
extern "C" fn fwrite(ptr: &c_void, size: size_t, nobj: size_t, stream: &mut FILE) -> size_t;
extern "C" fn fseek(stream: &mut FILE, offset: c_long, whence: c_int) -> c_int;
extern "C" fn ftell(stream: &mut FILE) -> c_long;
extern "C" fn rewind(stream: &mut FILE);
extern "C" fn fgetpos(stream: &mut FILE, ptr: &mut fpos_t) -> c_int;
extern "C" fn fsetpos(stream: &mut FILE, ptr: &fpos_t) -> c_int;
extern "C" fn feof(stream: &mut FILE) -> c_int;
extern "C" fn ferror(stream: &mut FILE) -> c_int;
extern "C" fn clearerr(stream: &mut FILE);
extern "C" fn perror(s: &c_char);
extern "C" fn atof(s: &c_char) -> c_double;
extern "C" fn atoi(s: &c_char) -> c_int;
extern "C" fn atol(s: &c_char) -> c_long;
extern "C" fn atoll(s: &c_char) -> c_longlong;
extern "C" fn strtod(s: &c_char, endp: &mut &mut c_char) -> c_double;
extern "C" fn strtof(s: &c_char, endp: &mut &mut c_char) -> c_float;
extern "C" fn strtol(s: &c_char, endp: &mut &mut c_char, base: c_int) -> c_long;
extern "C" fn strtoll(s: &c_char, endp: &mut &mut c_char, base: c_int) -> c_longlong;
extern "C" fn strtoul(s: &c_char, endp: &mut &mut c_char, base: c_int) -> c_ulong;
extern "C" fn strtoull(s: &c_char, endp: &mut &mut c_char, base: c_int) -> c_ulonglong;
extern "C" fn calloc(nobj: size_t, size: size_t) -> &mut c_void;
extern "C" fn malloc(size: size_t) -> &mut c_void;
extern "C" fn realloc(p: &mut c_void, size: size_t) -> &mut c_void;
extern "C" fn free(p: &mut c_void);
extern "C" fn abort() -> !;
extern "C" fn exit(status: c_int) -> !;
extern "C" fn _exit(status: c_int) -> !;
extern "C" fn system(s: &c_char) -> c_int;
extern "C" fn getenv(s: &c_char) -> &mut c_char;
extern "C" fn strcpy(dst: &mut c_char, src: &c_char) -> &mut c_char;
extern "C" fn strncpy(dst: &mut c_char, src: &c_char, n: size_t) -> &mut c_char;
extern "C" fn stpcpy(dst: &mut c_char, src: &c_char) -> &mut c_char;
extern "C" fn strcat(s: &mut c_char, ct: &c_char) -> &mut c_char;
extern "C" fn strncat(s: &mut c_char, ct: &c_char, n: size_t) -> &mut c_char;
extern "C" fn strcmp(cs: &c_char, ct: &c_char) -> c_int;
extern "C" fn strncmp(cs: &c_char, ct: &c_char, n: size_t) -> c_int;
extern "C" fn strcoll(cs: &c_char, ct: &c_char) -> c_int;
extern "C" fn strchr(cs: &c_char, c: c_int) -> &mut c_char;
extern "C" fn strrchr(cs: &c_char, c: c_int) -> &mut c_char;
extern "C" fn strspn(cs: &c_char, ct: &c_char) -> size_t;
extern "C" fn strcspn(cs: &c_char, ct: &c_char) -> size_t;
extern "C" fn strdup(cs: &c_char) -> &mut c_char;
extern "C" fn strndup(cs: &c_char, n: size_t) -> &mut c_char;
extern "C" fn strpbrk(cs: &c_char, ct: &c_char) -> &mut c_char;
extern "C" fn strstr(cs: &c_char, ct: &c_char) -> &mut c_char;
extern "C" fn strcasecmp(s1: &c_char, s2: &c_char) -> c_int;
extern "C" fn strncasecmp(s1: &c_char, s2: &c_char, n: size_t) -> c_int;
extern "C" fn strlen(cs: &c_char) -> size_t;
extern "C" fn strnlen(cs: &c_char, maxlen: size_t) -> size_t;
extern "C" fn strerror(n: c_int) -> &mut c_char;
extern "C" fn strtok(s: &mut c_char, t: &c_char) -> &mut c_char;
extern "C" fn strtok_r(s: &mut c_char, t: &c_char, p: &mut &mut c_char) -> &mut c_char;
extern "C" fn strxfrm(s: &mut c_char, ct: &c_char, n: size_t) -> size_t;
extern "C" fn strsignal(sig: c_int) -> &mut c_char;
extern "C" fn wcslen(buf: &wchar_t) -> size_t;
extern "C" fn wcstombs(dest: &mut c_char, src: &wchar_t, n: size_t) -> size_t;
extern "C" fn memchr(cx: &c_void, c: c_int, n: size_t) -> &mut c_void;
extern "C" fn wmemchr(cx: &wchar_t, c: wchar_t, n: size_t) -> &mut wchar_t;
extern "C" fn memcmp(cx: &c_void, ct: &c_void, n: size_t) -> c_int;
extern "C" fn memcpy(dest: &mut c_void, src: &c_void, n: size_t) -> &mut c_void;
extern "C" fn memmove(dest: &mut c_void, src: &c_void, n: size_t) -> &mut c_void;
extern "C" fn memset(dest: &mut c_void, c: c_int, n: size_t) -> &mut c_void;
extern "C" fn getpwnam(name: &c_char) -> &mut passwd;
extern "C" fn getpwuid(uid: uid_t) -> &mut passwd;
extern "C" fn fprintf(stream: &mut FILE, format: &c_char, ...) -> c_int;
extern "C" fn printf(format: &c_char, ...) -> c_int;
extern "C" fn snprintf(s: &mut c_char, n: size_t, format: &c_char, ...) -> c_int;
extern "C" fn sprintf(s: &mut c_char, format: &c_char, ...) -> c_int;
#[link_name("__isoc99_fscanf")]
extern "C" fn fscanf(stream: &mut FILE, format: &c_char, ...) -> c_int;
#[link_name("__isoc99_scanf")]
extern "C" fn scanf(format: &c_char, ...) -> c_int;
#[link_name("__isoc99_sscanf")]
extern "C" fn sscanf(s: &c_char, format: &c_char, ...) -> c_int;
extern "C" fn getchar_unlocked() -> c_int;
extern "C" fn putchar_unlocked(c: c_int) -> c_int;
extern "C" fn socket(domain: c_int, ty: c_int, protocol: c_int) -> c_int;
extern "C" fn connect(socket: c_int, address: &sockaddr, len: socklen_t) -> c_int;
extern "C" fn listen(socket: c_int, backlog: c_int) -> c_int;
extern "C" fn accept(socket: c_int, address: &mut sockaddr, address_len: &mut socklen_t) -> c_int;
extern "C" fn getpeername(socket: c_int, address: &mut sockaddr, address_len: &mut socklen_t) -> c_int;
extern "C" fn getsockname(socket: c_int, address: &mut sockaddr, address_len: &mut socklen_t) -> c_int;
extern "C" fn setsockopt(socket: c_int, level: c_int, name: c_int, value: &c_void, option_len: socklen_t) -> c_int;
extern "C" fn socketpair(domain: c_int, type_: c_int, protocol: c_int, socket_vector: &mut c_int) -> c_int;
extern "C" fn sendto(socket: c_int, buf: &c_void, len: size_t, flags: c_int, addr: &sockaddr, addrlen: socklen_t) -> ssize_t;
extern "C" fn shutdown(socket: c_int, how: c_int) -> c_int;
extern "C" fn chmod(path: &c_char, mode: mode_t) -> c_int;
extern "C" fn fchmod(fd: c_int, mode: mode_t) -> c_int;
extern "C" fn fstat(fildes: c_int, buf: &mut stat_t) -> c_int;
extern "C" fn mkdir(path: &c_char, mode: mode_t) -> c_int;
extern "C" fn stat(path: &c_char, buf: &mut stat_t) -> c_int;
extern "C" fn pclose(stream: &mut FILE) -> c_int;
extern "C" fn fdopen(fd: c_int, mode: &c_char) -> &mut FILE;
extern "C" fn fileno(stream: &mut FILE) -> c_int;
extern "C" fn open(path: &c_char, oflag: c_int, ...) -> c_int;
extern "C" fn creat(path: &c_char, mode: mode_t) -> c_int;
extern "C" fn fcntl(fd: c_int, cmd: c_int, ...) -> c_int;
extern "C" fn opendir(dirname: &c_char) -> &mut DIR;
extern "C" fn readdir(dirp: &mut DIR) -> &mut dirent;
extern "C" fn closedir(dirp: &mut DIR) -> c_int;
extern "C" fn rewinddir(dirp: &mut DIR);
extern "C" fn fchmodat(dirfd: c_int, pathname: &c_char, mode: mode_t, flags: c_int) -> c_int;
extern "C" fn fchown(fd: c_int, owner: uid_t, group: gid_t) -> c_int;
extern "C" fn fchownat(dirfd: c_int, pathname: &c_char, owner: uid_t, group: gid_t, flags: c_int) -> c_int;
extern "C" fn fstatat(dirfd: c_int, pathname: &c_char, buf: &mut stat_t, flags: c_int) -> c_int;
extern "C" fn linkat(olddirfd: c_int, oldpath: &c_char, newdirfd: c_int, newpath: &c_char, flags: c_int) -> c_int;
extern "C" fn renameat(olddirfd: c_int, oldpath: &c_char, newdirfd: c_int, newpath: &c_char) -> c_int;
extern "C" fn symlinkat(target: &c_char, newdirfd: c_int, linkpath: &c_char) -> c_int;
extern "C" fn unlinkat(dirfd: c_int, pathname: &c_char, flags: c_int) -> c_int;
extern "C" fn access(path: &c_char, amode: c_int) -> c_int;
extern "C" fn alarm(seconds: c_uint) -> c_uint;
extern "C" fn chdir(dir: &c_char) -> c_int;
extern "C" fn fchdir(dirfd: c_int) -> c_int;
extern "C" fn chown(path: &c_char, uid: uid_t, gid: gid_t) -> c_int;
extern "C" fn lchown(path: &c_char, uid: uid_t, gid: gid_t) -> c_int;
extern "C" fn close(fd: c_int) -> c_int;
extern "C" fn dup(fd: c_int) -> c_int;
extern "C" fn dup2(src: c_int, dst: c_int) -> c_int;
extern "C" fn execl(path: &c_char, arg0: &c_char, ...) -> c_int;
extern "C" fn execle(path: &c_char, arg0: &c_char, ...) -> c_int;
extern "C" fn execlp(file: &c_char, arg0: &c_char, ...) -> c_int;
extern "C" fn execv(prog: &c_char, argv: &&c_char) -> c_int;
extern "C" fn execve(prog: &c_char, argv: &&c_char, envp: &&c_char) -> c_int;
extern "C" fn execvp(c: &c_char, argv: &&c_char) -> c_int;
extern "C" fn fork() -> pid_t;
extern "C" fn fpathconf(filedes: c_int, name: c_int) -> c_long;
extern "C" fn getcwd(buf: &mut c_char, size: size_t) -> &mut c_char;
extern "C" fn getegid() -> gid_t;
extern "C" fn geteuid() -> uid_t;
extern "C" fn getgid() -> gid_t;
extern "C" fn getgroups(ngroups_max: c_int, groups: &mut gid_t) -> c_int;
extern "C" fn getlogin() -> &mut c_char;
extern "C" fn getopt(argc: c_int, argv: &&mut c_char, optstr: &c_char) -> c_int;
extern "C" fn getpgid(pid: pid_t) -> pid_t;
extern "C" fn getpgrp() -> pid_t;
extern "C" fn getpid() -> pid_t;
extern "C" fn getppid() -> pid_t;
extern "C" fn getuid() -> uid_t;
extern "C" fn isatty(fd: c_int) -> c_int;
extern "C" fn link(src: &c_char, dst: &c_char) -> c_int;
extern "C" fn lseek(fd: c_int, offset: off_t, whence: c_int) -> off_t;
extern "C" fn pathconf(path: &c_char, name: c_int) -> c_long;
extern "C" fn pipe(fds: &mut c_int) -> c_int;
extern "C" fn posix_memalign(memptr: &mut &mut c_void, align: size_t, size: size_t) -> c_int;
extern "C" fn read(fd: c_int, buf: &mut c_void, count: size_t) -> ssize_t;
extern "C" fn rmdir(path: &c_char) -> c_int;
extern "C" fn seteuid(uid: uid_t) -> c_int;
extern "C" fn setegid(gid: gid_t) -> c_int;
extern "C" fn setgid(gid: gid_t) -> c_int;
extern "C" fn setpgid(pid: pid_t, pgid: pid_t) -> c_int;
extern "C" fn setsid() -> pid_t;
extern "C" fn setuid(uid: uid_t) -> c_int;
extern "C" fn setreuid(ruid: uid_t, euid: uid_t) -> c_int;
extern "C" fn setregid(rgid: gid_t, egid: gid_t) -> c_int;
extern "C" fn sleep(secs: c_uint) -> c_uint;
extern "C" fn nanosleep(rqtp: &timespec, rmtp: &mut timespec) -> c_int;
extern "C" fn tcgetpgrp(fd: c_int) -> pid_t;
extern "C" fn tcsetpgrp(fd: c_int, pgrp: pid_t) -> c_int;
extern "C" fn ttyname(fd: c_int) -> &mut c_char;
extern "C" fn ttyname_r(fd: c_int, buf: &mut c_char, buflen: size_t) -> c_int;
extern "C" fn unlink(c: &c_char) -> c_int;
extern "C" fn wait(status: &mut c_int) -> pid_t;
extern "C" fn waitpid(pid: pid_t, status: &mut c_int, options: c_int) -> pid_t;
extern "C" fn write(fd: c_int, buf: &c_void, count: size_t) -> ssize_t;
extern "C" fn pread(fd: c_int, buf: &mut c_void, count: size_t, offset: off_t) -> ssize_t;
extern "C" fn pwrite(fd: c_int, buf: &c_void, count: size_t, offset: off_t) -> ssize_t;
extern "C" fn umask(mask: mode_t) -> mode_t;
extern "C" fn utime(file: &c_char, buf: &utimbuf) -> c_int;
extern "C" fn kill(pid: pid_t, sig: c_int) -> c_int;
extern "C" fn killpg(pgrp: pid_t, sig: c_int) -> c_int;
extern "C" fn mlock(addr: &c_void, len: size_t) -> c_int;
extern "C" fn munlock(addr: &c_void, len: size_t) -> c_int;
extern "C" fn mlockall(flags: c_int) -> c_int;
extern "C" fn munlockall() -> c_int;
extern "C" fn mmap(addr: &mut c_void, len: size_t, prot: c_int, flags: c_int, fd: c_int, offset: off_t) -> &mut c_void;
extern "C" fn munmap(addr: &mut c_void, len: size_t) -> c_int;
extern "C" fn if_nametoindex(ifname: &c_char) -> c_uint;
extern "C" fn if_indextoname(ifindex: c_uint, ifname: &mut c_char) -> &mut c_char;
extern "C" fn lstat(path: &c_char, buf: &mut stat_t) -> c_int;
extern "C" fn fsync(fd: c_int) -> c_int;
extern "C" fn setenv(name: &c_char, val: &c_char, overwrite: c_int) -> c_int;
extern "C" fn unsetenv(name: &c_char) -> c_int;
extern "C" fn symlink(path1: &c_char, path2: &c_char) -> c_int;
extern "C" fn truncate(path: &c_char, length: off_t) -> c_int;
extern "C" fn ftruncate(fd: c_int, length: off_t) -> c_int;
extern "C" fn signal(signum: c_int, handler: sighandler_t) -> sighandler_t;
extern "C" fn getrusage(resource: c_int, usage: &mut rusage) -> c_int;
extern "C" fn realpath(pathname: &c_char, resolved: &mut c_char) -> &mut c_char;
extern "C" fn flock(fd: c_int, operation: c_int) -> c_int;
extern "C" fn times(buf: &mut tms) -> clock_t;
extern "C" fn pthread_self() -> pthread_t;
extern "C" fn pthread_join(native: pthread_t, value: &mut &mut c_void) -> c_int;
extern "C" fn pthread_exit(value: &mut c_void) -> !;
extern "C" fn pthread_attr_init(attr: &mut pthread_attr_t) -> c_int;
extern "C" fn pthread_attr_destroy(attr: &mut pthread_attr_t) -> c_int;
extern "C" fn pthread_attr_setstacksize(attr: &mut pthread_attr_t, stack_size: size_t) -> c_int;
extern "C" fn pthread_attr_setdetachstate(attr: &mut pthread_attr_t, state: c_int) -> c_int;
extern "C" fn pthread_detach(thread: pthread_t) -> c_int;
extern "C" fn sched_yield() -> c_int;
extern "C" fn pthread_key_create(key: &mut pthread_key_t, dtor: fn(&mut c_void)) -> c_int;
extern "C" fn pthread_key_delete(key: pthread_key_t) -> c_int;
extern "C" fn pthread_getspecific(key: pthread_key_t) -> &mut c_void;
extern "C" fn pthread_setspecific(key: pthread_key_t, value: &c_void) -> c_int;
extern "C" fn pthread_mutex_init(lock: &mut pthread_mutex_t, attr: &pthread_mutexattr_t) -> c_int;
extern "C" fn pthread_mutex_destroy(lock: &mut pthread_mutex_t) -> c_int;
extern "C" fn pthread_mutex_lock(lock: &mut pthread_mutex_t) -> c_int;
extern "C" fn pthread_mutex_trylock(lock: &mut pthread_mutex_t) -> c_int;
extern "C" fn pthread_mutex_unlock(lock: &mut pthread_mutex_t) -> c_int;
extern "C" fn pthread_mutexattr_init(attr: &mut pthread_mutexattr_t) -> c_int;
extern "C" fn pthread_mutexattr_destroy(attr: &mut pthread_mutexattr_t) -> c_int;
extern "C" fn pthread_mutexattr_settype(attr: &mut pthread_mutexattr_t, _type: c_int) -> c_int;
extern "C" fn pthread_cond_init(cond: &mut pthread_cond_t, attr: &pthread_condattr_t) -> c_int;
extern "C" fn pthread_cond_wait(cond: &mut pthread_cond_t, lock: &mut pthread_mutex_t) -> c_int;
extern "C" fn pthread_cond_timedwait(cond: &mut pthread_cond_t, lock: &mut pthread_mutex_t, abstime: &timespec) -> c_int;
extern "C" fn pthread_cond_signal(cond: &mut pthread_cond_t) -> c_int;
extern "C" fn pthread_cond_broadcast(cond: &mut pthread_cond_t) -> c_int;
extern "C" fn pthread_cond_destroy(cond: &mut pthread_cond_t) -> c_int;
extern "C" fn pthread_condattr_init(attr: &mut pthread_condattr_t) -> c_int;
extern "C" fn pthread_condattr_destroy(attr: &mut pthread_condattr_t) -> c_int;
extern "C" fn pthread_rwlock_init(lock: &mut pthread_rwlock_t, attr: &pthread_rwlockattr_t) -> c_int;
extern "C" fn pthread_rwlock_destroy(lock: &mut pthread_rwlock_t) -> c_int;
extern "C" fn pthread_rwlock_rdlock(lock: &mut pthread_rwlock_t) -> c_int;
extern "C" fn pthread_rwlock_tryrdlock(lock: &mut pthread_rwlock_t) -> c_int;
extern "C" fn pthread_rwlock_wrlock(lock: &mut pthread_rwlock_t) -> c_int;
extern "C" fn pthread_rwlock_trywrlock(lock: &mut pthread_rwlock_t) -> c_int;
extern "C" fn pthread_rwlock_unlock(lock: &mut pthread_rwlock_t) -> c_int;
extern "C" fn pthread_rwlockattr_init(attr: &mut pthread_rwlockattr_t) -> c_int;
extern "C" fn pthread_rwlockattr_destroy(attr: &mut pthread_rwlockattr_t) -> c_int;
extern "C" fn getsockopt(sockfd: c_int, level: c_int, optname: c_int, optval: &mut c_void, optlen: &mut socklen_t) -> c_int;
extern "C" fn raise(signum: c_int) -> c_int;
extern "C" fn utimes(filename: &c_char, times: &timeval) -> c_int;
extern "C" fn dlopen(filename: &c_char, flag: c_int) -> &mut c_void;
extern "C" fn dlerror() -> &mut c_char;
extern "C" fn dlsym(handle: &mut c_void, symbol: &c_char) -> &mut c_void;
extern "C" fn dlclose(handle: &mut c_void) -> c_int;
extern "C" fn getaddrinfo(node: &c_char, service: &c_char, hints: &addrinfo, res: &mut &mut addrinfo) -> c_int;
extern "C" fn freeaddrinfo(res: &mut addrinfo);
extern "C" fn hstrerror(errcode: c_int) -> &c_char;
extern "C" fn gai_strerror(errcode: c_int) -> &c_char;
extern "C" fn res_init() -> c_int;
extern "C" fn gmtime_r(time_p: &time_t, result: &mut tm) -> &mut tm;
extern "C" fn localtime_r(time_p: &time_t, result: &mut tm) -> &mut tm;
extern "C" fn mktime(tm_: &mut tm) -> time_t;
extern "C" fn time(time: &mut time_t) -> time_t;
extern "C" fn gmtime(time_p: &time_t) -> &mut tm;
extern "C" fn localtime(time_p: &time_t) -> &mut tm;
extern "C" fn difftime(time1: time_t, time0: time_t) -> c_double;
extern "C" fn timegm(tm_: &mut tm) -> time_t;
extern "C" fn mknod(pathname: &c_char, mode: mode_t, dev: dev_t) -> c_int;
extern "C" fn gethostname(name: &mut c_char, len: size_t) -> c_int;
extern "C" fn endservent();
extern "C" fn getservbyname(name: &c_char, proto: &c_char) -> &mut servent;
extern "C" fn getservbyport(port: c_int, proto: &c_char) -> &mut servent;
extern "C" fn getservent() -> &mut servent;
extern "C" fn setservent(stayopen: c_int);
extern "C" fn getprotobyname(name: &c_char) -> &mut protoent;
extern "C" fn getprotobynumber(proto: c_int) -> &mut protoent;
extern "C" fn chroot(name: &c_char) -> c_int;
extern "C" fn usleep(secs: c_uint) -> c_int;
extern "C" fn send(socket: c_int, buf: &c_void, len: size_t, flags: c_int) -> ssize_t;
extern "C" fn recv(socket: c_int, buf: &mut c_void, len: size_t, flags: c_int) -> ssize_t;
extern "C" fn putenv(string: &mut c_char) -> c_int;
extern "C" fn poll(fds: &mut pollfd, nfds: nfds_t, timeout: c_int) -> c_int;
extern "C" fn select(nfds: c_int, readfds: &mut fd_set, writefds: &mut fd_set, errorfds: &mut fd_set, timeout: &mut timeval) -> c_int;
extern "C" fn setlocale(category: c_int, locale: &c_char) -> &mut c_char;
extern "C" fn localeconv() -> &mut lconv;
extern "C" fn sem_wait(sem: &mut sem_t) -> c_int;
extern "C" fn sem_trywait(sem: &mut sem_t) -> c_int;
extern "C" fn sem_post(sem: &mut sem_t) -> c_int;
extern "C" fn statvfs(path: &c_char, buf: &mut statvfs_t) -> c_int;
extern "C" fn fstatvfs(fd: c_int, buf: &mut statvfs_t) -> c_int;
extern "C" fn sigemptyset(set: &mut sigset_t) -> c_int;
extern "C" fn sigaddset(set: &mut sigset_t, signum: c_int) -> c_int;
extern "C" fn sigfillset(set: &mut sigset_t) -> c_int;
extern "C" fn sigdelset(set: &mut sigset_t, signum: c_int) -> c_int;
extern "C" fn sigismember(set: &sigset_t, signum: c_int) -> c_int;
extern "C" fn sigprocmask(how: c_int, set: &sigset_t, oldset: &mut sigset_t) -> c_int;
extern "C" fn sigpending(set: &mut sigset_t) -> c_int;
extern "C" fn sysconf(name: c_int) -> c_long;
extern "C" fn mkfifo(path: &c_char, mode: mode_t) -> c_int;
extern "C" fn fseeko(stream: &mut FILE, offset: off_t, whence: c_int) -> c_int;
extern "C" fn ftello(stream: &mut FILE) -> off_t;
extern "C" fn tcdrain(fd: c_int) -> c_int;
extern "C" fn cfgetispeed(termios_: &termios) -> speed_t;
extern "C" fn cfgetospeed(termios_: &termios) -> speed_t;
extern "C" fn cfsetispeed(termios_: &mut termios, speed: speed_t) -> c_int;
extern "C" fn cfsetospeed(termios_: &mut termios, speed: speed_t) -> c_int;
extern "C" fn tcgetattr(fd: c_int, termios_: &mut termios) -> c_int;
extern "C" fn tcsetattr(fd: c_int, optional_actions: c_int, termios_: &termios) -> c_int;
extern "C" fn tcflow(fd: c_int, action: c_int) -> c_int;
extern "C" fn tcflush(fd: c_int, action: c_int) -> c_int;
extern "C" fn tcgetsid(fd: c_int) -> pid_t;
extern "C" fn tcsendbreak(fd: c_int, duration: c_int) -> c_int;
extern "C" fn mkstemp(template: &mut c_char) -> c_int;
extern "C" fn mkdtemp(template: &mut c_char) -> &mut c_char;
extern "C" fn tmpnam(ptr: &mut c_char) -> &mut c_char;
extern "C" fn openlog(ident: &c_char, logopt: c_int, facility: c_int);
extern "C" fn closelog();
extern "C" fn setlogmask(maskpri: c_int) -> c_int;
extern "C" fn syslog(priority: c_int, message: &c_char, ...);
extern "C" fn nice(incr: c_int) -> c_int;
extern "C" fn grantpt(fd: c_int) -> c_int;
extern "C" fn posix_openpt(flags: c_int) -> c_int;
extern "C" fn ptsname(fd: c_int) -> &mut c_char;
extern "C" fn unlockpt(fd: c_int) -> c_int;
extern "C" fn strcasestr(cs: &c_char, ct: &c_char) -> &mut c_char;
extern "C" fn getline(lineptr: &mut &mut c_char, n: &mut size_t, stream: &mut FILE) -> ssize_t;
extern "C" fn lockf(fd: c_int, cmd: c_int, len: off_t) -> c_int;
extern "C" fn adjtime(delta: &timeval, olddelta: &mut timeval) -> c_int;
extern "C" fn stpncpy(dst: &mut c_char, src: &c_char, n: size_t) -> &mut c_char;
extern "C" fn dladdr(addr: &c_void, info: &mut Dl_info) -> c_int;
extern "C" fn open_wmemstream(ptr: &mut &mut wchar_t, sizeloc: &mut size_t) -> &mut FILE;
extern "C" fn getsid(pid: pid_t) -> pid_t;
extern "C" fn pause() -> c_int;
extern "C" fn mkdirat(dirfd: c_int, pathname: &c_char, mode: mode_t) -> c_int;
extern "C" fn openat(dirfd: c_int, pathname: &c_char, flags: c_int, ...) -> c_int;
extern "C" fn fdopendir(fd: c_int) -> &mut DIR;
extern "C" fn readdir_r(dirp: &mut DIR, entry: &mut dirent, result: &mut &mut dirent) -> c_int;
extern "C" fn readlinkat(dirfd: c_int, pathname: &c_char, buf: &mut c_char, bufsiz: size_t) -> ssize_t;
extern "C" fn fmemopen(buf: &mut c_void, size: size_t, mode: &c_char) -> &mut FILE;
extern "C" fn open_memstream(ptr: &mut &mut c_char, sizeloc: &mut size_t) -> &mut FILE;
extern "C" fn atexit(cb: fn()) -> c_int;
extern "C" fn sigaction(signum: c_int, act: &sigaction_t, oldact: &mut sigaction_t) -> c_int;
extern "C" fn readlink(path: &c_char, buf: &mut c_char, bufsz: size_t) -> ssize_t;
extern "C" fn pselect(nfds: c_int, readfds: &mut fd_set, writefds: &mut fd_set, errorfds: &mut fd_set, timeout: &timespec, sigmask: &sigset_t) -> c_int;
extern "C" fn cfmakeraw(termios_: &mut termios);
extern "C" fn cfsetspeed(termios_: &mut termios, speed: speed_t) -> c_int;
type sa_family_t = u16;
type speed_t = c_uint;
type tcflag_t = c_uint;
type clockid_t = c_int;
type timer_t = &mut c_void;
type key_t = c_int;
type id_t = c_uint;
enum timezone {}
struct in_addr {
    s_addr: in_addr_t,
}
struct ip_mreq {
    imr_multiaddr: in_addr,
    imr_interface: in_addr,
}
struct ip_mreqn {
    imr_multiaddr: in_addr,
    imr_address: in_addr,
    imr_ifindex: c_int,
}
struct ip_mreq_source {
    imr_multiaddr: in_addr,
    imr_interface: in_addr,
    imr_sourceaddr: in_addr,
}
struct sockaddr {
    sa_family: sa_family_t,
    sa_data: [c_char; 14],
}
struct sockaddr_in {
    sin_family: sa_family_t,
    sin_port: in_port_t,
    sin_addr: in_addr,
    sin_zero: [u8; 8],
}
struct sockaddr_in6 {
    sin6_family: sa_family_t,
    sin6_port: in_port_t,
    sin6_flowinfo: u32,
    sin6_addr: in6_addr,
    sin6_scope_id: u32,
}
struct addrinfo {
    ai_flags: c_int,
    ai_family: c_int,
    ai_socktype: c_int,
    ai_protocol: c_int,
    ai_addrlen: socklen_t,

    ai_addr: &mut sockaddr,
    ai_canonname: &mut c_char,
    ai_next: &mut addrinfo,
}
struct sockaddr_ll {
    sll_family: c_ushort,
    sll_protocol: c_ushort,
    sll_ifindex: c_int,
    sll_hatype: c_ushort,
    sll_pkttype: c_uchar,
    sll_halen: c_uchar,
    sll_addr: [c_uchar; 8],
}
struct fd_set {
    fds_bits: [c_ulong; FD_SETSIZE / ULONG_SIZE],
}
struct tm {
    tm_sec: c_int,
    tm_min: c_int,
    tm_hour: c_int,
    tm_mday: c_int,
    tm_mon: c_int,
    tm_year: c_int,
    tm_wday: c_int,
    tm_yday: c_int,
    tm_isdst: c_int,
    tm_gmtoff: c_long,
    tm_zone: &c_char,
}
struct sched_param {
    sched_priority: c_int,

    sched_ss_low_priority: c_int,

    sched_ss_repl_period: timespec,

    sched_ss_init_budget: timespec,

    sched_ss_max_repl: c_int,
}
struct Dl_info {
    dli_fname: &c_char,
    dli_fbase: &mut c_void,
    dli_sname: &c_char,
    dli_saddr: &mut c_void,
}
struct lconv {
    decimal_point: &mut c_char,
    thousands_sep: &mut c_char,
    grouping: &mut c_char,
    int_curr_symbol: &mut c_char,
    currency_symbol: &mut c_char,
    mon_decimal_point: &mut c_char,
    mon_thousands_sep: &mut c_char,
    mon_grouping: &mut c_char,
    positive_sign: &mut c_char,
    negative_sign: &mut c_char,
    int_frac_digits: c_char,
    frac_digits: c_char,
    p_cs_precedes: c_char,
    p_sep_by_space: c_char,
    n_cs_precedes: c_char,
    n_sep_by_space: c_char,
    p_sign_posn: c_char,
    n_sign_posn: c_char,
    int_p_cs_precedes: c_char,
    int_p_sep_by_space: c_char,
    int_n_cs_precedes: c_char,
    int_n_sep_by_space: c_char,
    int_p_sign_posn: c_char,
    int_n_sign_posn: c_char,
}
struct in_pktinfo {
    ipi_ifindex: c_int,
    ipi_spec_dst: in_addr,
    ipi_addr: in_addr,
}
struct ifaddrs {
    ifa_next: &mut ifaddrs,
    ifa_name: &mut c_char,
    ifa_flags: c_uint,
    ifa_addr: &mut sockaddr,
    ifa_netmask: &mut sockaddr,
    ifa_ifu: &mut sockaddr,
    ifa_data: &mut c_void,
}
struct in6_rtmsg {
    rtmsg_dst: in6_addr,
    rtmsg_src: in6_addr,
    rtmsg_gateway: in6_addr,
    rtmsg_type: u32,
    rtmsg_dst_len: u16,
    rtmsg_src_len: u16,
    rtmsg_metric: u32,
    rtmsg_info: c_ulong,
    rtmsg_flags: u32,
    rtmsg_ifindex: c_int,
}
struct arpreq {
    arp_pa: sockaddr,
    arp_ha: sockaddr,
    arp_flags: c_int,
    arp_netmask: sockaddr,
    arp_dev: [c_char; 16],
}
struct arpreq_old {
    arp_pa: sockaddr,
    arp_ha: sockaddr,
    arp_flags: c_int,
    arp_netmask: sockaddr,
}
struct arphdr {
    ar_hrd: u16,
    ar_pro: u16,
    ar_hln: u8,
    ar_pln: u8,
    ar_op: u16,
}
struct mmsghdr {
    msg_hdr: msghdr,
    msg_len: c_uint,
}
#[packed]
struct epoll_event {
    events: u32,
    u64: u64,
}
struct sockaddr_un {
    sun_family: sa_family_t,
    sun_path: [c_char; 108],
}
struct sockaddr_storage {
    ss_family: sa_family_t,

    __ss_pad2: [u8; 128 - 2 - 8],
    __ss_align: size_t,
}
struct utsname {
    sysname: [c_char; 65],
    nodename: [c_char; 65],
    release: [c_char; 65],
    version: [c_char; 65],
    machine: [c_char; 65],
    domainname: [c_char; 65],
}
struct sigevent {
    sigev_value: sigval,
    sigev_signo: c_int,
    sigev_notify: c_int,
    sigev_notify_thread_id: c_int,

    __unused1: [c_int; 11],
}
const ULONG_SIZE: usize = 64;
const EXIT_FAILURE: c_int = 1;
const EXIT_SUCCESS: c_int = 0;
const RAND_MAX: c_int = 2147483647;
const EOF: c_int = -1;
const SEEK_SET: c_int = 0;
const SEEK_CUR: c_int = 1;
const SEEK_END: c_int = 2;
const _IOFBF: c_int = 0;
const _IONBF: c_int = 2;
const _IOLBF: c_int = 1;
const F_DUPFD: c_int = 0;
const F_GETFD: c_int = 1;
const F_SETFD: c_int = 2;
const F_GETFL: c_int = 3;
const F_SETFL: c_int = 4;
const F_SETLEASE: c_int = 1024;
const F_GETLEASE: c_int = 1025;
const F_NOTIFY: c_int = 1026;
const F_CANCELLK: c_int = 1029;
const F_DUPFD_CLOEXEC: c_int = 1030;
const F_SETPIPE_SZ: c_int = 1031;
const F_GETPIPE_SZ: c_int = 1032;
const F_ADD_SEALS: c_int = 1033;
const F_GET_SEALS: c_int = 1034;
const F_SEAL_SEAL: c_int = 0x0001;
const F_SEAL_SHRINK: c_int = 0x0002;
const F_SEAL_GROW: c_int = 0x0004;
const F_SEAL_WRITE: c_int = 0x0008;
const SIGTRAP: c_int = 5;
const PTHREAD_CREATE_JOINABLE: c_int = 0;
const PTHREAD_CREATE_DETACHED: c_int = 1;
const CLOCK_REALTIME: clockid_t = 0;
const CLOCK_MONOTONIC: clockid_t = 1;
const CLOCK_PROCESS_CPUTIME_ID: clockid_t = 2;
const CLOCK_THREAD_CPUTIME_ID: clockid_t = 3;
const CLOCK_MONOTONIC_RAW: clockid_t = 4;
const CLOCK_REALTIME_COARSE: clockid_t = 5;
const CLOCK_MONOTONIC_COARSE: clockid_t = 6;
const CLOCK_BOOTTIME: clockid_t = 7;
const CLOCK_REALTIME_ALARM: clockid_t = 8;
const CLOCK_BOOTTIME_ALARM: clockid_t = 9;
const CLOCK_TAI: clockid_t = 11;
const TIMER_ABSTIME: c_int = 1;
const RUSAGE_SELF: c_int = 0;
const O_RDONLY: c_int = 0;
const O_WRONLY: c_int = 1;
const O_RDWR: c_int = 2;
const SOCK_CLOEXEC: c_int = O_CLOEXEC;
const S_IFIFO: mode_t = 4096;
const S_IFCHR: mode_t = 8192;
const S_IFBLK: mode_t = 24576;
const S_IFDIR: mode_t = 16384;
const S_IFREG: mode_t = 32768;
const S_IFLNK: mode_t = 40960;
const S_IFSOCK: mode_t = 49152;
const S_IFMT: mode_t = 61440;
const S_IRWXU: mode_t = 448;
const S_IXUSR: mode_t = 64;
const S_IWUSR: mode_t = 128;
const S_IRUSR: mode_t = 256;
const S_IRWXG: mode_t = 56;
const S_IXGRP: mode_t = 8;
const S_IWGRP: mode_t = 16;
const S_IRGRP: mode_t = 32;
const S_IRWXO: mode_t = 7;
const S_IXOTH: mode_t = 1;
const S_IWOTH: mode_t = 2;
const S_IROTH: mode_t = 4;
const F_OK: c_int = 0;
const R_OK: c_int = 4;
const W_OK: c_int = 2;
const X_OK: c_int = 1;
const STDIN_FILENO: c_int = 0;
const STDOUT_FILENO: c_int = 1;
const STDERR_FILENO: c_int = 2;
const SIGHUP: c_int = 1;
const SIGINT: c_int = 2;
const SIGQUIT: c_int = 3;
const SIGILL: c_int = 4;
const SIGABRT: c_int = 6;
const SIGFPE: c_int = 8;
const SIGKILL: c_int = 9;
const SIGSEGV: c_int = 11;
const SIGPIPE: c_int = 13;
const SIGALRM: c_int = 14;
const SIGTERM: c_int = 15;
const PROT_NONE: c_int = 0;
const PROT_READ: c_int = 1;
const PROT_WRITE: c_int = 2;
const PROT_EXEC: c_int = 4;
const XATTR_CREATE: c_int = 0x1;
const XATTR_REPLACE: c_int = 0x2;
const RLIM64_INFINITY: rlim64_t = !0;
const LC_CTYPE: c_int = 0;
const LC_NUMERIC: c_int = 1;
const LC_TIME: c_int = 2;
const LC_COLLATE: c_int = 3;
const LC_MONETARY: c_int = 4;
const LC_MESSAGES: c_int = 5;
const LC_ALL: c_int = 6;
const LC_CTYPE_MASK: c_int = 1 << LC_CTYPE;
const LC_NUMERIC_MASK: c_int = 1 << LC_NUMERIC;
const LC_TIME_MASK: c_int = 1 << LC_TIME;
const LC_COLLATE_MASK: c_int = 1 << LC_COLLATE;
const LC_MONETARY_MASK: c_int = 1 << LC_MONETARY;
const LC_MESSAGES_MASK: c_int = 1 << LC_MESSAGES;
const MAP_FILE: c_int = 0x0000;
const MAP_SHARED: c_int = 0x0001;
const MAP_PRIVATE: c_int = 0x0002;
const MAP_FIXED: c_int = 0x0010;
const MAP_FAILED: &mut c_void = !0 as &mut c_void;
const MS_ASYNC: c_int = 0x0001;
const MS_INVALIDATE: c_int = 0x0002;
const MS_SYNC: c_int = 0x0004;
const MS_RDONLY: c_ulong = 0x01;
const MS_NOSUID: c_ulong = 0x02;
const MS_NODEV: c_ulong = 0x04;
const MS_NOEXEC: c_ulong = 0x08;
const MS_SYNCHRONOUS: c_ulong = 0x10;
const MS_REMOUNT: c_ulong = 0x20;
const MS_MANDLOCK: c_ulong = 0x40;
const MS_DIRSYNC: c_ulong = 0x80;
const MS_NOATIME: c_ulong = 0x0400;
const MS_NODIRATIME: c_ulong = 0x0800;
const MS_BIND: c_ulong = 0x1000;
const MS_MOVE: c_ulong = 0x2000;
const MS_REC: c_ulong = 0x4000;
const MS_SILENT: c_ulong = 0x8000;
const MS_POSIXACL: c_ulong = 0x010000;
const MS_UNBINDABLE: c_ulong = 0x020000;
const MS_PRIVATE: c_ulong = 0x040000;
const MS_SLAVE: c_ulong = 0x080000;
const MS_SHARED: c_ulong = 0x100000;
const MS_RELATIME: c_ulong = 0x200000;
const MS_KERNMOUNT: c_ulong = 0x400000;
const MS_I_VERSION: c_ulong = 0x800000;
const MS_STRICTATIME: c_ulong = 0x1000000;
const MS_LAZYTIME: c_ulong = 0x2000000;
const MS_ACTIVE: c_ulong = 0x40000000;
const MS_MGC_VAL: c_ulong = 0xc0ed0000;
const MS_MGC_MSK: c_ulong = 0xffff0000;
const SCM_RIGHTS: c_int = 0x01;
const SCM_CREDENTIALS: c_int = 0x02;
const PROT_GROWSDOWN: c_int = 0x1000000;
const PROT_GROWSUP: c_int = 0x2000000;
const MAP_TYPE: c_int = 0x000f;
const MADV_NORMAL: c_int = 0;
const MADV_RANDOM: c_int = 1;
const MADV_SEQUENTIAL: c_int = 2;
const MADV_WILLNEED: c_int = 3;
const MADV_DONTNEED: c_int = 4;
const MADV_FREE: c_int = 8;
const MADV_REMOVE: c_int = 9;
const MADV_DONTFORK: c_int = 10;
const MADV_DOFORK: c_int = 11;
const MADV_MERGEABLE: c_int = 12;
const MADV_UNMERGEABLE: c_int = 13;
const MADV_HUGEPAGE: c_int = 14;
const MADV_NOHUGEPAGE: c_int = 15;
const MADV_DONTDUMP: c_int = 16;
const MADV_DODUMP: c_int = 17;
const MADV_WIPEONFORK: c_int = 18;
const MADV_KEEPONFORK: c_int = 19;
const MADV_COLD: c_int = 20;
const MADV_PAGEOUT: c_int = 21;
const MADV_HWPOISON: c_int = 100;
const MADV_POPULATE_READ: c_int = 22;
const MADV_POPULATE_WRITE: c_int = 23;
const MADV_DONTNEED_LOCKED: c_int = 24;
const IFF_UP: c_int = 0x1;
const IFF_BROADCAST: c_int = 0x2;
const IFF_DEBUG: c_int = 0x4;
const IFF_LOOPBACK: c_int = 0x8;
const IFF_POINTOPOINT: c_int = 0x10;
const IFF_NOTRAILERS: c_int = 0x20;
const IFF_RUNNING: c_int = 0x40;
const IFF_NOARP: c_int = 0x80;
const IFF_PROMISC: c_int = 0x100;
const IFF_ALLMULTI: c_int = 0x200;
const IFF_MASTER: c_int = 0x400;
const IFF_SLAVE: c_int = 0x800;
const IFF_MULTICAST: c_int = 0x1000;
const IFF_PORTSEL: c_int = 0x2000;
const IFF_AUTOMEDIA: c_int = 0x4000;
const IFF_DYNAMIC: c_int = 0x8000;
const SOL_IP: c_int = 0;
const SOL_TCP: c_int = 6;
const SOL_UDP: c_int = 17;
const SOL_IPV6: c_int = 41;
const SOL_ICMPV6: c_int = 58;
const SOL_RAW: c_int = 255;
const SOL_DECNET: c_int = 261;
const SOL_X25: c_int = 262;
const SOL_PACKET: c_int = 263;
const SOL_ATM: c_int = 264;
const SOL_AAL: c_int = 265;
const SOL_IRDA: c_int = 266;
const SOL_NETBEUI: c_int = 267;
const SOL_LLC: c_int = 268;
const SOL_DCCP: c_int = 269;
const SOL_NETLINK: c_int = 270;
const SOL_TIPC: c_int = 271;
const SOL_BLUETOOTH: c_int = 274;
const SOL_ALG: c_int = 279;
const AF_UNSPEC: c_int = 0;
const AF_UNIX: c_int = 1;
const AF_LOCAL: c_int = 1;
const AF_INET: c_int = 2;
const AF_AX25: c_int = 3;
const AF_IPX: c_int = 4;
const AF_APPLETALK: c_int = 5;
const AF_NETROM: c_int = 6;
const AF_BRIDGE: c_int = 7;
const AF_ATMPVC: c_int = 8;
const AF_X25: c_int = 9;
const AF_INET6: c_int = 10;
const AF_ROSE: c_int = 11;
const AF_DECnet: c_int = 12;
const AF_NETBEUI: c_int = 13;
const AF_SECURITY: c_int = 14;
const AF_KEY: c_int = 15;
const AF_NETLINK: c_int = 16;
const AF_ROUTE: c_int = AF_NETLINK;
const AF_PACKET: c_int = 17;
const AF_ASH: c_int = 18;
const AF_ECONET: c_int = 19;
const AF_ATMSVC: c_int = 20;
const AF_RDS: c_int = 21;
const AF_SNA: c_int = 22;
const AF_IRDA: c_int = 23;
const AF_PPPOX: c_int = 24;
const AF_WANPIPE: c_int = 25;
const AF_LLC: c_int = 26;
const AF_CAN: c_int = 29;
const AF_TIPC: c_int = 30;
const AF_BLUETOOTH: c_int = 31;
const AF_IUCV: c_int = 32;
const AF_RXRPC: c_int = 33;
const AF_ISDN: c_int = 34;
const AF_PHONET: c_int = 35;
const AF_IEEE802154: c_int = 36;
const AF_CAIF: c_int = 37;
const AF_ALG: c_int = 38;
const PF_UNSPEC: c_int = AF_UNSPEC;
const PF_UNIX: c_int = AF_UNIX;
const PF_LOCAL: c_int = AF_LOCAL;
const PF_INET: c_int = AF_INET;
const PF_AX25: c_int = AF_AX25;
const PF_IPX: c_int = AF_IPX;
const PF_APPLETALK: c_int = AF_APPLETALK;
const PF_NETROM: c_int = AF_NETROM;
const PF_BRIDGE: c_int = AF_BRIDGE;
const PF_ATMPVC: c_int = AF_ATMPVC;
const PF_X25: c_int = AF_X25;
const PF_INET6: c_int = AF_INET6;
const PF_ROSE: c_int = AF_ROSE;
const PF_DECnet: c_int = AF_DECnet;
const PF_NETBEUI: c_int = AF_NETBEUI;
const PF_SECURITY: c_int = AF_SECURITY;
const PF_KEY: c_int = AF_KEY;
const PF_NETLINK: c_int = AF_NETLINK;
const PF_ROUTE: c_int = AF_ROUTE;
const PF_PACKET: c_int = AF_PACKET;
const PF_ASH: c_int = AF_ASH;
const PF_ECONET: c_int = AF_ECONET;
const PF_ATMSVC: c_int = AF_ATMSVC;
const PF_RDS: c_int = AF_RDS;
const PF_SNA: c_int = AF_SNA;
const PF_IRDA: c_int = AF_IRDA;
const PF_PPPOX: c_int = AF_PPPOX;
const PF_WANPIPE: c_int = AF_WANPIPE;
const PF_LLC: c_int = AF_LLC;
const PF_CAN: c_int = AF_CAN;
const PF_TIPC: c_int = AF_TIPC;
const PF_BLUETOOTH: c_int = AF_BLUETOOTH;
const PF_IUCV: c_int = AF_IUCV;
const PF_RXRPC: c_int = AF_RXRPC;
const PF_ISDN: c_int = AF_ISDN;
const PF_PHONET: c_int = AF_PHONET;
const PF_IEEE802154: c_int = AF_IEEE802154;
const PF_CAIF: c_int = AF_CAIF;
const PF_ALG: c_int = AF_ALG;
const MSG_OOB: c_int = 1;
const MSG_PEEK: c_int = 2;
const MSG_DONTROUTE: c_int = 4;
const MSG_CTRUNC: c_int = 8;
const MSG_TRUNC: c_int = 0x20;
const MSG_DONTWAIT: c_int = 0x40;
const MSG_EOR: c_int = 0x80;
const MSG_WAITALL: c_int = 0x100;
const MSG_FIN: c_int = 0x200;
const MSG_SYN: c_int = 0x400;
const MSG_CONFIRM: c_int = 0x800;
const MSG_RST: c_int = 0x1000;
const MSG_ERRQUEUE: c_int = 0x2000;
const MSG_NOSIGNAL: c_int = 0x4000;
const MSG_MORE: c_int = 0x8000;
const MSG_WAITFORONE: c_int = 0x10000;
const MSG_FASTOPEN: c_int = 0x20000000;
const MSG_CMSG_CLOEXEC: c_int = 0x40000000;
const SCM_TIMESTAMP: c_int = SO_TIMESTAMP;
const SOCK_RAW: c_int = 3;
const SOCK_RDM: c_int = 4;
const IP_TOS: c_int = 1;
const IP_TTL: c_int = 2;
const IP_HDRINCL: c_int = 3;
const IP_OPTIONS: c_int = 4;
const IP_ROUTER_ALERT: c_int = 5;
const IP_RECVOPTS: c_int = 6;
const IP_RETOPTS: c_int = 7;
const IP_PKTINFO: c_int = 8;
const IP_PKTOPTIONS: c_int = 9;
const IP_MTU_DISCOVER: c_int = 10;
const IP_RECVERR: c_int = 11;
const IP_RECVTTL: c_int = 12;
const IP_RECVTOS: c_int = 13;
const IP_MTU: c_int = 14;
const IP_FREEBIND: c_int = 15;
const IP_IPSEC_POLICY: c_int = 16;
const IP_XFRM_POLICY: c_int = 17;
const IP_PASSSEC: c_int = 18;
const IP_TRANSPARENT: c_int = 19;
const IP_ORIGDSTADDR: c_int = 20;
const IP_RECVORIGDSTADDR: c_int = IP_ORIGDSTADDR;
const IP_MINTTL: c_int = 21;
const IP_NODEFRAG: c_int = 22;
const IP_CHECKSUM: c_int = 23;
const IP_BIND_ADDRESS_NO_PORT: c_int = 24;
const IP_MULTICAST_IF: c_int = 32;
const IP_MULTICAST_TTL: c_int = 33;
const IP_MULTICAST_LOOP: c_int = 34;
const IP_ADD_MEMBERSHIP: c_int = 35;
const IP_DROP_MEMBERSHIP: c_int = 36;
const IP_UNBLOCK_SOURCE: c_int = 37;
const IP_BLOCK_SOURCE: c_int = 38;
const IP_ADD_SOURCE_MEMBERSHIP: c_int = 39;
const IP_DROP_SOURCE_MEMBERSHIP: c_int = 40;
const IP_MSFILTER: c_int = 41;
const IP_MULTICAST_ALL: c_int = 49;
const IP_UNICAST_IF: c_int = 50;
const IP_DEFAULT_MULTICAST_TTL: c_int = 1;
const IP_DEFAULT_MULTICAST_LOOP: c_int = 1;
const IP_PMTUDISC_DONT: c_int = 0;
const IP_PMTUDISC_WANT: c_int = 1;
const IP_PMTUDISC_DO: c_int = 2;
const IP_PMTUDISC_PROBE: c_int = 3;
const IP_PMTUDISC_INTERFACE: c_int = 4;
const IP_PMTUDISC_OMIT: c_int = 5;
const IPPROTO_HOPOPTS: c_int = 0;
const IPPROTO_IGMP: c_int = 2;
const IPPROTO_IPIP: c_int = 4;
const IPPROTO_EGP: c_int = 8;
const IPPROTO_PUP: c_int = 12;
const IPPROTO_IDP: c_int = 22;
const IPPROTO_TP: c_int = 29;
const IPPROTO_DCCP: c_int = 33;
const IPPROTO_ROUTING: c_int = 43;
const IPPROTO_FRAGMENT: c_int = 44;
const IPPROTO_RSVP: c_int = 46;
const IPPROTO_GRE: c_int = 47;
const IPPROTO_ESP: c_int = 50;
const IPPROTO_AH: c_int = 51;
const IPPROTO_NONE: c_int = 59;
const IPPROTO_DSTOPTS: c_int = 60;
const IPPROTO_MTP: c_int = 92;
const IPPROTO_ENCAP: c_int = 98;
const IPPROTO_PIM: c_int = 103;
const IPPROTO_COMP: c_int = 108;
const IPPROTO_SCTP: c_int = 132;
const IPPROTO_MH: c_int = 135;
const IPPROTO_UDPLITE: c_int = 136;
const IPPROTO_RAW: c_int = 255;
const IPPROTO_BEETPH: c_int = 94;
const IPPROTO_MPLS: c_int = 137;
const IPPROTO_MPTCP: c_int = 262;
const MCAST_EXCLUDE: c_int = 0;
const MCAST_INCLUDE: c_int = 1;
const MCAST_JOIN_GROUP: c_int = 42;
const MCAST_BLOCK_SOURCE: c_int = 43;
const MCAST_UNBLOCK_SOURCE: c_int = 44;
const MCAST_LEAVE_GROUP: c_int = 45;
const MCAST_JOIN_SOURCE_GROUP: c_int = 46;
const MCAST_LEAVE_SOURCE_GROUP: c_int = 47;
const MCAST_MSFILTER: c_int = 48;
const IPV6_ADDRFORM: c_int = 1;
const IPV6_2292PKTINFO: c_int = 2;
const IPV6_2292HOPOPTS: c_int = 3;
const IPV6_2292DSTOPTS: c_int = 4;
const IPV6_2292RTHDR: c_int = 5;
const IPV6_2292PKTOPTIONS: c_int = 6;
const IPV6_CHECKSUM: c_int = 7;
const IPV6_2292HOPLIMIT: c_int = 8;
const IPV6_NEXTHOP: c_int = 9;
const IPV6_AUTHHDR: c_int = 10;
const IPV6_UNICAST_HOPS: c_int = 16;
const IPV6_MULTICAST_IF: c_int = 17;
const IPV6_MULTICAST_HOPS: c_int = 18;
const IPV6_MULTICAST_LOOP: c_int = 19;
const IPV6_ADD_MEMBERSHIP: c_int = 20;
const IPV6_DROP_MEMBERSHIP: c_int = 21;
const IPV6_ROUTER_ALERT: c_int = 22;
const IPV6_MTU_DISCOVER: c_int = 23;
const IPV6_MTU: c_int = 24;
const IPV6_RECVERR: c_int = 25;
const IPV6_V6ONLY: c_int = 26;
const IPV6_JOIN_ANYCAST: c_int = 27;
const IPV6_LEAVE_ANYCAST: c_int = 28;
const IPV6_IPSEC_POLICY: c_int = 34;
const IPV6_XFRM_POLICY: c_int = 35;
const IPV6_HDRINCL: c_int = 36;
const IPV6_RECVPKTINFO: c_int = 49;
const IPV6_PKTINFO: c_int = 50;
const IPV6_RECVHOPLIMIT: c_int = 51;
const IPV6_HOPLIMIT: c_int = 52;
const IPV6_RECVHOPOPTS: c_int = 53;
const IPV6_HOPOPTS: c_int = 54;
const IPV6_RTHDRDSTOPTS: c_int = 55;
const IPV6_RECVRTHDR: c_int = 56;
const IPV6_RTHDR: c_int = 57;
const IPV6_RECVDSTOPTS: c_int = 58;
const IPV6_DSTOPTS: c_int = 59;
const IPV6_RECVPATHMTU: c_int = 60;
const IPV6_PATHMTU: c_int = 61;
const IPV6_DONTFRAG: c_int = 62;
const IPV6_RECVTCLASS: c_int = 66;
const IPV6_TCLASS: c_int = 67;
const IPV6_AUTOFLOWLABEL: c_int = 70;
const IPV6_ADDR_PREFERENCES: c_int = 72;
const IPV6_MINHOPCOUNT: c_int = 73;
const IPV6_ORIGDSTADDR: c_int = 74;
const IPV6_RECVORIGDSTADDR: c_int = IPV6_ORIGDSTADDR;
const IPV6_TRANSPARENT: c_int = 75;
const IPV6_UNICAST_IF: c_int = 76;
const IPV6_PREFER_SRC_TMP: c_int = 0x0001;
const IPV6_PREFER_SRC_PUBLIC: c_int = 0x0002;
const IPV6_PREFER_SRC_PUBTMP_DEFAULT: c_int = 0x0100;
const IPV6_PREFER_SRC_COA: c_int = 0x0004;
const IPV6_PREFER_SRC_HOME: c_int = 0x0400;
const IPV6_PREFER_SRC_CGA: c_int = 0x0008;
const IPV6_PREFER_SRC_NONCGA: c_int = 0x0800;
const IPV6_PMTUDISC_DONT: c_int = 0;
const IPV6_PMTUDISC_WANT: c_int = 1;
const IPV6_PMTUDISC_DO: c_int = 2;
const IPV6_PMTUDISC_PROBE: c_int = 3;
const IPV6_PMTUDISC_INTERFACE: c_int = 4;
const IPV6_PMTUDISC_OMIT: c_int = 5;
const TCP_NODELAY: c_int = 1;
const TCP_MAXSEG: c_int = 2;
const TCP_CORK: c_int = 3;
const TCP_KEEPIDLE: c_int = 4;
const TCP_KEEPINTVL: c_int = 5;
const TCP_KEEPCNT: c_int = 6;
const TCP_SYNCNT: c_int = 7;
const TCP_LINGER2: c_int = 8;
const TCP_DEFER_ACCEPT: c_int = 9;
const TCP_WINDOW_CLAMP: c_int = 10;
const TCP_INFO: c_int = 11;
const TCP_QUICKACK: c_int = 12;
const TCP_CONGESTION: c_int = 13;
const TCP_MD5SIG: c_int = 14;
const TCP_COOKIE_TRANSACTIONS: c_int = 15;
const TCP_THIN_LINEAR_TIMEOUTS: c_int = 16;
const TCP_THIN_DUPACK: c_int = 17;
const TCP_USER_TIMEOUT: c_int = 18;
const TCP_REPAIR: c_int = 19;
const TCP_REPAIR_QUEUE: c_int = 20;
const TCP_QUEUE_SEQ: c_int = 21;
const TCP_REPAIR_OPTIONS: c_int = 22;
const TCP_FASTOPEN: c_int = 23;
const TCP_TIMESTAMP: c_int = 24;
const TCP_NOTSENT_LOWAT: c_int = 25;
const TCP_CC_INFO: c_int = 26;
const TCP_SAVE_SYN: c_int = 27;
const TCP_SAVED_SYN: c_int = 28;
const TCP_REPAIR_WINDOW: c_int = 29;
const TCP_FASTOPEN_CONNECT: c_int = 30;
const TCP_ULP: c_int = 31;
const TCP_MD5SIG_EXT: c_int = 32;
const TCP_FASTOPEN_KEY: c_int = 33;
const TCP_FASTOPEN_NO_COOKIE: c_int = 34;
const TCP_ZEROCOPY_RECEIVE: c_int = 35;
const TCP_INQ: c_int = 36;
const TCP_CM_INQ: c_int = TCP_INQ;
const TCP_MD5SIG_MAXKEYLEN: usize = 80;
const SO_DEBUG: c_int = 1;
const SHUT_RD: c_int = 0;
const SHUT_WR: c_int = 1;
const SHUT_RDWR: c_int = 2;
const LOCK_SH: c_int = 1;
const LOCK_EX: c_int = 2;
const LOCK_NB: c_int = 4;
const LOCK_UN: c_int = 8;
const SS_ONSTACK: c_int = 1;
const SS_DISABLE: c_int = 2;
const PATH_MAX: c_int = 4096;
const UIO_MAXIOV: c_int = 1024;
const FD_SETSIZE: usize = 1024;
const EPOLLIN: c_int = 0x1;
const EPOLLPRI: c_int = 0x2;
const EPOLLOUT: c_int = 0x4;
const EPOLLERR: c_int = 0x8;
const EPOLLHUP: c_int = 0x10;
const EPOLLRDNORM: c_int = 0x40;
const EPOLLRDBAND: c_int = 0x80;
const EPOLLWRNORM: c_int = 0x100;
const EPOLLWRBAND: c_int = 0x200;
const EPOLLMSG: c_int = 0x400;
const EPOLLRDHUP: c_int = 0x2000;
const EPOLLEXCLUSIVE: c_int = 0x10000000;
const EPOLLWAKEUP: c_int = 0x20000000;
const EPOLLONESHOT: c_int = 0x40000000;
const EPOLLET: c_int = 0x80000000;
const EPOLL_CTL_ADD: c_int = 1;
const EPOLL_CTL_MOD: c_int = 3;
const EPOLL_CTL_DEL: c_int = 2;
const MNT_FORCE: c_int = 0x1;
const MNT_DETACH: c_int = 0x2;
const MNT_EXPIRE: c_int = 0x4;
const UMOUNT_NOFOLLOW: c_int = 0x8;
const Q_GETFMT: c_int = 0x800004;
const Q_GETINFO: c_int = 0x800005;
const Q_SETINFO: c_int = 0x800006;
const QIF_BLIMITS: u32 = 1;
const QIF_SPACE: u32 = 2;
const QIF_ILIMITS: u32 = 4;
const QIF_INODES: u32 = 8;
const QIF_BTIME: u32 = 16;
const QIF_ITIME: u32 = 32;
const QIF_LIMITS: u32 = 5;
const QIF_USAGE: u32 = 10;
const QIF_TIMES: u32 = 48;
const QIF_ALL: u32 = 63;
const Q_SYNC: c_int = 0x800001;
const Q_QUOTAON: c_int = 0x800002;
const Q_QUOTAOFF: c_int = 0x800003;
const Q_GETQUOTA: c_int = 0x800007;
const Q_SETQUOTA: c_int = 0x800008;
const TCIOFF: c_int = 2;
const TCION: c_int = 3;
const TCOOFF: c_int = 0;
const TCOON: c_int = 1;
const TCIFLUSH: c_int = 0;
const TCOFLUSH: c_int = 1;
const TCIOFLUSH: c_int = 2;
const NL0: tcflag_t = 0x00000000;
const NL1: tcflag_t = 0x00000100;
const TAB0: tcflag_t = 0x00000000;
const CR0: tcflag_t = 0x00000000;
const FF0: tcflag_t = 0x00000000;
const BS0: tcflag_t = 0x00000000;
const VT0: tcflag_t = 0x00000000;
const VERASE: usize = 2;
const VKILL: usize = 3;
const VINTR: usize = 0;
const VQUIT: usize = 1;
const VLNEXT: usize = 15;
const IGNBRK: tcflag_t = 0x00000001;
const BRKINT: tcflag_t = 0x00000002;
const IGNPAR: tcflag_t = 0x00000004;
const PARMRK: tcflag_t = 0x00000008;
const INPCK: tcflag_t = 0x00000010;
const ISTRIP: tcflag_t = 0x00000020;
const INLCR: tcflag_t = 0x00000040;
const IGNCR: tcflag_t = 0x00000080;
const ICRNL: tcflag_t = 0x00000100;
const IXANY: tcflag_t = 0x00000800;
const IMAXBEL: tcflag_t = 0x00002000;
const OPOST: tcflag_t = 0x1;
const CS5: tcflag_t = 0x00000000;
const CRTSCTS: tcflag_t = 0x80000000;
const ECHO: tcflag_t = 0x00000008;
const OCRNL: tcflag_t = 0o000010;
const ONOCR: tcflag_t = 0o000020;
const ONLRET: tcflag_t = 0o000040;
const OFILL: tcflag_t = 0o000100;
const OFDEL: tcflag_t = 0o000200;
const CLONE_VM: c_int = 0x100;
const CLONE_FS: c_int = 0x200;
const CLONE_FILES: c_int = 0x400;
const CLONE_SIGHAND: c_int = 0x800;
const CLONE_PTRACE: c_int = 0x2000;
const CLONE_VFORK: c_int = 0x4000;
const CLONE_PARENT: c_int = 0x8000;
const CLONE_THREAD: c_int = 0x10000;
const CLONE_NEWNS: c_int = 0x20000;
const CLONE_SYSVSEM: c_int = 0x40000;
const CLONE_SETTLS: c_int = 0x80000;
const CLONE_PARENT_SETTID: c_int = 0x100000;
const CLONE_CHILD_CLEARTID: c_int = 0x200000;
const CLONE_DETACHED: c_int = 0x400000;
const CLONE_UNTRACED: c_int = 0x800000;
const CLONE_CHILD_SETTID: c_int = 0x01000000;
const CLONE_NEWCGROUP: c_int = 0x02000000;
const CLONE_NEWUTS: c_int = 0x04000000;
const CLONE_NEWIPC: c_int = 0x08000000;
const CLONE_NEWUSER: c_int = 0x10000000;
const CLONE_NEWPID: c_int = 0x20000000;
const CLONE_NEWNET: c_int = 0x40000000;
const CLONE_IO: c_int = 0x80000000;
const WNOHANG: c_int = 0x00000001;
const WUNTRACED: c_int = 0x00000002;
const WSTOPPED: c_int = WUNTRACED;
const WEXITED: c_int = 0x00000004;
const WCONTINUED: c_int = 0x00000008;
const WNOWAIT: c_int = 0x01000000;
const ADDR_NO_RANDOMIZE: c_int = 0x0040000;
const MMAP_PAGE_ZERO: c_int = 0x0100000;
const ADDR_COMPAT_LAYOUT: c_int = 0x0200000;
const READ_IMPLIES_EXEC: c_int = 0x0400000;
const ADDR_LIMIT_32BIT: c_int = 0x0800000;
const SHORT_INODE: c_int = 0x1000000;
const WHOLE_SECONDS: c_int = 0x2000000;
const STICKY_TIMEOUTS: c_int = 0x4000000;
const ADDR_LIMIT_3GB: c_int = 0x8000000;
const PTRACE_O_TRACESYSGOOD: c_int = 0x00000001;
const PTRACE_O_TRACEFORK: c_int = 0x00000002;
const PTRACE_O_TRACEVFORK: c_int = 0x00000004;
const PTRACE_O_TRACECLONE: c_int = 0x00000008;
const PTRACE_O_TRACEEXEC: c_int = 0x00000010;
const PTRACE_O_TRACEVFORKDONE: c_int = 0x00000020;
const PTRACE_O_TRACEEXIT: c_int = 0x00000040;
const PTRACE_O_TRACESECCOMP: c_int = 0x00000080;
const PTRACE_O_SUSPEND_SECCOMP: c_int = 0x00200000;
const PTRACE_O_EXITKILL: c_int = 0x00100000;
const PTRACE_O_MASK: c_int = 0x003000ff;
const PTRACE_EVENT_FORK: c_int = 1;
const PTRACE_EVENT_VFORK: c_int = 2;
const PTRACE_EVENT_CLONE: c_int = 3;
const PTRACE_EVENT_EXEC: c_int = 4;
const PTRACE_EVENT_VFORK_DONE: c_int = 5;
const PTRACE_EVENT_EXIT: c_int = 6;
const PTRACE_EVENT_SECCOMP: c_int = 7;
const __WNOTHREAD: c_int = 0x20000000;
const __WALL: c_int = 0x40000000;
const __WCLONE: c_int = 0x80000000;
const SPLICE_F_MOVE: c_uint = 0x01;
const SPLICE_F_NONBLOCK: c_uint = 0x02;
const SPLICE_F_MORE: c_uint = 0x04;
const SPLICE_F_GIFT: c_uint = 0x08;
const RTLD_LOCAL: c_int = 0;
const RTLD_LAZY: c_int = 1;
const POSIX_FADV_NORMAL: c_int = 0;
const POSIX_FADV_RANDOM: c_int = 1;
const POSIX_FADV_SEQUENTIAL: c_int = 2;
const POSIX_FADV_WILLNEED: c_int = 3;
const AT_FDCWD: c_int = -100;
const AT_SYMLINK_NOFOLLOW: c_int = 0x100;
const AT_REMOVEDIR: c_int = 0x200;
const AT_SYMLINK_FOLLOW: c_int = 0x400;
const AT_NO_AUTOMOUNT: c_int = 0x800;
const AT_EMPTY_PATH: c_int = 0x1000;
const AT_RECURSIVE: c_int = 0x8000;
const LOG_CRON: c_int = 9 << 3;
const LOG_AUTHPRIV: c_int = 10 << 3;
const LOG_FTP: c_int = 11 << 3;
const LOG_PERROR: c_int = 0x20;
const PIPE_BUF: usize = 4096;
const SI_LOAD_SHIFT: c_uint = 16;
const BUS_ADRALN: c_int = 1;
const BUS_ADRERR: c_int = 2;
const BUS_OBJERR: c_int = 3;
const BUS_MCEERR_AR: c_int = 4;
const BUS_MCEERR_AO: c_int = 5;
const CLD_EXITED: c_int = 1;
const CLD_KILLED: c_int = 2;
const CLD_DUMPED: c_int = 3;
const CLD_TRAPPED: c_int = 4;
const CLD_STOPPED: c_int = 5;
const CLD_CONTINUED: c_int = 6;
const SIGEV_SIGNAL: c_int = 0;
const SIGEV_NONE: c_int = 1;
const SIGEV_THREAD: c_int = 2;
const P_ALL: idtype_t = 0;
const P_PID: idtype_t = 1;
const P_PGID: idtype_t = 2;
const P_PIDFD: idtype_t = 3;
const UTIME_OMIT: c_long = 1073741822;
const UTIME_NOW: c_long = 1073741823;
const POLLIN: c_short = 0x1;
const POLLPRI: c_short = 0x2;
const POLLOUT: c_short = 0x4;
const POLLERR: c_short = 0x8;
const POLLHUP: c_short = 0x10;
const POLLNVAL: c_short = 0x20;
const POLLRDNORM: c_short = 0x040;
const POLLRDBAND: c_short = 0x080;
const POLLRDHUP: c_short = 0x2000;
const IPTOS_LOWDELAY: u8 = 0x10;
const IPTOS_THROUGHPUT: u8 = 0x08;
const IPTOS_RELIABILITY: u8 = 0x04;
const IPTOS_MINCOST: u8 = 0x02;
const IPTOS_PREC_NETCONTROL: u8 = 0xe0;
const IPTOS_PREC_INTERNETCONTROL: u8 = 0xc0;
const IPTOS_PREC_CRITIC_ECP: u8 = 0xa0;
const IPTOS_PREC_FLASHOVERRIDE: u8 = 0x80;
const IPTOS_PREC_FLASH: u8 = 0x60;
const IPTOS_PREC_IMMEDIATE: u8 = 0x40;
const IPTOS_PREC_PRIORITY: u8 = 0x20;
const IPTOS_PREC_ROUTINE: u8 = 0x00;
const IPTOS_ECN_MASK: u8 = 0x03;
const IPTOS_ECN_ECT1: u8 = 0x01;
const IPTOS_ECN_ECT0: u8 = 0x02;
const IPTOS_ECN_CE: u8 = 0x03;
const IPOPT_COPY: u8 = 0x80;
const IPOPT_CLASS_MASK: u8 = 0x60;
const IPOPT_NUMBER_MASK: u8 = 0x1f;
const IPOPT_CONTROL: u8 = 0x00;
const IPOPT_RESERVED1: u8 = 0x20;
const IPOPT_MEASUREMENT: u8 = 0x40;
const IPOPT_RESERVED2: u8 = 0x60;
const IPOPT_END: u8 = 0 | IPOPT_CONTROL;
const IPOPT_NOOP: u8 = 1 | IPOPT_CONTROL;
const IPOPT_SEC: u8 = 2 | IPOPT_CONTROL | IPOPT_COPY;
const IPOPT_LSRR: u8 = 3 | IPOPT_CONTROL | IPOPT_COPY;
const IPOPT_TIMESTAMP: u8 = 4 | IPOPT_MEASUREMENT;
const IPOPT_RR: u8 = 7 | IPOPT_CONTROL;
const IPOPT_SID: u8 = 8 | IPOPT_CONTROL | IPOPT_COPY;
const IPOPT_SSRR: u8 = 9 | IPOPT_CONTROL | IPOPT_COPY;
const IPOPT_RA: u8 = 20 | IPOPT_CONTROL | IPOPT_COPY;
const IPVERSION: u8 = 4;
const MAXTTL: u8 = 255;
const IPDEFTTL: u8 = 64;
const IPOPT_OPTVAL: u8 = 0;
const IPOPT_OLEN: u8 = 1;
const IPOPT_OFFSET: u8 = 2;
const IPOPT_MINOFF: u8 = 4;
const MAX_IPOPTLEN: u8 = 40;
const IPOPT_NOP: u8 = IPOPT_NOOP;
const IPOPT_EOL: u8 = IPOPT_END;
const IPOPT_TS: u8 = IPOPT_TIMESTAMP;
const IPOPT_TS_TSONLY: u8 = 0;
const IPOPT_TS_TSANDADDR: u8 = 1;
const IPOPT_TS_PRESPEC: u8 = 3;
const ARPOP_RREQUEST: u16 = 3;
const ARPOP_RREPLY: u16 = 4;
const ARPOP_InREQUEST: u16 = 8;
const ARPOP_InREPLY: u16 = 9;
const ARPOP_NAK: u16 = 10;
const ATF_NETMASK: c_int = 0x20;
const ATF_DONTPUB: c_int = 0x40;
const ARPHRD_NETROM: u16 = 0;
const ARPHRD_ETHER: u16 = 1;
const ARPHRD_EETHER: u16 = 2;
const ARPHRD_AX25: u16 = 3;
const ARPHRD_PRONET: u16 = 4;
const ARPHRD_CHAOS: u16 = 5;
const ARPHRD_IEEE802: u16 = 6;
const ARPHRD_ARCNET: u16 = 7;
const ARPHRD_APPLETLK: u16 = 8;
const ARPHRD_DLCI: u16 = 15;
const ARPHRD_ATM: u16 = 19;
const ARPHRD_METRICOM: u16 = 23;
const ARPHRD_IEEE1394: u16 = 24;
const ARPHRD_EUI64: u16 = 27;
const ARPHRD_INFINIBAND: u16 = 32;
const ARPHRD_SLIP: u16 = 256;
const ARPHRD_CSLIP: u16 = 257;
const ARPHRD_SLIP6: u16 = 258;
const ARPHRD_CSLIP6: u16 = 259;
const ARPHRD_RSRVD: u16 = 260;
const ARPHRD_ADAPT: u16 = 264;
const ARPHRD_ROSE: u16 = 270;
const ARPHRD_X25: u16 = 271;
const ARPHRD_HWX25: u16 = 272;
const ARPHRD_CAN: u16 = 280;
const ARPHRD_PPP: u16 = 512;
const ARPHRD_CISCO: u16 = 513;
const ARPHRD_HDLC: u16 = ARPHRD_CISCO;
const ARPHRD_LAPB: u16 = 516;
const ARPHRD_DDCMP: u16 = 517;
const ARPHRD_RAWHDLC: u16 = 518;
const ARPHRD_TUNNEL: u16 = 768;
const ARPHRD_TUNNEL6: u16 = 769;
const ARPHRD_FRAD: u16 = 770;
const ARPHRD_SKIP: u16 = 771;
const ARPHRD_LOOPBACK: u16 = 772;
const ARPHRD_LOCALTLK: u16 = 773;
const ARPHRD_FDDI: u16 = 774;
const ARPHRD_BIF: u16 = 775;
const ARPHRD_SIT: u16 = 776;
const ARPHRD_IPDDP: u16 = 777;
const ARPHRD_IPGRE: u16 = 778;
const ARPHRD_PIMREG: u16 = 779;
const ARPHRD_HIPPI: u16 = 780;
const ARPHRD_ASH: u16 = 781;
const ARPHRD_ECONET: u16 = 782;
const ARPHRD_IRDA: u16 = 783;
const ARPHRD_FCPP: u16 = 784;
const ARPHRD_FCAL: u16 = 785;
const ARPHRD_FCPL: u16 = 786;
const ARPHRD_FCFABRIC: u16 = 787;
const ARPHRD_IEEE802_TR: u16 = 800;
const ARPHRD_IEEE80211: u16 = 801;
const ARPHRD_IEEE80211_PRISM: u16 = 802;
const ARPHRD_IEEE80211_RADIOTAP: u16 = 803;
const ARPHRD_IEEE802154: u16 = 804;
const ARPHRD_VOID: u16 = 0xFFFF;
const ARPHRD_NONE: u16 = 0xFFFE;
const ADFS_SUPER_MAGIC: c_long = 0x0000adf5;
const AFFS_SUPER_MAGIC: c_long = 0x0000adff;
const AFS_SUPER_MAGIC: c_long = 0x5346414f;
const AUTOFS_SUPER_MAGIC: c_long = 0x0187;
const BPF_FS_MAGIC: c_long = 0xcafe4a11;
const BTRFS_SUPER_MAGIC: c_long = 0x9123683e;
const CGROUP2_SUPER_MAGIC: c_long = 0x63677270;
const CGROUP_SUPER_MAGIC: c_long = 0x27e0eb;
const CODA_SUPER_MAGIC: c_long = 0x73757245;
const CRAMFS_MAGIC: c_long = 0x28cd3d45;
const DEBUGFS_MAGIC: c_long = 0x64626720;
const DEVPTS_SUPER_MAGIC: c_long = 0x1cd1;
const ECRYPTFS_SUPER_MAGIC: c_long = 0xf15f;
const EFS_SUPER_MAGIC: c_long = 0x00414a53;
const EXT2_SUPER_MAGIC: c_long = 0x0000ef53;
const EXT3_SUPER_MAGIC: c_long = 0x0000ef53;
const EXT4_SUPER_MAGIC: c_long = 0x0000ef53;
const F2FS_SUPER_MAGIC: c_long = 0xf2f52010;
const FUSE_SUPER_MAGIC: c_long = 0x65735546;
const FUTEXFS_SUPER_MAGIC: c_long = 0xbad1dea;
const HOSTFS_SUPER_MAGIC: c_long = 0x00c0ffee;
const HPFS_SUPER_MAGIC: c_long = 0xf995e849;
const HUGETLBFS_MAGIC: c_long = 0x958458f6;
const ISOFS_SUPER_MAGIC: c_long = 0x00009660;
const JFFS2_SUPER_MAGIC: c_long = 0x000072b6;
const MINIX2_SUPER_MAGIC2: c_long = 0x00002478;
const MINIX2_SUPER_MAGIC: c_long = 0x00002468;
const MINIX3_SUPER_MAGIC: c_long = 0x4d5a;
const MINIX_SUPER_MAGIC2: c_long = 0x0000138f;
const MINIX_SUPER_MAGIC: c_long = 0x0000137f;
const MSDOS_SUPER_MAGIC: c_long = 0x00004d44;
const NCP_SUPER_MAGIC: c_long = 0x0000564c;
const NFS_SUPER_MAGIC: c_long = 0x00006969;
const NILFS_SUPER_MAGIC: c_long = 0x3434;
const OCFS2_SUPER_MAGIC: c_long = 0x7461636f;
const OPENPROM_SUPER_MAGIC: c_long = 0x00009fa1;
const OVERLAYFS_SUPER_MAGIC: c_long = 0x794c7630;
const PROC_SUPER_MAGIC: c_long = 0x00009fa0;
const QNX4_SUPER_MAGIC: c_long = 0x0000002f;
const QNX6_SUPER_MAGIC: c_long = 0x68191122;
const RDTGROUP_SUPER_MAGIC: c_long = 0x7655821;
const REISERFS_SUPER_MAGIC: c_long = 0x52654973;
const SECURITYFS_MAGIC: c_long = 0x73636673;
const SELINUX_MAGIC: c_long = 0xf97cff8c;
const SMACK_MAGIC: c_long = 0x43415d53;
const SMB_SUPER_MAGIC: c_long = 0x0000517b;
const SYSFS_MAGIC: c_long = 0x62656572;
const TMPFS_MAGIC: c_long = 0x01021994;
const TRACEFS_MAGIC: c_long = 0x74726163;
const UDF_SUPER_MAGIC: c_long = 0x15013346;
const USBDEVICE_SUPER_MAGIC: c_long = 0x00009fa2;
const XENFS_SUPER_MAGIC: c_long = 0xabba1974;
const NSFS_MAGIC: c_long = 0x6e736673;
#[inline]
fn CMSG_ALIGN(len: usize) -> usize {
    len + std::mem::size_of::<usize>() - 1 & !(std::mem::size_of::<usize>() - 1)
}
#[inline]
fn CMSG_FIRSTHDR(mhdr: &msghdr) -> &mut cmsghdr {
    if (*mhdr).msg_controllen as usize >= std::mem::size_of::<cmsghdr>() {
        (*mhdr).msg_control as &mut cmsghdr
    } else {
        0 as &mut cmsghdr
    }
}
#[inline]
fn CMSG_DATA(cmsg: &cmsghdr) -> &mut c_uchar {
    cmsg.offset(1) as &mut c_uchar
}
#[inline]
fn CMSG_SPACE(length: c_uint) -> c_uint {
    (CMSG_ALIGN(length as usize) + CMSG_ALIGN(std::mem::size_of::<cmsghdr>())) as c_uint
}
#[inline]
fn CMSG_LEN(length: c_uint) -> c_uint {
    CMSG_ALIGN(std::mem::size_of::<cmsghdr>()) as c_uint + length
}
#[inline]
fn FD_CLR(fd: c_int, set: &mut fd_set) -> () {
    let fd = fd as usize;
    let size = std::mem::size_of::<typeof((*set).fds_bits[0])>() * 8;
    (*set).fds_bits[fd / size] &= !(1 << (fd % size));
    return;
}
#[inline]
fn FD_ISSET(fd: c_int, set: &fd_set) -> bool {
    let fd = fd as usize;
    let size = std::mem::size_of::<typeof((*set).fds_bits[0])>() * 8;
    return ((*set).fds_bits[fd / size] & (1 << (fd % size))) != 0;
}
#[inline]
fn FD_SET(fd: c_int, set: &mut fd_set) -> () {
    let fd = fd as usize;
    let size = std::mem::size_of::<typeof((*set).fds_bits[0])>() * 8;
    (*set).fds_bits[fd / size] |= 1 << (fd % size);
    return;
}
#[inline]
fn FD_ZERO(set: &mut fd_set) -> () {
    for slot in (*set).fds_bits.iter_mut() {
        *slot = 0;
    }
}
#[inline]
fn SIGRTMAX() -> c_int {
    {
        __libc_current_sigrtmax()
    }
}
#[inline]
fn SIGRTMIN() -> c_int {
    {
        __libc_current_sigrtmin()
    }
}
#[inline]
fn WIFSTOPPED(status: c_int) -> bool {
    (status & 0xff) == 0x7f
}
#[inline]
fn WSTOPSIG(status: c_int) -> c_int {
    (status >> 8) & 0xff
}
#[inline]
fn WIFCONTINUED(status: c_int) -> bool {
    status == 0xffff
}
#[inline]
fn WIFSIGNALED(status: c_int) -> bool {
    ((status & 0x7f) + 1) as i8 >= 2
}
#[inline]
fn WTERMSIG(status: c_int) -> c_int {
    status & 0x7f
}
#[inline]
fn WIFEXITED(status: c_int) -> bool {
    (status & 0x7f) == 0
}
#[inline]
fn WEXITSTATUS(status: c_int) -> c_int {
    (status >> 8) & 0xff
}
#[inline]
fn WCOREDUMP(status: c_int) -> bool {
    (status & 0x80) != 0
}
#[inline]
fn W_EXITCODE(ret: c_int, sig: c_int) -> c_int {
    (ret << 8) | sig
}
#[inline]
fn W_STOPCODE(sig: c_int) -> c_int {
    (sig << 8) | 0x7f
}
#[inline]
fn QCMD(cmd: c_int, type_: c_int) -> c_int {
    (cmd << 8) | (type_ & 0x00ff)
}
#[inline]
fn IPOPT_COPIED(o: u8) -> u8 {
    o & IPOPT_COPY
}
#[inline]
fn IPOPT_CLASS(o: u8) -> u8 {
    o & IPOPT_CLASS_MASK
}
#[inline]
fn IPOPT_NUMBER(o: u8) -> u8 {
    o & IPOPT_NUMBER_MASK
}
#[inline]
fn IPTOS_ECN(x: u8) -> u8 {
    x & IPTOS_ECN_MASK
}
#[inline]
fn KERNEL_VERSION(a: u32, b: u32, c: u32) -> u32 {
    ((a << 16) + (b << 8))
        + (if c <= 255 { c } else { 255 })
}
extern "C" fn __libc_current_sigrtmax() -> c_int;
extern "C" fn __libc_current_sigrtmin() -> c_int;
extern "C" fn sem_destroy(sem: &mut sem_t) -> c_int;
extern "C" fn sem_init(sem: &mut sem_t, pshared: c_int, value: c_uint) -> c_int;
extern "C" fn fdatasync(fd: c_int) -> c_int;
extern "C" fn mincore(addr: &mut c_void, len: size_t, vec: &mut c_uchar) -> c_int;
extern "C" fn clock_getres(clk_id: clockid_t, tp: &mut timespec) -> c_int;
extern "C" fn clock_gettime(clk_id: clockid_t, tp: &mut timespec) -> c_int;
extern "C" fn clock_settime(clk_id: clockid_t, tp: &timespec) -> c_int;
extern "C" fn clock_getcpuclockid(pid: pid_t, clk_id: &mut clockid_t) -> c_int;
extern "C" fn dirfd(dirp: &mut DIR) -> c_int;
extern "C" fn pthread_getattr_np(native: pthread_t, attr: &mut pthread_attr_t) -> c_int;
extern "C" fn pthread_attr_getstack(attr: &pthread_attr_t, stackaddr: &mut &mut c_void, stacksize: &mut size_t) -> c_int;
extern "C" fn memalign(align: size_t, size: size_t) -> &mut c_void;
extern "C" fn setgroups(ngroups: size_t, ptr: &gid_t) -> c_int;
extern "C" fn pipe2(fds: &mut c_int, flags: c_int) -> c_int;
extern "C" fn statfs(path: &c_char, buf: &mut statfs_t) -> c_int;
extern "C" fn statfs64(path: &c_char, buf: &mut statfs64_t) -> c_int;
extern "C" fn fstatfs(fd: c_int, buf: &mut statfs_t) -> c_int;
extern "C" fn fstatfs64(fd: c_int, buf: &mut statfs64_t) -> c_int;
extern "C" fn statvfs64(path: &c_char, buf: &mut statvfs64_t) -> c_int;
extern "C" fn fstatvfs64(fd: c_int, buf: &mut statvfs64_t) -> c_int;
extern "C" fn memrchr(cx: &c_void, c: c_int, n: size_t) -> &mut c_void;
extern "C" fn posix_fadvise(fd: c_int, offset: off_t, len: off_t, advise: c_int) -> c_int;
extern "C" fn posix_fadvise64(fd: c_int, offset: off64_t, len: off64_t, advise: c_int) -> c_int;
extern "C" fn futimens(fd: c_int, times: &timespec) -> c_int;
extern "C" fn utimensat(dirfd: c_int, path: &c_char, times: &timespec, flag: c_int) -> c_int;
extern "C" fn duplocale(base: locale_t) -> locale_t;
extern "C" fn freelocale(loc: locale_t);
extern "C" fn newlocale(mask: c_int, locale: &c_char, base: locale_t) -> locale_t;
extern "C" fn uselocale(loc: locale_t) -> locale_t;
extern "C" fn creat64(path: &c_char, mode: mode_t) -> c_int;
extern "C" fn fstat64(fildes: c_int, buf: &mut stat64_t) -> c_int;
extern "C" fn fstatat64(dirfd: c_int, pathname: &c_char, buf: &mut stat64_t, flags: c_int) -> c_int;
extern "C" fn ftruncate64(fd: c_int, length: off64_t) -> c_int;
extern "C" fn lseek64(fd: c_int, offset: off64_t, whence: c_int) -> off64_t;
extern "C" fn lstat64(path: &c_char, buf: &mut stat64_t) -> c_int;
extern "C" fn mmap64(addr: &mut c_void, len: size_t, prot: c_int, flags: c_int, fd: c_int, offset: off64_t) -> &mut c_void;
extern "C" fn open64(path: &c_char, oflag: c_int, ...) -> c_int;
extern "C" fn openat64(fd: c_int, path: &c_char, oflag: c_int, ...) -> c_int;
extern "C" fn pread64(fd: c_int, buf: &mut c_void, count: size_t, offset: off64_t) -> ssize_t;
extern "C" fn pwrite64(fd: c_int, buf: &c_void, count: size_t, offset: off64_t) -> ssize_t;
extern "C" fn readdir64(dirp: &mut DIR) -> &mut dirent64;
extern "C" fn readdir64_r(dirp: &mut DIR, entry: &mut dirent64, result: &mut &mut dirent64) -> c_int;
extern "C" fn stat64(path: &c_char, buf: &mut stat64_t) -> c_int;
extern "C" fn truncate64(path: &c_char, length: off64_t) -> c_int;
extern "C" fn mknodat(dirfd: c_int, pathname: &c_char, mode: mode_t, dev: dev_t) -> c_int;
extern "C" fn pthread_condattr_getclock(attr: &pthread_condattr_t, clock_id: &mut clockid_t) -> c_int;
extern "C" fn pthread_condattr_setclock(attr: &mut pthread_condattr_t, clock_id: clockid_t) -> c_int;
extern "C" fn pthread_condattr_setpshared(attr: &mut pthread_condattr_t, pshared: c_int) -> c_int;
extern "C" fn pthread_mutexattr_setpshared(attr: &mut pthread_mutexattr_t, pshared: c_int) -> c_int;
extern "C" fn pthread_rwlockattr_getpshared(attr: &pthread_rwlockattr_t, val: &mut c_int) -> c_int;
extern "C" fn pthread_rwlockattr_setpshared(attr: &mut pthread_rwlockattr_t, val: c_int) -> c_int;
extern "C" fn ptsname_r(fd: c_int, buf: &mut c_char, buflen: size_t) -> c_int;
extern "C" fn clearenv() -> c_int;
extern "C" fn waitid(idtype: idtype_t, id: id_t, infop: &mut siginfo_t, options: c_int) -> c_int;
extern "C" fn getresuid(ruid: &mut uid_t, euid: &mut uid_t, suid: &mut uid_t) -> c_int;
extern "C" fn getresgid(rgid: &mut gid_t, egid: &mut gid_t, sgid: &mut gid_t) -> c_int;
extern "C" fn acct(filename: &c_char) -> c_int;
extern "C" fn brk(addr: &mut c_void) -> c_int;
extern "C" fn sbrk(increment: intptr_t) -> &mut c_void;
extern "C" fn vfork() -> pid_t;
extern "C" fn setresgid(rgid: gid_t, egid: gid_t, sgid: gid_t) -> c_int;
extern "C" fn setresuid(ruid: uid_t, euid: uid_t, suid: uid_t) -> c_int;
extern "C" fn wait4(pid: pid_t, status: &mut c_int, options: c_int, rusage_: &mut rusage) -> pid_t;
extern "C" fn login_tty(fd: c_int) -> c_int;
extern "C" fn execvpe(file: &c_char, argv: &&c_char, envp: &&c_char) -> c_int;
extern "C" fn fexecve(fd: c_int, argv: &&c_char, envp: &&c_char) -> c_int;
extern "C" fn getifaddrs(ifap: &mut &mut ifaddrs) -> c_int;
extern "C" fn freeifaddrs(ifa: &mut ifaddrs);
extern "C" fn bind(socket: c_int, address: &sockaddr, address_len: socklen_t) -> c_int;
extern "C" fn writev(fd: c_int, iov: &iovec, iovcnt: c_int) -> ssize_t;
extern "C" fn readv(fd: c_int, iov: &iovec, iovcnt: c_int) -> ssize_t;
extern "C" fn sendmsg(fd: c_int, msg: &msghdr, flags: c_int) -> ssize_t;
extern "C" fn recvmsg(fd: c_int, msg: &mut msghdr, flags: c_int) -> ssize_t;
extern "C" fn uname(buf: &mut utsname) -> c_int;
extern "C" fn strchrnul(s: &c_char, c: c_int) -> &mut c_char;
extern "C" fn preadv64(fd: c_int, iov: &iovec, iovcnt: c_int, offset: off64_t) -> ssize_t;
extern "C" fn pwritev64(fd: c_int, iov: &iovec, iovcnt: c_int, offset: off64_t) -> ssize_t;
extern "C" fn forkpty(amaster: &mut c_int, name: &mut c_char, termp: &termios, winp: &winsize) -> pid_t;
extern "C" fn openpty(amaster: &mut c_int, aslave: &mut c_int, name: &mut c_char, termp: &termios, winp: &winsize) -> c_int;
type useconds_t = u32;
type dev_t = u64;
type socklen_t = u32;
type mode_t = u32;
type ino64_t = u64;
type off64_t = i64;
type blkcnt64_t = i64;
type rlim64_t = u64;
type mqd_t = c_int;
type nfds_t = c_ulong;
type nl_item = c_int;
type idtype_t = c_uint;
type loff_t = c_longlong;
type pthread_key_t = c_uint;
type pthread_spinlock_t = c_int;
type __u8 = c_uchar;
type __u16 = c_ushort;
type __s16 = c_short;
type __u32 = c_uint;
type __s32 = c_int;
type Elf32_Half = u16;
type Elf32_Word = u32;
type Elf32_Off = u32;
type Elf32_Addr = u32;
type Elf64_Half = u16;
type Elf64_Word = u32;
type Elf64_Off = u64;
type Elf64_Addr = u64;
type Elf64_Xword = u64;
type Elf64_Sxword = i64;
type Elf32_Section = u16;
type Elf64_Section = u16;
type canid_t = u32;
type can_err_mask_t = u32;
type pgn_t = u32;
type priority_t = u8;
type name_t = u64;
type iconv_t = &mut c_void;
type sctp_assoc_t = __s32;
enum fpos64_t {}
struct rlimit64 {
    rlim_cur: rlim64_t,
    rlim_max: rlim64_t,
}
struct glob_t {
    gl_pathc: size_t,
    gl_pathv: &mut &mut c_char,
    gl_offs: size_t,
    gl_flags: c_int,
    __unused1: &mut c_void,
    __unused2: &mut c_void,
    __unused3: &mut c_void,
    __unused4: &mut c_void,
    __unused5: &mut c_void,
}
struct passwd {
    pw_name: &mut c_char,
    pw_passwd: &mut c_char,
    pw_uid: uid_t,
    pw_gid: gid_t,
    pw_gecos: &mut c_char,
    pw_dir: &mut c_char,
    pw_shell: &mut c_char,
}
struct spwd {
    sp_namp: &mut c_char,
    sp_pwdp: &mut c_char,
    sp_lstchg: c_long,
    sp_min: c_long,
    sp_max: c_long,
    sp_warn: c_long,
    sp_inact: c_long,
    sp_expire: c_long,
    sp_flag: c_ulong,
}
struct dqblk {
    dqb_bhardlimit: u64,
    dqb_bsoftlimit: u64,
    dqb_curspace: u64,
    dqb_ihardlimit: u64,
    dqb_isoftlimit: u64,
    dqb_curinodes: u64,
    dqb_btime: u64,
    dqb_itime: u64,
    dqb_valid: u32,
}
struct signalfd_siginfo {
    ssi_signo: u32,
    ssi_errno: i32,
    ssi_code: i32,
    ssi_pid: u32,
    ssi_uid: u32,
    ssi_fd: i32,
    ssi_tid: u32,
    ssi_band: u32,
    ssi_overrun: u32,
    ssi_trapno: u32,
    ssi_status: i32,
    ssi_int: i32,
    ssi_ptr: u64,
    ssi_utime: u64,
    ssi_stime: u64,
    ssi_addr: u64,
    ssi_addr_lsb: u16,
    _pad2: u16,
    ssi_syscall: i32,
    ssi_call_addr: u64,
    ssi_arch: u32,
    _pad: [u8; 28],
}
struct itimerspec {
    it_interval: timespec,
    it_value: timespec,
}
struct fsid_t {
    __val: [c_int; 2],
}
struct packet_mreq {
    mr_ifindex: c_int,
    mr_type: c_ushort,
    mr_alen: c_ushort,
    mr_address: [c_uchar; 8],
}
struct cpu_set_t {
    bits: [u64; 16],
}
struct if_nameindex_t {
    if_index: c_uint,
    if_name: &mut c_char,
}
struct msginfo {
    msgpool: c_int,
    msgmap: c_int,
    msgmax: c_int,
    msgmnb: c_int,
    msgmni: c_int,
    msgssz: c_int,
    msgtql: c_int,
    msgseg: c_ushort,
}
struct sembuf {
    sem_num: c_ushort,
    sem_op: c_short,
    sem_flg: c_short,
}
struct input_event {
    time: timeval,
    type_: __u16,
    code: __u16,
    value: __s32,
}
struct input_id {
    bustype: __u16,
    vendor: __u16,
    product: __u16,
    version: __u16,
}
struct input_absinfo {
    value: __s32,
    minimum: __s32,
    maximum: __s32,
    fuzz: __s32,
    flat: __s32,
    resolution: __s32,
}
struct input_keymap_entry {
    flags: __u8,
    len: __u8,
    index: __u16,
    keycode: __u32,
    scancode: [__u8; 32],
}
struct input_mask {
    type_: __u32,
    codes_size: __u32,
    codes_ptr: __u64,
}
struct ff_replay {
    length: __u16,
    delay: __u16,
}
struct ff_trigger {
    button: __u16,
    interval: __u16,
}
struct ff_envelope {
    attack_length: __u16,
    attack_level: __u16,
    fade_length: __u16,
    fade_level: __u16,
}
struct ff_constant_effect {
    level: __s16,
    envelope: ff_envelope,
}
struct ff_ramp_effect {
    start_level: __s16,
    end_level: __s16,
    envelope: ff_envelope,
}
struct ff_condition_effect {
    right_saturation: __u16,
    left_saturation: __u16,
    right_coeff: __s16,
    left_coeff: __s16,
    deadband: __u16,
    center: __s16,
}
struct ff_periodic_effect {
    waveform: __u16,
    period: __u16,
    magnitude: __s16,
    offset: __s16,
    phase: __u16,
    envelope: ff_envelope,
    custom_len: __u32,
    custom_data: &mut __s16,
}
struct ff_rumble_effect {
    strong_magnitude: __u16,
    weak_magnitude: __u16,
}
struct ff_effect {
    type_: __u16,
    id: __s16,
    direction: __u16,
    trigger: ff_trigger,
    replay: ff_replay,

    u: [u64; 4],
}
struct uinput_ff_upload {
    request_id: __u32,
    retval: __s32,
    effect: ff_effect,
    old: ff_effect,
}
struct uinput_ff_erase {
    request_id: __u32,
    retval: __s32,
    effect_id: __u32,
}
struct uinput_abs_setup {
    code: __u16,
    absinfo: input_absinfo,
}
struct dl_phdr_info {
    dlpi_addr: Elf64_Addr,
    dlpi_name: &c_char,

    dlpi_phdr: &Elf64_Phdr,

    dlpi_phnum: Elf64_Half,

    dlpi_adds: c_ulonglong,

    dlpi_subs: c_ulonglong,

    dlpi_tls_modid: size_t,

    dlpi_tls_data: &mut c_void,
}
struct Elf32_Ehdr {
    e_ident: [c_uchar; 16],
    e_type: Elf32_Half,
    e_machine: Elf32_Half,
    e_version: Elf32_Word,
    e_entry: Elf32_Addr,
    e_phoff: Elf32_Off,
    e_shoff: Elf32_Off,
    e_flags: Elf32_Word,
    e_ehsize: Elf32_Half,
    e_phentsize: Elf32_Half,
    e_phnum: Elf32_Half,
    e_shentsize: Elf32_Half,
    e_shnum: Elf32_Half,
    e_shstrndx: Elf32_Half,
}
struct Elf64_Ehdr {
    e_ident: [c_uchar; 16],
    e_type: Elf64_Half,
    e_machine: Elf64_Half,
    e_version: Elf64_Word,
    e_entry: Elf64_Addr,
    e_phoff: Elf64_Off,
    e_shoff: Elf64_Off,
    e_flags: Elf64_Word,
    e_ehsize: Elf64_Half,
    e_phentsize: Elf64_Half,
    e_phnum: Elf64_Half,
    e_shentsize: Elf64_Half,
    e_shnum: Elf64_Half,
    e_shstrndx: Elf64_Half,
}
struct Elf32_Sym {
    st_name: Elf32_Word,
    st_value: Elf32_Addr,
    st_size: Elf32_Word,
    st_info: c_uchar,
    st_other: c_uchar,
    st_shndx: Elf32_Section,
}
struct Elf64_Sym {
    st_name: Elf64_Word,
    st_info: c_uchar,
    st_other: c_uchar,
    st_shndx: Elf64_Section,
    st_value: Elf64_Addr,
    st_size: Elf64_Xword,
}
struct Elf32_Phdr {
    p_type: Elf32_Word,
    p_offset: Elf32_Off,
    p_vaddr: Elf32_Addr,
    p_paddr: Elf32_Addr,
    p_filesz: Elf32_Word,
    p_memsz: Elf32_Word,
    p_flags: Elf32_Word,
    p_align: Elf32_Word,
}
struct Elf64_Phdr {
    p_type: Elf64_Word,
    p_flags: Elf64_Word,
    p_offset: Elf64_Off,
    p_vaddr: Elf64_Addr,
    p_paddr: Elf64_Addr,
    p_filesz: Elf64_Xword,
    p_memsz: Elf64_Xword,
    p_align: Elf64_Xword,
}
struct Elf32_Shdr {
    sh_name: Elf32_Word,
    sh_type: Elf32_Word,
    sh_flags: Elf32_Word,
    sh_addr: Elf32_Addr,
    sh_offset: Elf32_Off,
    sh_size: Elf32_Word,
    sh_link: Elf32_Word,
    sh_info: Elf32_Word,
    sh_addralign: Elf32_Word,
    sh_entsize: Elf32_Word,
}
struct Elf64_Shdr {
    sh_name: Elf64_Word,
    sh_type: Elf64_Word,
    sh_flags: Elf64_Xword,
    sh_addr: Elf64_Addr,
    sh_offset: Elf64_Off,
    sh_size: Elf64_Xword,
    sh_link: Elf64_Word,
    sh_info: Elf64_Word,
    sh_addralign: Elf64_Xword,
    sh_entsize: Elf64_Xword,
}
struct ucred {
    pid: pid_t,
    uid: uid_t,
    gid: gid_t,
}
struct mntent {
    mnt_fsname: &mut c_char,
    mnt_dir: &mut c_char,
    mnt_type: &mut c_char,
    mnt_opts: &mut c_char,
    mnt_freq: c_int,
    mnt_passno: c_int,
}
struct posix_spawn_file_actions_t {
    __allocated: c_int,
    __used: c_int,
    __actions: &mut c_int,
    __pad: [c_int; 16],
}
struct posix_spawnattr_t {
    __flags: c_short,
    __pgrp: pid_t,
    __sd: sigset_t,
    __ss: sigset_t,

    __prio: c_int,
    __policy: c_int,
    __pad: [c_int; 16],
}
struct genlmsghdr {
    cmd: u8,
    version: u8,
    reserved: u16,
}
struct in6_pktinfo {
    ipi6_addr: in6_addr,
    ipi6_ifindex: c_uint,
}
struct arpd_request {
    req: c_ushort,
    ip: u32,
    dev: c_ulong,
    stamp: c_ulong,
    updated: c_ulong,
    ha: [c_uchar; MAX_ADDR_LEN],
}
struct inotify_event {
    wd: c_int,
    mask: u32,
    cookie: u32,
    len: u32,
}
struct fanotify_response {
    fd: c_int,
    response: __u32,
}
struct sockaddr_vm {
    svm_family: sa_family_t,
    svm_reserved1: c_ushort,
    svm_port: c_uint,
    svm_cid: c_uint,
    svm_zero: [u8; 4],
}
struct regmatch_t {
    rm_so: regoff_t,
    rm_eo: regoff_t,
}
struct sock_extended_err {
    ee_errno: u32,
    ee_origin: u8,
    ee_type: u8,
    ee_code: u8,
    ee_pad: u8,
    ee_info: u32,
    ee_data: u32,
}
struct __c_anonymous_sockaddr_can_tp {
    rx_id: canid_t,
    tx_id: canid_t,
}
struct __c_anonymous_sockaddr_can_j1939 {
    name: u64,
    pgn: u32,
    addr: u8,
}
struct can_filter {
    can_id: canid_t,
    can_mask: canid_t,
}
struct j1939_filter {
    name: name_t,
    name_mask: name_t,
    pgn: pgn_t,
    pgn_mask: pgn_t,
    addr: u8,
    addr_mask: u8,
}
struct sock_filter {
    code: __u16,
    jt: __u8,
    jf: __u8,
    k: __u32,
}
struct sock_fprog {
    len: c_ushort,
    filter: &mut sock_filter,
}
struct seccomp_data {
    nr: c_int,
    arch: __u32,
    instruction_pointer: __u64,
    args: [__u64; 6],
}
struct nlmsghdr {
    nlmsg_len: u32,
    nlmsg_type: u16,
    nlmsg_flags: u16,
    nlmsg_seq: u32,
    nlmsg_pid: u32,
}
struct nlmsgerr {
    error: c_int,
    msg: nlmsghdr,
}
struct nlattr {
    nla_len: u16,
    nla_type: u16,
}
struct file_clone_range {
    src_fd: __s64,
    src_offset: __u64,
    src_length: __u64,
    dest_offset: __u64,
}
struct __c_anonymous_ifru_map {
    mem_start: c_ulong,
    mem_end: c_ulong,
    base_addr: c_ushort,
    irq: c_uchar,
    dma: c_uchar,
    port: c_uchar,
}
struct in6_ifreq {
    ifr6_addr: in6_addr,
    ifr6_prefixlen: u32,
    ifr6_ifindex: c_int,
}
struct option {
    name: &c_char,
    has_arg: c_int,
    flag: &mut c_int,
    val: c_int,
}
struct sctp_initmsg {
    sinit_num_ostreams: __u16,
    sinit_max_instreams: __u16,
    sinit_max_attempts: __u16,
    sinit_max_init_timeo: __u16,
}
struct sctp_sndrcvinfo {
    sinfo_stream: __u16,
    sinfo_ssn: __u16,
    sinfo_flags: __u16,
    sinfo_ppid: __u32,
    sinfo_context: __u32,
    sinfo_timetolive: __u32,
    sinfo_tsn: __u32,
    sinfo_cumtsn: __u32,
    sinfo_assoc_id: sctp_assoc_t,
}
struct sctp_sndinfo {
    snd_sid: __u16,
    snd_flags: __u16,
    snd_ppid: __u32,
    snd_context: __u32,
    snd_assoc_id: sctp_assoc_t,
}
struct sctp_rcvinfo {
    rcv_sid: __u16,
    rcv_ssn: __u16,
    rcv_flags: __u16,
    rcv_ppid: __u32,
    rcv_tsn: __u32,
    rcv_cumtsn: __u32,
    rcv_context: __u32,
    rcv_assoc_id: sctp_assoc_t,
}
struct sctp_nxtinfo {
    nxt_sid: __u16,
    nxt_flags: __u16,
    nxt_ppid: __u32,
    nxt_length: __u32,
    nxt_assoc_id: sctp_assoc_t,
}
struct sctp_prinfo {
    pr_policy: __u16,
    pr_value: __u32,
}
struct sctp_authinfo {
    auth_keynumber: __u16,
}
struct sockaddr_nl {
    nl_family: sa_family_t,
    nl_pad: c_ushort,
    nl_pid: u32,
    nl_groups: u32,
}
struct dirent {
    d_ino: ino_t,
    d_off: off_t,
    d_reclen: c_ushort,
    d_type: c_uchar,
    d_name: [c_char; 256],
}
struct dirent64 {
    d_ino: ino64_t,
    d_off: off64_t,
    d_reclen: c_ushort,
    d_type: c_uchar,
    d_name: [c_char; 256],
}
struct sockaddr_alg {
    salg_family: sa_family_t,
    salg_type: [c_uchar; 14],
    salg_feat: u32,
    salg_mask: u32,
    salg_name: [c_uchar; 64],
}
struct uinput_setup {
    id: input_id,
    name: [c_char; UINPUT_MAX_NAME_SIZE],
    ff_effects_max: __u32,
}
struct uinput_user_dev {
    name: [c_char; UINPUT_MAX_NAME_SIZE],
    id: input_id,
    ff_effects_max: __u32,
    absmax: [__s32; ABS_CNT],
    absmin: [__s32; ABS_CNT],
    absfuzz: [__s32; ABS_CNT],
    absflat: [__s32; ABS_CNT],
}
struct af_alg_iv {
    ivlen: u32,
    iv: [c_uchar; 0],
}
struct mq_attr {
    mq_flags: c_long,

    mq_maxmsg: c_long,

    mq_msgsize: c_long,

    mq_curmsgs: c_long,

    pad: [c_long; 4],
}
union __c_anonymous_ifr_ifru {
    ifru_addr: sockaddr,
    ifru_dstaddr: sockaddr,
    ifru_broadaddr: sockaddr,
    ifru_netmask: sockaddr,
    ifru_hwaddr: sockaddr,
    ifru_flags: c_short,
    ifru_ifindex: c_int,
    ifru_metric: c_int,
    ifru_mtu: c_int,
    ifru_map: __c_anonymous_ifru_map,
    ifru_slave: [c_char; IFNAMSIZ],
    ifru_newname: [c_char; IFNAMSIZ],
    ifru_data: &mut c_char,
}
struct ifreq {
    ifr_name: [c_char; IFNAMSIZ],

    ifr_ifru: __c_anonymous_ifr_ifru,
}
struct hwtstamp_config {
    flags: c_int,
    tx_type: c_int,
    rx_filter: c_int,
}
struct sock_txtime {
    clockid: clockid_t,
    flags: __u32,
}
union __c_anonymous_sockaddr_can_can_addr {
    tp: __c_anonymous_sockaddr_can_tp,
    j1939: __c_anonymous_sockaddr_can_j1939,
}
struct sockaddr_can {
    can_family: sa_family_t,
    can_ifindex: c_int,
    can_addr: __c_anonymous_sockaddr_can_can_addr,
}
const ABDAY_1: nl_item = 0x20000;
const ABDAY_2: nl_item = 0x20001;
const ABDAY_3: nl_item = 0x20002;
const ABDAY_4: nl_item = 0x20003;
const ABDAY_5: nl_item = 0x20004;
const ABDAY_6: nl_item = 0x20005;
const ABDAY_7: nl_item = 0x20006;
const DAY_1: nl_item = 0x20007;
const DAY_2: nl_item = 0x20008;
const DAY_3: nl_item = 0x20009;
const DAY_4: nl_item = 0x2000A;
const DAY_5: nl_item = 0x2000B;
const DAY_6: nl_item = 0x2000C;
const DAY_7: nl_item = 0x2000D;
const ABMON_1: nl_item = 0x2000E;
const ABMON_2: nl_item = 0x2000F;
const ABMON_3: nl_item = 0x20010;
const ABMON_4: nl_item = 0x20011;
const ABMON_5: nl_item = 0x20012;
const ABMON_6: nl_item = 0x20013;
const ABMON_7: nl_item = 0x20014;
const ABMON_8: nl_item = 0x20015;
const ABMON_9: nl_item = 0x20016;
const ABMON_10: nl_item = 0x20017;
const ABMON_11: nl_item = 0x20018;
const ABMON_12: nl_item = 0x20019;
const MON_1: nl_item = 0x2001A;
const MON_2: nl_item = 0x2001B;
const MON_3: nl_item = 0x2001C;
const MON_4: nl_item = 0x2001D;
const MON_5: nl_item = 0x2001E;
const MON_6: nl_item = 0x2001F;
const MON_7: nl_item = 0x20020;
const MON_8: nl_item = 0x20021;
const MON_9: nl_item = 0x20022;
const MON_10: nl_item = 0x20023;
const MON_11: nl_item = 0x20024;
const MON_12: nl_item = 0x20025;
const AM_STR: nl_item = 0x20026;
const PM_STR: nl_item = 0x20027;
const D_T_FMT: nl_item = 0x20028;
const D_FMT: nl_item = 0x20029;
const T_FMT: nl_item = 0x2002A;
const T_FMT_AMPM: nl_item = 0x2002B;
const ERA: nl_item = 0x2002C;
const ERA_D_FMT: nl_item = 0x2002E;
const ALT_DIGITS: nl_item = 0x2002F;
const ERA_D_T_FMT: nl_item = 0x20030;
const ERA_T_FMT: nl_item = 0x20031;
const CODESET: nl_item = 14;
const CRNCYSTR: nl_item = 0x4000F;
const RADIXCHAR: nl_item = 0x10000;
const THOUSEP: nl_item = 0x10001;
const YESEXPR: nl_item = 0x50000;
const NOEXPR: nl_item = 0x50001;
const YESSTR: nl_item = 0x50002;
const NOSTR: nl_item = 0x50003;
const RUSAGE_CHILDREN: c_int = -1;
const L_tmpnam: c_uint = 20;
const _PC_LINK_MAX: c_int = 0;
const _PC_MAX_CANON: c_int = 1;
const _PC_MAX_INPUT: c_int = 2;
const _PC_NAME_MAX: c_int = 3;
const _PC_PATH_MAX: c_int = 4;
const _PC_PIPE_BUF: c_int = 5;
const _PC_CHOWN_RESTRICTED: c_int = 6;
const _PC_NO_TRUNC: c_int = 7;
const _PC_VDISABLE: c_int = 8;
const _PC_SYNC_IO: c_int = 9;
const _PC_ASYNC_IO: c_int = 10;
const _PC_PRIO_IO: c_int = 11;
const _PC_SOCK_MAXBUF: c_int = 12;
const _PC_FILESIZEBITS: c_int = 13;
const _PC_REC_INCR_XFER_SIZE: c_int = 14;
const _PC_REC_MAX_XFER_SIZE: c_int = 15;
const _PC_REC_MIN_XFER_SIZE: c_int = 16;
const _PC_REC_XFER_ALIGN: c_int = 17;
const _PC_ALLOC_SIZE_MIN: c_int = 18;
const _PC_SYMLINK_MAX: c_int = 19;
const _PC_2_SYMLINKS: c_int = 20;
const MS_NOUSER: c_ulong = 0xffffffff80000000;
const _SC_ARG_MAX: c_int = 0;
const _SC_CHILD_MAX: c_int = 1;
const _SC_CLK_TCK: c_int = 2;
const _SC_NGROUPS_MAX: c_int = 3;
const _SC_OPEN_MAX: c_int = 4;
const _SC_STREAM_MAX: c_int = 5;
const _SC_TZNAME_MAX: c_int = 6;
const _SC_JOB_CONTROL: c_int = 7;
const _SC_SAVED_IDS: c_int = 8;
const _SC_REALTIME_SIGNALS: c_int = 9;
const _SC_PRIORITY_SCHEDULING: c_int = 10;
const _SC_TIMERS: c_int = 11;
const _SC_ASYNCHRONOUS_IO: c_int = 12;
const _SC_PRIORITIZED_IO: c_int = 13;
const _SC_SYNCHRONIZED_IO: c_int = 14;
const _SC_FSYNC: c_int = 15;
const _SC_MAPPED_FILES: c_int = 16;
const _SC_MEMLOCK: c_int = 17;
const _SC_MEMLOCK_RANGE: c_int = 18;
const _SC_MEMORY_PROTECTION: c_int = 19;
const _SC_MESSAGE_PASSING: c_int = 20;
const _SC_SEMAPHORES: c_int = 21;
const _SC_SHARED_MEMORY_OBJECTS: c_int = 22;
const _SC_AIO_LISTIO_MAX: c_int = 23;
const _SC_AIO_MAX: c_int = 24;
const _SC_AIO_PRIO_DELTA_MAX: c_int = 25;
const _SC_DELAYTIMER_MAX: c_int = 26;
const _SC_MQ_OPEN_MAX: c_int = 27;
const _SC_MQ_PRIO_MAX: c_int = 28;
const _SC_VERSION: c_int = 29;
const _SC_PAGESIZE: c_int = 30;
const _SC_PAGE_SIZE: c_int = _SC_PAGESIZE;
const _SC_RTSIG_MAX: c_int = 31;
const _SC_SEM_NSEMS_MAX: c_int = 32;
const _SC_SEM_VALUE_MAX: c_int = 33;
const _SC_SIGQUEUE_MAX: c_int = 34;
const _SC_TIMER_MAX: c_int = 35;
const _SC_BC_BASE_MAX: c_int = 36;
const _SC_BC_DIM_MAX: c_int = 37;
const _SC_BC_SCALE_MAX: c_int = 38;
const _SC_BC_STRING_MAX: c_int = 39;
const _SC_COLL_WEIGHTS_MAX: c_int = 40;
const _SC_EXPR_NEST_MAX: c_int = 42;
const _SC_LINE_MAX: c_int = 43;
const _SC_RE_DUP_MAX: c_int = 44;
const _SC_2_VERSION: c_int = 46;
const _SC_2_C_BIND: c_int = 47;
const _SC_2_C_DEV: c_int = 48;
const _SC_2_FORT_DEV: c_int = 49;
const _SC_2_FORT_RUN: c_int = 50;
const _SC_2_SW_DEV: c_int = 51;
const _SC_2_LOCALEDEF: c_int = 52;
const _SC_UIO_MAXIOV: c_int = 60;
const _SC_IOV_MAX: c_int = 60;
const _SC_THREADS: c_int = 67;
const _SC_THREAD_SAFE_FUNCTIONS: c_int = 68;
const _SC_GETGR_R_SIZE_MAX: c_int = 69;
const _SC_GETPW_R_SIZE_MAX: c_int = 70;
const _SC_LOGIN_NAME_MAX: c_int = 71;
const _SC_TTY_NAME_MAX: c_int = 72;
const _SC_THREAD_DESTRUCTOR_ITERATIONS: c_int = 73;
const _SC_THREAD_KEYS_MAX: c_int = 74;
const _SC_THREAD_STACK_MIN: c_int = 75;
const _SC_THREAD_THREADS_MAX: c_int = 76;
const _SC_THREAD_ATTR_STACKADDR: c_int = 77;
const _SC_THREAD_ATTR_STACKSIZE: c_int = 78;
const _SC_THREAD_PRIORITY_SCHEDULING: c_int = 79;
const _SC_THREAD_PRIO_INHERIT: c_int = 80;
const _SC_THREAD_PRIO_PROTECT: c_int = 81;
const _SC_THREAD_PROCESS_SHARED: c_int = 82;
const _SC_NPROCESSORS_CONF: c_int = 83;
const _SC_NPROCESSORS_ONLN: c_int = 84;
const _SC_PHYS_PAGES: c_int = 85;
const _SC_AVPHYS_PAGES: c_int = 86;
const _SC_ATEXIT_MAX: c_int = 87;
const _SC_PASS_MAX: c_int = 88;
const _SC_XOPEN_VERSION: c_int = 89;
const _SC_XOPEN_XCU_VERSION: c_int = 90;
const _SC_XOPEN_UNIX: c_int = 91;
const _SC_XOPEN_CRYPT: c_int = 92;
const _SC_XOPEN_ENH_I18N: c_int = 93;
const _SC_XOPEN_SHM: c_int = 94;
const _SC_2_CHAR_TERM: c_int = 95;
const _SC_2_UPE: c_int = 97;
const _SC_XOPEN_XPG2: c_int = 98;
const _SC_XOPEN_XPG3: c_int = 99;
const _SC_XOPEN_XPG4: c_int = 100;
const _SC_NZERO: c_int = 109;
const _SC_XBS5_ILP32_OFF32: c_int = 125;
const _SC_XBS5_ILP32_OFFBIG: c_int = 126;
const _SC_XBS5_LP64_OFF64: c_int = 127;
const _SC_XBS5_LPBIG_OFFBIG: c_int = 128;
const _SC_XOPEN_LEGACY: c_int = 129;
const _SC_XOPEN_REALTIME: c_int = 130;
const _SC_XOPEN_REALTIME_THREADS: c_int = 131;
const _SC_ADVISORY_INFO: c_int = 132;
const _SC_BARRIERS: c_int = 133;
const _SC_CLOCK_SELECTION: c_int = 137;
const _SC_CPUTIME: c_int = 138;
const _SC_THREAD_CPUTIME: c_int = 139;
const _SC_MONOTONIC_CLOCK: c_int = 149;
const _SC_READER_WRITER_LOCKS: c_int = 153;
const _SC_SPIN_LOCKS: c_int = 154;
const _SC_REGEXP: c_int = 155;
const _SC_SHELL: c_int = 157;
const _SC_SPAWN: c_int = 159;
const _SC_SPORADIC_SERVER: c_int = 160;
const _SC_THREAD_SPORADIC_SERVER: c_int = 161;
const _SC_TIMEOUTS: c_int = 164;
const _SC_TYPED_MEMORY_OBJECTS: c_int = 165;
const _SC_2_PBS: c_int = 168;
const _SC_2_PBS_ACCOUNTING: c_int = 169;
const _SC_2_PBS_LOCATE: c_int = 170;
const _SC_2_PBS_MESSAGE: c_int = 171;
const _SC_2_PBS_TRACK: c_int = 172;
const _SC_SYMLOOP_MAX: c_int = 173;
const _SC_STREAMS: c_int = 174;
const _SC_2_PBS_CHECKPOINT: c_int = 175;
const _SC_V6_ILP32_OFF32: c_int = 176;
const _SC_V6_ILP32_OFFBIG: c_int = 177;
const _SC_V6_LP64_OFF64: c_int = 178;
const _SC_V6_LPBIG_OFFBIG: c_int = 179;
const _SC_HOST_NAME_MAX: c_int = 180;
const _SC_TRACE: c_int = 181;
const _SC_TRACE_EVENT_FILTER: c_int = 182;
const _SC_TRACE_INHERIT: c_int = 183;
const _SC_TRACE_LOG: c_int = 184;
const _SC_IPV6: c_int = 235;
const _SC_RAW_SOCKETS: c_int = 236;
const _SC_V7_ILP32_OFF32: c_int = 237;
const _SC_V7_ILP32_OFFBIG: c_int = 238;
const _SC_V7_LP64_OFF64: c_int = 239;
const _SC_V7_LPBIG_OFFBIG: c_int = 240;
const _SC_SS_REPL_MAX: c_int = 241;
const _SC_TRACE_EVENT_NAME_MAX: c_int = 242;
const _SC_TRACE_NAME_MAX: c_int = 243;
const _SC_TRACE_SYS_MAX: c_int = 244;
const _SC_TRACE_USER_EVENT_MAX: c_int = 245;
const _SC_XOPEN_STREAMS: c_int = 246;
const _SC_THREAD_ROBUST_PRIO_INHERIT: c_int = 247;
const _SC_THREAD_ROBUST_PRIO_PROTECT: c_int = 248;
const RLIM_SAVED_MAX: rlim_t = RLIM_INFINITY;
const RLIM_SAVED_CUR: rlim_t = RLIM_INFINITY;
const EI_NIDENT: usize = 16;
const EI_MAG0: usize = 0;
const ELFMAG0: u8 = 0x7f;
const EI_MAG1: usize = 1;
const ELFMAG1: u8 = 'E';
const EI_MAG2: usize = 2;
const ELFMAG2: u8 = 'L';
const EI_MAG3: usize = 3;
const ELFMAG3: u8 = 'F';
const SELFMAG: usize = 4;
const EI_CLASS: usize = 4;
const ELFCLASSNONE: u8 = 0;
const ELFCLASS32: u8 = 1;
const ELFCLASS64: u8 = 2;
const ELFCLASSNUM: usize = 3;
const EI_DATA: usize = 5;
const ELFDATANONE: u8 = 0;
const ELFDATA2LSB: u8 = 1;
const ELFDATA2MSB: u8 = 2;
const ELFDATANUM: usize = 3;
const EI_VERSION: usize = 6;
const EI_OSABI: usize = 7;
const ELFOSABI_NONE: u8 = 0;
const ELFOSABI_SYSV: u8 = 0;
const ELFOSABI_HPUX: u8 = 1;
const ELFOSABI_NETBSD: u8 = 2;
const ELFOSABI_GNU: u8 = 3;
const ELFOSABI_LINUX: u8 = ELFOSABI_GNU;
const ELFOSABI_SOLARIS: u8 = 6;
const ELFOSABI_AIX: u8 = 7;
const ELFOSABI_IRIX: u8 = 8;
const ELFOSABI_FREEBSD: u8 = 9;
const ELFOSABI_TRU64: u8 = 10;
const ELFOSABI_MODESTO: u8 = 11;
const ELFOSABI_OPENBSD: u8 = 12;
const ELFOSABI_ARM: u8 = 97;
const ELFOSABI_STANDALONE: u8 = 255;
const EI_ABIVERSION: usize = 8;
const EI_PAD: usize = 9;
const ET_NONE: u16 = 0;
const ET_REL: u16 = 1;
const ET_EXEC: u16 = 2;
const ET_DYN: u16 = 3;
const ET_CORE: u16 = 4;
const ET_NUM: u16 = 5;
const ET_LOOS: u16 = 0xfe00;
const ET_HIOS: u16 = 0xfeff;
const ET_LOPROC: u16 = 0xff00;
const ET_HIPROC: u16 = 0xffff;
const EM_NONE: u16 = 0;
const EM_M32: u16 = 1;
const EM_SPARC: u16 = 2;
const EM_386: u16 = 3;
const EM_68K: u16 = 4;
const EM_88K: u16 = 5;
const EM_860: u16 = 7;
const EM_MIPS: u16 = 8;
const EM_S370: u16 = 9;
const EM_MIPS_RS3_LE: u16 = 10;
const EM_PARISC: u16 = 15;
const EM_VPP500: u16 = 17;
const EM_SPARC32PLUS: u16 = 18;
const EM_960: u16 = 19;
const EM_PPC: u16 = 20;
const EM_PPC64: u16 = 21;
const EM_S390: u16 = 22;
const EM_V800: u16 = 36;
const EM_FR20: u16 = 37;
const EM_RH32: u16 = 38;
const EM_RCE: u16 = 39;
const EM_ARM: u16 = 40;
const EM_FAKE_ALPHA: u16 = 41;
const EM_SH: u16 = 42;
const EM_SPARCV9: u16 = 43;
const EM_TRICORE: u16 = 44;
const EM_ARC: u16 = 45;
const EM_H8_300: u16 = 46;
const EM_H8_300H: u16 = 47;
const EM_H8S: u16 = 48;
const EM_H8_500: u16 = 49;
const EM_IA_64: u16 = 50;
const EM_MIPS_X: u16 = 51;
const EM_COLDFIRE: u16 = 52;
const EM_68HC12: u16 = 53;
const EM_MMA: u16 = 54;
const EM_PCP: u16 = 55;
const EM_NCPU: u16 = 56;
const EM_NDR1: u16 = 57;
const EM_STARCORE: u16 = 58;
const EM_ME16: u16 = 59;
const EM_ST100: u16 = 60;
const EM_TINYJ: u16 = 61;
const EM_X86_64: u16 = 62;
const EM_PDSP: u16 = 63;
const EM_FX66: u16 = 66;
const EM_ST9PLUS: u16 = 67;
const EM_ST7: u16 = 68;
const EM_68HC16: u16 = 69;
const EM_68HC11: u16 = 70;
const EM_68HC08: u16 = 71;
const EM_68HC05: u16 = 72;
const EM_SVX: u16 = 73;
const EM_ST19: u16 = 74;
const EM_VAX: u16 = 75;
const EM_CRIS: u16 = 76;
const EM_JAVELIN: u16 = 77;
const EM_FIREPATH: u16 = 78;
const EM_ZSP: u16 = 79;
const EM_MMIX: u16 = 80;
const EM_HUANY: u16 = 81;
const EM_PRISM: u16 = 82;
const EM_AVR: u16 = 83;
const EM_FR30: u16 = 84;
const EM_D10V: u16 = 85;
const EM_D30V: u16 = 86;
const EM_V850: u16 = 87;
const EM_M32R: u16 = 88;
const EM_MN10300: u16 = 89;
const EM_MN10200: u16 = 90;
const EM_PJ: u16 = 91;
const EM_OPENRISC: u16 = 92;
const EM_ARC_A5: u16 = 93;
const EM_XTENSA: u16 = 94;
const EM_AARCH64: u16 = 183;
const EM_TILEPRO: u16 = 188;
const EM_TILEGX: u16 = 191;
const EM_ALPHA: u16 = 0x9026;
const EV_NONE: u32 = 0;
const EV_CURRENT: u32 = 1;
const EV_NUM: u32 = 2;
const PT_NULL: u32 = 0;
const PT_LOAD: u32 = 1;
const PT_DYNAMIC: u32 = 2;
const PT_INTERP: u32 = 3;
const PT_NOTE: u32 = 4;
const PT_SHLIB: u32 = 5;
const PT_PHDR: u32 = 6;
const PT_TLS: u32 = 7;
const PT_NUM: u32 = 8;
const PT_LOOS: u32 = 0x60000000;
const PT_GNU_EH_FRAME: u32 = 0x6474e550;
const PT_GNU_STACK: u32 = 0x6474e551;
const PT_GNU_RELRO: u32 = 0x6474e552;
const PT_LOSUNW: u32 = 0x6ffffffa;
const PT_SUNWBSS: u32 = 0x6ffffffa;
const PT_SUNWSTACK: u32 = 0x6ffffffb;
const PT_HISUNW: u32 = 0x6fffffff;
const PT_HIOS: u32 = 0x6fffffff;
const PT_LOPROC: u32 = 0x70000000;
const PT_HIPROC: u32 = 0x7fffffff;
const PF_X: u32 = 1 << 0;
const PF_W: u32 = 1 << 1;
const PF_R: u32 = 1 << 2;
const PF_MASKOS: u32 = 0x0ff00000;
const PF_MASKPROC: u32 = 0xf0000000;
const AT_NULL: c_ulong = 0;
const AT_IGNORE: c_ulong = 1;
const AT_EXECFD: c_ulong = 2;
const AT_PHDR: c_ulong = 3;
const AT_PHENT: c_ulong = 4;
const AT_PHNUM: c_ulong = 5;
const AT_PAGESZ: c_ulong = 6;
const AT_BASE: c_ulong = 7;
const AT_FLAGS: c_ulong = 8;
const AT_ENTRY: c_ulong = 9;
const AT_NOTELF: c_ulong = 10;
const AT_UID: c_ulong = 11;
const AT_EUID: c_ulong = 12;
const AT_GID: c_ulong = 13;
const AT_EGID: c_ulong = 14;
const AT_PLATFORM: c_ulong = 15;
const AT_HWCAP: c_ulong = 16;
const AT_CLKTCK: c_ulong = 17;
const AT_SECURE: c_ulong = 23;
const AT_BASE_PLATFORM: c_ulong = 24;
const AT_RANDOM: c_ulong = 25;
const AT_HWCAP2: c_ulong = 26;
const AT_EXECFN: c_ulong = 31;
const AT_SYSINFO_EHDR: c_ulong = 33;
const GLOB_ERR: c_int = 1 << 0;
const GLOB_MARK: c_int = 1 << 1;
const GLOB_NOSORT: c_int = 1 << 2;
const GLOB_DOOFFS: c_int = 1 << 3;
const GLOB_NOCHECK: c_int = 1 << 4;
const GLOB_APPEND: c_int = 1 << 5;
const GLOB_NOESCAPE: c_int = 1 << 6;
const GLOB_NOSPACE: c_int = 1;
const GLOB_ABORTED: c_int = 2;
const GLOB_NOMATCH: c_int = 3;
const POSIX_MADV_NORMAL: c_int = 0;
const POSIX_MADV_RANDOM: c_int = 1;
const POSIX_MADV_SEQUENTIAL: c_int = 2;
const POSIX_MADV_WILLNEED: c_int = 3;
const POSIX_SPAWN_USEVFORK: c_int = 64;
const POSIX_SPAWN_SETSID: c_int = 128;
const S_IEXEC: mode_t = 64;
const S_IWRITE: mode_t = 128;
const S_IREAD: mode_t = 256;
const F_LOCK: c_int = 1;
const F_TEST: c_int = 3;
const F_TLOCK: c_int = 2;
const F_ULOCK: c_int = 0;
const F_SEAL_FUTURE_WRITE: c_int = 0x0010;
const IFF_LOWER_UP: c_int = 0x10000;
const IFF_DORMANT: c_int = 0x20000;
const IFF_ECHO: c_int = 0x40000;
const IFA_UNSPEC: c_ushort = 0;
const IFA_ADDRESS: c_ushort = 1;
const IFA_LOCAL: c_ushort = 2;
const IFA_LABEL: c_ushort = 3;
const IFA_BROADCAST: c_ushort = 4;
const IFA_ANYCAST: c_ushort = 5;
const IFA_CACHEINFO: c_ushort = 6;
const IFA_MULTICAST: c_ushort = 7;
const IFA_F_SECONDARY: u32 = 0x01;
const IFA_F_TEMPORARY: u32 = 0x01;
const IFA_F_NODAD: u32 = 0x02;
const IFA_F_OPTIMISTIC: u32 = 0x04;
const IFA_F_DADFAILED: u32 = 0x08;
const IFA_F_HOMEADDRESS: u32 = 0x10;
const IFA_F_DEPRECATED: u32 = 0x20;
const IFA_F_TENTATIVE: u32 = 0x40;
const IFA_F_PERMANENT: u32 = 0x80;
const IFLA_UNSPEC: c_ushort = 0;
const IFLA_ADDRESS: c_ushort = 1;
const IFLA_BROADCAST: c_ushort = 2;
const IFLA_IFNAME: c_ushort = 3;
const IFLA_MTU: c_ushort = 4;
const IFLA_LINK: c_ushort = 5;
const IFLA_QDISC: c_ushort = 6;
const IFLA_STATS: c_ushort = 7;
const IFLA_COST: c_ushort = 8;
const IFLA_PRIORITY: c_ushort = 9;
const IFLA_MASTER: c_ushort = 10;
const IFLA_WIRELESS: c_ushort = 11;
const IFLA_PROTINFO: c_ushort = 12;
const IFLA_TXQLEN: c_ushort = 13;
const IFLA_MAP: c_ushort = 14;
const IFLA_WEIGHT: c_ushort = 15;
const IFLA_OPERSTATE: c_ushort = 16;
const IFLA_LINKMODE: c_ushort = 17;
const IFLA_LINKINFO: c_ushort = 18;
const IFLA_NET_NS_PID: c_ushort = 19;
const IFLA_IFALIAS: c_ushort = 20;
const IFLA_NUM_VF: c_ushort = 21;
const IFLA_VFINFO_LIST: c_ushort = 22;
const IFLA_STATS64: c_ushort = 23;
const IFLA_VF_PORTS: c_ushort = 24;
const IFLA_PORT_SELF: c_ushort = 25;
const IFLA_AF_SPEC: c_ushort = 26;
const IFLA_GROUP: c_ushort = 27;
const IFLA_NET_NS_FD: c_ushort = 28;
const IFLA_EXT_MASK: c_ushort = 29;
const IFLA_PROMISCUITY: c_ushort = 30;
const IFLA_NUM_TX_QUEUES: c_ushort = 31;
const IFLA_NUM_RX_QUEUES: c_ushort = 32;
const IFLA_CARRIER: c_ushort = 33;
const IFLA_PHYS_PORT_ID: c_ushort = 34;
const IFLA_CARRIER_CHANGES: c_ushort = 35;
const IFLA_PHYS_SWITCH_ID: c_ushort = 36;
const IFLA_LINK_NETNSID: c_ushort = 37;
const IFLA_PHYS_PORT_NAME: c_ushort = 38;
const IFLA_PROTO_DOWN: c_ushort = 39;
const IFLA_GSO_MAX_SEGS: c_ushort = 40;
const IFLA_GSO_MAX_SIZE: c_ushort = 41;
const IFLA_PAD: c_ushort = 42;
const IFLA_XDP: c_ushort = 43;
const IFLA_EVENT: c_ushort = 44;
const IFLA_NEW_NETNSID: c_ushort = 45;
const IFLA_IF_NETNSID: c_ushort = 46;
const IFLA_TARGET_NETNSID: c_ushort = IFLA_IF_NETNSID;
const IFLA_CARRIER_UP_COUNT: c_ushort = 47;
const IFLA_CARRIER_DOWN_COUNT: c_ushort = 48;
const IFLA_NEW_IFINDEX: c_ushort = 49;
const IFLA_MIN_MTU: c_ushort = 50;
const IFLA_MAX_MTU: c_ushort = 51;
const IFLA_PROP_LIST: c_ushort = 52;
const IFLA_ALT_IFNAME: c_ushort = 53;
const IFLA_PERM_ADDRESS: c_ushort = 54;
const IFLA_PROTO_DOWN_REASON: c_ushort = 55;
const IFLA_PARENT_DEV_NAME: c_ushort = 56;
const IFLA_PARENT_DEV_BUS_NAME: c_ushort = 57;
const IFLA_GRO_MAX_SIZE: c_ushort = 58;
const IFLA_TSO_MAX_SIZE: c_ushort = 59;
const IFLA_TSO_MAX_SEGS: c_ushort = 60;
const IFLA_ALLMULTI: c_ushort = 61;
const IFLA_INFO_UNSPEC: c_ushort = 0;
const IFLA_INFO_KIND: c_ushort = 1;
const IFLA_INFO_DATA: c_ushort = 2;
const IFLA_INFO_XSTATS: c_ushort = 3;
const IFLA_INFO_SLAVE_KIND: c_ushort = 4;
const IFLA_INFO_SLAVE_DATA: c_ushort = 5;
const IFF_TUN: c_int = 0x0001;
const IFF_TAP: c_int = 0x0002;
const IFF_NO_PI: c_int = 0x1000;
const TUN_READQ_SIZE: c_short = 500;
const TUN_TUN_DEV: c_short = IFF_TUN as c_short;
const TUN_TAP_DEV: c_short = IFF_TAP as c_short;
const TUN_TYPE_MASK: c_short = 0x000f;
const IFF_ONE_QUEUE: c_int = 0x2000;
const IFF_VNET_HDR: c_int = 0x4000;
const IFF_TUN_EXCL: c_int = 0x8000;
const IFF_MULTI_QUEUE: c_int = 0x0100;
const IFF_ATTACH_QUEUE: c_int = 0x0200;
const IFF_DETACH_QUEUE: c_int = 0x0400;
const IFF_PERSIST: c_int = 0x0800;
const IFF_NOFILTER: c_int = 0x1000;
const SEEK_DATA: c_int = 3;
const SEEK_HOLE: c_int = 4;
const ST_RDONLY: c_ulong = 1;
const ST_NOSUID: c_ulong = 2;
const ST_NODEV: c_ulong = 4;
const ST_NOEXEC: c_ulong = 8;
const ST_SYNCHRONOUS: c_ulong = 16;
const ST_MANDLOCK: c_ulong = 64;
const ST_WRITE: c_ulong = 128;
const ST_APPEND: c_ulong = 256;
const ST_IMMUTABLE: c_ulong = 512;
const ST_NOATIME: c_ulong = 1024;
const ST_NODIRATIME: c_ulong = 2048;
const RTLD_NEXT: &mut c_void = -1i64 as &mut c_void;
const RTLD_DEFAULT: &mut c_void = 0i64 as &mut c_void;
const RTLD_NODELETE: c_int = 0x1000;
const RTLD_NOW: c_int = 0x2;
const AT_EACCESS: c_int = 0x200;
const MPOL_DEFAULT: c_int = 0;
const MPOL_PREFERRED: c_int = 1;
const MPOL_BIND: c_int = 2;
const MPOL_INTERLEAVE: c_int = 3;
const MPOL_LOCAL: c_int = 4;
const MPOL_F_NUMA_BALANCING: c_int = 1 << 13;
const MPOL_F_RELATIVE_NODES: c_int = 1 << 14;
const MPOL_F_STATIC_NODES: c_int = 1 << 15;
const MEMBARRIER_CMD_QUERY: c_int = 0;
const MEMBARRIER_CMD_GLOBAL: c_int = 1 << 0;
const MEMBARRIER_CMD_GLOBAL_EXPEDITED: c_int = 1 << 1;
const MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED: c_int = 1 << 2;
const MEMBARRIER_CMD_PRIVATE_EXPEDITED: c_int = 1 << 3;
const MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED: c_int = 1 << 4;
const MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE: c_int = 1 << 5;
const MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE: c_int = 1 << 6;
const MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ: c_int = 1 << 7;
const MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ: c_int = 1 << 8;
const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t { size: mem::zeroed() };
const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t { size: mem::zeroed() };
const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t { size: mem::zeroed() };
const PTHREAD_MUTEX_NORMAL: c_int = 0;
const PTHREAD_MUTEX_RECURSIVE: c_int = 1;
const PTHREAD_MUTEX_ERRORCHECK: c_int = 2;
const PTHREAD_MUTEX_DEFAULT: c_int = PTHREAD_MUTEX_NORMAL;
const PTHREAD_MUTEX_STALLED: c_int = 0;
const PTHREAD_MUTEX_ROBUST: c_int = 1;
const PTHREAD_PRIO_NONE: c_int = 0;
const PTHREAD_PRIO_INHERIT: c_int = 1;
const PTHREAD_PRIO_PROTECT: c_int = 2;
const PTHREAD_PROCESS_PRIVATE: c_int = 0;
const PTHREAD_PROCESS_SHARED: c_int = 1;
const __SIZEOF_PTHREAD_COND_T: usize = 48;
const RENAME_NOREPLACE: c_uint = 1;
const RENAME_EXCHANGE: c_uint = 2;
const RENAME_WHITEOUT: c_uint = 4;
const SCHED_OTHER: c_int = 0;
const SCHED_FIFO: c_int = 1;
const SCHED_RR: c_int = 2;
const SCHED_BATCH: c_int = 3;
const SCHED_IDLE: c_int = 5;
const SCHED_RESET_ON_FORK: c_int = 0x40000000;
const CLONE_PIDFD: c_int = 0x1000;
const IPPROTO_MAX: c_int = 256;
const IPC_PRIVATE: key_t = 0;
const IPC_CREAT: c_int = 0o1000;
const IPC_EXCL: c_int = 0o2000;
const IPC_NOWAIT: c_int = 0o4000;
const IPC_RMID: c_int = 0;
const IPC_SET: c_int = 1;
const IPC_STAT: c_int = 2;
const IPC_INFO: c_int = 3;
const MSG_STAT: c_int = 11;
const MSG_INFO: c_int = 12;
const MSG_NOTIFICATION: c_int = 0x8000;
const MSG_NOERROR: c_int = 0o10000;
const MSG_EXCEPT: c_int = 0o20000;
const MSG_ZEROCOPY: c_int = 0x4000000;
const SHM_R: c_int = 0o400;
const SHM_W: c_int = 0o200;
const SHM_RDONLY: c_int = 0o10000;
const SHM_RND: c_int = 0o20000;
const SHM_REMAP: c_int = 0o40000;
const SHM_LOCK: c_int = 11;
const SHM_UNLOCK: c_int = 12;
const SHM_HUGETLB: c_int = 0o4000;
const SHM_NORESERVE: c_int = 0o10000;
const QFMT_VFS_OLD: c_int = 1;
const QFMT_VFS_V0: c_int = 2;
const QFMT_VFS_V1: c_int = 4;
const EFD_SEMAPHORE: c_int = 0x1;
const LOG_NFACILITIES: c_int = 24;
const SEM_FAILED: &mut sem_t = 0 as &mut sem_t;
const RB_AUTOBOOT: c_int = 0x01234567u32 as i32;
const RB_HALT_SYSTEM: c_int = 0xcdef0123u32 as i32;
const RB_ENABLE_CAD: c_int = 0x89abcdefu32 as i32;
const RB_DISABLE_CAD: c_int = 0x00000000u32 as i32;
const RB_POWER_OFF: c_int = 0x4321fedcu32 as i32;
const RB_SW_SUSPEND: c_int = 0xd000fce2u32 as i32;
const RB_KEXEC: c_int = 0x45584543u32 as i32;
const AI_PASSIVE: c_int = 0x0001;
const AI_CANONNAME: c_int = 0x0002;
const AI_NUMERICHOST: c_int = 0x0004;
const AI_V4MAPPED: c_int = 0x0008;
const AI_ALL: c_int = 0x0010;
const AI_ADDRCONFIG: c_int = 0x0020;
const AI_NUMERICSERV: c_int = 0x0400;
const EAI_BADFLAGS: c_int = -1;
const EAI_NONAME: c_int = -2;
const EAI_AGAIN: c_int = -3;
const EAI_FAIL: c_int = -4;
const EAI_NODATA: c_int = -5;
const EAI_FAMILY: c_int = -6;
const EAI_SOCKTYPE: c_int = -7;
const EAI_SERVICE: c_int = -8;
const EAI_MEMORY: c_int = -10;
const EAI_SYSTEM: c_int = -11;
const EAI_OVERFLOW: c_int = -12;
const NI_NUMERICHOST: c_int = 1;
const NI_NUMERICSERV: c_int = 2;
const NI_NOFQDN: c_int = 4;
const NI_NAMEREQD: c_int = 8;
const NI_DGRAM: c_int = 16;
const SYNC_FILE_RANGE_WAIT_BEFORE: c_uint = 1;
const SYNC_FILE_RANGE_WRITE: c_uint = 2;
const SYNC_FILE_RANGE_WAIT_AFTER: c_uint = 4;
const AIO_CANCELED: c_int = 0;
const AIO_NOTCANCELED: c_int = 1;
const AIO_ALLDONE: c_int = 2;
const LIO_READ: c_int = 0;
const LIO_WRITE: c_int = 1;
const LIO_NOP: c_int = 2;
const LIO_WAIT: c_int = 0;
const LIO_NOWAIT: c_int = 1;
const RUSAGE_THREAD: c_int = 1;
const MSG_COPY: c_int = 0o40000;
const SHM_EXEC: c_int = 0o100000;
const IPV6_MULTICAST_ALL: c_int = 29;
const IPV6_ROUTER_ALERT_ISOLATE: c_int = 30;
const PACKET_MR_UNICAST: c_int = 3;
const PTRACE_EVENT_STOP: c_int = 128;
const UDP_SEGMENT: c_int = 103;
const UDP_GRO: c_int = 104;
const MREMAP_MAYMOVE: c_int = 1;
const MREMAP_FIXED: c_int = 2;
const MREMAP_DONTUNMAP: c_int = 4;
const PR_SET_PDEATHSIG: c_int = 1;
const PR_GET_PDEATHSIG: c_int = 2;
const PR_GET_DUMPABLE: c_int = 3;
const PR_SET_DUMPABLE: c_int = 4;
const PR_GET_UNALIGN: c_int = 5;
const PR_SET_UNALIGN: c_int = 6;
const PR_UNALIGN_NOPRINT: c_int = 1;
const PR_UNALIGN_SIGBUS: c_int = 2;
const PR_GET_KEEPCAPS: c_int = 7;
const PR_SET_KEEPCAPS: c_int = 8;
const PR_GET_FPEMU: c_int = 9;
const PR_SET_FPEMU: c_int = 10;
const PR_FPEMU_NOPRINT: c_int = 1;
const PR_FPEMU_SIGFPE: c_int = 2;
const PR_GET_FPEXC: c_int = 11;
const PR_SET_FPEXC: c_int = 12;
const PR_FP_EXC_SW_ENABLE: c_int = 0x80;
const PR_FP_EXC_DIV: c_int = 0x010000;
const PR_FP_EXC_OVF: c_int = 0x020000;
const PR_FP_EXC_UND: c_int = 0x040000;
const PR_FP_EXC_RES: c_int = 0x080000;
const PR_FP_EXC_INV: c_int = 0x100000;
const PR_FP_EXC_DISABLED: c_int = 0;
const PR_FP_EXC_NONRECOV: c_int = 1;
const PR_FP_EXC_ASYNC: c_int = 2;
const PR_FP_EXC_PRECISE: c_int = 3;
const PR_GET_TIMING: c_int = 13;
const PR_SET_TIMING: c_int = 14;
const PR_TIMING_STATISTICAL: c_int = 0;
const PR_TIMING_TIMESTAMP: c_int = 1;
const PR_SET_NAME: c_int = 15;
const PR_GET_NAME: c_int = 16;
const PR_GET_ENDIAN: c_int = 19;
const PR_SET_ENDIAN: c_int = 20;
const PR_ENDIAN_BIG: c_int = 0;
const PR_ENDIAN_LITTLE: c_int = 1;
const PR_ENDIAN_PPC_LITTLE: c_int = 2;
const PR_GET_SECCOMP: c_int = 21;
const PR_SET_SECCOMP: c_int = 22;
const PR_CAPBSET_READ: c_int = 23;
const PR_CAPBSET_DROP: c_int = 24;
const PR_GET_TSC: c_int = 25;
const PR_SET_TSC: c_int = 26;
const PR_TSC_ENABLE: c_int = 1;
const PR_TSC_SIGSEGV: c_int = 2;
const PR_GET_SECUREBITS: c_int = 27;
const PR_SET_SECUREBITS: c_int = 28;
const PR_SET_TIMERSLACK: c_int = 29;
const PR_GET_TIMERSLACK: c_int = 30;
const PR_TASK_PERF_EVENTS_DISABLE: c_int = 31;
const PR_TASK_PERF_EVENTS_ENABLE: c_int = 32;
const PR_MCE_KILL: c_int = 33;
const PR_MCE_KILL_CLEAR: c_int = 0;
const PR_MCE_KILL_SET: c_int = 1;
const PR_MCE_KILL_LATE: c_int = 0;
const PR_MCE_KILL_EARLY: c_int = 1;
const PR_MCE_KILL_DEFAULT: c_int = 2;
const PR_MCE_KILL_GET: c_int = 34;
const PR_SET_MM: c_int = 35;
const PR_SET_MM_START_CODE: c_int = 1;
const PR_SET_MM_END_CODE: c_int = 2;
const PR_SET_MM_START_DATA: c_int = 3;
const PR_SET_MM_END_DATA: c_int = 4;
const PR_SET_MM_START_STACK: c_int = 5;
const PR_SET_MM_START_BRK: c_int = 6;
const PR_SET_MM_BRK: c_int = 7;
const PR_SET_MM_ARG_START: c_int = 8;
const PR_SET_MM_ARG_END: c_int = 9;
const PR_SET_MM_ENV_START: c_int = 10;
const PR_SET_MM_ENV_END: c_int = 11;
const PR_SET_MM_AUXV: c_int = 12;
const PR_SET_MM_EXE_FILE: c_int = 13;
const PR_SET_MM_MAP: c_int = 14;
const PR_SET_MM_MAP_SIZE: c_int = 15;
const PR_SET_PTRACER: c_int = 0x59616d61;
const PR_SET_PTRACER_ANY: c_ulong = 0xffffffffffffffff;
const PR_SET_CHILD_SUBREAPER: c_int = 36;
const PR_GET_CHILD_SUBREAPER: c_int = 37;
const PR_SET_NO_NEW_PRIVS: c_int = 38;
const PR_GET_NO_NEW_PRIVS: c_int = 39;
const PR_GET_TID_ADDRESS: c_int = 40;
const PR_SET_THP_DISABLE: c_int = 41;
const PR_GET_THP_DISABLE: c_int = 42;
const PR_MPX_ENABLE_MANAGEMENT: c_int = 43;
const PR_MPX_DISABLE_MANAGEMENT: c_int = 44;
const PR_SET_FP_MODE: c_int = 45;
const PR_GET_FP_MODE: c_int = 46;
const PR_FP_MODE_FR: c_int = 1 << 0;
const PR_FP_MODE_FRE: c_int = 1 << 1;
const PR_CAP_AMBIENT: c_int = 47;
const PR_CAP_AMBIENT_IS_SET: c_int = 1;
const PR_CAP_AMBIENT_RAISE: c_int = 2;
const PR_CAP_AMBIENT_LOWER: c_int = 3;
const PR_CAP_AMBIENT_CLEAR_ALL: c_int = 4;
const PR_SET_VMA: c_int = 0x53564d41;
const PR_SET_VMA_ANON_NAME: c_int = 0;
const PR_SCHED_CORE: c_int = 62;
const PR_SCHED_CORE_GET: c_int = 0;
const PR_SCHED_CORE_CREATE: c_int = 1;
const PR_SCHED_CORE_SHARE_TO: c_int = 2;
const PR_SCHED_CORE_SHARE_FROM: c_int = 3;
const PR_SCHED_CORE_MAX: c_int = 4;
const PR_SCHED_CORE_SCOPE_THREAD: c_int = 0;
const PR_SCHED_CORE_SCOPE_THREAD_GROUP: c_int = 1;
const PR_SCHED_CORE_SCOPE_PROCESS_GROUP: c_int = 2;
const GRND_NONBLOCK: c_uint = 0x0001;
const GRND_RANDOM: c_uint = 0x0002;
const GRND_INSECURE: c_uint = 0x0004;
const SECCOMP_MODE_DISABLED: c_uint = 0;
const SECCOMP_MODE_STRICT: c_uint = 1;
const SECCOMP_MODE_FILTER: c_uint = 2;
const SECCOMP_FILTER_FLAG_TSYNC: c_ulong = 1;
const SECCOMP_FILTER_FLAG_LOG: c_ulong = 2;
const SECCOMP_FILTER_FLAG_SPEC_ALLOW: c_ulong = 4;
const SECCOMP_RET_KILL_PROCESS: c_uint = 0x80000000;
const SECCOMP_RET_KILL_THREAD: c_uint = 0x00000000;
const SECCOMP_RET_KILL: c_uint = SECCOMP_RET_KILL_THREAD;
const SECCOMP_RET_TRAP: c_uint = 0x00030000;
const SECCOMP_RET_ERRNO: c_uint = 0x00050000;
const SECCOMP_RET_TRACE: c_uint = 0x7ff00000;
const SECCOMP_RET_LOG: c_uint = 0x7ffc0000;
const SECCOMP_RET_ALLOW: c_uint = 0x7fff0000;
const SECCOMP_RET_ACTION_FULL: c_uint = 0xffff0000;
const SECCOMP_RET_ACTION: c_uint = 0x7fff0000;
const SECCOMP_RET_DATA: c_uint = 0x0000ffff;
const ITIMER_REAL: c_int = 0;
const ITIMER_VIRTUAL: c_int = 1;
const ITIMER_PROF: c_int = 2;
const TFD_CLOEXEC: c_int = O_CLOEXEC;
const TFD_NONBLOCK: c_int = O_NONBLOCK;
const TFD_TIMER_ABSTIME: c_int = 1;
const TFD_TIMER_CANCEL_ON_SET: c_int = 2;
const _POSIX_VDISABLE: cc_t = 0;
const FALLOC_FL_KEEP_SIZE: c_int = 0x01;
const FALLOC_FL_PUNCH_HOLE: c_int = 0x02;
const FALLOC_FL_COLLAPSE_RANGE: c_int = 0x08;
const FALLOC_FL_ZERO_RANGE: c_int = 0x10;
const FALLOC_FL_INSERT_RANGE: c_int = 0x20;
const FALLOC_FL_UNSHARE_RANGE: c_int = 0x40;
const ENOATTR: c_int = ENODATA;
const SO_ORIGINAL_DST: c_int = 80;
const IP_RECVFRAGSIZE: c_int = 25;
const IPV6_FLOWINFO: c_int = 11;
const IPV6_FLOWLABEL_MGR: c_int = 32;
const IPV6_FLOWINFO_SEND: c_int = 33;
const IPV6_RECVFRAGSIZE: c_int = 77;
const IPV6_FREEBIND: c_int = 78;
const IPV6_FLOWINFO_FLOWLABEL: c_int = 0x000fffff;
const IPV6_FLOWINFO_PRIORITY: c_int = 0x0ff00000;
const IPV6_RTHDR_LOOSE: c_int = 0;
const IPV6_RTHDR_STRICT: c_int = 1;
const SK_MEMINFO_RMEM_ALLOC: c_int = 0;
const SK_MEMINFO_RCVBUF: c_int = 1;
const SK_MEMINFO_WMEM_ALLOC: c_int = 2;
const SK_MEMINFO_SNDBUF: c_int = 3;
const SK_MEMINFO_FWD_ALLOC: c_int = 4;
const SK_MEMINFO_WMEM_QUEUED: c_int = 5;
const SK_MEMINFO_OPTMEM: c_int = 6;
const SK_MEMINFO_BACKLOG: c_int = 7;
const SK_MEMINFO_DROPS: c_int = 8;
const IUTF8: tcflag_t = 0x00004000;
const CMSPAR: tcflag_t = 0o10000000000;
const MFD_CLOEXEC: c_uint = 0x0001;
const MFD_ALLOW_SEALING: c_uint = 0x0002;
const MFD_HUGETLB: c_uint = 0x0004;
const MFD_HUGE_64KB: c_uint = 0x40000000;
const MFD_HUGE_512KB: c_uint = 0x4c000000;
const MFD_HUGE_1MB: c_uint = 0x50000000;
const MFD_HUGE_2MB: c_uint = 0x54000000;
const MFD_HUGE_8MB: c_uint = 0x5c000000;
const MFD_HUGE_16MB: c_uint = 0x60000000;
const MFD_HUGE_32MB: c_uint = 0x64000000;
const MFD_HUGE_256MB: c_uint = 0x70000000;
const MFD_HUGE_512MB: c_uint = 0x74000000;
const MFD_HUGE_1GB: c_uint = 0x78000000;
const MFD_HUGE_2GB: c_uint = 0x7c000000;
const MFD_HUGE_16GB: c_uint = 0x88000000;
const MFD_HUGE_MASK: c_uint = 63;
const MFD_HUGE_SHIFT: c_uint = 26;
const CLOSE_RANGE_UNSHARE: c_uint = 1 << 1;
const CLOSE_RANGE_CLOEXEC: c_uint = 1 << 2;
const SKF_AD_OFF: c_int = -0x1000;
const SKF_AD_PROTOCOL: c_int = 0;
const SKF_AD_PKTTYPE: c_int = 4;
const SKF_AD_IFINDEX: c_int = 8;
const SKF_AD_NLATTR: c_int = 12;
const SKF_AD_NLATTR_NEST: c_int = 16;
const SKF_AD_MARK: c_int = 20;
const SKF_AD_QUEUE: c_int = 24;
const SKF_AD_HATYPE: c_int = 28;
const SKF_AD_RXHASH: c_int = 32;
const SKF_AD_CPU: c_int = 36;
const SKF_AD_ALU_XOR_X: c_int = 40;
const SKF_AD_VLAN_TAG: c_int = 44;
const SKF_AD_VLAN_TAG_PRESENT: c_int = 48;
const SKF_AD_PAY_OFFSET: c_int = 52;
const SKF_AD_RANDOM: c_int = 56;
const SKF_AD_VLAN_TPID: c_int = 60;
const SKF_AD_MAX: c_int = 64;
const SKF_NET_OFF: c_int = -0x100000;
const SKF_LL_OFF: c_int = -0x200000;
const BPF_NET_OFF: c_int = SKF_NET_OFF;
const BPF_LL_OFF: c_int = SKF_LL_OFF;
const BPF_MEMWORDS: c_int = 16;
const BPF_MAXINSNS: c_int = 4096;
const BPF_LD: __u32 = 0x00;
const BPF_LDX: __u32 = 0x01;
const BPF_ST: __u32 = 0x02;
const BPF_STX: __u32 = 0x03;
const BPF_ALU: __u32 = 0x04;
const BPF_JMP: __u32 = 0x05;
const BPF_RET: __u32 = 0x06;
const BPF_MISC: __u32 = 0x07;
const BPF_W: __u32 = 0x00;
const BPF_H: __u32 = 0x08;
const BPF_B: __u32 = 0x10;
const BPF_IMM: __u32 = 0x00;
const BPF_ABS: __u32 = 0x20;
const BPF_IND: __u32 = 0x40;
const BPF_MEM: __u32 = 0x60;
const BPF_LEN: __u32 = 0x80;
const BPF_MSH: __u32 = 0xa0;
const BPF_ADD: __u32 = 0x00;
const BPF_SUB: __u32 = 0x10;
const BPF_MUL: __u32 = 0x20;
const BPF_DIV: __u32 = 0x30;
const BPF_OR: __u32 = 0x40;
const BPF_AND: __u32 = 0x50;
const BPF_LSH: __u32 = 0x60;
const BPF_RSH: __u32 = 0x70;
const BPF_NEG: __u32 = 0x80;
const BPF_MOD: __u32 = 0x90;
const BPF_XOR: __u32 = 0xa0;
const BPF_JA: __u32 = 0x00;
const BPF_JEQ: __u32 = 0x10;
const BPF_JGT: __u32 = 0x20;
const BPF_JGE: __u32 = 0x30;
const BPF_JSET: __u32 = 0x40;
const BPF_K: __u32 = 0x00;
const BPF_X: __u32 = 0x08;
const RESOLVE_NO_XDEV: __u64 = 0x01;
const RESOLVE_NO_MAGICLINKS: __u64 = 0x02;
const RESOLVE_NO_SYMLINKS: __u64 = 0x04;
const RESOLVE_BENEATH: __u64 = 0x08;
const RESOLVE_IN_ROOT: __u64 = 0x10;
const RESOLVE_CACHED: __u64 = 0x20;
const ETH_ALEN: c_int = 6;
const ETH_HLEN: c_int = 14;
const ETH_ZLEN: c_int = 60;
const ETH_DATA_LEN: c_int = 1500;
const ETH_FRAME_LEN: c_int = 1514;
const ETH_FCS_LEN: c_int = 4;
const ETH_P_LOOP: c_int = 0x0060;
const ETH_P_PUP: c_int = 0x0200;
const ETH_P_PUPAT: c_int = 0x0201;
const ETH_P_IP: c_int = 0x0800;
const ETH_P_X25: c_int = 0x0805;
const ETH_P_ARP: c_int = 0x0806;
const ETH_P_BPQ: c_int = 0x08FF;
const ETH_P_IEEEPUP: c_int = 0x0a00;
const ETH_P_IEEEPUPAT: c_int = 0x0a01;
const ETH_P_BATMAN: c_int = 0x4305;
const ETH_P_DEC: c_int = 0x6000;
const ETH_P_DNA_DL: c_int = 0x6001;
const ETH_P_DNA_RC: c_int = 0x6002;
const ETH_P_DNA_RT: c_int = 0x6003;
const ETH_P_LAT: c_int = 0x6004;
const ETH_P_DIAG: c_int = 0x6005;
const ETH_P_CUST: c_int = 0x6006;
const ETH_P_SCA: c_int = 0x6007;
const ETH_P_TEB: c_int = 0x6558;
const ETH_P_RARP: c_int = 0x8035;
const ETH_P_ATALK: c_int = 0x809B;
const ETH_P_AARP: c_int = 0x80F3;
const ETH_P_8021Q: c_int = 0x8100;
const ETH_P_IPX: c_int = 0x8137;
const ETH_P_IPV6: c_int = 0x86DD;
const ETH_P_PAUSE: c_int = 0x8808;
const ETH_P_SLOW: c_int = 0x8809;
const ETH_P_WCCP: c_int = 0x883E;
const ETH_P_MPLS_UC: c_int = 0x8847;
const ETH_P_MPLS_MC: c_int = 0x8848;
const ETH_P_ATMMPOA: c_int = 0x884c;
const ETH_P_PPP_DISC: c_int = 0x8863;
const ETH_P_PPP_SES: c_int = 0x8864;
const ETH_P_LINK_CTL: c_int = 0x886c;
const ETH_P_ATMFATE: c_int = 0x8884;
const ETH_P_PAE: c_int = 0x888E;
const ETH_P_AOE: c_int = 0x88A2;
const ETH_P_8021AD: c_int = 0x88A8;
const ETH_P_802_EX1: c_int = 0x88B5;
const ETH_P_TIPC: c_int = 0x88CA;
const ETH_P_MACSEC: c_int = 0x88E5;
const ETH_P_8021AH: c_int = 0x88E7;
const ETH_P_MVRP: c_int = 0x88F5;
const ETH_P_1588: c_int = 0x88F7;
const ETH_P_PRP: c_int = 0x88FB;
const ETH_P_FCOE: c_int = 0x8906;
const ETH_P_TDLS: c_int = 0x890D;
const ETH_P_FIP: c_int = 0x8914;
const ETH_P_80221: c_int = 0x8917;
const ETH_P_LOOPBACK: c_int = 0x9000;
const ETH_P_QINQ1: c_int = 0x9100;
const ETH_P_QINQ2: c_int = 0x9200;
const ETH_P_QINQ3: c_int = 0x9300;
const ETH_P_EDSA: c_int = 0xDADA;
const ETH_P_AF_IUCV: c_int = 0xFBFB;
const ETH_P_802_3_MIN: c_int = 0x0600;
const ETH_P_802_3: c_int = 0x0001;
const ETH_P_AX25: c_int = 0x0002;
const ETH_P_ALL: c_int = 0x0003;
const ETH_P_802_2: c_int = 0x0004;
const ETH_P_SNAP: c_int = 0x0005;
const ETH_P_DDCMP: c_int = 0x0006;
const ETH_P_WAN_PPP: c_int = 0x0007;
const ETH_P_PPP_MP: c_int = 0x0008;
const ETH_P_LOCALTALK: c_int = 0x0009;
const ETH_P_CANFD: c_int = 0x000D;
const ETH_P_PPPTALK: c_int = 0x0010;
const ETH_P_TR_802_2: c_int = 0x0011;
const ETH_P_MOBITEX: c_int = 0x0015;
const ETH_P_CONTROL: c_int = 0x0016;
const ETH_P_IRDA: c_int = 0x0017;
const ETH_P_ECONET: c_int = 0x0018;
const ETH_P_HDLC: c_int = 0x0019;
const ETH_P_ARCNET: c_int = 0x001A;
const ETH_P_DSA: c_int = 0x001B;
const ETH_P_TRAILER: c_int = 0x001C;
const ETH_P_PHONET: c_int = 0x00F5;
const ETH_P_IEEE802154: c_int = 0x00F6;
const ETH_P_CAIF: c_int = 0x00F7;
const POSIX_SPAWN_RESETIDS: c_int = 0x01;
const POSIX_SPAWN_SETPGROUP: c_int = 0x02;
const POSIX_SPAWN_SETSIGDEF: c_int = 0x04;
const POSIX_SPAWN_SETSIGMASK: c_int = 0x08;
const POSIX_SPAWN_SETSCHEDPARAM: c_int = 0x10;
const POSIX_SPAWN_SETSCHEDULER: c_int = 0x20;
const NLMSG_NOOP: c_int = 0x1;
const NLMSG_ERROR: c_int = 0x2;
const NLMSG_DONE: c_int = 0x3;
const NLMSG_OVERRUN: c_int = 0x4;
const NLMSG_MIN_TYPE: c_int = 0x10;
const NFNLGRP_NONE: c_int = 0;
const NFNLGRP_CONNTRACK_NEW: c_int = 1;
const NFNLGRP_CONNTRACK_UPDATE: c_int = 2;
const NFNLGRP_CONNTRACK_DESTROY: c_int = 3;
const NFNLGRP_CONNTRACK_EXP_NEW: c_int = 4;
const NFNLGRP_CONNTRACK_EXP_UPDATE: c_int = 5;
const NFNLGRP_CONNTRACK_EXP_DESTROY: c_int = 6;
const NFNLGRP_NFTABLES: c_int = 7;
const NFNLGRP_ACCT_QUOTA: c_int = 8;
const NFNLGRP_NFTRACE: c_int = 9;
const NFNETLINK_V0: c_int = 0;
const NFNL_SUBSYS_NONE: c_int = 0;
const NFNL_SUBSYS_CTNETLINK: c_int = 1;
const NFNL_SUBSYS_CTNETLINK_EXP: c_int = 2;
const NFNL_SUBSYS_QUEUE: c_int = 3;
const NFNL_SUBSYS_ULOG: c_int = 4;
const NFNL_SUBSYS_OSF: c_int = 5;
const NFNL_SUBSYS_IPSET: c_int = 6;
const NFNL_SUBSYS_ACCT: c_int = 7;
const NFNL_SUBSYS_CTNETLINK_TIMEOUT: c_int = 8;
const NFNL_SUBSYS_CTHELPER: c_int = 9;
const NFNL_SUBSYS_NFTABLES: c_int = 10;
const NFNL_SUBSYS_NFT_COMPAT: c_int = 11;
const NFNL_SUBSYS_HOOK: c_int = 12;
const NFNL_SUBSYS_COUNT: c_int = 13;
const NFNL_MSG_BATCH_BEGIN: c_int = NLMSG_MIN_TYPE;
const NFNL_MSG_BATCH_END: c_int = NLMSG_MIN_TYPE + 1;
const NFNL_BATCH_UNSPEC: c_int = 0;
const NFNL_BATCH_GENID: c_int = 1;
const NFULNL_MSG_PACKET: c_int = 0;
const NFULNL_MSG_CONFIG: c_int = 1;
const NFULA_VLAN_UNSPEC: c_int = 0;
const NFULA_VLAN_PROTO: c_int = 1;
const NFULA_VLAN_TCI: c_int = 2;
const NFULA_UNSPEC: c_int = 0;
const NFULA_PACKET_HDR: c_int = 1;
const NFULA_MARK: c_int = 2;
const NFULA_TIMESTAMP: c_int = 3;
const NFULA_IFINDEX_INDEV: c_int = 4;
const NFULA_IFINDEX_OUTDEV: c_int = 5;
const NFULA_IFINDEX_PHYSINDEV: c_int = 6;
const NFULA_IFINDEX_PHYSOUTDEV: c_int = 7;
const NFULA_HWADDR: c_int = 8;
const NFULA_PAYLOAD: c_int = 9;
const NFULA_PREFIX: c_int = 10;
const NFULA_UID: c_int = 11;
const NFULA_SEQ: c_int = 12;
const NFULA_SEQ_GLOBAL: c_int = 13;
const NFULA_GID: c_int = 14;
const NFULA_HWTYPE: c_int = 15;
const NFULA_HWHEADER: c_int = 16;
const NFULA_HWLEN: c_int = 17;
const NFULA_CT: c_int = 18;
const NFULA_CT_INFO: c_int = 19;
const NFULA_VLAN: c_int = 20;
const NFULA_L2HDR: c_int = 21;
const NFULNL_CFG_CMD_NONE: c_int = 0;
const NFULNL_CFG_CMD_BIND: c_int = 1;
const NFULNL_CFG_CMD_UNBIND: c_int = 2;
const NFULNL_CFG_CMD_PF_BIND: c_int = 3;
const NFULNL_CFG_CMD_PF_UNBIND: c_int = 4;
const NFULA_CFG_UNSPEC: c_int = 0;
const NFULA_CFG_CMD: c_int = 1;
const NFULA_CFG_MODE: c_int = 2;
const NFULA_CFG_NLBUFSIZ: c_int = 3;
const NFULA_CFG_TIMEOUT: c_int = 4;
const NFULA_CFG_QTHRESH: c_int = 5;
const NFULA_CFG_FLAGS: c_int = 6;
const NFULNL_COPY_NONE: c_int = 0x00;
const NFULNL_COPY_META: c_int = 0x01;
const NFULNL_COPY_PACKET: c_int = 0x02;
const NFULNL_CFG_F_SEQ: c_int = 0x0001;
const NFULNL_CFG_F_SEQ_GLOBAL: c_int = 0x0002;
const NFULNL_CFG_F_CONNTRACK: c_int = 0x0004;
const NFQNL_MSG_PACKET: c_int = 0;
const NFQNL_MSG_VERDICT: c_int = 1;
const NFQNL_MSG_CONFIG: c_int = 2;
const NFQNL_MSG_VERDICT_BATCH: c_int = 3;
const NFQA_UNSPEC: c_int = 0;
const NFQA_PACKET_HDR: c_int = 1;
const NFQA_VERDICT_HDR: c_int = 2;
const NFQA_MARK: c_int = 3;
const NFQA_TIMESTAMP: c_int = 4;
const NFQA_IFINDEX_INDEV: c_int = 5;
const NFQA_IFINDEX_OUTDEV: c_int = 6;
const NFQA_IFINDEX_PHYSINDEV: c_int = 7;
const NFQA_IFINDEX_PHYSOUTDEV: c_int = 8;
const NFQA_HWADDR: c_int = 9;
const NFQA_PAYLOAD: c_int = 10;
const NFQA_CT: c_int = 11;
const NFQA_CT_INFO: c_int = 12;
const NFQA_CAP_LEN: c_int = 13;
const NFQA_SKB_INFO: c_int = 14;
const NFQA_EXP: c_int = 15;
const NFQA_UID: c_int = 16;
const NFQA_GID: c_int = 17;
const NFQA_SECCTX: c_int = 18;
const NFQA_VLAN: c_int = 19;
const NFQA_L2HDR: c_int = 20;
const NFQA_PRIORITY: c_int = 21;
const NFQA_VLAN_UNSPEC: c_int = 0;
const NFQA_VLAN_PROTO: c_int = 1;
const NFQA_VLAN_TCI: c_int = 2;
const NFQNL_CFG_CMD_NONE: c_int = 0;
const NFQNL_CFG_CMD_BIND: c_int = 1;
const NFQNL_CFG_CMD_UNBIND: c_int = 2;
const NFQNL_CFG_CMD_PF_BIND: c_int = 3;
const NFQNL_CFG_CMD_PF_UNBIND: c_int = 4;
const NFQNL_COPY_NONE: c_int = 0;
const NFQNL_COPY_META: c_int = 1;
const NFQNL_COPY_PACKET: c_int = 2;
const NFQA_CFG_UNSPEC: c_int = 0;
const NFQA_CFG_CMD: c_int = 1;
const NFQA_CFG_PARAMS: c_int = 2;
const NFQA_CFG_QUEUE_MAXLEN: c_int = 3;
const NFQA_CFG_MASK: c_int = 4;
const NFQA_CFG_FLAGS: c_int = 5;
const NFQA_CFG_F_FAIL_OPEN: c_int = 0x0001;
const NFQA_CFG_F_CONNTRACK: c_int = 0x0002;
const NFQA_CFG_F_GSO: c_int = 0x0004;
const NFQA_CFG_F_UID_GID: c_int = 0x0008;
const NFQA_CFG_F_SECCTX: c_int = 0x0010;
const NFQA_CFG_F_MAX: c_int = 0x0020;
const NFQA_SKB_CSUMNOTREADY: c_int = 0x0001;
const NFQA_SKB_GSO: c_int = 0x0002;
const NFQA_SKB_CSUM_NOTVERIFIED: c_int = 0x0004;
const GENL_NAMSIZ: c_int = 16;
const GENL_MIN_ID: c_int = NLMSG_MIN_TYPE;
const GENL_MAX_ID: c_int = 1023;
const GENL_ADMIN_PERM: c_int = 0x01;
const GENL_CMD_CAP_DO: c_int = 0x02;
const GENL_CMD_CAP_DUMP: c_int = 0x04;
const GENL_CMD_CAP_HASPOL: c_int = 0x08;
const GENL_ID_CTRL: c_int = NLMSG_MIN_TYPE;
const CTRL_CMD_UNSPEC: c_int = 0;
const CTRL_CMD_NEWFAMILY: c_int = 1;
const CTRL_CMD_DELFAMILY: c_int = 2;
const CTRL_CMD_GETFAMILY: c_int = 3;
const CTRL_CMD_NEWOPS: c_int = 4;
const CTRL_CMD_DELOPS: c_int = 5;
const CTRL_CMD_GETOPS: c_int = 6;
const CTRL_CMD_NEWMCAST_GRP: c_int = 7;
const CTRL_CMD_DELMCAST_GRP: c_int = 8;
const CTRL_CMD_GETMCAST_GRP: c_int = 9;
const CTRL_ATTR_UNSPEC: c_int = 0;
const CTRL_ATTR_FAMILY_ID: c_int = 1;
const CTRL_ATTR_FAMILY_NAME: c_int = 2;
const CTRL_ATTR_VERSION: c_int = 3;
const CTRL_ATTR_HDRSIZE: c_int = 4;
const CTRL_ATTR_MAXATTR: c_int = 5;
const CTRL_ATTR_OPS: c_int = 6;
const CTRL_ATTR_MCAST_GROUPS: c_int = 7;
const CTRL_ATTR_OP_UNSPEC: c_int = 0;
const CTRL_ATTR_OP_ID: c_int = 1;
const CTRL_ATTR_OP_FLAGS: c_int = 2;
const CTRL_ATTR_MCAST_GRP_UNSPEC: c_int = 0;
const CTRL_ATTR_MCAST_GRP_NAME: c_int = 1;
const CTRL_ATTR_MCAST_GRP_ID: c_int = 2;
const PACKET_ADD_MEMBERSHIP: c_int = 1;
const PACKET_DROP_MEMBERSHIP: c_int = 2;
const PACKET_MR_MULTICAST: c_int = 0;
const PACKET_MR_PROMISC: c_int = 1;
const PACKET_MR_ALLMULTI: c_int = 2;
const NF_DROP: c_int = 0;
const NF_ACCEPT: c_int = 1;
const NF_STOLEN: c_int = 2;
const NF_QUEUE: c_int = 3;
const NF_REPEAT: c_int = 4;
const NF_STOP: c_int = 5;
const NF_MAX_VERDICT: c_int = NF_STOP;
const NF_VERDICT_MASK: c_int = 0x000000ff;
const NF_VERDICT_FLAG_QUEUE_BYPASS: c_int = 0x00008000;
const NF_VERDICT_QMASK: c_int = 0xffff0000;
const NF_VERDICT_QBITS: c_int = 16;
const NF_VERDICT_BITS: c_int = 16;
const NF_INET_PRE_ROUTING: c_int = 0;
const NF_INET_LOCAL_IN: c_int = 1;
const NF_INET_FORWARD: c_int = 2;
const NF_INET_LOCAL_OUT: c_int = 3;
const NF_INET_POST_ROUTING: c_int = 4;
const NF_INET_NUMHOOKS: c_int = 5;
const NFPROTO_UNSPEC: c_int = 0;
const NFPROTO_IPV4: c_int = 2;
const NFPROTO_ARP: c_int = 3;
const NFPROTO_BRIDGE: c_int = 7;
const NFPROTO_IPV6: c_int = 10;
const NFPROTO_DECNET: c_int = 12;
const NFPROTO_NUMPROTO: c_int = 13;
const NFPROTO_INET: c_int = 1;
const NFPROTO_NETDEV: c_int = 5;
const NF_NETDEV_INGRESS: c_int = 0;
const NF_NETDEV_NUMHOOKS: c_int = 1;
const NF_IP_PRE_ROUTING: c_int = 0;
const NF_IP_LOCAL_IN: c_int = 1;
const NF_IP_FORWARD: c_int = 2;
const NF_IP_LOCAL_OUT: c_int = 3;
const NF_IP_POST_ROUTING: c_int = 4;
const NF_IP_NUMHOOKS: c_int = 5;
const NF_IP_PRI_FIRST: c_int = INT_MIN;
const NF_IP_PRI_CONNTRACK_DEFRAG: c_int = -400;
const NF_IP_PRI_RAW: c_int = -300;
const NF_IP_PRI_SELINUX_FIRST: c_int = -225;
const NF_IP_PRI_CONNTRACK: c_int = -200;
const NF_IP_PRI_MANGLE: c_int = -150;
const NF_IP_PRI_NAT_DST: c_int = -100;
const NF_IP_PRI_FILTER: c_int = 0;
const NF_IP_PRI_SECURITY: c_int = 50;
const NF_IP_PRI_NAT_SRC: c_int = 100;
const NF_IP_PRI_SELINUX_LAST: c_int = 225;
const NF_IP_PRI_CONNTRACK_HELPER: c_int = 300;
const NF_IP_PRI_CONNTRACK_CONFIRM: c_int = INT_MAX;
const NF_IP_PRI_LAST: c_int = INT_MAX;
const NF_IP6_PRE_ROUTING: c_int = 0;
const NF_IP6_LOCAL_IN: c_int = 1;
const NF_IP6_FORWARD: c_int = 2;
const NF_IP6_LOCAL_OUT: c_int = 3;
const NF_IP6_POST_ROUTING: c_int = 4;
const NF_IP6_NUMHOOKS: c_int = 5;
const NF_IP6_PRI_FIRST: c_int = INT_MIN;
const NF_IP6_PRI_CONNTRACK_DEFRAG: c_int = -400;
const NF_IP6_PRI_RAW: c_int = -300;
const NF_IP6_PRI_SELINUX_FIRST: c_int = -225;
const NF_IP6_PRI_CONNTRACK: c_int = -200;
const NF_IP6_PRI_MANGLE: c_int = -150;
const NF_IP6_PRI_NAT_DST: c_int = -100;
const NF_IP6_PRI_FILTER: c_int = 0;
const NF_IP6_PRI_SECURITY: c_int = 50;
const NF_IP6_PRI_NAT_SRC: c_int = 100;
const NF_IP6_PRI_SELINUX_LAST: c_int = 225;
const NF_IP6_PRI_CONNTRACK_HELPER: c_int = 300;
const NF_IP6_PRI_LAST: c_int = INT_MAX;
const IP6T_SO_ORIGINAL_DST: c_int = 80;
const SIOCADDRT: c_ulong = 0x0000890B;
const SIOCDELRT: c_ulong = 0x0000890C;
const SIOCGIFNAME: c_ulong = 0x00008910;
const SIOCSIFLINK: c_ulong = 0x00008911;
const SIOCGIFCONF: c_ulong = 0x00008912;
const SIOCGIFFLAGS: c_ulong = 0x00008913;
const SIOCSIFFLAGS: c_ulong = 0x00008914;
const SIOCGIFADDR: c_ulong = 0x00008915;
const SIOCSIFADDR: c_ulong = 0x00008916;
const SIOCGIFDSTADDR: c_ulong = 0x00008917;
const SIOCSIFDSTADDR: c_ulong = 0x00008918;
const SIOCGIFBRDADDR: c_ulong = 0x00008919;
const SIOCSIFBRDADDR: c_ulong = 0x0000891A;
const SIOCGIFNETMASK: c_ulong = 0x0000891B;
const SIOCSIFNETMASK: c_ulong = 0x0000891C;
const SIOCGIFMETRIC: c_ulong = 0x0000891D;
const SIOCSIFMETRIC: c_ulong = 0x0000891E;
const SIOCGIFMEM: c_ulong = 0x0000891F;
const SIOCSIFMEM: c_ulong = 0x00008920;
const SIOCGIFMTU: c_ulong = 0x00008921;
const SIOCSIFMTU: c_ulong = 0x00008922;
const SIOCSIFHWADDR: c_ulong = 0x00008924;
const SIOCGIFENCAP: c_ulong = 0x00008925;
const SIOCSIFENCAP: c_ulong = 0x00008926;
const SIOCGIFHWADDR: c_ulong = 0x00008927;
const SIOCGIFSLAVE: c_ulong = 0x00008929;
const SIOCSIFSLAVE: c_ulong = 0x00008930;
const SIOCADDMULTI: c_ulong = 0x00008931;
const SIOCDELMULTI: c_ulong = 0x00008932;
const SIOCGIFINDEX: c_ulong = 0x00008933;
const SIOGIFINDEX: c_ulong = SIOCGIFINDEX;
const SIOCSIFPFLAGS: c_ulong = 0x00008934;
const SIOCGIFPFLAGS: c_ulong = 0x00008935;
const SIOCDIFADDR: c_ulong = 0x00008936;
const SIOCSIFHWBROADCAST: c_ulong = 0x00008937;
const SIOCGIFCOUNT: c_ulong = 0x00008938;
const SIOCGIFBR: c_ulong = 0x00008940;
const SIOCSIFBR: c_ulong = 0x00008941;
const SIOCGIFTXQLEN: c_ulong = 0x00008942;
const SIOCSIFTXQLEN: c_ulong = 0x00008943;
const SIOCETHTOOL: c_ulong = 0x00008946;
const SIOCGMIIPHY: c_ulong = 0x00008947;
const SIOCGMIIREG: c_ulong = 0x00008948;
const SIOCSMIIREG: c_ulong = 0x00008949;
const SIOCWANDEV: c_ulong = 0x0000894A;
const SIOCOUTQNSD: c_ulong = 0x0000894B;
const SIOCGSKNS: c_ulong = 0x0000894C;
const SIOCDARP: c_ulong = 0x00008953;
const SIOCGARP: c_ulong = 0x00008954;
const SIOCSARP: c_ulong = 0x00008955;
const SIOCDRARP: c_ulong = 0x00008960;
const SIOCGRARP: c_ulong = 0x00008961;
const SIOCSRARP: c_ulong = 0x00008962;
const SIOCGIFMAP: c_ulong = 0x00008970;
const SIOCSIFMAP: c_ulong = 0x00008971;
const SIOCSHWTSTAMP: c_ulong = 0x000089b0;
const SIOCGHWTSTAMP: c_ulong = 0x000089b1;
const IPTOS_TOS_MASK: u8 = 0x1E;
const IPTOS_PREC_MASK: u8 = 0xE0;
const IPTOS_ECN_NOT_ECT: u8 = 0x00;
const RTF_UP: c_ushort = 0x0001;
const RTF_GATEWAY: c_ushort = 0x0002;
const RTF_HOST: c_ushort = 0x0004;
const RTF_REINSTATE: c_ushort = 0x0008;
const RTF_DYNAMIC: c_ushort = 0x0010;
const RTF_MODIFIED: c_ushort = 0x0020;
const RTF_MTU: c_ushort = 0x0040;
const RTF_MSS: c_ushort = RTF_MTU;
const RTF_WINDOW: c_ushort = 0x0080;
const RTF_IRTT: c_ushort = 0x0100;
const RTF_REJECT: c_ushort = 0x0200;
const RTF_STATIC: c_ushort = 0x0400;
const RTF_XRESOLVE: c_ushort = 0x0800;
const RTF_NOFORWARD: c_ushort = 0x1000;
const RTF_THROW: c_ushort = 0x2000;
const RTF_NOPMTUDISC: c_ushort = 0x4000;
const RTF_DEFAULT: u32 = 0x00010000;
const RTF_ALLONLINK: u32 = 0x00020000;
const RTF_ADDRCONF: u32 = 0x00040000;
const RTF_LINKRT: u32 = 0x00100000;
const RTF_NONEXTHOP: u32 = 0x00200000;
const RTF_CACHE: u32 = 0x01000000;
const RTF_FLOW: u32 = 0x02000000;
const RTF_POLICY: u32 = 0x04000000;
const RTCF_VALVE: u32 = 0x00200000;
const RTCF_MASQ: u32 = 0x00400000;
const RTCF_NAT: u32 = 0x00800000;
const RTCF_DOREDIRECT: u32 = 0x01000000;
const RTCF_LOG: u32 = 0x02000000;
const RTCF_DIRECTSRC: u32 = 0x04000000;
const RTF_LOCAL: u32 = 0x80000000;
const RTF_INTERFACE: u32 = 0x40000000;
const RTF_MULTICAST: u32 = 0x20000000;
const RTF_BROADCAST: u32 = 0x10000000;
const RTF_NAT: u32 = 0x08000000;
const RTF_ADDRCLASSMASK: u32 = 0xF8000000;
const RT_CLASS_UNSPEC: u8 = 0;
const RT_CLASS_DEFAULT: u8 = 253;
const RT_CLASS_MAIN: u8 = 254;
const RT_CLASS_LOCAL: u8 = 255;
const RT_CLASS_MAX: u8 = 255;
const NUD_NONE: u16 = 0x00;
const NUD_INCOMPLETE: u16 = 0x01;
const NUD_REACHABLE: u16 = 0x02;
const NUD_STALE: u16 = 0x04;
const NUD_DELAY: u16 = 0x08;
const NUD_PROBE: u16 = 0x10;
const NUD_FAILED: u16 = 0x20;
const NUD_NOARP: u16 = 0x40;
const NUD_PERMANENT: u16 = 0x80;
const NTF_USE: u8 = 0x01;
const NTF_SELF: u8 = 0x02;
const NTF_MASTER: u8 = 0x04;
const NTF_PROXY: u8 = 0x08;
const NTF_ROUTER: u8 = 0x80;
const NDA_UNSPEC: c_ushort = 0;
const NDA_DST: c_ushort = 1;
const NDA_LLADDR: c_ushort = 2;
const NDA_CACHEINFO: c_ushort = 3;
const NDA_PROBES: c_ushort = 4;
const NDA_VLAN: c_ushort = 5;
const NDA_PORT: c_ushort = 6;
const NDA_VNI: c_ushort = 7;
const NDA_IFINDEX: c_ushort = 8;
const NLA_ALIGNTO: c_int = 4;
const NETLINK_ROUTE: c_int = 0;
const NETLINK_UNUSED: c_int = 1;
const NETLINK_USERSOCK: c_int = 2;
const NETLINK_FIREWALL: c_int = 3;
const NETLINK_SOCK_DIAG: c_int = 4;
const NETLINK_NFLOG: c_int = 5;
const NETLINK_XFRM: c_int = 6;
const NETLINK_SELINUX: c_int = 7;
const NETLINK_ISCSI: c_int = 8;
const NETLINK_AUDIT: c_int = 9;
const NETLINK_FIB_LOOKUP: c_int = 10;
const NETLINK_CONNECTOR: c_int = 11;
const NETLINK_NETFILTER: c_int = 12;
const NETLINK_IP6_FW: c_int = 13;
const NETLINK_DNRTMSG: c_int = 14;
const NETLINK_KOBJECT_UEVENT: c_int = 15;
const NETLINK_GENERIC: c_int = 16;
const NETLINK_SCSITRANSPORT: c_int = 18;
const NETLINK_ECRYPTFS: c_int = 19;
const NETLINK_RDMA: c_int = 20;
const NETLINK_CRYPTO: c_int = 21;
const NETLINK_INET_DIAG: c_int = NETLINK_SOCK_DIAG;
const NLM_F_REQUEST: c_int = 1;
const NLM_F_MULTI: c_int = 2;
const NLM_F_ACK: c_int = 4;
const NLM_F_ECHO: c_int = 8;
const NLM_F_DUMP_INTR: c_int = 16;
const NLM_F_DUMP_FILTERED: c_int = 32;
const NLM_F_ROOT: c_int = 0x100;
const NLM_F_MATCH: c_int = 0x200;
const NLM_F_ATOMIC: c_int = 0x400;
const NLM_F_DUMP: c_int = NLM_F_ROOT | NLM_F_MATCH;
const NLM_F_REPLACE: c_int = 0x100;
const NLM_F_EXCL: c_int = 0x200;
const NLM_F_CREATE: c_int = 0x400;
const NLM_F_APPEND: c_int = 0x800;
const NETLINK_ADD_MEMBERSHIP: c_int = 1;
const NETLINK_DROP_MEMBERSHIP: c_int = 2;
const NETLINK_PKTINFO: c_int = 3;
const NETLINK_BROADCAST_ERROR: c_int = 4;
const NETLINK_NO_ENOBUFS: c_int = 5;
const NETLINK_RX_RING: c_int = 6;
const NETLINK_TX_RING: c_int = 7;
const NETLINK_LISTEN_ALL_NSID: c_int = 8;
const NETLINK_LIST_MEMBERSHIPS: c_int = 9;
const NETLINK_CAP_ACK: c_int = 10;
const NETLINK_EXT_ACK: c_int = 11;
const NETLINK_GET_STRICT_CHK: c_int = 12;
const NLA_F_NESTED: c_int = 1 << 15;
const NLA_F_NET_BYTEORDER: c_int = 1 << 14;
const NLA_TYPE_MASK: c_int = !(NLA_F_NESTED | NLA_F_NET_BYTEORDER);
const TCA_UNSPEC: c_ushort = 0;
const TCA_KIND: c_ushort = 1;
const TCA_OPTIONS: c_ushort = 2;
const TCA_STATS: c_ushort = 3;
const TCA_XSTATS: c_ushort = 4;
const TCA_RATE: c_ushort = 5;
const TCA_FCNT: c_ushort = 6;
const TCA_STATS2: c_ushort = 7;
const TCA_STAB: c_ushort = 8;
const RTM_NEWLINK: u16 = 16;
const RTM_DELLINK: u16 = 17;
const RTM_GETLINK: u16 = 18;
const RTM_SETLINK: u16 = 19;
const RTM_NEWADDR: u16 = 20;
const RTM_DELADDR: u16 = 21;
const RTM_GETADDR: u16 = 22;
const RTM_NEWROUTE: u16 = 24;
const RTM_DELROUTE: u16 = 25;
const RTM_GETROUTE: u16 = 26;
const RTM_NEWNEIGH: u16 = 28;
const RTM_DELNEIGH: u16 = 29;
const RTM_GETNEIGH: u16 = 30;
const RTM_NEWRULE: u16 = 32;
const RTM_DELRULE: u16 = 33;
const RTM_GETRULE: u16 = 34;
const RTM_NEWQDISC: u16 = 36;
const RTM_DELQDISC: u16 = 37;
const RTM_GETQDISC: u16 = 38;
const RTM_NEWTCLASS: u16 = 40;
const RTM_DELTCLASS: u16 = 41;
const RTM_GETTCLASS: u16 = 42;
const RTM_NEWTFILTER: u16 = 44;
const RTM_DELTFILTER: u16 = 45;
const RTM_GETTFILTER: u16 = 46;
const RTM_NEWACTION: u16 = 48;
const RTM_DELACTION: u16 = 49;
const RTM_GETACTION: u16 = 50;
const RTM_NEWPREFIX: u16 = 52;
const RTM_GETMULTICAST: u16 = 58;
const RTM_GETANYCAST: u16 = 62;
const RTM_NEWNEIGHTBL: u16 = 64;
const RTM_GETNEIGHTBL: u16 = 66;
const RTM_SETNEIGHTBL: u16 = 67;
const RTM_NEWNDUSEROPT: u16 = 68;
const RTM_NEWADDRLABEL: u16 = 72;
const RTM_DELADDRLABEL: u16 = 73;
const RTM_GETADDRLABEL: u16 = 74;
const RTM_GETDCB: u16 = 78;
const RTM_SETDCB: u16 = 79;
const RTM_NEWNETCONF: u16 = 80;
const RTM_GETNETCONF: u16 = 82;
const RTM_NEWMDB: u16 = 84;
const RTM_DELMDB: u16 = 85;
const RTM_GETMDB: u16 = 86;
const RTM_NEWNSID: u16 = 88;
const RTM_DELNSID: u16 = 89;
const RTM_GETNSID: u16 = 90;
const RTM_F_NOTIFY: c_uint = 0x100;
const RTM_F_CLONED: c_uint = 0x200;
const RTM_F_EQUALIZE: c_uint = 0x400;
const RTM_F_PREFIX: c_uint = 0x800;
const RTA_UNSPEC: c_ushort = 0;
const RTA_DST: c_ushort = 1;
const RTA_SRC: c_ushort = 2;
const RTA_IIF: c_ushort = 3;
const RTA_OIF: c_ushort = 4;
const RTA_GATEWAY: c_ushort = 5;
const RTA_PRIORITY: c_ushort = 6;
const RTA_PREFSRC: c_ushort = 7;
const RTA_METRICS: c_ushort = 8;
const RTA_MULTIPATH: c_ushort = 9;
const RTA_PROTOINFO: c_ushort = 10;
const RTA_FLOW: c_ushort = 11;
const RTA_CACHEINFO: c_ushort = 12;
const RTA_SESSION: c_ushort = 13;
const RTA_MP_ALGO: c_ushort = 14;
const RTA_TABLE: c_ushort = 15;
const RTA_MARK: c_ushort = 16;
const RTA_MFC_STATS: c_ushort = 17;
const RTN_UNSPEC: c_uchar = 0;
const RTN_UNICAST: c_uchar = 1;
const RTN_LOCAL: c_uchar = 2;
const RTN_BROADCAST: c_uchar = 3;
const RTN_ANYCAST: c_uchar = 4;
const RTN_MULTICAST: c_uchar = 5;
const RTN_BLACKHOLE: c_uchar = 6;
const RTN_UNREACHABLE: c_uchar = 7;
const RTN_PROHIBIT: c_uchar = 8;
const RTN_THROW: c_uchar = 9;
const RTN_NAT: c_uchar = 10;
const RTN_XRESOLVE: c_uchar = 11;
const RTPROT_UNSPEC: c_uchar = 0;
const RTPROT_REDIRECT: c_uchar = 1;
const RTPROT_KERNEL: c_uchar = 2;
const RTPROT_BOOT: c_uchar = 3;
const RTPROT_STATIC: c_uchar = 4;
const RT_SCOPE_UNIVERSE: c_uchar = 0;
const RT_SCOPE_SITE: c_uchar = 200;
const RT_SCOPE_LINK: c_uchar = 253;
const RT_SCOPE_HOST: c_uchar = 254;
const RT_SCOPE_NOWHERE: c_uchar = 255;
const RT_TABLE_UNSPEC: c_uchar = 0;
const RT_TABLE_COMPAT: c_uchar = 252;
const RT_TABLE_DEFAULT: c_uchar = 253;
const RT_TABLE_MAIN: c_uchar = 254;
const RT_TABLE_LOCAL: c_uchar = 255;
const RTMSG_OVERRUN: u32 = NLMSG_OVERRUN as u32;
const RTMSG_NEWDEVICE: u32 = 0x11;
const RTMSG_DELDEVICE: u32 = 0x12;
const RTMSG_NEWROUTE: u32 = 0x21;
const RTMSG_DELROUTE: u32 = 0x22;
const RTMSG_NEWRULE: u32 = 0x31;
const RTMSG_DELRULE: u32 = 0x32;
const RTMSG_CONTROL: u32 = 0x40;
const RTMSG_AR_FAILED: u32 = 0x51;
const MAX_ADDR_LEN: usize = 7;
const ARPD_UPDATE: c_ushort = 0x01;
const ARPD_LOOKUP: c_ushort = 0x02;
const ARPD_FLUSH: c_ushort = 0x03;
const ATF_MAGIC: c_int = 0x80;
const RTEXT_FILTER_VF: c_int = 1 << 0;
const RTEXT_FILTER_BRVLAN: c_int = 1 << 1;
const RTEXT_FILTER_BRVLAN_COMPRESSED: c_int = 1 << 2;
const RTEXT_FILTER_SKIP_STATS: c_int = 1 << 3;
const RTEXT_FILTER_MRP: c_int = 1 << 4;
const RTEXT_FILTER_CFM_CONFIG: c_int = 1 << 5;
const RTEXT_FILTER_CFM_STATUS: c_int = 1 << 6;
const RTMGRP_LINK: c_int = 0x00001;
const RTMGRP_NOTIFY: c_int = 0x00002;
const RTMGRP_NEIGH: c_int = 0x00004;
const RTMGRP_TC: c_int = 0x00008;
const RTMGRP_IPV4_IFADDR: c_int = 0x00010;
const RTMGRP_IPV4_MROUTE: c_int = 0x00020;
const RTMGRP_IPV4_ROUTE: c_int = 0x00040;
const RTMGRP_IPV4_RULE: c_int = 0x00080;
const RTMGRP_IPV6_IFADDR: c_int = 0x00100;
const RTMGRP_IPV6_MROUTE: c_int = 0x00200;
const RTMGRP_IPV6_ROUTE: c_int = 0x00400;
const RTMGRP_IPV6_IFINFO: c_int = 0x00800;
const RTMGRP_DECnet_IFADDR: c_int = 0x01000;
const RTMGRP_DECnet_ROUTE: c_int = 0x04000;
const RTMGRP_IPV6_PREFIX: c_int = 0x20000;
const RTNLGRP_NONE: c_uint = 0x00;
const RTNLGRP_LINK: c_uint = 0x01;
const RTNLGRP_NOTIFY: c_uint = 0x02;
const RTNLGRP_NEIGH: c_uint = 0x03;
const RTNLGRP_TC: c_uint = 0x04;
const RTNLGRP_IPV4_IFADDR: c_uint = 0x05;
const RTNLGRP_IPV4_MROUTE: c_uint = 0x06;
const RTNLGRP_IPV4_ROUTE: c_uint = 0x07;
const RTNLGRP_IPV4_RULE: c_uint = 0x08;
const RTNLGRP_IPV6_IFADDR: c_uint = 0x09;
const RTNLGRP_IPV6_MROUTE: c_uint = 0x0a;
const RTNLGRP_IPV6_ROUTE: c_uint = 0x0b;
const RTNLGRP_IPV6_IFINFO: c_uint = 0x0c;
const RTNLGRP_DECnet_IFADDR: c_uint = 0x0d;
const RTNLGRP_NOP2: c_uint = 0x0e;
const RTNLGRP_DECnet_ROUTE: c_uint = 0x0f;
const RTNLGRP_DECnet_RULE: c_uint = 0x10;
const RTNLGRP_NOP4: c_uint = 0x11;
const RTNLGRP_IPV6_PREFIX: c_uint = 0x12;
const RTNLGRP_IPV6_RULE: c_uint = 0x13;
const RTNLGRP_ND_USEROPT: c_uint = 0x14;
const RTNLGRP_PHONET_IFADDR: c_uint = 0x15;
const RTNLGRP_PHONET_ROUTE: c_uint = 0x16;
const RTNLGRP_DCB: c_uint = 0x17;
const RTNLGRP_IPV4_NETCONF: c_uint = 0x18;
const RTNLGRP_IPV6_NETCONF: c_uint = 0x19;
const RTNLGRP_MDB: c_uint = 0x1a;
const RTNLGRP_MPLS_ROUTE: c_uint = 0x1b;
const RTNLGRP_NSID: c_uint = 0x1c;
const RTNLGRP_MPLS_NETCONF: c_uint = 0x1d;
const RTNLGRP_IPV4_MROUTE_R: c_uint = 0x1e;
const RTNLGRP_IPV6_MROUTE_R: c_uint = 0x1f;
const RTNLGRP_NEXTHOP: c_uint = 0x20;
const RTNLGRP_BRVLAN: c_uint = 0x21;
const RTNLGRP_MCTP_IFADDR: c_uint = 0x22;
const RTNLGRP_TUNNEL: c_uint = 0x23;
const RTNLGRP_STATS: c_uint = 0x24;
const MODULE_INIT_IGNORE_MODVERSIONS: c_uint = 0x0001;
const MODULE_INIT_IGNORE_VERMAGIC: c_uint = 0x0002;
const SOF_TIMESTAMPING_TX_HARDWARE: c_uint = 1 << 0;
const SOF_TIMESTAMPING_TX_SOFTWARE: c_uint = 1 << 1;
const SOF_TIMESTAMPING_RX_HARDWARE: c_uint = 1 << 2;
const SOF_TIMESTAMPING_RX_SOFTWARE: c_uint = 1 << 3;
const SOF_TIMESTAMPING_SOFTWARE: c_uint = 1 << 4;
const SOF_TIMESTAMPING_SYS_HARDWARE: c_uint = 1 << 5;
const SOF_TIMESTAMPING_RAW_HARDWARE: c_uint = 1 << 6;
const SOF_TIMESTAMPING_OPT_ID: c_uint = 1 << 7;
const SOF_TIMESTAMPING_TX_SCHED: c_uint = 1 << 8;
const SOF_TIMESTAMPING_TX_ACK: c_uint = 1 << 9;
const SOF_TIMESTAMPING_OPT_CMSG: c_uint = 1 << 10;
const SOF_TIMESTAMPING_OPT_TSONLY: c_uint = 1 << 11;
const SOF_TIMESTAMPING_OPT_STATS: c_uint = 1 << 12;
const SOF_TIMESTAMPING_OPT_PKTINFO: c_uint = 1 << 13;
const SOF_TIMESTAMPING_OPT_TX_SWHW: c_uint = 1 << 14;
const SOF_TXTIME_DEADLINE_MODE: u32 = 1 << 0;
const SOF_TXTIME_REPORT_ERRORS: u32 = 1 << 1;
const HWTSTAMP_TX_OFF: c_uint = 0;
const HWTSTAMP_TX_ON: c_uint = 1;
const HWTSTAMP_TX_ONESTEP_SYNC: c_uint = 2;
const HWTSTAMP_TX_ONESTEP_P2P: c_uint = 3;
const HWTSTAMP_FILTER_NONE: c_uint = 0;
const HWTSTAMP_FILTER_ALL: c_uint = 1;
const HWTSTAMP_FILTER_SOME: c_uint = 2;
const HWTSTAMP_FILTER_PTP_V1_L4_EVENT: c_uint = 3;
const HWTSTAMP_FILTER_PTP_V1_L4_SYNC: c_uint = 4;
const HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ: c_uint = 5;
const HWTSTAMP_FILTER_PTP_V2_L4_EVENT: c_uint = 6;
const HWTSTAMP_FILTER_PTP_V2_L4_SYNC: c_uint = 7;
const HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ: c_uint = 8;
const HWTSTAMP_FILTER_PTP_V2_L2_EVENT: c_uint = 9;
const HWTSTAMP_FILTER_PTP_V2_L2_SYNC: c_uint = 10;
const HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ: c_uint = 11;
const HWTSTAMP_FILTER_PTP_V2_EVENT: c_uint = 12;
const HWTSTAMP_FILTER_PTP_V2_SYNC: c_uint = 13;
const HWTSTAMP_FILTER_PTP_V2_DELAY_REQ: c_uint = 14;
const HWTSTAMP_FILTER_NTP_ALL: c_uint = 15;
const ALG_SET_KEY: c_int = 1;
const ALG_SET_IV: c_int = 2;
const ALG_SET_OP: c_int = 3;
const ALG_SET_AEAD_ASSOCLEN: c_int = 4;
const ALG_SET_AEAD_AUTHSIZE: c_int = 5;
const ALG_OP_DECRYPT: c_int = 0;
const ALG_OP_ENCRYPT: c_int = 1;
const IF_OPER_UNKNOWN: c_int = 0;
const IF_OPER_NOTPRESENT: c_int = 1;
const IF_OPER_DOWN: c_int = 2;
const IF_OPER_LOWERLAYERDOWN: c_int = 3;
const IF_OPER_TESTING: c_int = 4;
const IF_OPER_DORMANT: c_int = 5;
const IF_OPER_UP: c_int = 6;
const IF_LINK_MODE_DEFAULT: c_int = 0;
const IF_LINK_MODE_DORMANT: c_int = 1;
const IF_LINK_MODE_TESTING: c_int = 2;
const UDP_CORK: c_int = 1;
const UDP_ENCAP: c_int = 100;
const UDP_NO_CHECK6_TX: c_int = 101;
const UDP_NO_CHECK6_RX: c_int = 102;
const MAP_SHARED_VALIDATE: c_int = 0x3;
const MAP_FIXED_NOREPLACE: c_int = 0x100000;
const MLOCK_ONFAULT: c_uint = 0x01;
const VMADDR_CID_ANY: c_uint = 0xFFFFFFFF;
const VMADDR_CID_HYPERVISOR: c_uint = 0;
const VMADDR_CID_RESERVED: c_uint = 1;
const VMADDR_CID_LOCAL: c_uint = 1;
const VMADDR_CID_HOST: c_uint = 2;
const VMADDR_PORT_ANY: c_uint = 0xFFFFFFFF;
const IN_ACCESS: u32 = 0x00000001;
const IN_MODIFY: u32 = 0x00000002;
const IN_ATTRIB: u32 = 0x00000004;
const IN_CLOSE_WRITE: u32 = 0x00000008;
const IN_CLOSE_NOWRITE: u32 = 0x00000010;
const IN_CLOSE: u32 = IN_CLOSE_WRITE | IN_CLOSE_NOWRITE;
const IN_OPEN: u32 = 0x00000020;
const IN_MOVED_FROM: u32 = 0x00000040;
const IN_MOVED_TO: u32 = 0x00000080;
const IN_MOVE: u32 = IN_MOVED_FROM | IN_MOVED_TO;
const IN_CREATE: u32 = 0x00000100;
const IN_DELETE: u32 = 0x00000200;
const IN_DELETE_SELF: u32 = 0x00000400;
const IN_MOVE_SELF: u32 = 0x00000800;
const IN_UNMOUNT: u32 = 0x00002000;
const IN_Q_OVERFLOW: u32 = 0x00004000;
const IN_IGNORED: u32 = 0x00008000;
const IN_ONLYDIR: u32 = 0x01000000;
const IN_DONT_FOLLOW: u32 = 0x02000000;
const IN_EXCL_UNLINK: u32 = 0x04000000;
const KEY_SPEC_THREAD_KEYRING: i32 = -1;
const KEY_SPEC_PROCESS_KEYRING: i32 = -2;
const KEY_SPEC_SESSION_KEYRING: i32 = -3;
const KEY_SPEC_USER_KEYRING: i32 = -4;
const KEY_SPEC_USER_SESSION_KEYRING: i32 = -5;
const KEY_SPEC_GROUP_KEYRING: i32 = -6;
const KEY_SPEC_REQKEY_AUTH_KEY: i32 = -7;
const KEY_SPEC_REQUESTOR_KEYRING: i32 = -8;
const KEY_REQKEY_DEFL_NO_CHANGE: i32 = -1;
const KEY_REQKEY_DEFL_DEFAULT: i32 = 0;
const KEY_REQKEY_DEFL_THREAD_KEYRING: i32 = 1;
const KEY_REQKEY_DEFL_PROCESS_KEYRING: i32 = 2;
const KEY_REQKEY_DEFL_SESSION_KEYRING: i32 = 3;
const KEY_REQKEY_DEFL_USER_KEYRING: i32 = 4;
const KEY_REQKEY_DEFL_USER_SESSION_KEYRING: i32 = 5;
const KEY_REQKEY_DEFL_GROUP_KEYRING: i32 = 6;
const KEY_REQKEY_DEFL_REQUESTOR_KEYRING: i32 = 7;
const KEYCTL_GET_KEYRING_ID: u32 = 0;
const KEYCTL_JOIN_SESSION_KEYRING: u32 = 1;
const KEYCTL_UPDATE: u32 = 2;
const KEYCTL_REVOKE: u32 = 3;
const KEYCTL_CHOWN: u32 = 4;
const KEYCTL_SETPERM: u32 = 5;
const KEYCTL_DESCRIBE: u32 = 6;
const KEYCTL_CLEAR: u32 = 7;
const KEYCTL_LINK: u32 = 8;
const KEYCTL_UNLINK: u32 = 9;
const KEYCTL_SEARCH: u32 = 10;
const KEYCTL_READ: u32 = 11;
const KEYCTL_INSTANTIATE: u32 = 12;
const KEYCTL_NEGATE: u32 = 13;
const KEYCTL_SET_REQKEY_KEYRING: u32 = 14;
const KEYCTL_SET_TIMEOUT: u32 = 15;
const KEYCTL_ASSUME_AUTHORITY: u32 = 16;
const KEYCTL_GET_SECURITY: u32 = 17;
const KEYCTL_SESSION_TO_PARENT: u32 = 18;
const KEYCTL_REJECT: u32 = 19;
const KEYCTL_INSTANTIATE_IOV: u32 = 20;
const KEYCTL_INVALIDATE: u32 = 21;
const KEYCTL_GET_PERSISTENT: u32 = 22;
const IN_MASK_CREATE: u32 = 0x10000000;
const IN_MASK_ADD: u32 = 0x20000000;
const IN_ISDIR: u32 = 0x40000000;
const IN_ONESHOT: u32 = 0x80000000;
const IN_ALL_EVENTS: u32 = IN_ACCESS | IN_MODIFY | IN_ATTRIB | IN_CLOSE_WRITE | IN_CLOSE_NOWRITE | IN_OPEN | IN_MOVED_FROM | IN_MOVED_TO | IN_DELETE | IN_CREATE | IN_DELETE_SELF | IN_MOVE_SELF;
const IN_CLOEXEC: c_int = O_CLOEXEC;
const IN_NONBLOCK: c_int = O_NONBLOCK;
const OPEN_TREE_CLONE: c_uint = 0x01;
const OPEN_TREE_CLOEXEC: c_uint = O_CLOEXEC as c_uint;
const NFT_TABLE_MAXNAMELEN: c_int = 256;
const NFT_CHAIN_MAXNAMELEN: c_int = 256;
const NFT_SET_MAXNAMELEN: c_int = 256;
const NFT_OBJ_MAXNAMELEN: c_int = 256;
const NFT_USERDATA_MAXLEN: c_int = 256;
const NFT_REG_VERDICT: c_int = 0;
const NFT_REG_1: c_int = 1;
const NFT_REG_2: c_int = 2;
const NFT_REG_3: c_int = 3;
const NFT_REG_4: c_int = 4;
const __NFT_REG_MAX: c_int = 5;
const NFT_REG32_00: c_int = 8;
const NFT_REG32_01: c_int = 9;
const NFT_REG32_02: c_int = 10;
const NFT_REG32_03: c_int = 11;
const NFT_REG32_04: c_int = 12;
const NFT_REG32_05: c_int = 13;
const NFT_REG32_06: c_int = 14;
const NFT_REG32_07: c_int = 15;
const NFT_REG32_08: c_int = 16;
const NFT_REG32_09: c_int = 17;
const NFT_REG32_10: c_int = 18;
const NFT_REG32_11: c_int = 19;
const NFT_REG32_12: c_int = 20;
const NFT_REG32_13: c_int = 21;
const NFT_REG32_14: c_int = 22;
const NFT_REG32_15: c_int = 23;
const NFT_REG_SIZE: c_int = 16;
const NFT_REG32_SIZE: c_int = 4;
const NFT_CONTINUE: c_int = -1;
const NFT_BREAK: c_int = -2;
const NFT_JUMP: c_int = -3;
const NFT_GOTO: c_int = -4;
const NFT_RETURN: c_int = -5;
const NFT_MSG_NEWTABLE: c_int = 0;
const NFT_MSG_GETTABLE: c_int = 1;
const NFT_MSG_DELTABLE: c_int = 2;
const NFT_MSG_NEWCHAIN: c_int = 3;
const NFT_MSG_GETCHAIN: c_int = 4;
const NFT_MSG_DELCHAIN: c_int = 5;
const NFT_MSG_NEWRULE: c_int = 6;
const NFT_MSG_GETRULE: c_int = 7;
const NFT_MSG_DELRULE: c_int = 8;
const NFT_MSG_NEWSET: c_int = 9;
const NFT_MSG_GETSET: c_int = 10;
const NFT_MSG_DELSET: c_int = 11;
const NFT_MSG_NEWSETELEM: c_int = 12;
const NFT_MSG_GETSETELEM: c_int = 13;
const NFT_MSG_DELSETELEM: c_int = 14;
const NFT_MSG_NEWGEN: c_int = 15;
const NFT_MSG_GETGEN: c_int = 16;
const NFT_MSG_TRACE: c_int = 17;
const NFT_MSG_NEWOBJ: c_int = 18;
const NFT_MSG_GETOBJ: c_int = 19;
const NFT_MSG_DELOBJ: c_int = 20;
const NFT_MSG_GETOBJ_RESET: c_int = 21;
const NFT_MSG_MAX: c_int = 25;
const NFT_SET_ANONYMOUS: c_int = 0x1;
const NFT_SET_CONSTANT: c_int = 0x2;
const NFT_SET_INTERVAL: c_int = 0x4;
const NFT_SET_MAP: c_int = 0x8;
const NFT_SET_TIMEOUT: c_int = 0x10;
const NFT_SET_EVAL: c_int = 0x20;
const NFT_SET_POL_PERFORMANCE: c_int = 0;
const NFT_SET_POL_MEMORY: c_int = 1;
const NFT_SET_ELEM_INTERVAL_END: c_int = 0x1;
const NFT_DATA_VALUE: c_uint = 0;
const NFT_DATA_VERDICT: c_uint = 0xffffff00;
const NFT_DATA_RESERVED_MASK: c_uint = 0xffffff00;
const NFT_DATA_VALUE_MAXLEN: c_int = 64;
const NFT_BYTEORDER_NTOH: c_int = 0;
const NFT_BYTEORDER_HTON: c_int = 1;
const NFT_CMP_EQ: c_int = 0;
const NFT_CMP_NEQ: c_int = 1;
const NFT_CMP_LT: c_int = 2;
const NFT_CMP_LTE: c_int = 3;
const NFT_CMP_GT: c_int = 4;
const NFT_CMP_GTE: c_int = 5;
const NFT_RANGE_EQ: c_int = 0;
const NFT_RANGE_NEQ: c_int = 1;
const NFT_LOOKUP_F_INV: c_int = 1 << 0;
const NFT_DYNSET_OP_ADD: c_int = 0;
const NFT_DYNSET_OP_UPDATE: c_int = 1;
const NFT_DYNSET_F_INV: c_int = 1 << 0;
const NFT_PAYLOAD_LL_HEADER: c_int = 0;
const NFT_PAYLOAD_NETWORK_HEADER: c_int = 1;
const NFT_PAYLOAD_TRANSPORT_HEADER: c_int = 2;
const NFT_PAYLOAD_CSUM_NONE: c_int = 0;
const NFT_PAYLOAD_CSUM_INET: c_int = 1;
const NFT_META_LEN: c_int = 0;
const NFT_META_PROTOCOL: c_int = 1;
const NFT_META_PRIORITY: c_int = 2;
const NFT_META_MARK: c_int = 3;
const NFT_META_IIF: c_int = 4;
const NFT_META_OIF: c_int = 5;
const NFT_META_IIFNAME: c_int = 6;
const NFT_META_OIFNAME: c_int = 7;
const NFT_META_IIFTYPE: c_int = 8;
const NFT_META_OIFTYPE: c_int = 9;
const NFT_META_SKUID: c_int = 10;
const NFT_META_SKGID: c_int = 11;
const NFT_META_NFTRACE: c_int = 12;
const NFT_META_RTCLASSID: c_int = 13;
const NFT_META_SECMARK: c_int = 14;
const NFT_META_NFPROTO: c_int = 15;
const NFT_META_L4PROTO: c_int = 16;
const NFT_META_BRI_IIFNAME: c_int = 17;
const NFT_META_BRI_OIFNAME: c_int = 18;
const NFT_META_PKTTYPE: c_int = 19;
const NFT_META_CPU: c_int = 20;
const NFT_META_IIFGROUP: c_int = 21;
const NFT_META_OIFGROUP: c_int = 22;
const NFT_META_CGROUP: c_int = 23;
const NFT_META_PRANDOM: c_int = 24;
const NFT_CT_STATE: c_int = 0;
const NFT_CT_DIRECTION: c_int = 1;
const NFT_CT_STATUS: c_int = 2;
const NFT_CT_MARK: c_int = 3;
const NFT_CT_SECMARK: c_int = 4;
const NFT_CT_EXPIRATION: c_int = 5;
const NFT_CT_HELPER: c_int = 6;
const NFT_CT_L3PROTOCOL: c_int = 7;
const NFT_CT_SRC: c_int = 8;
const NFT_CT_DST: c_int = 9;
const NFT_CT_PROTOCOL: c_int = 10;
const NFT_CT_PROTO_SRC: c_int = 11;
const NFT_CT_PROTO_DST: c_int = 12;
const NFT_CT_LABELS: c_int = 13;
const NFT_CT_PKTS: c_int = 14;
const NFT_CT_BYTES: c_int = 15;
const NFT_LIMIT_PKTS: c_int = 0;
const NFT_LIMIT_PKT_BYTES: c_int = 1;
const NFT_LIMIT_F_INV: c_int = 1 << 0;
const NFT_QUEUE_FLAG_BYPASS: c_int = 0x01;
const NFT_QUEUE_FLAG_CPU_FANOUT: c_int = 0x02;
const NFT_QUEUE_FLAG_MASK: c_int = 0x03;
const NFT_QUOTA_F_INV: c_int = 1 << 0;
const NFT_REJECT_ICMP_UNREACH: c_int = 0;
const NFT_REJECT_TCP_RST: c_int = 1;
const NFT_REJECT_ICMPX_UNREACH: c_int = 2;
const NFT_REJECT_ICMPX_NO_ROUTE: c_int = 0;
const NFT_REJECT_ICMPX_PORT_UNREACH: c_int = 1;
const NFT_REJECT_ICMPX_HOST_UNREACH: c_int = 2;
const NFT_REJECT_ICMPX_ADMIN_PROHIBITED: c_int = 3;
const NFT_NAT_SNAT: c_int = 0;
const NFT_NAT_DNAT: c_int = 1;
const NFT_TRACETYPE_UNSPEC: c_int = 0;
const NFT_TRACETYPE_POLICY: c_int = 1;
const NFT_TRACETYPE_RETURN: c_int = 2;
const NFT_TRACETYPE_RULE: c_int = 3;
const NFT_NG_INCREMENTAL: c_int = 0;
const NFT_NG_RANDOM: c_int = 1;
const FF_MAX: __u16 = 0x7f;
const FF_CNT: usize = FF_MAX as usize + 1;
const INPUT_PROP_MAX: __u16 = 0x1f;
const INPUT_PROP_CNT: usize = INPUT_PROP_MAX as usize + 1;
const EV_MAX: __u16 = 0x1f;
const EV_CNT: usize = EV_MAX as usize + 1;
const SYN_MAX: __u16 = 0xf;
const SYN_CNT: usize = SYN_MAX as usize + 1;
const KEY_MAX: __u16 = 0x2ff;
const KEY_CNT: usize = KEY_MAX as usize + 1;
const REL_MAX: __u16 = 0x0f;
const REL_CNT: usize = REL_MAX as usize + 1;
const ABS_MAX: __u16 = 0x3f;
const ABS_CNT: usize = ABS_MAX as usize + 1;
const SW_MAX: __u16 = 0x10;
const SW_CNT: usize = SW_MAX as usize + 1;
const MSC_MAX: __u16 = 0x07;
const MSC_CNT: usize = MSC_MAX as usize + 1;
const LED_MAX: __u16 = 0x0f;
const LED_CNT: usize = LED_MAX as usize + 1;
const REP_MAX: __u16 = 0x01;
const REP_CNT: usize = REP_MAX as usize + 1;
const SND_MAX: __u16 = 0x07;
const SND_CNT: usize = SND_MAX as usize + 1;
const UINPUT_VERSION: c_uint = 5;
const UINPUT_MAX_NAME_SIZE: usize = 80;
const FAN_ACCESS: u64 = 0x00000001;
const FAN_MODIFY: u64 = 0x00000002;
const FAN_CLOSE_WRITE: u64 = 0x00000008;
const FAN_CLOSE_NOWRITE: u64 = 0x00000010;
const FAN_OPEN: u64 = 0x00000020;
const FAN_Q_OVERFLOW: u64 = 0x00004000;
const FAN_OPEN_PERM: u64 = 0x00010000;
const FAN_ACCESS_PERM: u64 = 0x00020000;
const FAN_ONDIR: u64 = 0x40000000;
const FAN_EVENT_ON_CHILD: u64 = 0x08000000;
const FAN_CLOSE: u64 = FAN_CLOSE_WRITE | FAN_CLOSE_NOWRITE;
const FAN_CLOEXEC: c_uint = 0x00000001;
const FAN_NONBLOCK: c_uint = 0x00000002;
const FAN_CLASS_NOTIF: c_uint = 0x00000000;
const FAN_CLASS_CONTENT: c_uint = 0x00000004;
const FAN_CLASS_PRE_CONTENT: c_uint = 0x00000008;
const FAN_UNLIMITED_QUEUE: c_uint = 0x00000010;
const FAN_UNLIMITED_MARKS: c_uint = 0x00000020;
const FAN_MARK_ADD: c_uint = 0x00000001;
const FAN_MARK_REMOVE: c_uint = 0x00000002;
const FAN_MARK_DONT_FOLLOW: c_uint = 0x00000004;
const FAN_MARK_ONLYDIR: c_uint = 0x00000008;
const FAN_MARK_IGNORED_MASK: c_uint = 0x00000020;
const FAN_MARK_IGNORED_SURV_MODIFY: c_uint = 0x00000040;
const FAN_MARK_FLUSH: c_uint = 0x00000080;
const FANOTIFY_METADATA_VERSION: u8 = 3;
const FAN_ALLOW: u32 = 0x01;
const FAN_DENY: u32 = 0x02;
const FAN_NOFD: c_int = -1;
const FUTEX_WAIT: c_int = 0;
const FUTEX_WAKE: c_int = 1;
const FUTEX_FD: c_int = 2;
const FUTEX_REQUEUE: c_int = 3;
const FUTEX_CMP_REQUEUE: c_int = 4;
const FUTEX_WAKE_OP: c_int = 5;
const FUTEX_LOCK_PI: c_int = 6;
const FUTEX_UNLOCK_PI: c_int = 7;
const FUTEX_TRYLOCK_PI: c_int = 8;
const FUTEX_WAIT_BITSET: c_int = 9;
const FUTEX_WAKE_BITSET: c_int = 10;
const FUTEX_WAIT_REQUEUE_PI: c_int = 11;
const FUTEX_CMP_REQUEUE_PI: c_int = 12;
const FUTEX_LOCK_PI2: c_int = 13;
const FUTEX_PRIVATE_FLAG: c_int = 128;
const FUTEX_CLOCK_REALTIME: c_int = 256;
const FUTEX_CMD_MASK: c_int = !(FUTEX_PRIVATE_FLAG | FUTEX_CLOCK_REALTIME);
const FUTEX_BITSET_MATCH_ANY: c_int = 0xffffffff;
const FUTEX_OP_SET: c_int = 0;
const FUTEX_OP_ADD: c_int = 1;
const FUTEX_OP_OR: c_int = 2;
const FUTEX_OP_ANDN: c_int = 3;
const FUTEX_OP_XOR: c_int = 4;
const FUTEX_OP_OPARG_SHIFT: c_int = 8;
const FUTEX_OP_CMP_EQ: c_int = 0;
const FUTEX_OP_CMP_NE: c_int = 1;
const FUTEX_OP_CMP_LT: c_int = 2;
const FUTEX_OP_CMP_LE: c_int = 3;
const FUTEX_OP_CMP_GT: c_int = 4;
const FUTEX_OP_CMP_GE: c_int = 5;
extern "C" fn FUTEX_OP(op: c_int, oparg: c_int, cmp: c_int, cmparg: c_int) -> c_int {
    ((op & 0xf) << 28) | ((cmp & 0xf) << 24) | ((oparg & 0xfff) << 12) | (cmparg & 0xfff)
}
const KEXEC_ON_CRASH: c_int = 0x00000001;
const KEXEC_PRESERVE_CONTEXT: c_int = 0x00000002;
const KEXEC_ARCH_MASK: c_int = 0xffff0000;
const KEXEC_FILE_UNLOAD: c_int = 0x00000001;
const KEXEC_FILE_ON_CRASH: c_int = 0x00000002;
const KEXEC_FILE_NO_INITRAMFS: c_int = 0x00000004;
const LINUX_REBOOT_MAGIC1: c_int = 0xfee1dead;
const LINUX_REBOOT_MAGIC2: c_int = 672274793;
const LINUX_REBOOT_MAGIC2A: c_int = 85072278;
const LINUX_REBOOT_MAGIC2B: c_int = 369367448;
const LINUX_REBOOT_MAGIC2C: c_int = 537993216;
const LINUX_REBOOT_CMD_RESTART: c_int = 0x01234567;
const LINUX_REBOOT_CMD_HALT: c_int = 0xCDEF0123;
const LINUX_REBOOT_CMD_CAD_ON: c_int = 0x89ABCDEF;
const LINUX_REBOOT_CMD_CAD_OFF: c_int = 0x00000000;
const LINUX_REBOOT_CMD_POWER_OFF: c_int = 0x4321FEDC;
const LINUX_REBOOT_CMD_RESTART2: c_int = 0xA1B2C3D4;
const LINUX_REBOOT_CMD_SW_SUSPEND: c_int = 0xD000FCE2;
const LINUX_REBOOT_CMD_KEXEC: c_int = 0x45584543;
const REG_EXTENDED: c_int = 1;
const REG_ICASE: c_int = 2;
const REG_NEWLINE: c_int = 4;
const REG_NOSUB: c_int = 8;
const REG_NOTBOL: c_int = 1;
const REG_NOTEOL: c_int = 2;
const REG_ENOSYS: c_int = -1;
const REG_NOMATCH: c_int = 1;
const REG_BADPAT: c_int = 2;
const REG_ECOLLATE: c_int = 3;
const REG_ECTYPE: c_int = 4;
const REG_EESCAPE: c_int = 5;
const REG_ESUBREG: c_int = 6;
const REG_EBRACK: c_int = 7;
const REG_EPAREN: c_int = 8;
const REG_EBRACE: c_int = 9;
const REG_BADBR: c_int = 10;
const REG_ERANGE: c_int = 11;
const REG_ESPACE: c_int = 12;
const REG_BADRPT: c_int = 13;
const SO_EE_ORIGIN_NONE: u8 = 0;
const SO_EE_ORIGIN_LOCAL: u8 = 1;
const SO_EE_ORIGIN_ICMP: u8 = 2;
const SO_EE_ORIGIN_ICMP6: u8 = 3;
const SO_EE_ORIGIN_TXSTATUS: u8 = 4;
const SO_EE_ORIGIN_TIMESTAMPING: u8 = SO_EE_ORIGIN_TXSTATUS;
const EPERM: c_int = 1;
const ENOENT: c_int = 2;
const ESRCH: c_int = 3;
const EINTR: c_int = 4;
const EIO: c_int = 5;
const ENXIO: c_int = 6;
const E2BIG: c_int = 7;
const ENOEXEC: c_int = 8;
const EBADF: c_int = 9;
const ECHILD: c_int = 10;
const EAGAIN: c_int = 11;
const ENOMEM: c_int = 12;
const EACCES: c_int = 13;
const EFAULT: c_int = 14;
const ENOTBLK: c_int = 15;
const EBUSY: c_int = 16;
const EEXIST: c_int = 17;
const EXDEV: c_int = 18;
const ENODEV: c_int = 19;
const ENOTDIR: c_int = 20;
const EISDIR: c_int = 21;
const EINVAL: c_int = 22;
const ENFILE: c_int = 23;
const EMFILE: c_int = 24;
const ENOTTY: c_int = 25;
const ETXTBSY: c_int = 26;
const EFBIG: c_int = 27;
const ENOSPC: c_int = 28;
const ESPIPE: c_int = 29;
const EROFS: c_int = 30;
const EMLINK: c_int = 31;
const EPIPE: c_int = 32;
const EDOM: c_int = 33;
const ERANGE: c_int = 34;
const EWOULDBLOCK: c_int = EAGAIN;
const CAN_EFF_FLAG: canid_t = 0x80000000;
const CAN_RTR_FLAG: canid_t = 0x40000000;
const CAN_ERR_FLAG: canid_t = 0x20000000;
const CAN_SFF_MASK: canid_t = 0x000007FF;
const CAN_EFF_MASK: canid_t = 0x1FFFFFFF;
const CAN_ERR_MASK: canid_t = 0x1FFFFFFF;
const CANXL_PRIO_MASK: canid_t = CAN_SFF_MASK;
const CAN_SFF_ID_BITS: c_int = 11;
const CAN_EFF_ID_BITS: c_int = 29;
const CANXL_PRIO_BITS: c_int = CAN_SFF_ID_BITS;
const CAN_MAX_DLC: c_int = 8;
const CAN_MAX_DLEN: usize = 8;
const CANFD_MAX_DLC: c_int = 15;
const CANFD_MAX_DLEN: usize = 64;
const CANFD_BRS: c_int = 0x01;
const CANFD_ESI: c_int = 0x02;
const CANXL_MIN_DLC: c_int = 0;
const CANXL_MAX_DLC: c_int = 2047;
const CANXL_MAX_DLC_MASK: c_int = 0x07FF;
const CANXL_MIN_DLEN: usize = 1;
const CANXL_MAX_DLEN: usize = 2048;
const CANXL_XLF: c_int = 0x80;
const CANXL_SEC: c_int = 0x01;
const CAN_MTU: usize = std::mem::size_of::<can_frame>();
const CANFD_MTU: usize = std::mem::size_of::<canfd_frame>();
const CANXL_MTU: usize = std::mem::size_of::<canxl_frame>();
const CANXL_HDR_SIZE: usize = 12;
const CANXL_MIN_MTU: usize = CANXL_HDR_SIZE + 64;
const CANXL_MAX_MTU: usize = CANXL_MTU;
const CAN_RAW: c_int = 1;
const CAN_BCM: c_int = 2;
const CAN_TP16: c_int = 3;
const CAN_TP20: c_int = 4;
const CAN_MCNET: c_int = 5;
const CAN_ISOTP: c_int = 6;
const CAN_J1939: c_int = 7;
const CAN_NPROTO: c_int = 8;
const SOL_CAN_BASE: c_int = 100;
const CAN_INV_FILTER: canid_t = 0x20000000;
const CAN_RAW_FILTER_MAX: c_int = 512;
const SOL_CAN_RAW: c_int = SOL_CAN_BASE + CAN_RAW;
const CAN_RAW_FILTER: c_int = 1;
const CAN_RAW_ERR_FILTER: c_int = 2;
const CAN_RAW_LOOPBACK: c_int = 3;
const CAN_RAW_RECV_OWN_MSGS: c_int = 4;
const CAN_RAW_FD_FRAMES: c_int = 5;
const CAN_RAW_JOIN_FILTERS: c_int = 6;
const CAN_RAW_XL_FRAMES: c_int = 7;
const SOL_CAN_J1939: c_int = SOL_CAN_BASE + CAN_J1939;
const J1939_MAX_UNICAST_ADDR: c_uchar = 0xfd;
const J1939_IDLE_ADDR: c_uchar = 0xfe;
const J1939_NO_ADDR: c_uchar = 0xff;
const J1939_NO_NAME: c_ulong = 0;
const J1939_PGN_REQUEST: c_uint = 0x0ea00;
const J1939_PGN_ADDRESS_CLAIMED: c_uint = 0x0ee00;
const J1939_PGN_ADDRESS_COMMANDED: c_uint = 0x0fed8;
const J1939_PGN_PDU1_MAX: c_uint = 0x3ff00;
const J1939_PGN_MAX: c_uint = 0x3ffff;
const J1939_NO_PGN: c_uint = 0x40000;
const SO_J1939_FILTER: c_int = 1;
const SO_J1939_PROMISC: c_int = 2;
const SO_J1939_SEND_PRIO: c_int = 3;
const SO_J1939_ERRQUEUE: c_int = 4;
const SCM_J1939_DEST_ADDR: c_int = 1;
const SCM_J1939_DEST_NAME: c_int = 2;
const SCM_J1939_PRIO: c_int = 3;
const SCM_J1939_ERRQUEUE: c_int = 4;
const J1939_NLA_PAD: c_int = 0;
const J1939_NLA_BYTES_ACKED: c_int = 1;
const J1939_NLA_TOTAL_SIZE: c_int = 2;
const J1939_NLA_PGN: c_int = 3;
const J1939_NLA_SRC_NAME: c_int = 4;
const J1939_NLA_DEST_NAME: c_int = 5;
const J1939_NLA_SRC_ADDR: c_int = 6;
const J1939_NLA_DEST_ADDR: c_int = 7;
const J1939_EE_INFO_NONE: c_int = 0;
const J1939_EE_INFO_TX_ABORT: c_int = 1;
const J1939_EE_INFO_RX_RTS: c_int = 2;
const J1939_EE_INFO_RX_DPO: c_int = 3;
const J1939_EE_INFO_RX_ABORT: c_int = 4;
const J1939_FILTER_MAX: c_int = 512;
const SCTP_FUTURE_ASSOC: c_int = 0;
const SCTP_CURRENT_ASSOC: c_int = 1;
const SCTP_ALL_ASSOC: c_int = 2;
const SCTP_RTOINFO: c_int = 0;
const SCTP_ASSOCINFO: c_int = 1;
const SCTP_INITMSG: c_int = 2;
const SCTP_NODELAY: c_int = 3;
const SCTP_AUTOCLOSE: c_int = 4;
const SCTP_SET_PEER_PRIMARY_ADDR: c_int = 5;
const SCTP_PRIMARY_ADDR: c_int = 6;
const SCTP_ADAPTATION_LAYER: c_int = 7;
const SCTP_DISABLE_FRAGMENTS: c_int = 8;
const SCTP_PEER_ADDR_PARAMS: c_int = 9;
const SCTP_DEFAULT_SEND_PARAM: c_int = 10;
const SCTP_EVENTS: c_int = 11;
const SCTP_I_WANT_MAPPED_V4_ADDR: c_int = 12;
const SCTP_MAXSEG: c_int = 13;
const SCTP_STATUS: c_int = 14;
const SCTP_GET_PEER_ADDR_INFO: c_int = 15;
const SCTP_DELAYED_ACK_TIME: c_int = 16;
const SCTP_DELAYED_ACK: c_int = SCTP_DELAYED_ACK_TIME;
const SCTP_DELAYED_SACK: c_int = SCTP_DELAYED_ACK_TIME;
const SCTP_CONTEXT: c_int = 17;
const SCTP_FRAGMENT_INTERLEAVE: c_int = 18;
const SCTP_PARTIAL_DELIVERY_POINT: c_int = 19;
const SCTP_MAX_BURST: c_int = 20;
const SCTP_AUTH_CHUNK: c_int = 21;
const SCTP_HMAC_IDENT: c_int = 22;
const SCTP_AUTH_KEY: c_int = 23;
const SCTP_AUTH_ACTIVE_KEY: c_int = 24;
const SCTP_AUTH_DELETE_KEY: c_int = 25;
const SCTP_PEER_AUTH_CHUNKS: c_int = 26;
const SCTP_LOCAL_AUTH_CHUNKS: c_int = 27;
const SCTP_GET_ASSOC_NUMBER: c_int = 28;
const SCTP_GET_ASSOC_ID_LIST: c_int = 29;
const SCTP_AUTO_ASCONF: c_int = 30;
const SCTP_PEER_ADDR_THLDS: c_int = 31;
const SCTP_RECVRCVINFO: c_int = 32;
const SCTP_RECVNXTINFO: c_int = 33;
const SCTP_DEFAULT_SNDINFO: c_int = 34;
const SCTP_AUTH_DEACTIVATE_KEY: c_int = 35;
const SCTP_REUSE_PORT: c_int = 36;
const SCTP_PEER_ADDR_THLDS_V2: c_int = 37;
const SCTP_PR_SCTP_NONE: c_int = 0x0000;
const SCTP_PR_SCTP_TTL: c_int = 0x0010;
const SCTP_PR_SCTP_RTX: c_int = 0x0020;
const SCTP_PR_SCTP_PRIO: c_int = 0x0030;
const SCTP_PR_SCTP_MAX: c_int = SCTP_PR_SCTP_PRIO;
const SCTP_PR_SCTP_MASK: c_int = 0x0030;
const SCTP_ENABLE_RESET_STREAM_REQ: c_int = 0x01;
const SCTP_ENABLE_RESET_ASSOC_REQ: c_int = 0x02;
const SCTP_ENABLE_CHANGE_ASSOC_REQ: c_int = 0x04;
const SCTP_ENABLE_STRRESET_MASK: c_int = 0x07;
const SCTP_STREAM_RESET_INCOMING: c_int = 0x01;
const SCTP_STREAM_RESET_OUTGOING: c_int = 0x02;
const SCTP_INIT: c_int = 0;
const SCTP_SNDRCV: c_int = 1;
const SCTP_SNDINFO: c_int = 2;
const SCTP_RCVINFO: c_int = 3;
const SCTP_NXTINFO: c_int = 4;
const SCTP_PRINFO: c_int = 5;
const SCTP_AUTHINFO: c_int = 6;
const SCTP_DSTADDRV4: c_int = 7;
const SCTP_DSTADDRV6: c_int = 8;
const SCTP_UNORDERED: c_int = 1 << 0;
const SCTP_ADDR_OVER: c_int = 1 << 1;
const SCTP_ABORT: c_int = 1 << 2;
const SCTP_SACK_IMMEDIATELY: c_int = 1 << 3;
const SCTP_SENDALL: c_int = 1 << 6;
const SCTP_PR_SCTP_ALL: c_int = 1 << 7;
const SCTP_NOTIFICATION: c_int = MSG_NOTIFICATION;
const SCTP_EOF: c_int = MSG_FIN;
const DCCP_SOCKOPT_PACKET_SIZE: c_int = 1;
const DCCP_SOCKOPT_SERVICE: c_int = 2;
const DCCP_SOCKOPT_CHANGE_L: c_int = 3;
const DCCP_SOCKOPT_CHANGE_R: c_int = 4;
const DCCP_SOCKOPT_GET_CUR_MPS: c_int = 5;
const DCCP_SOCKOPT_SERVER_TIMEWAIT: c_int = 6;
const DCCP_SOCKOPT_SEND_CSCOV: c_int = 10;
const DCCP_SOCKOPT_RECV_CSCOV: c_int = 11;
const DCCP_SOCKOPT_AVAILABLE_CCIDS: c_int = 12;
const DCCP_SOCKOPT_CCID: c_int = 13;
const DCCP_SOCKOPT_TX_CCID: c_int = 14;
const DCCP_SOCKOPT_RX_CCID: c_int = 15;
const DCCP_SOCKOPT_QPOLICY_ID: c_int = 16;
const DCCP_SOCKOPT_QPOLICY_TXQLEN: c_int = 17;
const DCCP_SOCKOPT_CCID_RX_INFO: c_int = 128;
const DCCP_SOCKOPT_CCID_TX_INFO: c_int = 192;
const DCCP_SERVICE_LIST_MAX_LEN: c_int = 32;
#[inline]
fn NLA_ALIGN(len: c_int) -> c_int {
    return ((len) + NLA_ALIGNTO - 1) & !(NLA_ALIGNTO - 1);
}
#[inline]
fn CMSG_NXTHDR(mhdr: &msghdr, cmsg: &cmsghdr) -> &mut cmsghdr {
    if ((*cmsg).cmsg_len as usize) < std::mem::size_of::<cmsghdr>() {
        return 0 as &mut cmsghdr;
        let next = (cmsg as usize + CMSG_ALIGN((*cmsg).cmsg_len as usize)) as &mut cmsghdr;
        let max = (*mhdr).msg_control as usize + (*mhdr).msg_controllen as usize;
        if (next.offset(1)) as usize > max || next as usize + CMSG_ALIGN((*next).cmsg_len as usize) > max {
            0 as &mut cmsghdr
        } else {
            next as &mut cmsghdr
        }
    }
}
#[inline]
fn CPU_ALLOC_SIZE(count: c_int) -> size_t {
    let _dummy: cpu_set_t = mem::zeroed();
    let size_in_bits = 8 * std::mem::size_of::<typeof(_dummy.bits[0])>();
    ((count as size_t + size_in_bits - 1) / 8) as size_t
}
#[inline]
fn CPU_ZERO(cpuset: &mut cpu_set_t) -> () {
    for slot in cpuset.bits.iter_mut() {
        *slot = 0;
    }
}
#[inline]
fn CPU_SET(cpu: usize, cpuset: &mut cpu_set_t) -> () {
    let size_in_bits = 8 * std::mem::size_of::<typeof(cpuset.bits[0])>();
    let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);
    cpuset.bits[idx] |= 1 << offset;
    ()
}
#[inline]
fn CPU_CLR(cpu: usize, cpuset: &mut cpu_set_t) -> () {
    let size_in_bits = 8 * std::mem::size_of::<typeof(cpuset.bits[0])>();
    let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);
    cpuset.bits[idx] &= !(1 << offset);
    ()
}
#[inline]
fn CPU_ISSET(cpu: usize, cpuset: &cpu_set_t) -> bool {
    let size_in_bits = 8 * std::mem::size_of::<typeof(cpuset.bits[0])>();
    let (idx, offset) = (cpu / size_in_bits, cpu % size_in_bits);
    0 != (cpuset.bits[idx] & (1 << offset))
}
#[inline]
fn CPU_COUNT_S(size: usize, cpuset: &cpu_set_t) -> c_int {
    let s: u32 = 0;
    let size_of_mask = std::mem::size_of::<typeof(cpuset.bits[0])>();
    for i in cpuset.bits[..(size / size_of_mask)].iter() {
        s += i.count_ones();
        s as c_int
    }
}
#[inline]
fn CPU_COUNT(cpuset: &cpu_set_t) -> c_int {
    CPU_COUNT_S(std::mem::size_of::<cpu_set_t>(), cpuset)
}
#[inline]
fn CPU_EQUAL(set1: &cpu_set_t, set2: &cpu_set_t) -> bool {
    set1.bits == set2.bits
}
#[inline]
fn SCTP_PR_INDEX(policy: c_int) -> c_int {
    policy >> 4 - 1
}
#[inline]
fn SCTP_PR_POLICY(policy: c_int) -> c_int {
    policy & SCTP_PR_SCTP_MASK
}
#[inline]
fn SCTP_PR_SET_POLICY(flags: &mut c_int, policy: c_int) -> () {
    *flags &= !SCTP_PR_SCTP_MASK;
    *flags |= policy;
    ()
}
#[inline]
fn major(dev: dev_t) -> c_uint {
    let major = 0;
    major |= (dev & 0x00000000000fff00) >> 8;
    major |= (dev & 0xfffff00000000000) >> 32;
    major as c_uint
}
#[inline]
fn minor(dev: dev_t) -> c_uint {
    let minor = 0;
    minor |= (dev & 0x00000000000000ff) >> 0;
    minor |= (dev & 0x00000ffffff00000) >> 12;
    minor as c_uint
}
#[inline]
fn IPTOS_TOS(tos: u8) -> u8 {
    tos & IPTOS_TOS_MASK
}
#[inline]
fn IPTOS_PREC(tos: u8) -> u8 {
    tos & IPTOS_PREC_MASK
}
#[inline]
fn RT_TOS(tos: u8) -> u8 {
    tos & IPTOS_TOS_MASK
}
#[inline]
fn RT_ADDRCLASS(flags: u32) -> u32 {
    flags >> 23
}
#[inline]
fn RT_LOCALADDR(flags: u32) -> bool {
    (flags & RTF_ADDRCLASSMASK) == (RTF_LOCAL | RTF_INTERFACE)
}
#[inline]
fn SO_EE_OFFENDER(ee: &sock_extended_err) -> &mut sockaddr {
    ee.offset(1) as &mut sockaddr
}
#[inline]
fn BPF_RVAL(code: __u32) -> __u32 {
    code & 0x18
}
#[inline]
fn BPF_MISCOP(code: __u32) -> __u32 {
    code & 0xf8
}
#[inline]
fn BPF_STMT(code: __u16, k: __u32) -> sock_filter {
    sock_filter { code: code, jt: 0, jf: 0, k: k }
}
#[inline]
fn BPF_JUMP(code: __u16, k: __u32, jt: __u8, jf: __u8) -> sock_filter {
    sock_filter { code: code, jt: jt, jf: jf, k: k }
}
#[inline]
fn makedev(major: c_uint, minor: c_uint) -> dev_t {
    let major = major as dev_t;
    let minor = minor as dev_t;
    let dev = 0;
    dev |= (major & 0x00000fff) << 8;
    dev |= (major & 0xfffff000) << 32;
    dev |= (minor & 0x000000ff) << 0;
    dev |= (minor & 0xffffff00) << 12;
    dev
}
#[inline]
fn SCTP_PR_TTL_ENABLED(policy: c_int) -> bool {
    policy == SCTP_PR_SCTP_TTL
}
#[inline]
fn SCTP_PR_RTX_ENABLED(policy: c_int) -> bool {
    policy == SCTP_PR_SCTP_RTX
}
#[inline]
fn SCTP_PR_PRIO_ENABLED(policy: c_int) -> bool {
    policy == SCTP_PR_SCTP_PRIO
}
extern "C" fn aio_read(aiocbp: &mut aiocb) -> c_int;
extern "C" fn aio_write(aiocbp: &mut aiocb) -> c_int;
extern "C" fn aio_fsync(op: c_int, aiocbp: &mut aiocb) -> c_int;
extern "C" fn aio_error(aiocbp: &aiocb) -> c_int;
extern "C" fn aio_return(aiocbp: &mut aiocb) -> ssize_t;
extern "C" fn aio_suspend(aiocb_list: &&aiocb, nitems: c_int, timeout: &timespec) -> c_int;
extern "C" fn aio_cancel(fd: c_int, aiocbp: &mut aiocb) -> c_int;
extern "C" fn lio_listio(mode: c_int, aiocb_list: &&mut aiocb, nitems: c_int, sevp: &mut sigevent) -> c_int;
extern "C" fn pwritev(fd: c_int, iov: &iovec, iovcnt: c_int, offset: off_t) -> ssize_t;
extern "C" fn preadv(fd: c_int, iov: &iovec, iovcnt: c_int, offset: off_t) -> ssize_t;
extern "C" fn getnameinfo(sa: &sockaddr, salen: socklen_t, host: &mut c_char, hostlen: socklen_t, serv: &mut c_char, sevlen: socklen_t, flags: c_int) -> c_int;
extern "C" fn getloadavg(loadavg: &mut c_double, nelem: c_int) -> c_int;
extern "C" fn process_vm_readv(pid: pid_t, local_iov: &iovec, liovcnt: c_ulong, remote_iov: &iovec, riovcnt: c_ulong, flags: c_ulong) -> isize;
extern "C" fn process_vm_writev(pid: pid_t, local_iov: &iovec, liovcnt: c_ulong, remote_iov: &iovec, riovcnt: c_ulong, flags: c_ulong) -> isize;
extern "C" fn futimes(fd: c_int, times: &timeval) -> c_int;
extern "C" fn getspnam_r(name: &c_char, spbuf: &mut spwd, buf: &mut c_char, buflen: size_t, spbufp: &mut &mut spwd) -> c_int;
extern "C" fn shm_open(name: &c_char, oflag: c_int, mode: mode_t) -> c_int;
extern "C" fn shm_unlink(name: &c_char) -> c_int;
extern "C" fn mq_open(name: &c_char, oflag: c_int, ...) -> mqd_t;
extern "C" fn mq_close(mqd: mqd_t) -> c_int;
extern "C" fn mq_unlink(name: &c_char) -> c_int;
extern "C" fn mq_receive(mqd: mqd_t, msg_ptr: &mut c_char, msg_len: size_t, msg_prio: &mut c_uint) -> ssize_t;
extern "C" fn mq_timedreceive(mqd: mqd_t, msg_ptr: &mut c_char, msg_len: size_t, msg_prio: &mut c_uint, abs_timeout: &timespec) -> ssize_t;
extern "C" fn mq_send(mqd: mqd_t, msg_ptr: &c_char, msg_len: size_t, msg_prio: c_uint) -> c_int;
extern "C" fn mq_timedsend(mqd: mqd_t, msg_ptr: &c_char, msg_len: size_t, msg_prio: c_uint, abs_timeout: &timespec) -> c_int;
extern "C" fn mq_getattr(mqd: mqd_t, attr: &mut mq_attr) -> c_int;
extern "C" fn mq_setattr(mqd: mqd_t, newattr: &mq_attr, oldattr: &mut mq_attr) -> c_int;
extern "C" fn pthread_mutex_consistent(mutex: &mut pthread_mutex_t) -> c_int;
extern "C" fn pthread_cancel(thread: pthread_t) -> c_int;
extern "C" fn pthread_mutexattr_getrobust(attr: &pthread_mutexattr_t, robustness: &mut c_int) -> c_int;
extern "C" fn pthread_mutexattr_setrobust(attr: &mut pthread_mutexattr_t, robustness: c_int) -> c_int;
extern "C" fn strerror_r(errnum: c_int, buf: &mut c_char, buflen: size_t) -> c_int;
extern "C" fn abs(i: c_int) -> c_int;
extern "C" fn labs(i: c_long) -> c_long;
extern "C" fn rand() -> c_int;
extern "C" fn srand(seed: c_uint);
extern "C" fn drand48() -> c_double;
extern "C" fn erand48(xseed: &mut c_ushort) -> c_double;
extern "C" fn lrand48() -> c_long;
extern "C" fn nrand48(xseed: &mut c_ushort) -> c_long;
extern "C" fn mrand48() -> c_long;
extern "C" fn jrand48(xseed: &mut c_ushort) -> c_long;
extern "C" fn srand48(seed: c_long);
extern "C" fn seed48(xseed: &mut c_ushort) -> &mut c_ushort;
extern "C" fn lcong48(p: &mut c_ushort);
extern "C" fn lutimes(file: &c_char, times: &timeval) -> c_int;
extern "C" fn setpwent();
extern "C" fn endpwent();
extern "C" fn getpwent() -> &mut passwd;
extern "C" fn setgrent();
extern "C" fn endgrent();
extern "C" fn getgrent() -> &mut group;
extern "C" fn setspent();
extern "C" fn endspent();
extern "C" fn getspent() -> &mut spwd;
extern "C" fn getspnam(name: &c_char) -> &mut spwd;
extern "C" fn shmget(key: key_t, size: size_t, shmflg: c_int) -> c_int;
extern "C" fn shmat(shmid: c_int, shmaddr: &c_void, shmflg: c_int) -> &mut c_void;
extern "C" fn shmdt(shmaddr: &c_void) -> c_int;
extern "C" fn shmctl(shmid: c_int, cmd: c_int, buf: &mut shmid_ds) -> c_int;
extern "C" fn ftok(pathname: &c_char, proj_id: c_int) -> key_t;
extern "C" fn semget(key: key_t, nsems: c_int, semflag: c_int) -> c_int;
extern "C" fn semop(semid: c_int, sops: &mut sembuf, nsops: size_t) -> c_int;
extern "C" fn semctl(semid: c_int, semnum: c_int, cmd: c_int, ...) -> c_int;
extern "C" fn msgctl(msqid: c_int, cmd: c_int, buf: &mut msqid_ds) -> c_int;
extern "C" fn msgget(key: key_t, msgflg: c_int) -> c_int;
extern "C" fn msgrcv(msqid: c_int, msgp: &mut c_void, msgsz: size_t, msgtyp: c_long, msgflg: c_int) -> ssize_t;
extern "C" fn msgsnd(msqid: c_int, msgp: &c_void, msgsz: size_t, msgflg: c_int) -> c_int;
extern "C" fn mprotect(addr: &mut c_void, len: size_t, prot: c_int) -> c_int;
extern "C" fn __errno_location() -> &mut c_int;
extern "C" fn fopen64(filename: &c_char, mode: &c_char) -> &mut FILE;
extern "C" fn freopen64(filename: &c_char, mode: &c_char, file: &mut FILE) -> &mut FILE;
extern "C" fn tmpfile64() -> &mut FILE;
extern "C" fn fgetpos64(stream: &mut FILE, ptr: &mut fpos64_t) -> c_int;
extern "C" fn fsetpos64(stream: &mut FILE, ptr: &fpos64_t) -> c_int;
extern "C" fn fseeko64(stream: &mut FILE, offset: off64_t, whence: c_int) -> c_int;
extern "C" fn ftello64(stream: &mut FILE) -> off64_t;
extern "C" fn fallocate(fd: c_int, mode: c_int, offset: off_t, len: off_t) -> c_int;
extern "C" fn fallocate64(fd: c_int, mode: c_int, offset: off64_t, len: off64_t) -> c_int;
extern "C" fn posix_fallocate(fd: c_int, offset: off_t, len: off_t) -> c_int;
extern "C" fn posix_fallocate64(fd: c_int, offset: off64_t, len: off64_t) -> c_int;
extern "C" fn readahead(fd: c_int, offset: off64_t, count: size_t) -> ssize_t;
extern "C" fn getxattr(path: &c_char, name: &c_char, value: &mut c_void, size: size_t) -> ssize_t;
extern "C" fn lgetxattr(path: &c_char, name: &c_char, value: &mut c_void, size: size_t) -> ssize_t;
extern "C" fn fgetxattr(filedes: c_int, name: &c_char, value: &mut c_void, size: size_t) -> ssize_t;
extern "C" fn setxattr(path: &c_char, name: &c_char, value: &c_void, size: size_t, flags: c_int) -> c_int;
extern "C" fn lsetxattr(path: &c_char, name: &c_char, value: &c_void, size: size_t, flags: c_int) -> c_int;
extern "C" fn fsetxattr(filedes: c_int, name: &c_char, value: &c_void, size: size_t, flags: c_int) -> c_int;
extern "C" fn listxattr(path: &c_char, list: &mut c_char, size: size_t) -> ssize_t;
extern "C" fn llistxattr(path: &c_char, list: &mut c_char, size: size_t) -> ssize_t;
extern "C" fn flistxattr(filedes: c_int, list: &mut c_char, size: size_t) -> ssize_t;
extern "C" fn removexattr(path: &c_char, name: &c_char) -> c_int;
extern "C" fn lremovexattr(path: &c_char, name: &c_char) -> c_int;
extern "C" fn fremovexattr(filedes: c_int, name: &c_char) -> c_int;
extern "C" fn signalfd(fd: c_int, mask: &sigset_t, flags: c_int) -> c_int;
extern "C" fn timerfd_create(clockid: clockid_t, flags: c_int) -> c_int;
extern "C" fn timerfd_gettime(fd: c_int, curr_value: &mut itimerspec) -> c_int;
extern "C" fn timerfd_settime(fd: c_int, flags: c_int, new_value: &itimerspec, old_value: &mut itimerspec) -> c_int;
extern "C" fn quotactl(cmd: c_int, special: &c_char, id: c_int, data: &mut c_char) -> c_int;
extern "C" fn epoll_pwait(epfd: c_int, events: &mut epoll_event, maxevents: c_int, timeout: c_int, sigmask: &sigset_t) -> c_int;
extern "C" fn dup3(oldfd: c_int, newfd: c_int, flags: c_int) -> c_int;
extern "C" fn mkostemp(template: &mut c_char, flags: c_int) -> c_int;
extern "C" fn mkostemps(template: &mut c_char, suffixlen: c_int, flags: c_int) -> c_int;
extern "C" fn sigtimedwait(set: &sigset_t, info: &mut siginfo_t, timeout: &timespec) -> c_int;
extern "C" fn sigwaitinfo(set: &sigset_t, info: &mut siginfo_t) -> c_int;
extern "C" fn nl_langinfo_l(item: nl_item, locale: locale_t) -> &mut c_char;
extern "C" fn accept4(fd: c_int, addr: &mut sockaddr, len: &mut socklen_t, flg: c_int) -> c_int;
extern "C" fn pthread_getaffinity_np(thread: pthread_t, cpusetsize: size_t, cpuset: &mut cpu_set_t) -> c_int;
extern "C" fn pthread_setaffinity_np(thread: pthread_t, cpusetsize: size_t, cpuset: &cpu_set_t) -> c_int;
extern "C" fn pthread_setschedprio(native: pthread_t, priority: c_int) -> c_int;
extern "C" fn reboot(how_to: c_int) -> c_int;
extern "C" fn setfsgid(gid: gid_t) -> c_int;
extern "C" fn setfsuid(uid: uid_t) -> c_int;
extern "C" fn mkfifoat(dirfd: c_int, pathname: &c_char, mode: mode_t) -> c_int;
extern "C" fn if_nameindex() -> &mut if_nameindex_t;
extern "C" fn if_freenameindex(ptr: &mut if_nameindex_t);
extern "C" fn sync_file_range(fd: c_int, offset: off64_t, nbytes: off64_t, flags: c_uint) -> c_int;
extern "C" fn mremap(addr: &mut c_void, len: size_t, new_len: size_t, flags: c_int, ...) -> &mut c_void;
extern "C" fn glob(pattern: &c_char, flags: c_int, errfunc: fn(&c_char, c_int) -> c_int, pglob: &mut glob_t) -> c_int;
extern "C" fn globfree(pglob: &mut glob_t);
extern "C" fn posix_madvise(addr: &mut c_void, len: size_t, advice: c_int) -> c_int;
extern "C" fn seekdir(dirp: &mut DIR, loc: c_long);
extern "C" fn telldir(dirp: &mut DIR) -> c_long;
extern "C" fn madvise(addr: &mut c_void, len: size_t, advice: c_int) -> c_int;
extern "C" fn msync(addr: &mut c_void, len: size_t, flags: c_int) -> c_int;
extern "C" fn remap_file_pages(addr: &mut c_void, size: size_t, prot: c_int, pgoff: size_t, flags: c_int) -> c_int;
extern "C" fn recvfrom(socket: c_int, buf: &mut c_void, len: size_t, flags: c_int, addr: &mut sockaddr, addrlen: &mut socklen_t) -> ssize_t;
extern "C" fn mkstemps(template: &mut c_char, suffixlen: c_int) -> c_int;
extern "C" fn nl_langinfo(item: nl_item) -> &mut c_char;
extern "C" fn getdomainname(name: &mut c_char, len: size_t) -> c_int;
extern "C" fn setdomainname(name: &c_char, len: size_t) -> c_int;
extern "C" fn vhangup() -> c_int;
extern "C" fn sync();
extern "C" fn syncfs(fd: c_int) -> c_int;
extern "C" fn syscall(num: c_long, ...) -> c_long;
extern "C" fn sched_getaffinity(pid: pid_t, cpusetsize: size_t, cpuset: &mut cpu_set_t) -> c_int;
extern "C" fn sched_setaffinity(pid: pid_t, cpusetsize: size_t, cpuset: &cpu_set_t) -> c_int;
extern "C" fn epoll_create(size: c_int) -> c_int;
extern "C" fn epoll_create1(flags: c_int) -> c_int;
extern "C" fn epoll_wait(epfd: c_int, events: &mut epoll_event, maxevents: c_int, timeout: c_int) -> c_int;
extern "C" fn epoll_ctl(epfd: c_int, op: c_int, fd: c_int, event: &mut epoll_event) -> c_int;
extern "C" fn pthread_getschedparam(native: pthread_t, policy: &mut c_int, param: &mut sched_param) -> c_int;
extern "C" fn unshare(flags: c_int) -> c_int;
extern "C" fn umount(target: &c_char) -> c_int;
extern "C" fn sched_get_priority_max(policy: c_int) -> c_int;
extern "C" fn tee(fd_in: c_int, fd_out: c_int, len: size_t, flags: c_uint) -> ssize_t;
extern "C" fn settimeofday(tv: &timeval, tz: &timezone) -> c_int;
extern "C" fn splice(fd_in: c_int, off_in: &mut loff_t, fd_out: c_int, off_out: &mut loff_t, len: size_t, flags: c_uint) -> ssize_t;
extern "C" fn eventfd(init: c_uint, flags: c_int) -> c_int;
extern "C" fn sched_rr_get_interval(pid: pid_t, tp: &mut timespec) -> c_int;
extern "C" fn sem_timedwait(sem: &mut sem_t, abstime: &timespec) -> c_int;
extern "C" fn sem_getvalue(sem: &mut sem_t, sval: &mut c_int) -> c_int;
extern "C" fn sched_setparam(pid: pid_t, param: &sched_param) -> c_int;
extern "C" fn setns(fd: c_int, nstype: c_int) -> c_int;
extern "C" fn swapoff(path: &c_char) -> c_int;
extern "C" fn vmsplice(fd: c_int, iov: &iovec, nr_segs: size_t, flags: c_uint) -> ssize_t;
extern "C" fn mount(src: &c_char, target: &c_char, fstype: &c_char, flags: c_ulong, data: &c_void) -> c_int;
extern "C" fn personality(persona: c_ulong) -> c_int;
extern "C" fn prctl(option: c_int, ...) -> c_int;
extern "C" fn sched_getparam(pid: pid_t, param: &mut sched_param) -> c_int;
extern "C" fn ppoll(fds: &mut pollfd, nfds: nfds_t, timeout: &timespec, sigmask: &sigset_t) -> c_int;
extern "C" fn pthread_mutexattr_getprotocol(attr: &pthread_mutexattr_t, protocol: &mut c_int) -> c_int;
extern "C" fn pthread_mutexattr_setprotocol(attr: &mut pthread_mutexattr_t, protocol: c_int) -> c_int;
extern "C" fn pthread_mutex_timedlock(lock: &mut pthread_mutex_t, abstime: &timespec) -> c_int;
extern "C" fn pthread_barrierattr_init(attr: &mut pthread_barrierattr_t) -> c_int;
extern "C" fn pthread_barrierattr_destroy(attr: &mut pthread_barrierattr_t) -> c_int;
extern "C" fn pthread_barrierattr_getpshared(attr: &pthread_barrierattr_t, shared: &mut c_int) -> c_int;
extern "C" fn pthread_barrierattr_setpshared(attr: &mut pthread_barrierattr_t, shared: c_int) -> c_int;
extern "C" fn pthread_barrier_init(barrier: &mut pthread_barrier_t, attr: &pthread_barrierattr_t, count: c_uint) -> c_int;
extern "C" fn pthread_barrier_destroy(barrier: &mut pthread_barrier_t) -> c_int;
extern "C" fn pthread_barrier_wait(barrier: &mut pthread_barrier_t) -> c_int;
extern "C" fn pthread_spin_init(lock: &mut pthread_spinlock_t, pshared: c_int) -> c_int;
extern "C" fn pthread_spin_destroy(lock: &mut pthread_spinlock_t) -> c_int;
extern "C" fn pthread_spin_lock(lock: &mut pthread_spinlock_t) -> c_int;
extern "C" fn pthread_spin_trylock(lock: &mut pthread_spinlock_t) -> c_int;
extern "C" fn pthread_spin_unlock(lock: &mut pthread_spinlock_t) -> c_int;
extern "C" fn clone(cb: fn(&mut c_void) -> c_int, child_stack: &mut c_void, flags: c_int, arg: &mut c_void, ...) -> c_int;
extern "C" fn sched_getscheduler(pid: pid_t) -> c_int;
extern "C" fn clock_nanosleep(clk_id: clockid_t, flags: c_int, rqtp: &timespec, rmtp: &mut timespec) -> c_int;
extern "C" fn pthread_attr_getguardsize(attr: &pthread_attr_t, guardsize: &mut size_t) -> c_int;
extern "C" fn sethostname(name: &c_char, len: size_t) -> c_int;
extern "C" fn sched_get_priority_min(policy: c_int) -> c_int;
extern "C" fn pthread_condattr_getpshared(attr: &pthread_condattr_t, pshared: &mut c_int) -> c_int;
extern "C" fn sysinfo(info: &mut sysinfo_t) -> c_int;
extern "C" fn umount2(target: &c_char, flags: c_int) -> c_int;
extern "C" fn pthread_setschedparam(native: pthread_t, policy: c_int, param: &sched_param) -> c_int;
extern "C" fn swapon(path: &c_char, swapflags: c_int) -> c_int;
extern "C" fn sched_setscheduler(pid: pid_t, policy: c_int, param: &sched_param) -> c_int;
extern "C" fn sendfile(out_fd: c_int, in_fd: c_int, offset: &mut off_t, count: size_t) -> ssize_t;
extern "C" fn sendfile64(out_fd: c_int, in_fd: c_int, offset: &mut off64_t, count: size_t) -> ssize_t;
extern "C" fn sigsuspend(mask: &sigset_t) -> c_int;
extern "C" fn getgrgid_r(gid: gid_t, grp: &mut group, buf: &mut c_char, buflen: size_t, result: &mut &mut group) -> c_int;
extern "C" fn sigaltstack(ss: &stack_t, oss: &mut stack_t) -> c_int;
extern "C" fn sem_close(sem: &mut sem_t) -> c_int;
extern "C" fn getdtablesize() -> c_int;
extern "C" fn getgrnam_r(name: &c_char, grp: &mut group, buf: &mut c_char, buflen: size_t, result: &mut &mut group) -> c_int;
extern "C" fn initgroups(user: &c_char, group: gid_t) -> c_int;
extern "C" fn pthread_sigmask(how: c_int, set: &sigset_t, oldset: &mut sigset_t) -> c_int;
extern "C" fn sem_open(name: &c_char, oflag: c_int, ...) -> &mut sem_t;
extern "C" fn getgrnam(name: &c_char) -> &mut group;
extern "C" fn pthread_kill(thread: pthread_t, sig: c_int) -> c_int;
extern "C" fn sem_unlink(name: &c_char) -> c_int;
extern "C" fn daemon(nochdir: c_int, noclose: c_int) -> c_int;
extern "C" fn getpwnam_r(name: &c_char, pwd: &mut passwd, buf: &mut c_char, buflen: size_t, result: &mut &mut passwd) -> c_int;
extern "C" fn getpwuid_r(uid: uid_t, pwd: &mut passwd, buf: &mut c_char, buflen: size_t, result: &mut &mut passwd) -> c_int;
extern "C" fn sigwait(set: &sigset_t, sig: &mut c_int) -> c_int;
extern "C" fn pthread_atfork(prepare: fn(), parent: fn(), child: fn()) -> c_int;
extern "C" fn getgrgid(gid: gid_t) -> &mut group;
extern "C" fn getgrouplist(user: &c_char, group: gid_t, groups: &mut gid_t, ngroups: &mut c_int) -> c_int;
extern "C" fn pthread_mutexattr_getpshared(attr: &pthread_mutexattr_t, pshared: &mut c_int) -> c_int;
extern "C" fn popen(command: &c_char, mode: &c_char) -> &mut FILE;
extern "C" fn faccessat(dirfd: c_int, pathname: &c_char, mode: c_int, flags: c_int) -> c_int;
extern "C" fn pthread_create(native: &mut pthread_t, attr: &pthread_attr_t, f: fn(&mut c_void) -> &mut c_void, value: &mut c_void) -> c_int;
extern "C" fn dl_iterate_phdr(callback: fn(&mut dl_phdr_info, size_t, &mut c_void) -> c_int, data: &mut c_void) -> c_int;
extern "C" fn setmntent(filename: &c_char, ty: &c_char) -> &mut FILE;
extern "C" fn getmntent(stream: &mut FILE) -> &mut mntent;
extern "C" fn addmntent(stream: &mut FILE, mnt: &mntent) -> c_int;
extern "C" fn endmntent(streamp: &mut FILE) -> c_int;
extern "C" fn hasmntopt(mnt: &mntent, opt: &c_char) -> &mut c_char;
extern "C" fn posix_spawn(pid: &mut pid_t, path: &c_char, file_actions: &posix_spawn_file_actions_t, attrp: &posix_spawnattr_t, argv: &&mut c_char, envp: &&mut c_char) -> c_int;
extern "C" fn posix_spawnp(pid: &mut pid_t, file: &c_char, file_actions: &posix_spawn_file_actions_t, attrp: &posix_spawnattr_t, argv: &&mut c_char, envp: &&mut c_char) -> c_int;
extern "C" fn posix_spawnattr_init(attr: &mut posix_spawnattr_t) -> c_int;
extern "C" fn posix_spawnattr_destroy(attr: &mut posix_spawnattr_t) -> c_int;
extern "C" fn posix_spawnattr_getsigdefault(attr: &posix_spawnattr_t, default: &mut sigset_t) -> c_int;
extern "C" fn posix_spawnattr_setsigdefault(attr: &mut posix_spawnattr_t, default: &sigset_t) -> c_int;
extern "C" fn posix_spawnattr_getsigmask(attr: &posix_spawnattr_t, default: &mut sigset_t) -> c_int;
extern "C" fn posix_spawnattr_setsigmask(attr: &mut posix_spawnattr_t, default: &sigset_t) -> c_int;
extern "C" fn posix_spawnattr_getflags(attr: &posix_spawnattr_t, flags: &mut c_short) -> c_int;
extern "C" fn posix_spawnattr_setflags(attr: &mut posix_spawnattr_t, flags: c_short) -> c_int;
extern "C" fn posix_spawnattr_getpgroup(attr: &posix_spawnattr_t, flags: &mut pid_t) -> c_int;
extern "C" fn posix_spawnattr_setpgroup(attr: &mut posix_spawnattr_t, flags: pid_t) -> c_int;
extern "C" fn posix_spawnattr_getschedpolicy(attr: &posix_spawnattr_t, flags: &mut c_int) -> c_int;
extern "C" fn posix_spawnattr_setschedpolicy(attr: &mut posix_spawnattr_t, flags: c_int) -> c_int;
extern "C" fn posix_spawnattr_getschedparam(attr: &posix_spawnattr_t, param: &mut sched_param) -> c_int;
extern "C" fn posix_spawnattr_setschedparam(attr: &mut posix_spawnattr_t, param: &sched_param) -> c_int;
extern "C" fn posix_spawn_file_actions_init(actions: &mut posix_spawn_file_actions_t) -> c_int;
extern "C" fn posix_spawn_file_actions_destroy(actions: &mut posix_spawn_file_actions_t) -> c_int;
extern "C" fn posix_spawn_file_actions_addopen(actions: &mut posix_spawn_file_actions_t, fd: c_int, path: &c_char, oflag: c_int, mode: mode_t) -> c_int;
extern "C" fn posix_spawn_file_actions_addclose(actions: &mut posix_spawn_file_actions_t, fd: c_int) -> c_int;
extern "C" fn posix_spawn_file_actions_adddup2(actions: &mut posix_spawn_file_actions_t, fd: c_int, newfd: c_int) -> c_int;
extern "C" fn fread_unlocked(ptr: &mut c_void, size: size_t, nobj: size_t, stream: &mut FILE) -> size_t;
extern "C" fn inotify_rm_watch(fd: c_int, wd: c_int) -> c_int;
extern "C" fn inotify_init() -> c_int;
extern "C" fn inotify_init1(flags: c_int) -> c_int;
extern "C" fn inotify_add_watch(fd: c_int, path: &c_char, mask: u32) -> c_int;
extern "C" fn fanotify_init(flags: c_uint, event_f_flags: c_uint) -> c_int;
extern "C" fn regcomp(preg: &mut regex_t, pattern: &c_char, cflags: c_int) -> c_int;
extern "C" fn regexec(preg: &regex_t, input: &c_char, nmatch: size_t, pmatch: &mut regmatch_t, eflags: c_int) -> c_int;
extern "C" fn regerror(errcode: c_int, preg: &regex_t, errbuf: &mut c_char, errbuf_size: size_t) -> size_t;
extern "C" fn regfree(preg: &mut regex_t);
extern "C" fn iconv_open(tocode: &c_char, fromcode: &c_char) -> iconv_t;
extern "C" fn iconv(cd: iconv_t, inbuf: &mut &mut c_char, inbytesleft: &mut size_t, outbuf: &mut &mut c_char, outbytesleft: &mut size_t) -> size_t;
extern "C" fn iconv_close(cd: iconv_t) -> c_int;
extern "C" fn gettid() -> pid_t;
extern "C" fn timer_create(clockid: clockid_t, sevp: &mut sigevent, timerid: &mut timer_t) -> c_int;
extern "C" fn timer_delete(timerid: timer_t) -> c_int;
extern "C" fn timer_getoverrun(timerid: timer_t) -> c_int;
extern "C" fn timer_gettime(timerid: timer_t, curr_value: &mut itimerspec) -> c_int;
extern "C" fn timer_settime(timerid: timer_t, flags: c_int, new_value: &itimerspec, old_value: &mut itimerspec) -> c_int;
extern "C" fn gethostid() -> c_long;
extern "C" fn pthread_getcpuclockid(thread: pthread_t, clk_id: &mut clockid_t) -> c_int;
extern "C" fn memmem(haystack: &c_void, haystacklen: size_t, needle: &c_void, needlelen: size_t) -> &mut c_void;
extern "C" fn sched_getcpu() -> c_int;
extern "C" fn pthread_getname_np(thread: pthread_t, name: &mut c_char, len: size_t) -> c_int;
extern "C" fn pthread_setname_np(thread: pthread_t, name: &c_char) -> c_int;
extern "C" fn getopt_long(argc: c_int, argv: &&mut c_char, optstring: &c_char, longopts: &option, longindex: &mut c_int) -> c_int;
extern "C" fn copy_file_range(fd_in: c_int, off_in: &mut off64_t, fd_out: c_int, off_out: &mut off64_t, len: size_t, flags: c_uint) -> ssize_t;
type pthread_t = &mut c_void;
type clock_t = c_long;
type time_t = c_long;
type suseconds_t = c_long;
type ino_t = u64;
type off_t = i64;
type blkcnt_t = i64;
type shmatt_t = c_ulong;
type msgqnum_t = c_ulong;
type msglen_t = c_ulong;
type fsblkcnt_t = c_ulonglong;
type fsfilcnt_t = c_ulonglong;
type rlim_t = c_ulonglong;
type flock64 = flock_t;
type Ioctl = c_int;
impl siginfo_t {
    fn si_addr(self: &siginfo_t) -> &mut c_void {
        struct siginfo_sigfault {
            _si_signo: c_int,
            _si_errno: c_int,
            _si_code: c_int,
            si_addr: &mut c_void,
        }
        (*(self as &siginfo_t as &siginfo_sigfault)).si_addr
    }
    fn si_value(self: &siginfo_t) -> sigval {
        struct siginfo_si_value {
            _si_signo: c_int,
            _si_errno: c_int,
            _si_code: c_int,
            _si_timerid: c_int,
            _si_overrun: c_int,
            si_value: sigval,
        }
        (*(self as &siginfo_t as &siginfo_si_value)).si_value
    }
}
struct sifields_sigchld {
    si_pid: pid_t,
    si_uid: uid_t,
    si_status: c_int,
    si_utime: c_long,
    si_stime: c_long,
}
union sifields {
    _align_pointer: &mut c_void,
    sigchld: sifields_sigchld,
}
struct siginfo_f {
    _siginfo_base: [c_int; 3],
    _sifields: sifields,
}
impl siginfo_t {
    fn sifields(self: &siginfo_t) -> &sifields {
        &(*(self as &siginfo_t as &siginfo_f))._sifields
    }
    fn si_pid(self: &siginfo_t) -> pid_t {
        self.sifields().sigchld.si_pid
    }
    fn si_uid(self: &siginfo_t) -> uid_t {
        self.sifields().sigchld.si_uid
    }
    fn si_status(self: &siginfo_t) -> c_int {
        self.sifields().sigchld.si_status
    }
    fn si_utime(self: &siginfo_t) -> c_long {
        self.sifields().sigchld.si_utime
    }
    fn si_stime(self: &siginfo_t) -> c_long {
        self.sifields().sigchld.si_stime
    }
}
struct aiocb {
    aio_fildes: c_int,
    aio_lio_opcode: c_int,
    aio_reqprio: c_int,
    aio_buf: &mut c_void,
    aio_nbytes: size_t,
    aio_sigevent: sigevent,
    __td: &mut c_void,
    __lock: [c_int; 2],
    __err: c_int,
    __ret: ssize_t,
    aio_offset: off_t,
    __next: &mut c_void,
    __prev: &mut c_void,

    __dummy4: [c_char; 16],
}
struct sigaction_t {
    sa_sigaction: sighandler_t,
    sa_mask: sigset_t,
    sa_flags: c_int,
    sa_restorer: fn(),
}
struct statvfs_t {
    f_bsize: c_ulong,
    f_frsize: c_ulong,
    f_blocks: fsblkcnt_t,
    f_bfree: fsblkcnt_t,
    f_bavail: fsblkcnt_t,
    f_files: fsfilcnt_t,
    f_ffree: fsfilcnt_t,
    f_favail: fsfilcnt_t,

    f_fsid: c_ulong,
    f_flag: c_ulong,
    f_namemax: c_ulong,
    __f_spare: [c_int; 6],
}
struct termios {
    c_iflag: tcflag_t,
    c_oflag: tcflag_t,
    c_cflag: tcflag_t,
    c_lflag: tcflag_t,
    c_line: cc_t,
    c_cc: [cc_t; NCCS],
    __c_ispeed: speed_t,
    __c_ospeed: speed_t,
}
struct flock_t {
    l_type: c_short,
    l_whence: c_short,
    l_start: off_t,
    l_len: off_t,
    l_pid: pid_t,
}
struct regex_t {
    __re_nsub: size_t,
    __opaque: &mut c_void,
    __padding: [&mut c_void; 4usize],
    __nsub2: size_t,
    __padding2: c_char,
}
struct rtentry {
    rt_pad1: c_ulong,
    rt_dst: sockaddr,
    rt_gateway: sockaddr,
    rt_genmask: sockaddr,
    rt_flags: c_ushort,
    rt_pad2: c_short,
    rt_pad3: c_ulong,
    rt_tos: c_uchar,
    rt_class: c_uchar,

    rt_pad4: [c_short; 3usize],
    rt_metric: c_short,
    rt_dev: &mut c_char,
    rt_mtu: c_ulong,
    rt_window: c_ulong,
    rt_irtt: c_ushort,
}
struct __exit_status {
    e_termination: c_short,
    e_exit: c_short,
}
struct Elf64_Chdr {
    ch_type: Elf64_Word,
    ch_reserved: Elf64_Word,
    ch_size: Elf64_Xword,
    ch_addralign: Elf64_Xword,
}
struct Elf32_Chdr {
    ch_type: Elf32_Word,
    ch_size: Elf32_Word,
    ch_addralign: Elf32_Word,
}
struct timex {
    modes: c_uint,
    offset: c_long,
    freq: c_long,
    maxerror: c_long,
    esterror: c_long,
    status: c_int,
    constant: c_long,
    precision: c_long,
    tolerance: c_long,
    time: timeval,
    tick: c_long,
    ppsfreq: c_long,
    jitter: c_long,
    shift: c_int,
    stabil: c_long,
    jitcnt: c_long,
    calcnt: c_long,
    errcnt: c_long,
    stbcnt: c_long,
    tai: c_int,
    __padding: [c_int; 11],
}
struct ntptimeval {
    time: timeval,
    maxerror: c_long,
    esterror: c_long,
}
struct sysinfo_t {
    uptime: c_ulong,
    loads: [c_ulong; 3],
    totalram: c_ulong,
    freeram: c_ulong,
    sharedram: c_ulong,
    bufferram: c_ulong,
    totalswap: c_ulong,
    freeswap: c_ulong,
    procs: c_ushort,
    pad: c_ushort,
    totalhigh: c_ulong,
    freehigh: c_ulong,
    mem_unit: c_uint,
    __reserved: [c_char; 256],
}
struct utmpx {
    ut_type: c_short,
    __ut_pad1: c_short,
    ut_pid: pid_t,
    ut_line: [c_char; 32],
    ut_id: [c_char; 4],
    ut_user: [c_char; 32],
    ut_host: [c_char; 256],
    ut_exit: __exit_status,

    ut_session: c_long,
    ut_tv: timeval,
    ut_addr_v6: [c_uint; 4],
    __unused: [c_char; 20],
}
const MAP_HUGE_SHIFT: c_int = 26;
const MAP_HUGE_MASK: c_int = 0x3f;
const MAP_HUGE_64KB: c_int = 16 << MAP_HUGE_SHIFT;
const MAP_HUGE_512KB: c_int = 19 << MAP_HUGE_SHIFT;
const MAP_HUGE_1MB: c_int = 20 << MAP_HUGE_SHIFT;
const MAP_HUGE_2MB: c_int = 21 << MAP_HUGE_SHIFT;
const MAP_HUGE_8MB: c_int = 23 << MAP_HUGE_SHIFT;
const MAP_HUGE_16MB: c_int = 24 << MAP_HUGE_SHIFT;
const MAP_HUGE_32MB: c_int = 25 << MAP_HUGE_SHIFT;
const MAP_HUGE_256MB: c_int = 28 << MAP_HUGE_SHIFT;
const MAP_HUGE_512MB: c_int = 29 << MAP_HUGE_SHIFT;
const MAP_HUGE_1GB: c_int = 30 << MAP_HUGE_SHIFT;
const MAP_HUGE_2GB: c_int = 31 << MAP_HUGE_SHIFT;
const MAP_HUGE_16GB: c_int = 34 << MAP_HUGE_SHIFT;
const MS_RMT_MASK: c_ulong = 0x02800051;
const SFD_CLOEXEC: c_int = 0x080000;
const NCCS: usize = 32;
const O_TRUNC: c_int = 512;
const O_NOATIME: c_int = 0o1000000;
const O_CLOEXEC: c_int = 0x80000;
const O_TMPFILE: c_int = 0o20000000 | O_DIRECTORY;
const EBFONT: c_int = 59;
const ENOSTR: c_int = 60;
const ENODATA: c_int = 61;
const ETIME: c_int = 62;
const ENOSR: c_int = 63;
const ENONET: c_int = 64;
const ENOPKG: c_int = 65;
const EREMOTE: c_int = 66;
const ENOLINK: c_int = 67;
const EADV: c_int = 68;
const ESRMNT: c_int = 69;
const ECOMM: c_int = 70;
const EPROTO: c_int = 71;
const EDOTDOT: c_int = 73;
const F_RDLCK: c_int = 0;
const F_WRLCK: c_int = 1;
const F_UNLCK: c_int = 2;
const SA_NODEFER: c_int = 0x40000000;
const SA_RESETHAND: c_int = 0x80000000;
const SA_RESTART: c_int = 0x10000000;
const SA_NOCLDSTOP: c_int = 0x00000001;
const EPOLL_CLOEXEC: c_int = 0x80000;
const EFD_CLOEXEC: c_int = 0x80000;
const BUFSIZ: c_uint = 1024;
const TMP_MAX: c_uint = 10000;
const FOPEN_MAX: c_uint = 1000;
const FILENAME_MAX: c_uint = 4096;
const O_PATH: c_int = 0o10000000;
const O_EXEC: c_int = 0o10000000;
const O_SEARCH: c_int = 0o10000000;
const O_ACCMODE: c_int = 0o10000003;
const O_NDELAY: c_int = O_NONBLOCK;
const NI_MAXHOST: socklen_t = 255;
const PTHREAD_STACK_MIN: size_t = 2048;
const POSIX_MADV_DONTNEED: c_int = 4;
const MAP_ANONYMOUS: c_int = MAP_ANON;
const SOCK_DCCP: c_int = 6;
const SOCK_PACKET: c_int = 10;
const SOMAXCONN: c_int = 128;
const SIGUNUSED: c_int = SIGSYS;
const __SIZEOF_PTHREAD_CONDATTR_T: usize = 4;
const __SIZEOF_PTHREAD_MUTEXATTR_T: usize = 4;
const __SIZEOF_PTHREAD_RWLOCKATTR_T: usize = 8;
const __SIZEOF_PTHREAD_BARRIERATTR_T: usize = 4;
const CPU_SETSIZE: c_int = 128;
const PTRACE_TRACEME: c_int = 0;
const PTRACE_PEEKTEXT: c_int = 1;
const PTRACE_PEEKDATA: c_int = 2;
const PTRACE_PEEKUSER: c_int = 3;
const PTRACE_POKETEXT: c_int = 4;
const PTRACE_POKEDATA: c_int = 5;
const PTRACE_POKEUSER: c_int = 6;
const PTRACE_CONT: c_int = 7;
const PTRACE_KILL: c_int = 8;
const PTRACE_SINGLESTEP: c_int = 9;
const PTRACE_GETREGS: c_int = 12;
const PTRACE_SETREGS: c_int = 13;
const PTRACE_GETFPREGS: c_int = 14;
const PTRACE_SETFPREGS: c_int = 15;
const PTRACE_ATTACH: c_int = 16;
const PTRACE_DETACH: c_int = 17;
const PTRACE_GETFPXREGS: c_int = 18;
const PTRACE_SETFPXREGS: c_int = 19;
const PTRACE_SYSCALL: c_int = 24;
const PTRACE_SETOPTIONS: c_int = 0x4200;
const PTRACE_GETEVENTMSG: c_int = 0x4201;
const PTRACE_GETSIGINFO: c_int = 0x4202;
const PTRACE_SETSIGINFO: c_int = 0x4203;
const PTRACE_GETREGSET: c_int = 0x4204;
const PTRACE_SETREGSET: c_int = 0x4205;
const PTRACE_SEIZE: c_int = 0x4206;
const PTRACE_INTERRUPT: c_int = 0x4207;
const PTRACE_LISTEN: c_int = 0x4208;
const PTRACE_PEEKSIGINFO: c_int = 0x4209;
const FAN_MARK_INODE: c_uint = 0x00000000;
const FAN_MARK_MOUNT: c_uint = 0x00000010;
const FAN_MARK_FILESYSTEM: c_uint = 0x00000100;
const AF_IB: c_int = 27;
const AF_MPLS: c_int = 28;
const AF_NFC: c_int = 39;
const AF_VSOCK: c_int = 40;
const AF_XDP: c_int = 44;
const PF_IB: c_int = AF_IB;
const PF_MPLS: c_int = AF_MPLS;
const PF_NFC: c_int = AF_NFC;
const PF_VSOCK: c_int = AF_VSOCK;
const PF_XDP: c_int = AF_XDP;
const EFD_NONBLOCK: c_int = O_NONBLOCK;
const SFD_NONBLOCK: c_int = O_NONBLOCK;
const PIDFD_NONBLOCK: c_uint = O_NONBLOCK as c_uint;
const TCSANOW: c_int = 0;
const TCSADRAIN: c_int = 1;
const TCSAFLUSH: c_int = 2;
const RTLD_GLOBAL: c_int = 0x100;
const RTLD_NOLOAD: c_int = 0x4;
const CLOCK_SGI_CYCLE: clockid_t = 10;
const B0: speed_t = 0o000000;
const B50: speed_t = 0o000001;
const B75: speed_t = 0o000002;
const B110: speed_t = 0o000003;
const B134: speed_t = 0o000004;
const B150: speed_t = 0o000005;
const B200: speed_t = 0o000006;
const B300: speed_t = 0o000007;
const B600: speed_t = 0o000010;
const B1200: speed_t = 0o000011;
const B1800: speed_t = 0o000012;
const B2400: speed_t = 0o000013;
const B4800: speed_t = 0o000014;
const B9600: speed_t = 0o000015;
const B19200: speed_t = 0o000016;
const B38400: speed_t = 0o000017;
const EXTA: speed_t = B19200;
const EXTB: speed_t = B38400;
const REG_OK: c_int = 0;
const PRIO_PROCESS: c_int = 0;
const PRIO_PGRP: c_int = 1;
const PRIO_USER: c_int = 2;
const ADJ_OFFSET: c_uint = 0x0001;
const ADJ_FREQUENCY: c_uint = 0x0002;
const ADJ_MAXERROR: c_uint = 0x0004;
const ADJ_ESTERROR: c_uint = 0x0008;
const ADJ_STATUS: c_uint = 0x0010;
const ADJ_TIMECONST: c_uint = 0x0020;
const ADJ_TAI: c_uint = 0x0080;
const ADJ_SETOFFSET: c_uint = 0x0100;
const ADJ_MICRO: c_uint = 0x1000;
const ADJ_NANO: c_uint = 0x2000;
const ADJ_TICK: c_uint = 0x4000;
const ADJ_OFFSET_SINGLESHOT: c_uint = 0x8001;
const ADJ_OFFSET_SS_READ: c_uint = 0xa001;
const MOD_OFFSET: c_uint = ADJ_OFFSET;
const MOD_FREQUENCY: c_uint = ADJ_FREQUENCY;
const MOD_MAXERROR: c_uint = ADJ_MAXERROR;
const MOD_ESTERROR: c_uint = ADJ_ESTERROR;
const MOD_STATUS: c_uint = ADJ_STATUS;
const MOD_TIMECONST: c_uint = ADJ_TIMECONST;
const MOD_CLKB: c_uint = ADJ_TICK;
const MOD_CLKA: c_uint = ADJ_OFFSET_SINGLESHOT;
const MOD_TAI: c_uint = ADJ_TAI;
const MOD_MICRO: c_uint = ADJ_MICRO;
const MOD_NANO: c_uint = ADJ_NANO;
const STA_PLL: c_int = 0x0001;
const STA_PPSFREQ: c_int = 0x0002;
const STA_PPSTIME: c_int = 0x0004;
const STA_FLL: c_int = 0x0008;
const STA_INS: c_int = 0x0010;
const STA_DEL: c_int = 0x0020;
const STA_UNSYNC: c_int = 0x0040;
const STA_FREQHOLD: c_int = 0x0080;
const STA_PPSSIGNAL: c_int = 0x0100;
const STA_PPSJITTER: c_int = 0x0200;
const STA_PPSWANDER: c_int = 0x0400;
const STA_PPSERROR: c_int = 0x0800;
const STA_CLOCKERR: c_int = 0x1000;
const STA_NANO: c_int = 0x2000;
const STA_MODE: c_int = 0x4000;
const STA_CLK: c_int = 0x8000;
const STA_RONLY: c_int = STA_PPSSIGNAL | STA_PPSJITTER | STA_PPSWANDER | STA_PPSERROR | STA_CLOCKERR | STA_NANO | STA_MODE | STA_CLK;
const TIME_OK: c_int = 0;
const TIME_INS: c_int = 1;
const TIME_DEL: c_int = 2;
const TIME_OOP: c_int = 3;
const TIME_WAIT: c_int = 4;
const TIME_ERROR: c_int = 5;
const TIME_BAD: c_int = TIME_ERROR;
const MAXTC: c_long = 6;
const POSIX_FADV_DONTNEED: c_int = 4;
const POSIX_FADV_NOREUSE: c_int = 5;
extern "C" fn sendmmsg(sockfd: c_int, msgvec: &mut mmsghdr, vlen: c_uint, flags: c_uint) -> c_int;
extern "C" fn recvmmsg(sockfd: c_int, msgvec: &mut mmsghdr, vlen: c_uint, flags: c_uint, timeout: &mut timespec) -> c_int;
extern "C" fn getrlimit64(resource: c_int, rlim: &mut rlimit64) -> c_int;
extern "C" fn setrlimit64(resource: c_int, rlim: &rlimit64) -> c_int;
extern "C" fn getrlimit(resource: c_int, rlim: &mut rlimit) -> c_int;
extern "C" fn setrlimit(resource: c_int, rlim: &rlimit) -> c_int;
extern "C" fn prlimit(pid: pid_t, resource: c_int, new_limit: &rlimit, old_limit: &mut rlimit) -> c_int;
extern "C" fn prlimit64(pid: pid_t, resource: c_int, new_limit: &rlimit64, old_limit: &mut rlimit64) -> c_int;
extern "C" fn ioctl(fd: c_int, request: c_int, ...) -> c_int;
extern "C" fn gettimeofday(tp: &mut timeval, tz: &mut c_void) -> c_int;
extern "C" fn ptrace(request: c_int, ...) -> c_long;
extern "C" fn getpriority(which: c_int, who: id_t) -> c_int;
extern "C" fn setpriority(which: c_int, who: id_t, prio: c_int) -> c_int;
extern "C" fn fanotify_mark(fd: c_int, flags: c_uint, mask: c_ulonglong, dirfd: c_int, path: &c_char) -> c_int;
extern "C" fn getauxval(type_: c_ulong) -> c_ulong;
extern "C" fn explicit_bzero(s: &mut c_void, len: size_t);
extern "C" fn reallocarray(ptr: &mut c_void, nmemb: size_t, size: size_t) -> &mut c_void;
extern "C" fn adjtimex(buf: &mut timex) -> c_int;
extern "C" fn clock_adjtime(clk_id: clockid_t, buf: &mut timex) -> c_int;
extern "C" fn ctermid(s: &mut c_char) -> &mut c_char;
extern "C" fn memfd_create(name: &c_char, flags: c_uint) -> c_int;
extern "C" fn mlock2(addr: &c_void, len: size_t, flags: c_uint) -> c_int;
extern "C" fn malloc_usable_size(ptr: &mut c_void) -> size_t;
extern "C" fn euidaccess(pathname: &c_char, mode: c_int) -> c_int;
extern "C" fn eaccess(pathname: &c_char, mode: c_int) -> c_int;
extern "C" fn asctime_r(tm_: &tm, buf: &mut c_char) -> &mut c_char;
extern "C" fn strftime(s: &mut c_char, max: size_t, format: &c_char, tm_: &tm) -> size_t;
extern "C" fn strptime(s: &c_char, format: &c_char, tm_: &mut tm) -> &mut c_char;
extern "C" fn dirname(path: &mut c_char) -> &mut c_char;
extern "C" fn basename(path: &mut c_char) -> &mut c_char;
type c_long = i64;
type c_ulong = u64;
type regoff_t = c_long;
struct statfs64_t {
    f_type: c_ulong,
    f_bsize: c_ulong,
    f_blocks: fsblkcnt_t,
    f_bfree: fsblkcnt_t,
    f_bavail: fsblkcnt_t,
    f_files: fsfilcnt_t,
    f_ffree: fsfilcnt_t,
    f_fsid: fsid_t,
    f_namelen: c_ulong,
    f_frsize: c_ulong,
    f_flags: c_ulong,
    f_spare: [c_ulong; 4],
}
struct statvfs64_t {
    f_bsize: c_ulong,
    f_frsize: c_ulong,
    f_blocks: u64,
    f_bfree: u64,
    f_bavail: u64,
    f_files: u64,
    f_ffree: u64,
    f_favail: u64,
    f_fsid: c_ulong,
    f_flag: c_ulong,
    f_namemax: c_ulong,
    __f_spare: [c_int; 6],
}
struct stack_t {
    ss_sp: &mut c_void,
    ss_flags: c_int,
    ss_size: size_t,
}
struct pthread_attr_t {
    __size: [u64; 7],
}
struct sigset_t {
    __val: [c_ulong; 16],
}
struct shmid_ds {
    shm_perm: ipc_perm,
    shm_segsz: size_t,
    shm_atime: time_t,
    shm_dtime: time_t,
    shm_ctime: time_t,
    shm_cpid: pid_t,
    shm_lpid: pid_t,
    shm_nattch: c_ulong,
    __pad1: c_ulong,
    __pad2: c_ulong,
}
struct msqid_ds {
    msg_perm: ipc_perm,
    msg_stime: time_t,
    msg_rtime: time_t,
    msg_ctime: time_t,
    __msg_cbytes: c_ulong,
    msg_qnum: msgqnum_t,
    msg_qbytes: msglen_t,
    msg_lspid: pid_t,
    msg_lrpid: pid_t,
    __pad1: c_ulong,
    __pad2: c_ulong,
}
struct statfs_t {
    f_type: c_ulong,
    f_bsize: c_ulong,
    f_blocks: fsblkcnt_t,
    f_bfree: fsblkcnt_t,
    f_bavail: fsblkcnt_t,
    f_files: fsfilcnt_t,
    f_ffree: fsfilcnt_t,
    f_fsid: fsid_t,
    f_namelen: c_ulong,
    f_frsize: c_ulong,
    f_flags: c_ulong,
    f_spare: [c_ulong; 4],
}
struct msghdr {
    msg_name: &mut c_void,
    msg_namelen: socklen_t,
    msg_iov: &mut iovec,
    msg_iovlen: c_int,

    __pad1: c_int,
    msg_control: &mut c_void,
    msg_controllen: socklen_t,

    __pad2: c_int,
    msg_flags: c_int,
}
struct cmsghdr {
    cmsg_len: socklen_t,

    __pad1: c_int,
    cmsg_level: c_int,
    cmsg_type: c_int,
}
struct sem_t {
    __val: [c_int; 8],
}
struct siginfo_t {
    si_signo: c_int,
    si_errno: c_int,
    si_code: c_int,
    _pad: [c_int; 29],
    _align: [usize; 0],
}
const __SIZEOF_PTHREAD_RWLOCK_T: usize = 56;
const __SIZEOF_PTHREAD_MUTEX_T: usize = 40;
const __SIZEOF_PTHREAD_BARRIER_T: usize = 32;
const SOCK_NONBLOCK: c_int = 2048;
const SOCK_SEQPACKET: c_int = 5;
extern "C" fn getrandom(buf: &mut c_void, buflen: size_t, flags: c_uint) -> ssize_t;
type c_char = i8;
type wchar_t = i32;
type nlink_t = u64;
type blksize_t = c_long;
type __u64 = c_ulonglong;
type __s64 = c_longlong;
type greg_t = i64;
struct stat_t {
    st_dev: dev_t,
    st_ino: ino_t,
    st_nlink: nlink_t,
    st_mode: mode_t,
    st_uid: uid_t,
    st_gid: gid_t,
    __pad0: c_int,
    st_rdev: dev_t,
    st_size: off_t,
    st_blksize: blksize_t,
    st_blocks: blkcnt_t,
    st_atime: time_t,
    st_atime_nsec: c_long,
    st_mtime: time_t,
    st_mtime_nsec: c_long,
    st_ctime: time_t,
    st_ctime_nsec: c_long,
    __unused: [c_long; 3],
}
struct stat64_t {
    st_dev: dev_t,
    st_ino: ino64_t,
    st_nlink: nlink_t,
    st_mode: mode_t,
    st_uid: uid_t,
    st_gid: gid_t,
    __pad0: c_int,
    st_rdev: dev_t,
    st_size: off_t,
    st_blksize: blksize_t,
    st_blocks: blkcnt64_t,
    st_atime: time_t,
    st_atime_nsec: c_long,
    st_mtime: time_t,
    st_mtime_nsec: c_long,
    st_ctime: time_t,
    st_ctime_nsec: c_long,
    __reserved: [c_long; 3],
}
struct user_regs_struct {
    r15: c_ulong,
    r14: c_ulong,
    r13: c_ulong,
    r12: c_ulong,
    rbp: c_ulong,
    rbx: c_ulong,
    r11: c_ulong,
    r10: c_ulong,
    r9: c_ulong,
    r8: c_ulong,
    rax: c_ulong,
    rcx: c_ulong,
    rdx: c_ulong,
    rsi: c_ulong,
    rdi: c_ulong,
    orig_rax: c_ulong,
    rip: c_ulong,
    cs: c_ulong,
    eflags: c_ulong,
    rsp: c_ulong,
    ss: c_ulong,
    fs_base: c_ulong,
    gs_base: c_ulong,
    ds: c_ulong,
    es: c_ulong,
    fs: c_ulong,
    gs: c_ulong,
}
struct user {
    regs: user_regs_struct,
    u_fpvalid: c_int,
    i387: user_fpregs_struct,
    u_tsize: c_ulong,
    u_dsize: c_ulong,
    u_ssize: c_ulong,
    start_code: c_ulong,
    start_stack: c_ulong,
    signal: c_long,
    __reserved: c_int,
    u_ar0: &mut user_regs_struct,
    u_fpstate: &mut user_fpregs_struct,
    magic: c_ulong,
    u_comm: [c_char; 32],
    u_debugreg: [c_ulong; 8],
}
struct mcontext_t {
    gregs: [greg_t; 23],
    __private: [u64; 9],
}
struct ipc_perm {
    __ipc_perm_key: key_t,
    uid: uid_t,
    gid: gid_t,
    cuid: uid_t,
    cgid: gid_t,
    mode: mode_t,
    __seq: c_int,
    __unused1: c_long,
    __unused2: c_long,
}
struct user_fpregs_struct {
    cwd: c_ushort,
    swd: c_ushort,
    ftw: c_ushort,
    fop: c_ushort,
    rip: c_ulong,
    rdp: c_ulong,
    mxcsr: c_uint,
    mxcr_mask: c_uint,
    st_space: [c_uint; 32],
    xmm_space: [c_uint; 64],
    padding: [c_uint; 24],
}
struct ucontext_t {
    uc_flags: c_ulong,
    uc_link: &mut ucontext_t,
    uc_stack: stack_t,
    uc_mcontext: mcontext_t,
    uc_sigmask: sigset_t,
    __private: [u8; 512],
}
const SYS_read: c_long = 0;
const SYS_write: c_long = 1;
const SYS_open: c_long = 2;
const SYS_close: c_long = 3;
const SYS_stat: c_long = 4;
const SYS_fstat: c_long = 5;
const SYS_lstat: c_long = 6;
const SYS_poll: c_long = 7;
const SYS_lseek: c_long = 8;
const SYS_mmap: c_long = 9;
const SYS_mprotect: c_long = 10;
const SYS_munmap: c_long = 11;
const SYS_brk: c_long = 12;
const SYS_rt_sigaction: c_long = 13;
const SYS_rt_sigprocmask: c_long = 14;
const SYS_rt_sigreturn: c_long = 15;
const SYS_ioctl: c_long = 16;
const SYS_pread64: c_long = 17;
const SYS_pwrite64: c_long = 18;
const SYS_readv: c_long = 19;
const SYS_writev: c_long = 20;
const SYS_access: c_long = 21;
const SYS_pipe: c_long = 22;
const SYS_select: c_long = 23;
const SYS_sched_yield: c_long = 24;
const SYS_mremap: c_long = 25;
const SYS_msync: c_long = 26;
const SYS_mincore: c_long = 27;
const SYS_madvise: c_long = 28;
const SYS_shmget: c_long = 29;
const SYS_shmat: c_long = 30;
const SYS_shmctl: c_long = 31;
const SYS_dup: c_long = 32;
const SYS_dup2: c_long = 33;
const SYS_pause: c_long = 34;
const SYS_nanosleep: c_long = 35;
const SYS_getitimer: c_long = 36;
const SYS_alarm: c_long = 37;
const SYS_setitimer: c_long = 38;
const SYS_getpid: c_long = 39;
const SYS_sendfile: c_long = 40;
const SYS_socket: c_long = 41;
const SYS_connect: c_long = 42;
const SYS_accept: c_long = 43;
const SYS_sendto: c_long = 44;
const SYS_recvfrom: c_long = 45;
const SYS_sendmsg: c_long = 46;
const SYS_recvmsg: c_long = 47;
const SYS_shutdown: c_long = 48;
const SYS_bind: c_long = 49;
const SYS_listen: c_long = 50;
const SYS_getsockname: c_long = 51;
const SYS_getpeername: c_long = 52;
const SYS_socketpair: c_long = 53;
const SYS_setsockopt: c_long = 54;
const SYS_getsockopt: c_long = 55;
const SYS_clone: c_long = 56;
const SYS_fork: c_long = 57;
const SYS_vfork: c_long = 58;
const SYS_execve: c_long = 59;
const SYS_exit: c_long = 60;
const SYS_wait4: c_long = 61;
const SYS_kill: c_long = 62;
const SYS_uname: c_long = 63;
const SYS_semget: c_long = 64;
const SYS_semop: c_long = 65;
const SYS_semctl: c_long = 66;
const SYS_shmdt: c_long = 67;
const SYS_msgget: c_long = 68;
const SYS_msgsnd: c_long = 69;
const SYS_msgrcv: c_long = 70;
const SYS_msgctl: c_long = 71;
const SYS_fcntl: c_long = 72;
const SYS_flock: c_long = 73;
const SYS_fsync: c_long = 74;
const SYS_fdatasync: c_long = 75;
const SYS_truncate: c_long = 76;
const SYS_ftruncate: c_long = 77;
const SYS_getdents: c_long = 78;
const SYS_getcwd: c_long = 79;
const SYS_chdir: c_long = 80;
const SYS_fchdir: c_long = 81;
const SYS_rename: c_long = 82;
const SYS_mkdir: c_long = 83;
const SYS_rmdir: c_long = 84;
const SYS_creat: c_long = 85;
const SYS_link: c_long = 86;
const SYS_unlink: c_long = 87;
const SYS_symlink: c_long = 88;
const SYS_readlink: c_long = 89;
const SYS_chmod: c_long = 90;
const SYS_fchmod: c_long = 91;
const SYS_chown: c_long = 92;
const SYS_fchown: c_long = 93;
const SYS_lchown: c_long = 94;
const SYS_umask: c_long = 95;
const SYS_gettimeofday: c_long = 96;
const SYS_getrlimit: c_long = 97;
const SYS_getrusage: c_long = 98;
const SYS_sysinfo: c_long = 99;
const SYS_times: c_long = 100;
const SYS_ptrace: c_long = 101;
const SYS_getuid: c_long = 102;
const SYS_syslog: c_long = 103;
const SYS_getgid: c_long = 104;
const SYS_setuid: c_long = 105;
const SYS_setgid: c_long = 106;
const SYS_geteuid: c_long = 107;
const SYS_getegid: c_long = 108;
const SYS_setpgid: c_long = 109;
const SYS_getppid: c_long = 110;
const SYS_getpgrp: c_long = 111;
const SYS_setsid: c_long = 112;
const SYS_setreuid: c_long = 113;
const SYS_setregid: c_long = 114;
const SYS_getgroups: c_long = 115;
const SYS_setgroups: c_long = 116;
const SYS_setresuid: c_long = 117;
const SYS_getresuid: c_long = 118;
const SYS_setresgid: c_long = 119;
const SYS_getresgid: c_long = 120;
const SYS_getpgid: c_long = 121;
const SYS_setfsuid: c_long = 122;
const SYS_setfsgid: c_long = 123;
const SYS_getsid: c_long = 124;
const SYS_capget: c_long = 125;
const SYS_capset: c_long = 126;
const SYS_rt_sigpending: c_long = 127;
const SYS_rt_sigtimedwait: c_long = 128;
const SYS_rt_sigqueueinfo: c_long = 129;
const SYS_rt_sigsuspend: c_long = 130;
const SYS_sigaltstack: c_long = 131;
const SYS_utime: c_long = 132;
const SYS_mknod: c_long = 133;
const SYS_uselib: c_long = 134;
const SYS_personality: c_long = 135;
const SYS_ustat: c_long = 136;
const SYS_statfs: c_long = 137;
const SYS_fstatfs: c_long = 138;
const SYS_sysfs: c_long = 139;
const SYS_getpriority: c_long = 140;
const SYS_setpriority: c_long = 141;
const SYS_sched_setparam: c_long = 142;
const SYS_sched_getparam: c_long = 143;
const SYS_sched_setscheduler: c_long = 144;
const SYS_sched_getscheduler: c_long = 145;
const SYS_sched_get_priority_max: c_long = 146;
const SYS_sched_get_priority_min: c_long = 147;
const SYS_sched_rr_get_interval: c_long = 148;
const SYS_mlock: c_long = 149;
const SYS_munlock: c_long = 150;
const SYS_mlockall: c_long = 151;
const SYS_munlockall: c_long = 152;
const SYS_vhangup: c_long = 153;
const SYS_modify_ldt: c_long = 154;
const SYS_pivot_root: c_long = 155;
const SYS__sysctl: c_long = 156;
const SYS_prctl: c_long = 157;
const SYS_arch_prctl: c_long = 158;
const SYS_adjtimex: c_long = 159;
const SYS_setrlimit: c_long = 160;
const SYS_chroot: c_long = 161;
const SYS_sync: c_long = 162;
const SYS_acct: c_long = 163;
const SYS_settimeofday: c_long = 164;
const SYS_mount: c_long = 165;
const SYS_umount2: c_long = 166;
const SYS_swapon: c_long = 167;
const SYS_swapoff: c_long = 168;
const SYS_reboot: c_long = 169;
const SYS_sethostname: c_long = 170;
const SYS_setdomainname: c_long = 171;
const SYS_iopl: c_long = 172;
const SYS_ioperm: c_long = 173;
const SYS_create_module: c_long = 174;
const SYS_init_module: c_long = 175;
const SYS_delete_module: c_long = 176;
const SYS_get_kernel_syms: c_long = 177;
const SYS_query_module: c_long = 178;
const SYS_quotactl: c_long = 179;
const SYS_nfsservctl: c_long = 180;
const SYS_getpmsg: c_long = 181;
const SYS_putpmsg: c_long = 182;
const SYS_afs_syscall: c_long = 183;
const SYS_tuxcall: c_long = 184;
const SYS_security: c_long = 185;
const SYS_gettid: c_long = 186;
const SYS_readahead: c_long = 187;
const SYS_setxattr: c_long = 188;
const SYS_lsetxattr: c_long = 189;
const SYS_fsetxattr: c_long = 190;
const SYS_getxattr: c_long = 191;
const SYS_lgetxattr: c_long = 192;
const SYS_fgetxattr: c_long = 193;
const SYS_listxattr: c_long = 194;
const SYS_llistxattr: c_long = 195;
const SYS_flistxattr: c_long = 196;
const SYS_removexattr: c_long = 197;
const SYS_lremovexattr: c_long = 198;
const SYS_fremovexattr: c_long = 199;
const SYS_tkill: c_long = 200;
const SYS_time: c_long = 201;
const SYS_futex: c_long = 202;
const SYS_sched_setaffinity: c_long = 203;
const SYS_sched_getaffinity: c_long = 204;
const SYS_set_thread_area: c_long = 205;
const SYS_io_setup: c_long = 206;
const SYS_io_destroy: c_long = 207;
const SYS_io_getevents: c_long = 208;
const SYS_io_submit: c_long = 209;
const SYS_io_cancel: c_long = 210;
const SYS_get_thread_area: c_long = 211;
const SYS_lookup_dcookie: c_long = 212;
const SYS_epoll_create: c_long = 213;
const SYS_epoll_ctl_old: c_long = 214;
const SYS_epoll_wait_old: c_long = 215;
const SYS_remap_file_pages: c_long = 216;
const SYS_getdents64: c_long = 217;
const SYS_set_tid_address: c_long = 218;
const SYS_restart_syscall: c_long = 219;
const SYS_semtimedop: c_long = 220;
const SYS_fadvise64: c_long = 221;
const SYS_timer_create: c_long = 222;
const SYS_timer_settime: c_long = 223;
const SYS_timer_gettime: c_long = 224;
const SYS_timer_getoverrun: c_long = 225;
const SYS_timer_delete: c_long = 226;
const SYS_clock_settime: c_long = 227;
const SYS_clock_gettime: c_long = 228;
const SYS_clock_getres: c_long = 229;
const SYS_clock_nanosleep: c_long = 230;
const SYS_exit_group: c_long = 231;
const SYS_epoll_wait: c_long = 232;
const SYS_epoll_ctl: c_long = 233;
const SYS_tgkill: c_long = 234;
const SYS_utimes: c_long = 235;
const SYS_vserver: c_long = 236;
const SYS_mbind: c_long = 237;
const SYS_set_mempolicy: c_long = 238;
const SYS_get_mempolicy: c_long = 239;
const SYS_mq_open: c_long = 240;
const SYS_mq_unlink: c_long = 241;
const SYS_mq_timedsend: c_long = 242;
const SYS_mq_timedreceive: c_long = 243;
const SYS_mq_notify: c_long = 244;
const SYS_mq_getsetattr: c_long = 245;
const SYS_kexec_load: c_long = 246;
const SYS_waitid: c_long = 247;
const SYS_add_key: c_long = 248;
const SYS_request_key: c_long = 249;
const SYS_keyctl: c_long = 250;
const SYS_ioprio_set: c_long = 251;
const SYS_ioprio_get: c_long = 252;
const SYS_inotify_init: c_long = 253;
const SYS_inotify_add_watch: c_long = 254;
const SYS_inotify_rm_watch: c_long = 255;
const SYS_migrate_pages: c_long = 256;
const SYS_openat: c_long = 257;
const SYS_mkdirat: c_long = 258;
const SYS_mknodat: c_long = 259;
const SYS_fchownat: c_long = 260;
const SYS_futimesat: c_long = 261;
const SYS_newfstatat: c_long = 262;
const SYS_unlinkat: c_long = 263;
const SYS_renameat: c_long = 264;
const SYS_linkat: c_long = 265;
const SYS_symlinkat: c_long = 266;
const SYS_readlinkat: c_long = 267;
const SYS_fchmodat: c_long = 268;
const SYS_faccessat: c_long = 269;
const SYS_pselect6: c_long = 270;
const SYS_ppoll: c_long = 271;
const SYS_unshare: c_long = 272;
const SYS_set_robust_list: c_long = 273;
const SYS_get_robust_list: c_long = 274;
const SYS_splice: c_long = 275;
const SYS_tee: c_long = 276;
const SYS_sync_file_range: c_long = 277;
const SYS_vmsplice: c_long = 278;
const SYS_move_pages: c_long = 279;
const SYS_utimensat: c_long = 280;
const SYS_epoll_pwait: c_long = 281;
const SYS_signalfd: c_long = 282;
const SYS_timerfd_create: c_long = 283;
const SYS_eventfd: c_long = 284;
const SYS_fallocate: c_long = 285;
const SYS_timerfd_settime: c_long = 286;
const SYS_timerfd_gettime: c_long = 287;
const SYS_accept4: c_long = 288;
const SYS_signalfd4: c_long = 289;
const SYS_eventfd2: c_long = 290;
const SYS_epoll_create1: c_long = 291;
const SYS_dup3: c_long = 292;
const SYS_pipe2: c_long = 293;
const SYS_inotify_init1: c_long = 294;
const SYS_preadv: c_long = 295;
const SYS_pwritev: c_long = 296;
const SYS_rt_tgsigqueueinfo: c_long = 297;
const SYS_perf_event_open: c_long = 298;
const SYS_recvmmsg: c_long = 299;
const SYS_fanotify_init: c_long = 300;
const SYS_fanotify_mark: c_long = 301;
const SYS_prlimit64: c_long = 302;
const SYS_name_to_handle_at: c_long = 303;
const SYS_open_by_handle_at: c_long = 304;
const SYS_clock_adjtime: c_long = 305;
const SYS_syncfs: c_long = 306;
const SYS_sendmmsg: c_long = 307;
const SYS_setns: c_long = 308;
const SYS_getcpu: c_long = 309;
const SYS_process_vm_readv: c_long = 310;
const SYS_process_vm_writev: c_long = 311;
const SYS_kcmp: c_long = 312;
const SYS_finit_module: c_long = 313;
const SYS_sched_setattr: c_long = 314;
const SYS_sched_getattr: c_long = 315;
const SYS_renameat2: c_long = 316;
const SYS_seccomp: c_long = 317;
const SYS_getrandom: c_long = 318;
const SYS_memfd_create: c_long = 319;
const SYS_kexec_file_load: c_long = 320;
const SYS_bpf: c_long = 321;
const SYS_execveat: c_long = 322;
const SYS_userfaultfd: c_long = 323;
const SYS_membarrier: c_long = 324;
const SYS_mlock2: c_long = 325;
const SYS_copy_file_range: c_long = 326;
const SYS_preadv2: c_long = 327;
const SYS_pwritev2: c_long = 328;
const SYS_pkey_mprotect: c_long = 329;
const SYS_pkey_alloc: c_long = 330;
const SYS_pkey_free: c_long = 331;
const SYS_statx: c_long = 332;
const SYS_pidfd_send_signal: c_long = 424;
const SYS_io_uring_setup: c_long = 425;
const SYS_io_uring_enter: c_long = 426;
const SYS_io_uring_register: c_long = 427;
const SYS_open_tree: c_long = 428;
const SYS_move_mount: c_long = 429;
const SYS_fsopen: c_long = 430;
const SYS_fsconfig: c_long = 431;
const SYS_fsmount: c_long = 432;
const SYS_fspick: c_long = 433;
const SYS_pidfd_open: c_long = 434;
const SYS_clone3: c_long = 435;
const SYS_close_range: c_long = 436;
const SYS_openat2: c_long = 437;
const SYS_pidfd_getfd: c_long = 438;
const SYS_faccessat2: c_long = 439;
const SYS_process_madvise: c_long = 440;
const SYS_epoll_pwait2: c_long = 441;
const SYS_mount_setattr: c_long = 442;
const SYS_quotactl_fd: c_long = 443;
const SYS_landlock_create_ruleset: c_long = 444;
const SYS_landlock_add_rule: c_long = 445;
const SYS_landlock_restrict_self: c_long = 446;
const SYS_memfd_secret: c_long = 447;
const SYS_process_mrelease: c_long = 448;
const SYS_futex_waitv: c_long = 449;
const SYS_set_mempolicy_home_node: c_long = 450;
const R15: c_int = 0;
const R14: c_int = 1;
const R13: c_int = 2;
const R12: c_int = 3;
const RBP: c_int = 4;
const RBX: c_int = 5;
const R11: c_int = 6;
const R10: c_int = 7;
const R9: c_int = 8;
const R8: c_int = 9;
const RAX: c_int = 10;
const RCX: c_int = 11;
const RDX: c_int = 12;
const RSI: c_int = 13;
const RDI: c_int = 14;
const ORIG_RAX: c_int = 15;
const RIP: c_int = 16;
const CS: c_int = 17;
const EFLAGS: c_int = 18;
const RSP: c_int = 19;
const SS: c_int = 20;
const FS_BASE: c_int = 21;
const GS_BASE: c_int = 22;
const DS: c_int = 23;
const ES: c_int = 24;
const FS: c_int = 25;
const GS: c_int = 26;
const REG_R8: c_int = 0;
const REG_R9: c_int = 1;
const REG_R10: c_int = 2;
const REG_R11: c_int = 3;
const REG_R12: c_int = 4;
const REG_R13: c_int = 5;
const REG_R14: c_int = 6;
const REG_R15: c_int = 7;
const REG_RDI: c_int = 8;
const REG_RSI: c_int = 9;
const REG_RBP: c_int = 10;
const REG_RBX: c_int = 11;
const REG_RDX: c_int = 12;
const REG_RAX: c_int = 13;
const REG_RCX: c_int = 14;
const REG_RSP: c_int = 15;
const REG_RIP: c_int = 16;
const REG_EFL: c_int = 17;
const REG_CSGSFS: c_int = 18;
const REG_ERR: c_int = 19;
const REG_TRAPNO: c_int = 20;
const REG_OLDMASK: c_int = 21;
const REG_CR2: c_int = 22;
const MADV_SOFT_OFFLINE: c_int = 101;
const MAP_32BIT: c_int = 0x0040;
const O_APPEND: c_int = 1024;
const O_DIRECT: c_int = 0x4000;
const O_DIRECTORY: c_int = 0x10000;
const O_LARGEFILE: c_int = 0;
const O_NOFOLLOW: c_int = 0x20000;
const O_CREAT: c_int = 64;
const O_EXCL: c_int = 128;
const O_NOCTTY: c_int = 256;
const O_NONBLOCK: c_int = 2048;
const O_SYNC: c_int = 1052672;
const O_RSYNC: c_int = 1052672;
const O_DSYNC: c_int = 4096;
const O_ASYNC: c_int = 0x2000;
const PTRACE_SYSEMU: c_int = 31;
const PTRACE_SYSEMU_SINGLESTEP: c_int = 32;
const SIGSTKSZ: size_t = 8192;
const MINSIGSTKSZ: size_t = 2048;
const ENAMETOOLONG: c_int = 36;
const ENOLCK: c_int = 37;
const ENOSYS: c_int = 38;
const ENOTEMPTY: c_int = 39;
const ELOOP: c_int = 40;
const ENOMSG: c_int = 42;
const EIDRM: c_int = 43;
const ECHRNG: c_int = 44;
const EL2NSYNC: c_int = 45;
const EL3HLT: c_int = 46;
const EL3RST: c_int = 47;
const ELNRNG: c_int = 48;
const EUNATCH: c_int = 49;
const ENOCSI: c_int = 50;
const EL2HLT: c_int = 51;
const EBADE: c_int = 52;
const EBADR: c_int = 53;
const EXFULL: c_int = 54;
const ENOANO: c_int = 55;
const EBADRQC: c_int = 56;
const EBADSLT: c_int = 57;
const EMULTIHOP: c_int = 72;
const EBADMSG: c_int = 74;
const EOVERFLOW: c_int = 75;
const ENOTUNIQ: c_int = 76;
const EBADFD: c_int = 77;
const EREMCHG: c_int = 78;
const ELIBACC: c_int = 79;
const ELIBBAD: c_int = 80;
const ELIBSCN: c_int = 81;
const ELIBMAX: c_int = 82;
const ELIBEXEC: c_int = 83;
const EILSEQ: c_int = 84;
const ERESTART: c_int = 85;
const ESTRPIPE: c_int = 86;
const EUSERS: c_int = 87;
const ENOTSOCK: c_int = 88;
const EDESTADDRREQ: c_int = 89;
const EMSGSIZE: c_int = 90;
const EPROTOTYPE: c_int = 91;
const ENOPROTOOPT: c_int = 92;
const EPROTONOSUPPORT: c_int = 93;
const ESOCKTNOSUPPORT: c_int = 94;
const EOPNOTSUPP: c_int = 95;
const ENOTSUP: c_int = EOPNOTSUPP;
const EPFNOSUPPORT: c_int = 96;
const EAFNOSUPPORT: c_int = 97;
const EADDRINUSE: c_int = 98;
const EADDRNOTAVAIL: c_int = 99;
const ENETDOWN: c_int = 100;
const ENETUNREACH: c_int = 101;
const ENETRESET: c_int = 102;
const ECONNABORTED: c_int = 103;
const ECONNRESET: c_int = 104;
const ENOBUFS: c_int = 105;
const EISCONN: c_int = 106;
const ENOTCONN: c_int = 107;
const ESHUTDOWN: c_int = 108;
const ETOOMANYREFS: c_int = 109;
const ETIMEDOUT: c_int = 110;
const ECONNREFUSED: c_int = 111;
const EHOSTDOWN: c_int = 112;
const EHOSTUNREACH: c_int = 113;
const EALREADY: c_int = 114;
const EINPROGRESS: c_int = 115;
const ESTALE: c_int = 116;
const EUCLEAN: c_int = 117;
const ENOTNAM: c_int = 118;
const ENAVAIL: c_int = 119;
const EISNAM: c_int = 120;
const EREMOTEIO: c_int = 121;
const EDQUOT: c_int = 122;
const ENOMEDIUM: c_int = 123;
const EMEDIUMTYPE: c_int = 124;
const ECANCELED: c_int = 125;
const ENOKEY: c_int = 126;
const EKEYEXPIRED: c_int = 127;
const EKEYREVOKED: c_int = 128;
const EKEYREJECTED: c_int = 129;
const EOWNERDEAD: c_int = 130;
const ENOTRECOVERABLE: c_int = 131;
const ERFKILL: c_int = 132;
const EHWPOISON: c_int = 133;
const SA_ONSTACK: c_int = 0x08000000;
const SA_SIGINFO: c_int = 0x00000004;
const SA_NOCLDWAIT: c_int = 0x00000002;
const SIGCHLD: c_int = 17;
const SIGBUS: c_int = 7;
const SIGTTIN: c_int = 21;
const SIGTTOU: c_int = 22;
const SIGXCPU: c_int = 24;
const SIGXFSZ: c_int = 25;
const SIGVTALRM: c_int = 26;
const SIGPROF: c_int = 27;
const SIGWINCH: c_int = 28;
const SIGUSR1: c_int = 10;
const SIGUSR2: c_int = 12;
const SIGCONT: c_int = 18;
const SIGSTOP: c_int = 19;
const SIGTSTP: c_int = 20;
const SIGURG: c_int = 23;
const SIGIO: c_int = 29;
const SIGSYS: c_int = 31;
const SIGSTKFLT: c_int = 16;
const SIGPOLL: c_int = 29;
const SIGPWR: c_int = 30;
const SIG_SETMASK: c_int = 2;
const SIG_BLOCK: c_int = 0x000000;
const SIG_UNBLOCK: c_int = 0x01;
const F_GETLK: c_int = 5;
const F_GETOWN: c_int = 9;
const F_SETLK: c_int = 6;
const F_SETLKW: c_int = 7;
const F_SETOWN: c_int = 8;
const F_OFD_GETLK: c_int = 36;
const F_OFD_SETLK: c_int = 37;
const F_OFD_SETLKW: c_int = 38;
const VEOF: usize = 4;
const POLLWRNORM: c_short = 0x100;
const POLLWRBAND: c_short = 0x200;
const SOCK_STREAM: c_int = 1;
const SOCK_DGRAM: c_int = 2;
const MAP_ANON: c_int = 0x0020;
const MAP_GROWSDOWN: c_int = 0x0100;
const MAP_DENYWRITE: c_int = 0x0800;
const MAP_EXECUTABLE: c_int = 0x01000;
const MAP_LOCKED: c_int = 0x02000;
const MAP_NORESERVE: c_int = 0x04000;
const MAP_POPULATE: c_int = 0x08000;
const MAP_NONBLOCK: c_int = 0x010000;
const MAP_STACK: c_int = 0x020000;
const MAP_HUGETLB: c_int = 0x040000;
const MAP_SYNC: c_int = 0x080000;
const MCL_CURRENT: c_int = 0x0001;
const MCL_FUTURE: c_int = 0x0002;
const CBAUD: tcflag_t = 0o0010017;
const TAB1: c_int = 0x00000800;
const TAB2: c_int = 0x00001000;
const TAB3: c_int = 0x00001800;
const CR1: c_int = 0x00000200;
const CR2: c_int = 0x00000400;
const CR3: c_int = 0x00000600;
const FF1: c_int = 0x00008000;
const BS1: c_int = 0x00002000;
const VT1: c_int = 0x00004000;
const VWERASE: usize = 14;
const VREPRINT: usize = 12;
const VSUSP: usize = 10;
const VSTART: usize = 8;
const VSTOP: usize = 9;
const VDISCARD: usize = 13;
const VTIME: usize = 5;
const IXON: tcflag_t = 0x00000400;
const IXOFF: tcflag_t = 0x00001000;
const ONLCR: tcflag_t = 0x4;
const CSIZE: tcflag_t = 0x00000030;
const CS6: tcflag_t = 0x00000010;
const CS7: tcflag_t = 0x00000020;
const CS8: tcflag_t = 0x00000030;
const CSTOPB: tcflag_t = 0x00000040;
const CREAD: tcflag_t = 0x00000080;
const PARENB: tcflag_t = 0x00000100;
const PARODD: tcflag_t = 0x00000200;
const HUPCL: tcflag_t = 0x00000400;
const CLOCAL: tcflag_t = 0x00000800;
const ECHOKE: tcflag_t = 0x00000800;
const ECHOE: tcflag_t = 0x00000010;
const ECHOK: tcflag_t = 0x00000020;
const ECHONL: tcflag_t = 0x00000040;
const ECHOPRT: tcflag_t = 0x00000400;
const ECHOCTL: tcflag_t = 0x00000200;
const ISIG: tcflag_t = 0x00000001;
const ICANON: tcflag_t = 0x00000002;
const PENDIN: tcflag_t = 0x00004000;
const NOFLSH: tcflag_t = 0x00000080;
const CIBAUD: tcflag_t = 0o02003600000;
const CBAUDEX: tcflag_t = 0o010000;
const VSWTC: usize = 7;
const OLCUC: tcflag_t = 0o000002;
const NLDLY: tcflag_t = 0o000400;
const CRDLY: tcflag_t = 0o003000;
const TABDLY: tcflag_t = 0o014000;
const BSDLY: tcflag_t = 0o020000;
const FFDLY: tcflag_t = 0o100000;
const VTDLY: tcflag_t = 0o040000;
const XTABS: tcflag_t = 0o014000;
const B57600: speed_t = 0o010001;
const B115200: speed_t = 0o010002;
const B230400: speed_t = 0o010003;
const B460800: speed_t = 0o010004;
const B500000: speed_t = 0o010005;
const B576000: speed_t = 0o010006;
const B921600: speed_t = 0o010007;
const B1000000: speed_t = 0o010010;
const B1152000: speed_t = 0o010011;
const B1500000: speed_t = 0o010012;
const B2000000: speed_t = 0o010013;
const B2500000: speed_t = 0o010014;
const B3000000: speed_t = 0o010015;
const B3500000: speed_t = 0o010016;
const B4000000: speed_t = 0o010017;
const EDEADLK: c_int = 35;
const EDEADLOCK: c_int = EDEADLK;
const EXTPROC: tcflag_t = 0x00010000;
const VEOL: usize = 11;
const VEOL2: usize = 16;
const VMIN: usize = 6;
const IEXTEN: tcflag_t = 0x00008000;
const TOSTOP: tcflag_t = 0x00000100;
const FLUSHO: tcflag_t = 0x00001000;
#[align(16)]
struct max_align_t {
    priv_: [f64; 4],
}
#[align(8)]
struct clone_args {
    flags: c_ulonglong,
    pidfd: c_ulonglong,
    child_tid: c_ulonglong,
    parent_tid: c_ulonglong,
    exit_signal: c_ulonglong,
    stack: c_ulonglong,
    stack_size: c_ulonglong,
    tls: c_ulonglong,
    set_tid: c_ulonglong,
    set_tid_size: c_ulonglong,
    cgroup: c_ulonglong,
}
struct termios2 {
    c_iflag: tcflag_t,
    c_oflag: tcflag_t,
    c_cflag: tcflag_t,
    c_lflag: tcflag_t,
    c_line: cc_t,
    c_cc: [cc_t; 19],
    c_ispeed: speed_t,
    c_ospeed: speed_t,
}
const SOL_SOCKET: c_int = 1;
const SO_REUSEADDR: c_int = 2;
const SO_TYPE: c_int = 3;
const SO_ERROR: c_int = 4;
const SO_DONTROUTE: c_int = 5;
const SO_BROADCAST: c_int = 6;
const SO_SNDBUF: c_int = 7;
const SO_RCVBUF: c_int = 8;
const SO_KEEPALIVE: c_int = 9;
const SO_OOBINLINE: c_int = 10;
const SO_NO_CHECK: c_int = 11;
const SO_PRIORITY: c_int = 12;
const SO_LINGER: c_int = 13;
const SO_BSDCOMPAT: c_int = 14;
const SO_REUSEPORT: c_int = 15;
const SO_PASSCRED: c_int = 16;
const SO_PEERCRED: c_int = 17;
const SO_RCVLOWAT: c_int = 18;
const SO_SNDLOWAT: c_int = 19;
const SO_RCVTIMEO: c_int = 20;
const SO_SNDTIMEO: c_int = 21;
const SO_SECURITY_AUTHENTICATION: c_int = 22;
const SO_SECURITY_ENCRYPTION_TRANSPORT: c_int = 23;
const SO_SECURITY_ENCRYPTION_NETWORK: c_int = 24;
const SO_BINDTODEVICE: c_int = 25;
const SO_ATTACH_FILTER: c_int = 26;
const SO_DETACH_FILTER: c_int = 27;
const SO_GET_FILTER: c_int = SO_ATTACH_FILTER;
const SO_PEERNAME: c_int = 28;
const SO_TIMESTAMP: c_int = 29;
const SO_ACCEPTCONN: c_int = 30;
const SO_PEERSEC: c_int = 31;
const SO_SNDBUFFORCE: c_int = 32;
const SO_RCVBUFFORCE: c_int = 33;
const SO_PASSSEC: c_int = 34;
const SO_TIMESTAMPNS: c_int = 35;
const SO_MARK: c_int = 36;
const SO_TIMESTAMPING: c_int = 37;
const SO_PROTOCOL: c_int = 38;
const SO_DOMAIN: c_int = 39;
const SO_RXQ_OVFL: c_int = 40;
const SO_WIFI_STATUS: c_int = 41;
const SCM_WIFI_STATUS: c_int = SO_WIFI_STATUS;
const SO_PEEK_OFF: c_int = 42;
const SO_NOFCS: c_int = 43;
const SO_LOCK_FILTER: c_int = 44;
const SO_SELECT_ERR_QUEUE: c_int = 45;
const SO_BUSY_POLL: c_int = 46;
const SO_MAX_PACING_RATE: c_int = 47;
const SO_BPF_EXTENSIONS: c_int = 48;
const SO_INCOMING_CPU: c_int = 49;
const SO_ATTACH_BPF: c_int = 50;
const SO_DETACH_BPF: c_int = SO_DETACH_FILTER;
const SO_ATTACH_REUSEPORT_CBPF: c_int = 51;
const SO_ATTACH_REUSEPORT_EBPF: c_int = 52;
const SO_CNX_ADVICE: c_int = 53;
const SCM_TIMESTAMPING_OPT_STATS: c_int = 54;
const SO_MEMINFO: c_int = 55;
const SO_INCOMING_NAPI_ID: c_int = 56;
const SO_COOKIE: c_int = 57;
const SCM_TIMESTAMPING_PKTINFO: c_int = 58;
const SO_PEERGROUPS: c_int = 59;
const SO_ZEROCOPY: c_int = 60;
const SO_TXTIME: c_int = 61;
const SCM_TXTIME: c_int = SO_TXTIME;
const SO_BINDTOIFINDEX: c_int = 62;
const FICLONE: c_ulong = 0x40049409;
const FICLONERANGE: c_ulong = 0x4020940D;
const SCM_TIMESTAMPNS: c_int = SO_TIMESTAMPNS;
const SCM_TIMESTAMPING: c_int = SO_TIMESTAMPING;
const TCGETS: Ioctl = 0x5401;
const TCSETS: Ioctl = 0x5402;
const TCSETSW: Ioctl = 0x5403;
const TCSETSF: Ioctl = 0x5404;
const TCGETA: Ioctl = 0x5405;
const TCSETA: Ioctl = 0x5406;
const TCSETAW: Ioctl = 0x5407;
const TCSETAF: Ioctl = 0x5408;
const TCSBRK: Ioctl = 0x5409;
const TCXONC: Ioctl = 0x540A;
const TCFLSH: Ioctl = 0x540B;
const TIOCEXCL: Ioctl = 0x540C;
const TIOCNXCL: Ioctl = 0x540D;
const TIOCSCTTY: Ioctl = 0x540E;
const TIOCGPGRP: Ioctl = 0x540F;
const TIOCSPGRP: Ioctl = 0x5410;
const TIOCOUTQ: Ioctl = 0x5411;
const TIOCSTI: Ioctl = 0x5412;
const TIOCGWINSZ: Ioctl = 0x5413;
const TIOCSWINSZ: Ioctl = 0x5414;
const TIOCMGET: Ioctl = 0x5415;
const TIOCMBIS: Ioctl = 0x5416;
const TIOCMBIC: Ioctl = 0x5417;
const TIOCMSET: Ioctl = 0x5418;
const TIOCGSOFTCAR: Ioctl = 0x5419;
const TIOCSSOFTCAR: Ioctl = 0x541A;
const FIONREAD: Ioctl = 0x541B;
const TIOCINQ: Ioctl = FIONREAD;
const TIOCLINUX: Ioctl = 0x541C;
const TIOCCONS: Ioctl = 0x541D;
const TIOCGSERIAL: Ioctl = 0x541E;
const TIOCSSERIAL: Ioctl = 0x541F;
const TIOCPKT: Ioctl = 0x5420;
const FIONBIO: Ioctl = 0x5421;
const TIOCNOTTY: Ioctl = 0x5422;
const TIOCSETD: Ioctl = 0x5423;
const TIOCGETD: Ioctl = 0x5424;
const TCSBRKP: Ioctl = 0x5425;
const TIOCSBRK: Ioctl = 0x5427;
const TIOCCBRK: Ioctl = 0x5428;
const TIOCGSID: Ioctl = 0x5429;
const TCGETS2: Ioctl = 0x802c542a;
const TCSETS2: Ioctl = 0x402c542b;
const TCSETSW2: Ioctl = 0x402c542c;
const TCSETSF2: Ioctl = 0x402c542d;
const TIOCGRS485: Ioctl = 0x542E;
const TIOCSRS485: Ioctl = 0x542F;
const TIOCGPTN: Ioctl = 0x80045430;
const TIOCSPTLCK: Ioctl = 0x40045431;
const TIOCGDEV: Ioctl = 0x80045432;
const TCGETX: Ioctl = 0x5432;
const TCSETX: Ioctl = 0x5433;
const TCSETXF: Ioctl = 0x5434;
const TCSETXW: Ioctl = 0x5435;
const TIOCSIG: Ioctl = 0x40045436;
const TIOCVHANGUP: Ioctl = 0x5437;
const TIOCGPKT: Ioctl = 0x80045438;
const TIOCGPTLCK: Ioctl = 0x80045439;
const TIOCGEXCL: Ioctl = 0x80045440;
const TIOCGPTPEER: Ioctl = 0x5441;
const FIONCLEX: Ioctl = 0x5450;
const FIOCLEX: Ioctl = 0x5451;
const FIOASYNC: Ioctl = 0x5452;
const TIOCSERCONFIG: Ioctl = 0x5453;
const TIOCSERGWILD: Ioctl = 0x5454;
const TIOCSERSWILD: Ioctl = 0x5455;
const TIOCGLCKTRMIOS: Ioctl = 0x5456;
const TIOCSLCKTRMIOS: Ioctl = 0x5457;
const TIOCSERGSTRUCT: Ioctl = 0x5458;
const TIOCSERGETLSR: Ioctl = 0x5459;
const TIOCSERGETMULTI: Ioctl = 0x545A;
const TIOCSERSETMULTI: Ioctl = 0x545B;
const TIOCMIWAIT: Ioctl = 0x545C;
const TIOCGICOUNT: Ioctl = 0x545D;
const BLKIOMIN: Ioctl = 0x1278;
const BLKIOOPT: Ioctl = 0x1279;
const BLKSSZGET: Ioctl = 0x1268;
const BLKPBSZGET: Ioctl = 0x127B;
const FIOQSIZE: Ioctl = 0x5460;
const TIOCM_LE: c_int = 0x001;
const TIOCM_DTR: c_int = 0x002;
const TIOCM_RTS: c_int = 0x004;
const TIOCM_ST: c_int = 0x008;
const TIOCM_SR: c_int = 0x010;
const TIOCM_CTS: c_int = 0x020;
const TIOCM_CAR: c_int = 0x040;
const TIOCM_CD: c_int = TIOCM_CAR;
const TIOCM_RNG: c_int = 0x080;
const TIOCM_RI: c_int = TIOCM_RNG;
const TIOCM_DSR: c_int = 0x100;
const BOTHER: speed_t = 0o010000;
const IBSHIFT: tcflag_t = 16;
const RLIMIT_CPU: c_int = 0;
const RLIMIT_FSIZE: c_int = 1;
const RLIMIT_DATA: c_int = 2;
const RLIMIT_STACK: c_int = 3;
const RLIMIT_CORE: c_int = 4;
const RLIMIT_RSS: c_int = 5;
const RLIMIT_NPROC: c_int = 6;
const RLIMIT_NOFILE: c_int = 7;
const RLIMIT_MEMLOCK: c_int = 8;
const RLIMIT_AS: c_int = 9;
const RLIMIT_LOCKS: c_int = 10;
const RLIMIT_SIGPENDING: c_int = 11;
const RLIMIT_MSGQUEUE: c_int = 12;
const RLIMIT_NICE: c_int = 13;
const RLIMIT_RTPRIO: c_int = 14;
const RLIMIT_RTTIME: c_int = 15;
const RLIM_NLIMITS: c_int = 15;
const RLIMIT_NLIMITS: c_int = RLIM_NLIMITS;
const RLIM_INFINITY: rlim_t = !0;
#[align(4)]
struct pthread_mutexattr_t {
    size: [u8; __SIZEOF_PTHREAD_MUTEXATTR_T],
}
#[align(4)]
struct pthread_rwlockattr_t {
    size: [u8; __SIZEOF_PTHREAD_RWLOCKATTR_T],
}
#[align(4)]
struct pthread_condattr_t {
    size: [u8; __SIZEOF_PTHREAD_CONDATTR_T],
}
#[align(4)]
struct pthread_barrierattr_t {
    size: [u8; __SIZEOF_PTHREAD_BARRIERATTR_T],
}
#[align(8)]
struct fanotify_event_metadata {
    event_len: __u32,
    vers: __u8,
    reserved: __u8,
    metadata_len: __u16,
    mask: __u64,
    fd: c_int,
    pid: c_int,
}
#[align(8)]
struct pthread_cond_t {
    size: [u8; __SIZEOF_PTHREAD_COND_T],
}
#[align(8)]
struct pthread_mutex_t {
    size: [u8; __SIZEOF_PTHREAD_MUTEX_T],
}
#[align(8)]
struct pthread_rwlock_t {
    size: [u8; __SIZEOF_PTHREAD_RWLOCK_T],
}
#[align(8)]
struct pthread_barrier_t {
    size: [u8; __SIZEOF_PTHREAD_BARRIER_T],
}
#[align(8)]
struct can_frame {
    can_id: canid_t,
    can_dlc: u8,
    __pad: u8,
    __res0: u8,
    __res1: u8,
    data: [u8; CAN_MAX_DLEN],
}
#[align(8)]
struct canfd_frame {
    can_id: canid_t,
    len: u8,
    flags: u8,
    __res0: u8,
    __res1: u8,
    data: [u8; CANFD_MAX_DLEN],
}
#[align(8)]
struct canxl_frame {
    prio: canid_t,
    flags: u8,
    sdt: u8,
    len: u16,
    af: u32,
    data: [u8; CANXL_MAX_DLEN],
}
struct open_how {
    flags: __u64,
    mode: __u64,
    resolve: __u64,
}
#[align(4)]
struct in6_addr {
    s6_addr: [u8; 16],
}
