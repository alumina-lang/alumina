//! Standard library for the Alumina language.
//!
//! It is a collection of functions, macros, protocols and types that are essential for writing portable code. Follows a
//! similar scope and structure as the [Rust standard library](https://doc.rust-lang.org/std/).

/// Causes the compilation to fail if reached.
///
/// This is useful when conditional compilation is used with `#[cfg(...)]` attributes, but it can also be used
/// in generic context (e.g. with `when` expressions).
///
/// ## Examples
/// ```
/// fn fork() -> bool {
///     #[cfg(target_os="windows")]
///     compile_fail!("fork() is not supported on Windows");
///
///     libc::fork() == 0
/// }
///
/// let is_child = fork();
/// if is_child {
///     println!("Hello from child");
/// } else {
///     println!("Hello from parent");
/// }
/// ```
///
/// ```
/// fn type_of_value<T>(_: T) -> &[u8] {
///     when T: i32 {
///         "i32"
///     } else when T: &[u8] {
///         "&[u8]"
///     } else {
///         compile_fail!("unsupported type")
///     }
/// }
///
/// println!("{}", type_of_value(1)); // "i32"
/// println!("{}", type_of_value("hello world")); // "&[u8]"
/// // println!("{}", type_of_value(true)); // Would fail to compile
/// ```
macro compile_fail($reason) {
    intrinsics::compile_fail($reason);
}

/// Emits a compile-time warning.
///
/// ## Example
/// ```dubious
/// use std::compile_warn;
///
/// fn md5(_data: &[u8]) -> u128 {
///     compile_warn!("md5 is a dead algorithm, use something better");
///     0xdeadDEADdeadDEADdeadDEADdeadDEAD
/// }
///
/// println!("{}", md5("hello world"));
/// ```
macro compile_warn($reason) {
    intrinsics::compile_warn($reason);
}

/// Emits a note during compilation.
///
/// ## Example
/// ```
/// use std::compile_note;
///
/// compile_note!("Epstein didn't kill himself");
/// ```
macro compile_note($reason) {
    intrinsics::compile_note($reason);
}

/// Panics if `cond` evaluates to false.
///
/// ## Examples
/// ```
/// assert!(1 + 1 == 2);
/// ```
/// ```panics
/// assert!(1 + 1 == 3); // panics
/// ```
macro assert($cond) {
    if !$cond {
        internal::panic_assert(file!(), line!(), column!());
    }
}

/// Panics if `lhs` and `rhs` are not equal.
///
/// ## Examples
/// ```
/// assert_eq!(1 + 1, 2);
/// ```
/// ```panics
/// assert_eq!(1 + 1, 3); // panics
/// ```
macro assert_eq($lhs, $rhs) {
    internal::assert_eq(file!(), line!(), column!(), $lhs, $rhs);
}

/// Panics if `lhs` and `rhs` are equal.
///
/// ## Examples
/// ```
/// assert_ne!(1 + 1, 3);
/// ```
/// ```panics
/// assert_ne!(1 + 1, 2); // panics
/// ```
macro assert_ne($lhs, $rhs) {
    internal::assert_ne(file!(), line!(), column!(), $lhs, $rhs);
}

/// Panics if `cond` evaluates to false when compiled in debug mode. Otherwise, does nothing.
macro debug_assert($cond) { #[cfg(debug)] assert!($cond); }

/// Panics if `lhs` and `rhs` are not equal when compiled in debug mode. Otherwise, does nothing.
macro debug_assert_eq($lhs, $rhs) { #[cfg(debug)] assert_eq!($lhs, $rhs); }

/// Panics if `lhs` and `rhs` are equal when compiled in debug mode. Otherwise, does nothing.
macro debug_assert_ne($lhs, $rhs) { #[cfg(debug)] assert_ne!($lhs, $rhs); }

/// Treats the location as unreachable during program flow.
///
/// In debug mode, this macro will panic if ever reached. In release mode, it will cause
/// undefined behavior. This is a way to satisfy type-checker, especially useful in `switch` expressions.
/// ## Example
/// ```
/// let number: i32 = 42;
/// switch number % 3 {
///     0 => "odd",
///     1 => "even",
///     2 => "what even?",
///     _ => unreachable!()
/// };
/// ```
macro unreachable() {
    #[cfg(debug)]
    panic!("reached unreachable code");
    #[cfg(not(debug))]
    std::intrinsics::unreachable();
}

/// Assume that the condition is true.
///
/// This *may* enable additional optimizations when you know better than the compiler.
///
/// In debug mode, this macro will panic if the condition is false. In release mode, it will
/// cause undefined behavior.
///
/// ## Examples
/// ```
/// use std::assume;
/// use std::collections::Vector;
///
/// fn get_unchecked<T>(vec: &Vector<T>, index: usize) -> T {
///     assume!(index < vec.len());
///     vec.get(index).unwrap()
/// }
///
/// let vec = Vector::from_slice(&[0, 1, 2, 3, 4]);
///
/// // The bounds check in Vector::get *may* be optimized out:
/// println!("{}", vec.get_unchecked(3));
///
/// // In release mode, this will likely segfault, but can also make demons
/// // fly out of your nose:
/// // println!("{}", vec.get_unchecked(10));
/// ```
///
/// ```nasaldemons
/// use std::assume;
///
/// assume!(1 > 2); // Ò̴̡̤̗̬̳̱͉̳͓̝̥̞͗́̿͑̂̓̀͋̈́͐̏͝H̷̳̺̝̗̖̖̫͆̀́̚͝ ̷͚̜̟̘̦̺̼̣̘̓N̸̜̞̬̞͓̮̘̣͍͕͍̱̮̍͛̇̋̅̏͒̕͠Ỏ̴̭̯͘̚̕
/// ```
macro assume($cond) {
    if !$cond {
        #[cfg(debug)]
        panic!("called assume with a false condition");
        #[cfg(not(debug))]
        std::intrinsics::unreachable();
    }
}

/// Hint to the compiler that a particular boolean expression is likely true.
///
/// Useful for branch prediction. See also [unlikely].
///
/// ## Example
/// ```
/// use random::thread_rng;
/// use std::likely;
///
/// let v: f64 = thread_rng().next_float();
/// if likely!(v < 0.99) {
///     // ...
/// }
/// ```
macro likely($cond) {
    internal::expect($cond, true)
}

/// Hint to the compiler that a particular boolean expression is unlikely to be true.
///
/// Useful for branch prediction. See also [likely].
///
/// ## Example
/// ```
/// use random::thread_rng;
/// use std::unlikely;
///
/// let v: f64 = thread_rng().next_float();
/// if unlikely!(v < 0.01) {
///     // ...
/// }
/// ```
macro unlikely($cond) {
    internal::expect($cond, false)
}

/// Returns the line in the source code at which the macro was invoked.
///
/// If used within a macro, this will return the line of the outermost macro invocation.
#[builtin] macro line() {  }

/// Returns the column in the source code at which the macro was invoked.
///
/// If used within a macro, this will return the line of the outermost macro invocation.
#[builtin] macro column() {  }

/// Returns the file in the source code at which the macro was invoked.
///
/// If used within a macro, this will return the line of the outermost macro invocation.
#[builtin] macro file() {  }

/// Returns the value of an environment variable during compilation.
#[builtin] macro env($s) {  }

/// Reads a file during compilation and returns its contents as a string slice.
///
/// ## Example
/// ```
/// // Cheating quine
/// use std::{include_bytes, file};
///
/// let source = include_bytes!(file!());
///
/// print!("{}", source);
/// ```
#[builtin] macro include_bytes($file) {  }

/// Concatenates strings at compile time.
///
/// This macro can be useful also as a guard that string is a compile-time constant.
///
/// ## Example
/// ```
/// use std::concat;
///
/// assert_eq!(concat!("foo", "bar"), "foobar");
/// ```
#[builtin] macro concat($parts...) {  }

/// A helper for printing a value of a subexpression for debugging purposes.
///
/// It prints the value to standard error with code location (file, line, column) and
/// returns the value.
///
/// ## Example
/// ```
/// let a = 1;
/// // Prints "[<filename>:<line>:<column>] 2"
/// let b = 2 * dbg!(a + 1);
///
/// assert_eq!(b, 4);
/// ```
macro dbg($value) {
    let val = $value;
    let f = panicking::internal::PanicFormatter {};
    fmt::writeln!(&f,
        "[{}:{}:{}] {}",
        file!(),
        line!(),
        column!(),
        val
    ).unwrap();
    val
}

#[docs(no_index)]
mod internal {
    // These are in a function instead of a macro so we can typecheck and display a nice
    // error message if the argument is Formattable.

    #[cold]
    #[no_inline]
    fn panic_assert(file: &[u8], line: i32, column: i32) -> ! {
        use panicking::internal::panic_impl;

        panic_impl(
            file, line, column,
            &fmt::format_args!(
                "assertion failed"
            )
        )
    }

    #[inline]
    fn assert_eq<T>(file: &[u8], line: i32, column: i32, lhs: T, rhs: T)  {
        if !(lhs == rhs) {
            panic_assert_eq(file, line, column, lhs, rhs)
        }
    }

    #[inline]
    fn assert_ne<T>(file: &[u8], line: i32, column: i32, lhs: T, rhs: T)  {
        if lhs == rhs {
            panic_assert_ne(file, line, column, lhs, rhs)
        }
    }

    #[cold]
    #[no_inline]
    fn panic_assert_eq<T>(file: &[u8], line: i32, column: i32, lhs: T, rhs: T) -> ! {
        use panicking::internal::panic_impl;
        use fmt::Formattable;

        when T: Formattable<T, panicking::internal::PanicFormatter> {
            panic_impl(
                file, line, column,
                &fmt::format_args!(
                    "assertion failed ({} != {}))",
                    lhs,
                    rhs
                )
            )
        }
        else {
            panic_impl(
                file, line, column,
                &fmt::format_args!(
                    "assertion failed (does not equal))",
                )
            )
        }
    }

    #[cold]
    #[no_inline]
    fn panic_assert_ne<T>(file: &[u8], line: i32, column: i32, lhs: T, rhs: T) -> ! {
        use panicking::internal::panic_impl;
        use fmt::Formattable;

        when T: Formattable<T, panicking::internal::PanicFormatter> {
            panic_impl(
                file, line, column,
                &fmt::format_args!(
                    "assertion failed ({} == {}))",
                    lhs,
                    rhs
                )
            )
        }
        else {
            panic_impl(
                file, line, column,
                &fmt::format_args!(
                    "assertion failed (equals))",
                )
            )
        }
    }

    #[inline(always)]
    fn expect(cond: bool, expected: bool) -> bool {
        intrinsics::codegen_func::<bool>("__builtin_expect", cond, expected)
    }
}

#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    #[test]
    fn test_likely() {
        assert!(likely!(true));
        assert!(!likely!(false));
        assert!(unlikely!(true));
        assert!(!unlikely!(false));
    }
}
