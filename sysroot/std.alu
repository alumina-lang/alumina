//! Standard library for the Alumina language.
//!
//! It is a collection of functions, macros, protocols and types that are essential for writing portable code. Follows a 
//! similar scope and structure as the Rust standard library.

/// Causes the compilation to fail if reached.
///
/// This is useful when conditional compilation is used with `#[cfg(...)]` attributes, but it can also be used
/// in generic context (e.g. with `when` expressions).
macro compile_fail($reason) {
    intrinsics::compile_fail($reason);
}

/// Panics if `cond` evaluates to false.
macro assert($cond) {
    if !$cond {
        panic!("assertion failed");
    }
}

/// Panics if `lhs` and `rhs` are not equal.
macro assert_eq($lhs, $rhs) {
    internal::assert_eq(file!(), line!(), column!(), $lhs, $rhs);
}

/// Panics if `lhs` and `rhs` are equal.
macro assert_ne($lhs, $rhs) {
    internal::assert_ne(file!(), line!(), column!(), $lhs, $rhs);
}

/// Panics if `cond` evaluates to false when compiled in debug mode. Otherwise, does nothing.
macro debug_assert($cond) { #[cfg(debug)] assert!($cond); }

/// Panics if `lhs` and `rhs` are not equal when compiled in debug mode. Otherwise, does nothing.
macro debug_assert_eq($lhs, $rhs) { #[cfg(debug)] assert_eq!($lhs, $rhs); }

/// Panics if `lhs` and `rhs` are equal when compiled in debug mode. Otherwise, does nothing.
macro debug_assert_ne($lhs, $rhs) { #[cfg(debug)] assert_ne!($lhs, $rhs); }

/// Treats the location as unreachable during program flow.
///
/// In debug mode, this macro will panic if ever reached. In release mode, it will cause
/// undefined behavior. This is a way to satisfy type-checker, especially useful in `switch` expressions.
/// # Example
/// ```
/// let number: i32 = 42;
/// switch number % 3 {
///     0 => "odd", 
///     1 => "even",
///     2 => "what even?",
///     _ => unreachable!()
/// }
/// ```
macro unreachable() {
    #[cfg(debug)]
    panic!("reached unreachable code");
    #[cfg(not(debug))]
    std::intrinsics::unreachable();
}

/// Returns the line in the source code at which the macro was invoked. 
///
/// If used within a macro, this will return the line of the outermost macro invocation.
#[builtin] macro line() {  }

/// Returns the column in the source code at which the macro was invoked. 
///
/// If used within a macro, this will return the line of the outermost macro invocation.
#[builtin] macro column() {  }

/// Returns the file in the source code at which the macro was invoked.
///
/// If used within a macro, this will return the line of the outermost macro invocation.
#[builtin] macro file() {  }

/// Returns the value of an environment variable during compilation.
#[builtin] macro env($s) {  }

#[builtin] macro include_bytes($file) {  }

/// Concatenates strings at compile time.
///
/// This macro can be useful also as a guard that string is a compile-time constant. 
#[builtin] macro concat($parts...) {  }


/// Print a message to standard error with code location information.
macro dbg($fmt, $args...) {
    let f = panicking::internal::PanicFormatter {};
    fmt::writeln!(&f,
        concat!("[{}:{}:{}] ", $fmt),
        file!(), 
        line!(), 
        column!(),
        $args...
    )
}

mod internal {
    // These are in a function instead of a macro so we can typecheck and display a nice
    // error message if the argument is Formattable.

    fn assert_eq<T>(file: &[u8], line: i32, column: i32, lhs: T, rhs: T)  {
        use panicking::internal::panic_impl;
        use fmt::{Formattable, internal::FormatArg};

        if !(lhs == rhs) {
            when T: Formattable<T> {
                panic_impl("assertion failed ({} != {}))", file, line, column, &[
                    FormatArg::new(&lhs),
                    FormatArg::new(&rhs)
                ])
            }
            else {
                panic_impl("assertion failed (does not equal))", file, line, column, &[])
            }

        }
    }

    fn assert_ne<T>(file: &[u8], line: i32, column: i32, lhs: T, rhs: T)  {
        use panicking::internal::panic_impl;
        use fmt::{Formattable, internal::FormatArg};

        if lhs == rhs {
            when T: Formattable<T> {
                panic_impl("assertion failed ({} == {}))", file, line, column, &[
                    FormatArg::new(&lhs),
                    FormatArg::new(&rhs)
                ])
            }
            else {
                panic_impl("assertion failed (equals))", file, line, column, &[])
            }
        }
    }
}

/// Contains various utility functions that are useful in the generic context where the type operated on is 
/// not easily expressible.
mod util {
    #[force_inline] fn identity<T>(t: T) -> T { t }
    #[force_inline] fn discard<T>(_: T) { }
    #[force_inline] fn cast<T1, T2>(t: T1) -> T2 { t as T2 }
    #[force_inline] fn transmute<T1, T2>(t: T1) -> T2 { *(&t as &T2) }
    #[force_inline] fn deref<T>(v: &T) -> T { *v }
}
