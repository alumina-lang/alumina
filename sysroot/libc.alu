//! "FFI" interfaces to libc.
//!
//! If compiled on a Linux target, this module assumes glibc. Mostly copied/adapted
//! from [Rust's libc crate](https://github.com/rust-lang/libc).

type c_schar = i8;
type c_uchar = u8;
type c_short = i16;
type c_ushort = u16;
type c_int = i32;
type c_uint = u32;
type c_float = f32;
type c_double = f64;
type c_longlong = i64;
type c_ulonglong = u64;
type intmax_t = i64;
type uintmax_t = u64;
type size_t = usize;
type ptrdiff_t = isize;
type intptr_t = isize;
type uintptr_t = usize;
type ssize_t = isize;


#[cfg(any(target_os = "macos", target_os = "linux", target_os = "android"))]
{
    type pid_t = i32;
    type uid_t = u32;
    type gid_t = u32;
    type in_addr_t = u32;
    type in_port_t = u16;
    type sighandler_t = isize;
}
#[cfg(any(target_os="linux", target_os="android"))]
{
    type clockid_t = c_int;
    type ino64_t = u64;
    type off64_t = i64;
    type blkcnt64_t = i64;
}

#[cfg(target_os="macos")]
{
    type c_char = i8;
    type wchar_t = i32;
    type clock_t = c_ulong;
    type time_t = c_long;
    type mode_t = u16;
    type c_long = i64;
    type c_ulong = u64;
    type clockid_t = c_uint;
    type off_t = i64;
    type nfds_t = c_uint;
    type socklen_t = u32;
    type sa_family_t = u8;
    type dev_t = i32;

    type blkcnt_t = i64;
    type nlink_t = u16;
    type blksize_t = i32;
    type ino_t = u64;
}

#[cfg(target_os="android")]
{
    type c_char = u8;
    type wchar_t = u32;
    type c_long = i64;
    type c_ulong = u64;
    type mode_t = u32;
    type clock_t = c_long;
    type time_t = c_long;
    type off_t = c_long;
    type nfds_t = c_uint;

    #[cfg(target_pointer_width = "32")]
    type socklen_t = i32;

    #[cfg(target_pointer_width = "64")]
    type socklen_t = u32;

    type sa_family_t = u16;

    type dev_t = c_ulong;

    type blkcnt_t = c_ulong;
    type blksize_t = c_ulong;
    type nlink_t = u32;

    type ino_t = c_ulong;
}

#[cfg(target_os="linux")]
{
    #[cfg(target_pointer_width = "32")]
    {
        type off_t = i64;
        type ino_t = u32;
    }

    #[cfg(target_pointer_width = "64")]
    {
        type off_t = i32;
        type ino_t = u64;
    }

    #[cfg(target_arch = "x86")]
    {
        type c_long = i32;
        type c_ulong = u32;
        type c_char = i8;
        type wchar_t = i32;
        type clock_t = i32;
        type time_t = i32;

        type nlink_t = u32;
        type blkcnt_t = i32;
        type blksize_t = i32;
    }

    #[cfg(target_arch = "x86_64")]
    {
        type c_char = i8;
        type wchar_t = i32;
        type clock_t = i64;
        type time_t = i64;

        type nlink_t = u64;
        type blkcnt_t = i64;
        type blksize_t = i64;

        #[cfg(target_pointer_width = "32")]
        {
            type c_long = i32;
            type c_ulong = u32;
        }

        #[cfg(not(target_pointer_width = "32"))]
        {
            type c_long = i64;
            type c_ulong = u64;
        }
    }

    #[cfg(any(target_arch = "aarch64", target_arch = "arm"))]
    {
        type c_char = u8;
        type wchar_t = u32;

        #[cfg(target_pointer_width = "32")]
        {
            type c_long = i32;
            type c_ulong = u32;
            type clock_t = i32;
            type time_t = i32;

            type nlink_t = u32;
            type blkcnt_t = i64;
            type blksize_t = i32;
        }

        #[cfg(not(target_pointer_width = "32"))]
        {
            type c_long = i64;
            type c_ulong = u64;
            type clock_t = i64;
            type time_t = i64;

            type nlink_t = u32;
            type blkcnt_t = i32;
            type blksize_t = i32;
        }
    }

    type mode_t = u32;
    type socklen_t = u32;
    type nfds_t = c_ulong;
    type sa_family_t = u16;
    type dev_t = u64;
}

#[cfg(target_os="windows")]
{
    type c_char = i8;
    type c_long = i32;
    type c_ulong = u32;
    type wchar_t = u16;
}

extern "C" fn free(ptr: &mut void);
extern "C" fn memcpy(dst: &mut void, src: &void, len: size_t) -> &mut void;
extern "C" fn memset(dst: &mut void, ch: c_int, len: size_t) -> &mut void;
extern "C" fn memmove(dst: &mut void, src: &void, len: size_t) -> &mut void;
extern "C" fn memcmp(ptr1: &void, ptr2: &void, len: size_t) -> c_int;
extern "C" fn memchr(ptr: &void, ptr2: c_int, count: size_t) -> &void;
extern "C" fn memmem(haystack: &void, haystacklen: size_t, needle: &void, needle_len: size_t) -> &void;
extern "C" fn malloc(size: size_t) -> &mut void;
extern "C" fn realloc(ptr: &mut void, size: size_t) -> &mut void;
extern "C" fn calloc(num: size_t, size: size_t) -> &mut void;
extern "C" fn exit(ret: c_int) -> !;
extern "C" fn _exit(ret: c_int) -> !;
extern "C" fn abort() -> !;
extern "C" fn strlen(s: &c_char) -> size_t;
extern "C" fn puts(s: &c_char) -> c_int;

#[cfg(any(target_os="linux", target_os="macos", target_os="android"))]
{
    struct timespec {
        tv_sec: time_t,
        #[cfg(all(target_arch = "x86_64", target_pointer_width = "32"))]
        tv_nsec: i64,
        #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "32")))]
        tv_nsec: c_long,
    }

    struct in_addr {
        s_addr: in_addr_t,
    }

    #[align(4)]
    struct in6_addr {
        s6_addr: [u8; 16],
    }

    #[cfg(any(target_os="linux", target_os="android"))]
    {
        struct sockaddr {
            sa_family: sa_family_t,
            sa_data: [c_char; 14],
        }

        struct sockaddr_storage {
            ss_family: sa_family_t,
            __ss_align: size_t,

            #[cfg(target_pointer_width = "32")]
            __ss_pad2: [u8; 120],
            #[cfg(target_pointer_width = "64")]
            __ss_pad2: [u8; 112],
        }

        struct sockaddr_in {
            sin_family: sa_family_t,
            sin_port: in_port_t,
            sin_addr: in_addr,
            sin_zero: [u8; 8],
        }

        struct sockaddr_in6 {
            sin6_family: sa_family_t,
            sin6_port: in_port_t,
            sin6_flowinfo: u32,
            sin6_addr: in6_addr,
            sin6_scope_id: u32,
        }

        struct addrinfo {
            ai_flags: c_int,
            ai_family: c_int,
            ai_socktype: c_int,
            ai_protocol: c_int,
            ai_addrlen: socklen_t,

            #[cfg(target_os = "linux")]
            ai_addr: &mut sockaddr,
            ai_canonname: &mut c_char,

            #[cfg(target_os = "android")]
            ai_addr: &mut sockaddr,
            ai_next: &mut addrinfo,
        }
    }

    #[cfg(not(any(target_os="linux", target_os="android")))]
    {
        struct sockaddr {
            sa_len: u8,
            sa_family: sa_family_t,
            sa_data: [c_char; 14],
        }

        struct sockaddr_storage {
            ss_len: u8,
            ss_family: sa_family_t,
            __ss_pad1: [u8; 6],
            __ss_align: i64,
            __ss_pad2: [u8; 112],
        }

        struct sockaddr_in {
            sin_len: u8,
            sin_family: sa_family_t,
            sin_port: in_port_t,
            sin_addr: in_addr,
            sin_zero: [c_char; 8],
        }

        struct sockaddr_in6 {
            sin6_len: u8,
            sin6_family: sa_family_t,
            sin6_port: in_port_t,
            sin6_flowinfo: u32,
            sin6_addr: in6_addr,
            sin6_scope_id: u32,
        }

        struct addrinfo {
            ai_flags: c_int,
            ai_family: c_int,
            ai_socktype: c_int,
            ai_protocol: c_int,
            ai_addrlen: socklen_t,
            ai_canonname: &mut c_char,
            ai_addr: &mut sockaddr,
            ai_next: &mut addrinfo,
        }
    }

    #[cfg(target_os="linux")]
    {
        struct dirent {
            d_ino: ino_t,
            d_off: off_t,
            d_reclen: c_ushort,
            d_type: c_uchar,
            d_name: [c_char; 256],
        }

        struct dirent64 {
            d_ino: ino64_t,
            d_off: off64_t,
            d_reclen: c_ushort,
            d_type: c_uchar,
            d_name: [c_char; 256],
        }
    }

    #[cfg(target_os="macos")]
    struct dirent {
        d_ino: u64,
        d_seekoff: u64,
        d_reclen: u16,
        d_namlen: u16,
        d_type: u8,
        d_name: [c_char; 1024],
    }

    #[cfg(target_os="android")]
    {
        struct dirent {
            d_ino: u64,
            d_off: i64,
            d_reclen: c_ushort,
            d_type: c_uchar,
            d_name: [c_char; 256],
        }
        struct dirent64 {
            d_ino: u64,
            d_off: i64,
            d_reclen: c_ushort,
            d_type: c_uchar,
            d_name: [c_char; 256],
        }
    }

    struct DIR {} // Opaque

    struct pollfd {
        fd: c_int,
        events: c_short,
        revents: c_short,
    }

    #[cfg(any(target_os="linux"))]
    extern "C" fn getrandom(buf: &mut void, buflen: size_t, flags: c_uint) -> ssize_t;
    extern "C" fn write(fd: c_int, buf: &void, len: size_t) -> ssize_t;
    extern "C" fn read(fd: c_int, buf: &mut void, len: size_t) -> ssize_t;
    extern "C" fn open(path: &c_char, oflag: c_int, mode: mode_t) -> c_int;
    extern "C" fn lseek(fd: c_int, offset: off_t, whence: c_int) -> off_t;

    #[cfg(not(target_os="macos"))]
    extern "C" fn lseek64(fd: c_int, offset: off64_t, whence: c_int) -> off64_t;

    extern "C" fn close(fd: c_int) -> c_int;
    extern "C" fn fsync(fd: c_int) -> c_int;
    extern "C" fn execv(prog: &c_char, argv: &&c_char) -> c_int;
    extern "C" fn execve(prog: &c_char, argv: &&c_char, envp: &&c_char) -> c_int;
    #[cfg(not(target_os="macos"))]
    extern "C" fn execvp(prog: &c_char, argv: &&c_char) -> c_int;
    #[cfg(not(target_os="macos"))]
    extern "C" fn execvpe(prog: &c_char, argv: &&c_char, envp: &&c_char) -> c_int;
    extern "C" fn kill(pid: pid_t, sig: c_int) -> c_int;
    extern "C" fn getpid() -> pid_t;
    extern "C" fn sleep(secs: c_uint) -> c_uint;
    extern "C" fn nanosleep(rqtp: &timespec, rmtp: &mut timespec) -> c_int;
    extern "C" fn fork() -> pid_t;
    extern "C" fn pipe(fds: &mut c_int) -> c_int;

    #[cfg(any(target_os="linux", target_os="android"))]
    extern "C" fn pipe2(fds: &mut c_int, flags: c_int) -> c_int;

    extern "C" fn poll(fds: &mut pollfd, nfds: nfds_t, timeout: c_int) -> c_int;

    extern "C" fn dup2(oldfd: c_int, newfd: c_int) -> c_int;
    extern "C" fn waitpid(pid: pid_t, wstatus: &mut c_int, options: c_int) -> pid_t;

    extern "C" fn clock_getres(clk_id: clockid_t, tp: &mut timespec) -> c_int;
    extern "C" fn clock_gettime(clk_id: clockid_t, tp: &mut timespec) -> c_int;

    extern "C" fn signal(signum: c_int, handler: sighandler_t) -> sighandler_t;

    #[cfg(target_os="macos")]
    extern "C" fn ioctl(fd: c_int, request: c_ulong, ...) -> c_int;
    #[cfg(target_os="android")]
    extern "C" fn ioctl(fd: c_int, request: c_int, ...) -> c_int;
    #[cfg(target_os="linux")]
    extern "C" fn ioctl(fd: c_int, request: c_ulong, ...) -> c_int;

    #[codegen(varargs)]
    extern "C" fn fcntl(fd: c_int, cmd: c_int, ...) -> c_int;

    #[cfg(target_os="linux")]
    {
        extern "C" fn __errno_location() -> &mut c_int;
        extern "C" fn __xpg_strerror_r(errnum: c_int, buf: &mut c_char, buflen: size_t) -> c_int;
        use __xpg_strerror_r as strerror_r;
        use __errno_location as __errno;
    }

    #[cfg(target_os="android")]
    {
        extern "C" fn __errno() -> &mut c_int;
        extern "C" fn strerror_r(errnum: c_int, buf: &mut c_char, buflen: size_t) -> c_int;
    }

    #[cfg(target_os="macos")]
    {
        extern "C" fn __error() -> &mut c_int;
        extern "C" fn strerror_r(errnum: c_int, buf: &mut c_char, buflen: size_t) -> c_int;
        use __error as __errno;
    }

    extern "C" fn socket(domain: c_int, ty: c_int, protocol: c_int) -> c_int;
    extern "C" fn connect(socket: c_int, address: &sockaddr, len: socklen_t) -> c_int;
    extern "C" fn listen(socket: c_int, backlog: c_int) -> c_int;
    extern "C" fn accept(socket: c_int, address: &mut sockaddr, address_len: &mut socklen_t) -> c_int;
    extern "C" fn accept4(
        fd: c_int,
        addr: &mut sockaddr,
        len: &mut socklen_t,
        flg: c_int,
    ) -> c_int;

    extern "C" fn setsockopt(
        socket: c_int,
        level: c_int,
        name: c_int,
        value: &void,
        option_len: socklen_t,
    ) -> c_int;
    extern "C" fn recv(socket: c_int, buf: &mut void, len: size_t, flags: c_int) -> ssize_t;
    extern "C" fn send(socket: c_int, buf: &void, len: size_t, flags: c_int) -> ssize_t;

    extern "C" fn recvfrom(
        socket: c_int,
        buf: &mut void,
        len: size_t,
        flags: c_int,
        addr: &mut sockaddr,
        addrlen: &mut socklen_t,
    ) -> ssize_t;

    extern "C" fn sendto(
        socket: c_int,
        buf: &void,
        len: size_t,
        flags: c_int,
        addr: &sockaddr,
        addrlen: socklen_t,
    ) -> ssize_t;

    extern "C" fn getaddrinfo(
        node: &c_char,
        service: &c_char,
        hints: &addrinfo,
        res: &mut &mut addrinfo,
    ) -> c_int;
    extern "C" fn freeaddrinfo(res: &mut addrinfo);
    extern "C" fn gai_strerror(errcode: c_int) -> &c_char;
    extern "C" fn getpeername(
        socket: c_int,
        address: &mut sockaddr,
        address_len: &mut socklen_t
    ) -> c_int;

    extern "C" fn getsockname(
        socket: c_int,
        address: &mut sockaddr,
        address_len: &mut socklen_t
    ) -> c_int;
    extern "C" fn bind(
        socket: c_int,
        address: &sockaddr,
        address_len: socklen_t
    ) -> c_int;
    extern "C" fn shutdown(socket: c_int, how: c_int) -> c_int;

    #[cfg(target_os="macos")]
    #[link_name("_opendir$INODE64")]
    extern "C" fn opendir(dirname: &c_char) -> &mut DIR;
    #[cfg(not(target_os="macos"))]
    extern "C" fn opendir(dirname: &c_char) -> &mut DIR;

    #[cfg(target_os="macos")]
    #[link_name("_readdir$INODE64")]
    extern "C" fn readdir(dirp: &mut DIR) -> &mut dirent;

    #[cfg(not(target_os="macos"))]
    extern "C" fn readdir(dirp: &mut DIR) -> &mut dirent;
    extern "C" fn closedir(dirp: &mut DIR) -> c_int;

    #[cfg(not(target_os="macos"))]
    extern "C" fn readdir64(dirp: &mut DIR) -> &mut dirent64;

    extern "C" fn mkdir(path: &c_char, mode: mode_t) -> c_int;

    #[cfg(target_os="macos")]
    #[link_name("_stat$INODE64")]
    extern "C" fn stat(path: &c_char, buf: &mut t_stat) -> c_int;
    #[cfg(not(target_os="macos"))]
    extern "C" fn stat(path: &c_char, buf: &mut t_stat) -> c_int;

    #[cfg(not(target_os="macos"))]
    extern "C" fn stat64(path: &c_char, buf: &mut t_stat64) -> c_int;

    #[cfg(target_os="macos")]
    #[link_name("_fstat$INODE64")]
    extern "C" fn fstat(fildes: c_int, buf: &mut t_stat) -> c_int;
    #[cfg(not(target_os="macos"))]
    extern "C" fn fstat(fildes: c_int, buf: &mut t_stat) -> c_int;

    #[cfg(not(target_os="macos"))]
    extern "C" fn fstat64(fildes: c_int, buf: &mut t_stat64) -> c_int;

    extern "C" fn rmdir(path: &c_char) -> c_int;
    extern "C" fn unlink(path: &c_char) -> c_int;

    #[cfg(all(target_os="linux", target_arch = "x86_64"))]
    {
        struct t_stat {
            st_dev: dev_t,
            st_ino: ino_t,
            st_nlink: nlink_t,
            st_mode: mode_t,
            st_uid: uid_t,
            st_gid: gid_t,
            __pad0: c_int,
            st_rdev: dev_t,
            st_size: off_t,
            st_blksize: blksize_t,
            st_blocks: blkcnt_t,
            st_atime: time_t,
            st_atime_nsec: i64,
            st_mtime: time_t,
            st_mtime_nsec: i64,
            st_ctime: time_t,
            st_ctime_nsec: i64,
            __unused: [i64; 3],
        }

        struct t_stat64 {
            st_dev: dev_t,
            st_ino: ino64_t,
            st_nlink: nlink_t,
            st_mode: mode_t,
            st_uid: uid_t,
            st_gid: gid_t,
            __pad0: c_int,
            st_rdev: dev_t,
            st_size: off_t,
            st_blksize: blksize_t,
            st_blocks: blkcnt64_t,
            st_atime: time_t,
            st_atime_nsec: i64,
            st_mtime: time_t,
            st_mtime_nsec: i64,
            st_ctime: time_t,
            st_ctime_nsec: i64,
            __reserved: [i64; 3],
        }
    }

    #[cfg(all(target_os="linux", target_arch = "aarch64"))]
    {
        struct t_stat {
            st_dev: dev_t,
            st_ino: ino_t,
            st_mode: mode_t,
            st_nlink: nlink_t,
            st_uid: uid_t,
            st_gid: gid_t,
            st_rdev: dev_t,
            __pad1: dev_t,
            st_size: off_t,
            st_blksize: blksize_t,
            __pad2: c_int,
            st_blocks: blkcnt_t,
            st_atime: time_t,
            st_atime_nsec: c_long,
            st_mtime: time_t,
            st_mtime_nsec: c_long,
            st_ctime: time_t,
            st_ctime_nsec: c_long,
            __unused: [c_int; 2],
        }

        struct t_stat64 {
            st_dev: dev_t,
            st_ino: ino_t,
            st_mode: mode_t,
            st_nlink: nlink_t,
            st_uid: uid_t,
            st_gid: gid_t,
            st_rdev: dev_t,
            __pad1: dev_t,
            st_size: off64_t,
            st_blksize: blksize_t,
            __pad2: c_int,
            st_blocks: blkcnt64_t,
            st_atime: time_t,
            st_atime_nsec: c_long,
            st_mtime: time_t,
            st_mtime_nsec: c_long,
            st_ctime: time_t,
            st_ctime_nsec: c_long,
            __unused: [c_int; 2],
        }
    }

    #[cfg(all(target_os="android", target_arch = "aarch64"))]
    {
        struct t_stat {
            st_dev: dev_t,
            st_ino: ino_t,
            st_mode: c_uint,
            st_nlink: nlink_t,
            st_uid: uid_t,
            st_gid: gid_t,
            st_rdev: dev_t,
            __pad1: c_ulong,
            st_size: off64_t,
            st_blksize: c_int,
            __pad2: c_int,
            st_blocks: c_long,
            st_atime: time_t,
            st_atime_nsec: c_long,
            st_mtime: time_t,
            st_mtime_nsec: c_long,
            st_ctime: time_t,
            st_ctime_nsec: c_long,
            __unused4: c_uint,
            __unused5: c_uint,
        }

        struct t_stat64 {
            st_dev: dev_t,
            st_ino: ino_t,
            st_mode: c_uint,
            st_nlink: nlink_t,
            st_uid: uid_t,
            st_gid: gid_t,
            st_rdev: dev_t,
            __pad1: c_ulong,
            st_size: off64_t,
            st_blksize: c_int,
            __pad2: c_int,
            st_blocks: c_long,
            st_atime: time_t,
            st_atime_nsec: c_long,
            st_mtime: time_t,
            st_mtime_nsec: c_long,
            st_ctime: time_t,
            st_ctime_nsec: c_long,
            __unused4: c_uint,
            __unused5: c_uint,
        }
    }

    #[cfg(target_os="macos")]
    struct t_stat {
        st_dev: dev_t,
        st_mode: mode_t,
        st_nlink: nlink_t,
        st_ino: ino_t,
        st_uid: uid_t,
        st_gid: gid_t,
        st_rdev: dev_t,
        st_atime: time_t,
        st_atime_nsec: c_long,
        st_mtime: time_t,
        st_mtime_nsec: c_long,
        st_ctime: time_t,
        st_ctime_nsec: c_long,
        st_birthtime: time_t,
        st_birthtime_nsec: c_long,
        st_size: off_t,
        st_blocks: blkcnt_t,
        st_blksize: blksize_t,
        st_flags: u32,
        st_gen: u32,
        st_lspare: i32,
        st_qspare: [i64; 2],
    }


    const EXIT_FAILURE: c_int = 1;
    const EXIT_SUCCESS: c_int = 0;

    const STDIN_FILENO: c_int = 0;
    const STDOUT_FILENO: c_int = 1;
    const STDERR_FILENO: c_int = 2;

    const SIGHUP: c_int = 1;
    const SIGINT: c_int = 2;
    const SIGQUIT: c_int = 3;
    const SIGILL: c_int = 4;
    const SIGABRT: c_int = 6;
    const SIGFPE: c_int = 8;
    const SIGKILL: c_int = 9;
    const SIGSEGV: c_int = 11;
    const SIGPIPE: c_int = 13;
    const SIGALRM: c_int = 14;
    const SIGTERM: c_int = 15;

    const SIG_DFL: sighandler_t = 0;
    const SIG_IGN: sighandler_t = 1;
    const SIG_ERR: sighandler_t = ~0;

    const SEEK_SET: c_int = 0;
    const SEEK_CUR: c_int = 1;
    const SEEK_END: c_int = 2;

    const O_RDONLY: c_int = 0;
    const O_WRONLY: c_int = 1;
    const O_RDWR: c_int = 2;

    #[cfg(any(target_os="linux", target_os="android"))]
    {
        const O_ACCMODE: c_int = 3;
        const O_APPEND: c_int = 1024;
        const O_ASYNC: c_int = 0x2000;
        const O_CLOEXEC: c_int = 0x80000;
        const O_CREAT: c_int = 64;
        const O_DSYNC: c_int = 4096;
        const O_EXCL: c_int = 128;
        const O_NDELAY: c_int = 0x800;
        const O_NOCTTY: c_int = 256;
        const O_NONBLOCK: c_int = 2048;
        const O_RSYNC: c_int = 0x101000;
        const O_SYNC: c_int = 0x101000;
        const O_TRUNC: c_int = 512;
    }

    #[cfg(target_os="macos")]
    {
        const O_ACCMODE: c_int = 0x3;
        const O_APPEND: c_int = 8;
        const O_ASYNC: c_int = 0x40;
        const O_CLOEXEC: c_int = 0x1000000;
        const O_CREAT: c_int = 512;
        const O_DSYNC: c_int = 0x400000;
        const O_EXCL: c_int = 2048;
        const O_NDELAY: c_int = O_NONBLOCK;
        const O_NOCTTY: c_int = 0x20000;
        const O_NONBLOCK: c_int = 0x4;
        const O_SYNC: c_int = 0x80;
        const O_TRUNC: c_int = 1024;
    }

    const CLOCK_REALTIME: clockid_t = 0;
    const CLOCK_MONOTONIC: clockid_t = 1;
    const CLOCK_PROCESS_CPUTIME_ID: clockid_t = 2;
    const CLOCK_THREAD_CPUTIME_ID: clockid_t = 3;
    const CLOCK_MONOTONIC_RAW: clockid_t = 4;
    const CLOCK_REALTIME_COARSE: clockid_t = 5;
    const CLOCK_MONOTONIC_COARSE: clockid_t = 6;
    const CLOCK_BOOTTIME: clockid_t = 7;
    const CLOCK_REALTIME_ALARM: clockid_t = 8;
    const CLOCK_BOOTTIME_ALARM: clockid_t = 9;
    const CLOCK_TAI: clockid_t = 11;

    const SOCK_STREAM: c_int = 1;
    const SOCK_DGRAM: c_int = 2;

    const EAI_BADFLAGS: c_int = -1;
    const EAI_NONAME: c_int = -2;
    const EAI_AGAIN: c_int = -3;
    const EAI_FAIL: c_int = -4;
    const EAI_NODATA: c_int = -5;
    const EAI_FAMILY: c_int = -6;
    const EAI_SOCKTYPE: c_int = -7;
    const EAI_SERVICE: c_int = -8;
    const EAI_MEMORY: c_int = -10;
    const EAI_SYSTEM: c_int = -11;
    const EAI_OVERFLOW: c_int = -12;

    const EPERM: c_int = 1;
    const ENOENT: c_int = 2;
    const ESRCH: c_int = 3;
    const EINTR: c_int = 4;
    const EIO: c_int = 5;
    const ENXIO: c_int = 6;
    const E2BIG: c_int = 7;
    const ENOEXEC: c_int = 8;
    const EBADF: c_int = 9;
    const ECHILD: c_int = 10;
    const EAGAIN: c_int = 11;
    const ENOMEM: c_int = 12;
    const EACCES: c_int = 13;
    const EFAULT: c_int = 14;
    const ENOTBLK: c_int = 15;
    const EBUSY: c_int = 16;
    const EEXIST: c_int = 17;
    const EXDEV: c_int = 18;
    const ENODEV: c_int = 19;
    const ENOTDIR: c_int = 20;
    const EISDIR: c_int = 21;
    const EINVAL: c_int = 22;
    const ENFILE: c_int = 23;
    const EMFILE: c_int = 24;
    const ENOTTY: c_int = 25;
    const ETXTBSY: c_int = 26;
    const EFBIG: c_int = 27;
    const ENOSPC: c_int = 28;
    const ESPIPE: c_int = 29;
    const EROFS: c_int = 30;
    const EMLINK: c_int = 31;
    const EPIPE: c_int = 32;
    const EDOM: c_int = 33;
    const ERANGE: c_int = 34;
    #[cfg(any(target_os="linux", target_os="android"))]
    const EWOULDBLOCK: c_int = EAGAIN;
    #[cfg(target_os="macos")]
    const EWOULDBLOCK: c_int = 35;

    #[cfg(any(target_os="linux", target_os="android"))]
    const ETIMEDOUT: c_int = 110;
    #[cfg(target_os="macos")]
    const ETIMEDOUT: c_int = 60;

    const POLLIN: c_short = 0x1;
    const POLLPRI: c_short = 0x2;
    const POLLOUT: c_short = 0x4;
    const POLLERR: c_short = 0x8;
    const POLLHUP: c_short = 0x10;
    const POLLNVAL: c_short = 0x20;
    const POLLRDNORM: c_short = 0x040;
    const POLLWRNORM: c_short = 0x004;
    const POLLRDBAND: c_short = 0x080;
    const POLLWRBAND: c_short = 0x100;

    const MSG_OOB: c_int = 1;
    const MSG_PEEK: c_int = 2;
    const MSG_DONTROUTE: c_int = 4;
    const MSG_CTRUNC: c_int = 8;
    const MSG_TRUNC: c_int = 0x20;
    const MSG_DONTWAIT: c_int = 0x40;
    const MSG_EOR: c_int = 0x80;
    const MSG_WAITALL: c_int = 0x100;
    const MSG_FIN: c_int = 0x200;
    const MSG_SYN: c_int = 0x400;
    const MSG_CONFIRM: c_int = 0x800;
    const MSG_RST: c_int = 0x1000;
    const MSG_ERRQUEUE: c_int = 0x2000;
    const MSG_NOSIGNAL: c_int = 0x4000;
    const MSG_MORE: c_int = 0x8000;
    const MSG_WAITFORONE: c_int = 0x10000;
    const MSG_FASTOPEN: c_int = 0x20000000;
    const MSG_CMSG_CLOEXEC: c_int = 0x40000000;

    const F_DUPFD: c_int = 0;
    const F_GETFD: c_int = 1;
    const F_SETFD: c_int = 2;
    const F_GETFL: c_int = 3;
    const F_SETFL: c_int = 4;

    const FD_CLOEXEC: c_int = 0x1;

    #[cfg(target_os = "macos")]
    {
        const FIONBIO: c_ulong = 0x8004667e;
        const FIOCLEX: c_ulong = 0x20006601;
    }

    #[cfg(target_os = "android")]
    {
        const FIONBIO: c_int = 0x5421;
        const FIOCLEX: c_int = 0x5451;
    }

    #[cfg(target_os = "linux")]
    {
        const FIONBIO: c_ulong = 0x5421;
        const FIOCLEX: c_ulong = 0x5451;
    }

    #[cfg(any(target_os = "linux", target_os = "android"))]
    {
        const AF_UNSPEC: c_int = 0;
        const AF_UNIX: c_int = 1;
        const AF_LOCAL: c_int = 1;
        const AF_INET: c_int = 2;
        const AF_AX25: c_int = 3;
        const AF_IPX: c_int = 4;
        const AF_APPLETALK: c_int = 5;
        const AF_NETROM: c_int = 6;
        const AF_BRIDGE: c_int = 7;
        const AF_ATMPVC: c_int = 8;
        const AF_X25: c_int = 9;
        const AF_INET6: c_int = 10;
        const AF_ROSE: c_int = 11;
        const AF_DECnet: c_int = 12;
        const AF_NETBEUI: c_int = 13;
        const AF_SECURITY: c_int = 14;
        const AF_KEY: c_int = 15;
        const AF_NETLINK: c_int = 16;
        const AF_ROUTE: c_int = AF_NETLINK;
        const AF_PACKET: c_int = 17;
        const AF_ASH: c_int = 18;
        const AF_ECONET: c_int = 19;
        const AF_ATMSVC: c_int = 20;
        const AF_RDS: c_int = 21;
        const AF_SNA: c_int = 22;
        const AF_IRDA: c_int = 23;
        const AF_PPPOX: c_int = 24;
        const AF_WANPIPE: c_int = 25;
        const AF_LLC: c_int = 26;
        const AF_CAN: c_int = 29;
        const AF_TIPC: c_int = 30;
        const AF_BLUETOOTH: c_int = 31;
        const AF_IUCV: c_int = 32;
        const AF_RXRPC: c_int = 33;
        const AF_ISDN: c_int = 34;
        const AF_PHONET: c_int = 35;
        const AF_IEEE802154: c_int = 36;
        const AF_CAIF: c_int = 37;
        const AF_ALG: c_int = 38;
    }

    #[cfg(not(any(target_os = "linux", target_os = "android")))]
    {
        const AF_UNSPEC: c_int = 0;
        const AF_LOCAL: c_int = 1;
        const AF_UNIX: c_int = AF_LOCAL;
        const AF_INET: c_int = 2;
        const AF_IMPLINK: c_int = 3;
        const AF_PUP: c_int = 4;
        const AF_CHAOS: c_int = 5;
        const AF_NS: c_int = 6;
        const AF_ISO: c_int = 7;
        const AF_OSI: c_int = AF_ISO;
        const AF_ECMA: c_int = 8;
        const AF_DATAKIT: c_int = 9;
        const AF_CCITT: c_int = 10;
        const AF_SNA: c_int = 11;
        const AF_DECnet: c_int = 12;
        const AF_DLI: c_int = 13;
        const AF_LAT: c_int = 14;
        const AF_HYLINK: c_int = 15;
        const AF_APPLETALK: c_int = 16;
        const AF_ROUTE: c_int = 17;
        const AF_LINK: c_int = 18;
        const pseudo_AF_XTP: c_int = 19;
        const AF_COIP: c_int = 20;
        const AF_CNT: c_int = 21;
        const pseudo_AF_RTIP: c_int = 22;
        const AF_IPX: c_int = 23;
        const AF_SIP: c_int = 24;
        const pseudo_AF_PIP: c_int = 25;
        const AF_ISDN: c_int = 28;
        const AF_E164: c_int = AF_ISDN;
        const pseudo_AF_KEY: c_int = 29;
        const AF_INET6: c_int = 30;
        const AF_NATM: c_int = 31;
        const AF_SYSTEM: c_int = 32;
        const AF_NETBIOS: c_int = 33;
        const AF_PPP: c_int = 34;
        const pseudo_AF_HDRCMPLT: c_int = 35;
        const AF_SYS_CONTROL: c_int = 2;
    }

    const SHUT_RD: c_int = 0;
    const SHUT_WR: c_int = 1;
    const SHUT_RDWR: c_int = 2;

    const DT_UNKNOWN: u8 = 0u8;
    const DT_FIFO: u8 = 1;
    const DT_CHR: u8 = 2;
    const DT_DIR: u8 = 4;
    const DT_BLK: u8 = 6;
    const DT_REG: u8 = 8;
    const DT_LNK: u8 = 10;
    const DT_SOCK: u8 = 12;

    const S_IFIFO: mode_t = 4096;
    const S_IFCHR: mode_t = 8192;
    const S_IFBLK: mode_t = 24576;
    const S_IFDIR: mode_t = 16384;
    const S_IFREG: mode_t = 32768;
    const S_IFLNK: mode_t = 40960;
    const S_IFSOCK: mode_t = 49152;

    const S_IFMT: mode_t = 61440;
}


#[cfg(target_os = "android")] {
    type pthread_t = c_long;
    type pthread_mutexattr_t = c_long;
    type pthread_rwlockattr_t = c_long;
    type pthread_barrierattr_t = c_int;
    type pthread_condattr_t = c_long;

    #[cfg(target_pointer_width = "32")]
    {
        struct pthread_attr_t {
            flags: u32,
            stack_base: &mut void,
            stack_size: size_t,
            guard_size: size_t,
            sched_policy: i32,
            sched_priority: i32,
        }

        struct pthread_mutex_t { value: c_int }

        struct pthread_cond_t { value: c_int }

        struct pthread_rwlock_t {
            lock: pthread_mutex_t,
            cond: pthread_cond_t,
            numLocks: c_int,
            writerThreadId: c_int,
            pendingReaders: c_int,
            pendingWriters: c_int,
            attr: i32,
            __reserved: [c_char; 12],
        }
    }

    #[cfg(target_pointer_width = "64")]
    {
        struct pthread_attr_t {
            flags: u32,
            stack_base: &mut void,
            stack_size: size_t,
            guard_size: size_t,
            sched_policy: i32,
            sched_priority: i32,
        }

        struct pthread_mutex_t {
            value: c_int,
            __reserved: [c_char; 36],
        }

        struct pthread_cond_t {
            value: c_int,
            __reserved: [c_char; 44],
        }

        struct pthread_rwlock_t {
            numLocks: c_int,
            writerThreadId: c_int,
            pendingReaders: c_int,
            pendingWriters: c_int,
            attr: i32,
            __reserved: [c_char; 36],
        }
    }
}

#[cfg(target_os = "linux")] {
    type pthread_t = c_ulong;

    #[cfg(target_arch = "aarch64")]
    struct pthread_attr_t {
        __size: [usize; 8]
    }

    #[cfg(any(target_arch = "x86", target_arch = "arm"))]
    struct pthread_attr_t {
        __size: [u32; 9]
    }

    #[cfg(target_arch = "x86_64")]
    struct pthread_attr_t {
        #[cfg(target_pointer_width = "32")]
        __size: [u32; 8],
        #[cfg(target_pointer_width = "64")]
        __size: [u64; 7]
    }

    type __inner_pthread_rwlockattr_t = [u8; 8];
    type __inner_pthread_cond_t = [u8; 48];

    #[cfg(all(target_arch = "aarch64", target_pointer_width = "64"))]
    {
        type __inner_pthread_condattr_t = [u8; 8];
        type __inner_pthread_mutexattr_t = [u8; 8];
        type __inner_pthread_mutex_t = [u8; 48];
        type __inner_pthread_rwlock_t = [u8; 56];
    }

    #[cfg(target_arch = "x86_64")]
    {
        #[cfg(target_pointer_width = "64")] {
            type __inner_pthread_condattr_t = [u8; 4];
            type __inner_pthread_mutexattr_t = [u8; 4];
            type __inner_pthread_mutex_t = [u8; 40];
            type __inner_pthread_rwlock_t = [u8; 56];
        }

        #[cfg(target_pointer_width = "32")] {
            type __inner_pthread_condattr_t = [u8; 4];
            type __inner_pthread_mutexattr_t = [u8; 4];
            type __inner_pthread_mutex_t = [u8; 32];
            type __inner_pthread_rwlock_t = [u8; 44];
        }
    }

    #[cfg(any(target_arch = "x86", target_arch = "arm"))] {
        type __inner_pthread_condattr_t = [u8; 4];
        type __inner_pthread_mutexattr_t = [u8; 4];
        type __inner_pthread_mutex_t = [u8; 24];
        type __inner_pthread_rwlock_t = [u8; 32];
    }

    #[cfg(target_arch = "x86")]
    #[align(4)]
    struct pthread_cond_t {
        size: __inner_pthread_cond_t,
    }

    #[cfg(not(target_arch = "x86"))]
    #[align(8)]
    struct pthread_cond_t {
        size: __inner_pthread_cond_t,
    }

    #[cfg(any(target_pointer_width = "64", not(any(target_arch = "arm", target_arch = "x86_64", target_arch = "x86")))]
    #[align(8)]
    struct pthread_mutex_t {
        size: __inner_pthread_mutex_t,
    }

    #[cfg(all(target_pointer_width = "32", any(target_arch = "arm", target_arch = "x86_64", target_arch = "x86"))]
    #[align(4)]
    struct pthread_mutex_t {
        size: __inner_pthread_mutex_t,
    }

    #[cfg(any(target_pointer_width = "64", not(any(target_arch = "arm", target_arch = "x86_64", target_arch = "x86")))]
    #[align(8)]
    struct pthread_rwlock_t {
        size: __inner_pthread_rwlock_t,
    }

    #[cfg(all(target_pointer_width = "32", any(target_arch = "arm", target_arch = "x86_64", target_arch = "x86"))]
    #[align(4)]
    struct pthread_rwlock_t {
        size: __inner_pthread_rwlock_t,
    }

    #[cfg(any(target_pointer_width = "32", target_arch = "x86_64", target_arch = "aarch64"))]
    #[align(4)]
    struct pthread_mutexattr_t {
        size: __inner_pthread_mutexattr_t,
    }

    #[cfg(not(any(target_pointer_width = "32", target_arch = "x86_64", target_arch = "aarch64")))]
    #[align(8)]
    struct pthread_mutexattr_t {
        size: __inner_pthread_mutexattr_t,
    }

    #[align(4)]
    struct pthread_condattr_t {
        size: __inner_pthread_condattr_t,
    }

    #[cfg(target_pointer_width = "32")]
    #[align(4)]
    struct pthread_rwlockattr_t {
        size: __inner_pthread_rwlockattr_t,
    }

    #[cfg(target_pointer_width = "64")]
    #[align(8)]
    struct pthread_rwlockattr_t {
        size: __inner_pthread_rwlockattr_t,
    }
}

#[cfg(target_os = "macos")] {
    type pthread_t = uintptr_t;

    #[cfg(target_pointer_width = "32")]
    struct pthread_attr_t {
        __sig: c_long,
        __opaque: [c_char; 36]
    }

    #[cfg(target_pointer_width = "64")]
    struct pthread_attr_t {
        __sig: c_long,
        __opaque: [c_char; 56]
    }

    struct pthread_rwlock_t {
        __sig: c_long,
        __opaque: [u8; 92],
    }

    struct pthread_mutex_t {
        __sig: c_long,
        __opaque: [u8; 56],
    }

    struct pthread_cond_t {
        __sig: c_long,
        __opaque: [u8; 40],
    }

    struct pthread_mutexattr_t {
        __sig: c_long,
        __opaque: [u8; 8],
    }

    struct pthread_condattr_t {
        __sig: c_long,
        __opaque: [u8;  8],
    }

    struct pthread_rwlockattr_t {
        __sig: c_long,
        __opaque: [u8; 16],
    }
}

extern "C" fn pthread_create(
    native: &mut pthread_t,
    attr: &pthread_attr_t,
    f: fn(&mut void) -> &mut void,
    value: &mut void,
) -> c_int;

extern "C" fn pthread_join(native: pthread_t, value: &mut &mut void) -> c_int;
extern "C" fn pthread_exit(value: &mut void) -> !;
extern "C" fn pthread_kill(thread: pthread_t, sig: c_int) -> c_int;
extern "C" fn pthread_self() -> pthread_t;
extern "C" fn pthread_detach(thread: pthread_t) -> c_int;

extern "C" fn pthread_attr_init(attr: &mut pthread_attr_t) -> c_int;
extern "C" fn pthread_attr_destroy(attr: &mut pthread_attr_t) -> c_int;
extern "C" fn pthread_attr_setstacksize(attr: &mut pthread_attr_t, stack_size: size_t) -> c_int;
extern "C" fn pthread_attr_setdetachstate(attr: &mut pthread_attr_t, state: c_int) -> c_int;

extern "C" fn pthread_mutex_lock(lock: &mut pthread_mutex_t) -> c_int;
extern "C" fn pthread_mutex_trylock(lock: &mut pthread_mutex_t) -> c_int;
extern "C" fn pthread_mutex_unlock(lock: &mut pthread_mutex_t) -> c_int;

extern "C" fn pthread_rwlock_rdlock(lock: &mut pthread_rwlock_t) -> c_int;
extern "C" fn pthread_rwlock_tryrdlock(lock: &mut pthread_rwlock_t) -> c_int;
extern "C" fn pthread_rwlock_wrlock(lock: &mut pthread_rwlock_t) -> c_int;
extern "C" fn pthread_rwlock_trywrlock(lock: &mut pthread_rwlock_t) -> c_int;
extern "C" fn pthread_rwlock_unlock(lock: &mut pthread_rwlock_t) -> c_int;

extern "C" fn pthread_cond_wait(cond: &mut pthread_cond_t, lock: &mut pthread_mutex_t) -> c_int;
extern "C" fn pthread_cond_timedwait(cond: &mut pthread_cond_t, lock: &mut pthread_mutex_t, abstime: &timespec) -> c_int;
extern "C" fn pthread_cond_signal(cond: &mut pthread_cond_t) -> c_int;
extern "C" fn pthread_cond_broadcast(cond: &mut pthread_cond_t) -> c_int;

extern "C" fn sched_yield() -> c_int;

#[cfg(target_os = "macos")]
{
    const PTHREAD_CREATE_JOINABLE: c_int = 1;
    const PTHREAD_CREATE_DETACHED: c_int = 2;
}

#[cfg(not(target_os = "macos"))]
{
    const PTHREAD_CREATE_JOINABLE: c_int = 0;
    const PTHREAD_CREATE_DETACHED: c_int = 1;
}


#[inline]
fn pthread_mutex_initializer() -> pthread_mutex_t {
    let ret = std::mem::zeroed::<pthread_mutex_t>();
    #[cfg(target_os = "macos")]
    ret.__sig = 0x32AAABA7;
    ret
}

#[inline]
fn pthread_cond_initializer() -> pthread_cond_t {
    let ret = std::mem::zeroed::<pthread_cond_t>();
    #[cfg(target_os = "macos")]
    ret.__sig = 0x3CB0B1BB;
    ret
}

#[inline]
fn pthread_rwlock_initializer() -> pthread_rwlock_t {
    let ret = std::mem::zeroed::<pthread_rwlock_t>();
    #[cfg(target_os = "macos")]
    ret.__sig = 0x2DA8B3B4;
    ret
}

// Futex support
#[cfg(any(target_os = "android", target_os = "linux"))]
{
    extern "C" fn syscall(num: c_long, ...) -> c_long;

    const FUTEX_WAIT: c_int = 0;
    const FUTEX_WAKE: c_int = 1;
    const FUTEX_FD: c_int = 2;
    const FUTEX_REQUEUE: c_int = 3;
    const FUTEX_CMP_REQUEUE: c_int = 4;
    const FUTEX_WAKE_OP: c_int = 5;
    const FUTEX_LOCK_PI: c_int = 6;
    const FUTEX_UNLOCK_PI: c_int = 7;
    const FUTEX_TRYLOCK_PI: c_int = 8;
    const FUTEX_WAIT_BITSET: c_int = 9;
    const FUTEX_WAKE_BITSET: c_int = 10;
    const FUTEX_WAIT_REQUEUE_PI: c_int = 11;
    const FUTEX_CMP_REQUEUE_PI: c_int = 12;
    const FUTEX_PRIVATE_FLAG: c_int = 128;
    const FUTEX_CLOCK_REALTIME: c_int = 256;
    const FUTEX_CMD_MASK: c_int = ~(FUTEX_PRIVATE_FLAG | FUTEX_CLOCK_REALTIME);

    #[cfg(any(target_arch = "arm", target_arch = "x86"))]
    const SYS_futex: c_long = 240;

    #[cfg(target_arch = "aarch64")]
    const SYS_futex: c_long = 98;

    #[cfg(target_arch = "x86_64")]
    const SYS_futex: c_long = 202;
}


// FFI bindings to the standard C math library.

extern "C" fn acos(x: f64) -> f64;
extern "C" fn acosf(x: f32) -> f32;
extern "C" fn acosh(x: f64) -> f64;
extern "C" fn acoshf(x: f32) -> f32;
extern "C" fn asin(x: f64) -> f64;
extern "C" fn asinf(x: f32) -> f32;
extern "C" fn asinh(x: f64) -> f64;
extern "C" fn asinhf(x: f32) -> f32;
extern "C" fn atan(x: f64) -> f64;
extern "C" fn atan2(y: f64, x: f64) -> f64;
extern "C" fn atan2f(y: f32, x: f32) -> f32;
extern "C" fn atanf(x: f32) -> f32;
extern "C" fn atanh(x: f64) -> f64;
extern "C" fn atanhf(x: f32) -> f32;
extern "C" fn cbrt(x: f64) -> f64;
extern "C" fn cbrtf(x: f32) -> f32;
extern "C" fn ceil(x: f64) -> f64;
extern "C" fn ceilf(x: f32) -> f32;
extern "C" fn copysign(x: f64, y: f64) -> f64;
extern "C" fn copysignf(x: f32, y: f32) -> f32;
extern "C" fn cos(x: f64) -> f64;
extern "C" fn cosf(x: f32) -> f32;
extern "C" fn cosh(x: f64) -> f64;
extern "C" fn coshf(x: f32) -> f32;
extern "C" fn erf(x: f64) -> f64;
extern "C" fn erfc(x: f64) -> f64;
extern "C" fn erff(x: f32) -> f32;
extern "C" fn erfcf(x: f32) -> f32;
extern "C" fn exp(x: f64) -> f64;
extern "C" fn expf(x: f32) -> f32;
extern "C" fn expm1(x: f64) -> f64;
extern "C" fn expm1f(x: f32) -> f32;
extern "C" fn fabs(x: f64) -> f64;
extern "C" fn fabsf(x: f32) -> f32;
extern "C" fn fdim(x: f64, y: f64) -> f64;
extern "C" fn fdimf(x: f32, y: f32) -> f32;
extern "C" fn floor(x: f64) -> f64;
extern "C" fn floorf(x: f32) -> f32;
extern "C" fn fma(x: f64, y: f64, z: f64) -> f64;
extern "C" fn fmaf(x: f32, y: f32, z: f32) -> f32;
extern "C" fn fmax(x: f64, y: f64) -> f64;
extern "C" fn fmaxf(x: f32, y: f32) -> f32;
extern "C" fn fmin(x: f64, y: f64) -> f64;
extern "C" fn fminf(x: f32, y: f32) -> f32;
extern "C" fn fmod(x: f64, y: f64) -> f64;
extern "C" fn fmodf(x: f32, y: f32) -> f32;
extern "C" fn frexp(x: f64, exp: &mut i32) -> f64;
extern "C" fn frexpf(x: f32, exp: &mut i32) -> f32;
extern "C" fn hypot(x: f64, y: f64) -> f64;
extern "C" fn hypotf(x: f32, y: f32) -> f32;
extern "C" fn ilogb(x: f64) -> i32;
extern "C" fn ilogbf(x: f32) -> i32;
extern "C" fn ldexp(x: f64, n: i32) -> f64;
extern "C" fn ldexpf(x: f32, n: i32) -> f32;
extern "C" fn lgamma(x: f64) -> f64;
extern "C" fn lgammaf(x: f32) -> f32;
extern "C" fn log(x: f64) -> f64;
extern "C" fn log10(x: f64) -> f64;
extern "C" fn log10f(x: f32) -> f32;
extern "C" fn log1p(x: f64) -> f64;
extern "C" fn log1pf(x: f32) -> f32;
extern "C" fn log2(x: f64) -> f64;
extern "C" fn log2f(x: f32) -> f32;
extern "C" fn logf(x: f32) -> f32;
extern "C" fn modf(x: f64, iptr: &mut f64) -> f64;
extern "C" fn modff(x: f32, iptr: &mut f32) -> f32;
extern "C" fn nextafter(x: f64, y: f64) -> f64;
extern "C" fn nextafterf(x: f32, y: f32) -> f32;
extern "C" fn pow(x: f64, y: f64) -> f64;
extern "C" fn powf(x: f32, y: f32) -> f32;
extern "C" fn remainder(x: f64, y: f64) -> f64;
extern "C" fn remainderf(x: f32, y: f32) -> f32;
extern "C" fn remquo(x: f64, y: f64, quo: &mut i32) -> f64;
extern "C" fn remquof(x: f32, y: f32, quo: &mut i32) -> f32;
extern "C" fn round(x: f64) -> f64;
extern "C" fn roundf(x: f32) -> f32;
extern "C" fn scalbn(x: f64, n: i32) -> f64;
extern "C" fn scalbnf(x: f32, n: i32) -> f32;
extern "C" fn sin(x: f64) -> f64;
extern "C" fn sinf(x: f32) -> f32;
extern "C" fn sinh(x: f64) -> f64;
extern "C" fn sinhf(x: f32) -> f32;
extern "C" fn sqrt(x: f64) -> f64;
extern "C" fn sqrtf(x: f32) -> f32;
extern "C" fn tan(x: f64) -> f64;
extern "C" fn tanf(x: f32) -> f32;
extern "C" fn tanh(x: f64) -> f64;
extern "C" fn tanhf(x: f32) -> f32;
extern "C" fn tgamma(x: f64) -> f64;
extern "C" fn tgammaf(x: f32) -> f32;
extern "C" fn trunc(x: f64) -> f64;
extern "C" fn truncf(x: f32) -> f32;
