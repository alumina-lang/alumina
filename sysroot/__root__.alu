//! #! Alumina programming language
//!
//! Welcome to the Alumina programming language! Alumina is an  imperative, general-purpose,
//! statically typed, compiled system programming language. It is heavily inspired by Rust, but
//! it keeps C-style manual memory management and memory unsafety.
//!
//! ```bare
//! fn main() {
//!     println!("Hello, world!");
//! }
//! ```
//!
//! See [Alumina GitHub page](https://github.com/tibordp/alumina) and
//! [an online compiler playground](https://play.alumina-lang.net) to get started with Alumina.
//!
//! # Standard library structure
//! This is the root module (`::`) of the standard library, all the code contained in these
//! modules is always available to programs and libraries written in Alumina. It consists of
//! [std], which is the bulk of the library and a couple of auxillary modules, such as [libc] for
//! bindings to the C standard library and [test] for the built-in unit test runner.
//!
//! It is important to understand that the notion of an Alumina "library" is not very precise.
//! The compilation unit is always the whole program, including the user code, the standard library.
//! and any external libraries. In other words, modules are just namespaces.
//!
//! This means that the modules do not have to form a directed graph and can freely depend
//! on one another.
//!
//! # About the documentation
//! The documentation is generated from the comments in the source code using the [alumina-doc]
//! (https://github.com/tibordp/alumina/tree/master/tools/alumina-doc) tool.

#[cfg(not(no_prelude))]
use std::prelude::*;
