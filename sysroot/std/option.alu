//! Optional values

/// Extract the value or short-circuit the calling function.
///
/// When expression is suffixed with `?`, this is de-sugared to an invocation of `try` macro on the
/// expression.
///
/// Expands to the following expression
/// ```notest
/// if $.is_some {
///     $.inner
/// } else {
///     return Option::none()
/// }
/// ```
///
/// See also [std::result::try] for [std::result::Result].
///
/// ## Example
/// ```
/// fn maybe_sum(maybe_a: Option<i32>, maybe_b: Option<i32>) -> Option<i32> {
///     use std::option::try;
///
///     let a = maybe_a?; // `return Option::none()` when `a` is empty.
///     let b = maybe_b?; // `return Option::none()` when `a` is empty.
///
///     Option::some(a + b)
/// }
/// ```
macro try($opt) {
    let opt = $opt;
    if opt.is_some {
        opt.inner
    } else {
        return Option::none()
    }
}

/// Optional value
///
/// Optional values can either contain a value or they can be empty
/// ## Example
/// ```
/// fn divide(a: i32, b: i32) -> Option<i32> {
///     if b == 0 {
///         Option::none()
///     } else {
///         Option::some(a / b)
///     }
/// }
///
/// assert_eq!(divide(10, 5), Option::some(2));
/// assert_eq!(divide(10, 0), Option::none());
/// ```
struct Option<T> {
    is_some: bool,
    inner: T
}

impl Option<T> {
    /// Create a populated `Option` value
    #[force_inline]
    fn some(inner: T) -> Option<T> {
        Option::<T> {
            is_some: true,
            inner: inner
        }
    }

    /// Create an empty `Option` value
    #[force_inline]
    fn none() -> Option<T> {
        Option::<T> {
            is_some: false,
            inner: mem::uninitialized()
        }
    }

    /// Convert the option into a [std::result::Result].
    ///
    /// If the option is empty, the `err` value will be used for the error variant.
    fn as_result<E>(self: Option<T>, err: E) -> result::Result<T, E> {
        if self.is_some {
            result::Result::ok(self.inner)
        } else {
            result::Result::err(err)
        }
    }

    /// Returns a value, if present, panic otherwise.
    fn unwrap(self: Option<T>) -> T {
        if self.is_some {
            self.inner
        } else {
            panic!("unwrap on a none value")
        }
    }

    /// Returns a value, if present, otherwise return a default value.
    fn unwrap_or(self: Option<T>, val: T) -> T {
        if self.is_some {
            self.inner
        } else {
            val
        }
    }

    /// Returns a value, if present, otherwise invoke func to get the default.
    fn unwrap_or_else<F: builtins::Callable<(), T>>(self: Option<T>, func: F) -> T {
        if self.is_some {
            self.inner
        } else {
            func()
        }
    }

    /// Transform the value inside the `Option` by calling the provided function.
    ///
    /// If the value is none, function is not called.
    ///
    /// ## Example
    /// ```
    /// let a = Option::some(42).map(|v: i32| -> i32 { v + 1 });
    /// let b = Option::none::<i32>().map(|v: i32| -> i32 { v + 1 });
    ///
    /// assert_eq!(a, Option::some(43));
    /// assert_eq!(b, Option::none());
    /// ```
    fn map<Tm, F: builtins::Callable<(T), Tm>>(self: Option<T>, func: F) -> Option<Tm> {
        if self.is_some {
            Option::some(func(self.inner))
        } else {
            Option::none()
        }
    }

    /// Transform the value inside the `Option` by calling the provided function.
    ///
    /// If the value is none, function is not called.
    ///
    /// ## Example
    /// ```
    /// let a = Option::some(42)
    ///     .and_then(|v: i32| -> Option<i32> {
    ///         if v == 0 {
    ///             Option::none()
    ///         } else {
    ///             Option::some(v + 1)
    ///         }
    ///     });
    ///
    /// assert_eq!(a, Option::some(43));
    /// ```
    fn and_then<Tm, F: builtins::Callable<(T), Option<Tm>>>(self: Option<T>, func: F) -> Option<Tm> {
        if self.is_some {
            func(self.inner)
        } else {
            Option::none()
        }
    }

    /// If `self` is populated, return it, otherwise return `other`
    fn or(self: Option<T>, other: Option<T>) -> Option<T> {
        if self.is_some {
            self
        } else {
            other
        }
    }

    /// Returns pointer to inner or a null pointer if not present.
    fn as_ptr(self: &Option<T>) -> &T {
        if self.is_some {
            &self.inner
        } else {
            null as &T
        }
    }

    /// Flattens a nested `Option` into a single `Option`.
    fn flatten(self: Option<Option<T>>) -> Option<T> {
        if !self.is_some {
            Option::none()
        } else {
            self.inner
        }
    }

    /// @ iter::Iterable::iter
    fn iter(self: &Option<T>) -> iter::OnceIterator<T> {
        iter::OnceIterator { value: *self }
    }

    /// @ mem::Movable::move
    fn move(self: &mut Option<T>) -> Option<T> {
        std::mem::replace(self, Option::none())
    }
}

impl Option {
    use std::cmp::{Equatable, Comparable, Ordering};
    use std::fmt::{write, Formatter, Formattable};
    use std::hash::{Hashable, Hasher};
    use std::mem::{Freeable, Movable};

    /// Convert `Option<Result<T, E>>` to `Result<Option<T>, E>`
    fn transpose<T, E>(self: Option<Result<T, E>>) -> Result<Option<T>, E> {
        if self.is_some {
            if self.inner.is_ok {
                Result::ok(Option::some(self.inner.inner.ok))
            } else {
                Result::err(self.inner.inner.err)
            }
        } else {
            Result::ok(Option::none())
        }
    }

    /// @ std::hash::Hashable::hash
    #[inline]
    fn hash<T: Hashable<T, H>, H: Hasher<H>>(self: &Option<T>, hasher: &mut H) {
        if self.is_some {
            self.inner.hash(hasher);
        }
    }

    /// @ cmp::Equatable::equals
    #[inline]
    fn equals<T: Equatable<T>>(lhs: &Option<T>, rhs: &Option<T>) -> bool {
        if lhs.is_some {
            if rhs.is_some {
                lhs.inner.equals(&rhs.inner)
            } else {
                false
            }
        } else {
            !rhs.is_some
        }
    }

    /// @ cmp::Comparable::compare
    #[inline]
    fn compare<T: Comparable<T>>(lhs: &Option<T>, rhs: &Option<T>) -> Ordering {
        if lhs.is_some {
            if rhs.is_some {
                lhs.inner.compare(&rhs.inner)
            } else {
                Ordering::Greater
            }
        } else {
            Ordering::Less
        }
    }

    /// @ fmt::Formattable::fmt
    fn fmt<T: Formattable<T, F>, F: Formatter<F>>(self: &Option<T>, formatter: &mut F) -> fmt::Result {
        if self.is_some {
            write!(formatter, "some({})", self.inner)
        } else {
            write!(formatter, "none")
        }
    }

    /// @ mem::Freeable::free
    fn free<T: Freeable<T>>(self: &mut Option<T>) {
        if self.is_some {
            self.inner.free();
        }
    }

    mixin<T: Equatable<T>> Equatable<Option<T>;
    mixin<T: Comparable<T>> Comparable<Option<T>;
}

#[cfg(all(test, test_std))]
mod tests {
    static BUF: [u8; 1024];

    macro fmt($args...) {
        fmt::format_in!(&BUF, $args...).unwrap()
    }

    #[test]
    fn option_ok() {
        let opt = Option::some(42);
        assert!(opt.is_some);
        assert_eq!(opt.inner, 42);
    }

    #[test]
    fn option_none() {
        let opt = Option::none::<i32>();
        assert!(!opt.is_some);
    }

    #[test]
    fn option_equals() {
        let opt1 = Option::some(42);
        let opt2 = Option::some(42);
        let opt3 = Option::some(43);
        assert!(opt1.equals(&opt2));
        assert!(!opt1.equals(&opt3));
    }

    #[test]
    fn option_compare() {
        use cmp::Ordering;

        let opt1 = Option::some(42);
        let opt2 = Option::some(42);
        let opt3 = Option::some(43);
        assert!(opt1.compare(&opt2) == Ordering::Equal);
        assert!(opt1.compare(&opt3) == Ordering::Less);
    }

    #[test]
    fn option_fmt() {

        let opt1 = Option::some(42);
        let opt2 = Option::none::<i32>();
        assert!(fmt!("{}", opt1) == "some(42)");
        assert!(fmt!("{}", opt2) == "none");
    }


    #[test]
    fn option_iter() {
        let opt1 = Option::some(42);
        let opt2 = Option::none::<i32>();

        let iter = opt1.iter();
        assert!(iter.next() == opt1);
        assert!(iter.next() == opt2);
    }

    #[test]
    fn option_as_result() {
        let opt1 = Option::some(42);
        let opt2 = Option::none::<i32>();

        assert!(opt1.as_result(0) == result::Result::ok(42));
        assert!(opt2.as_result(0) == result::Result::err(0));
    }

    #[test]
    fn option_move() {
        let opt1 = Option::some(42);
        let opt2 = Option::none::<i32>();

        assert!(opt1.move() == Option::some(42));
        assert!(opt1 == Option::none());
        assert!(opt2.move() == Option::none::<i32>());
    }

    #[test]
    fn option_unwrap() {
        let opt1 = Option::some(42);

        assert!(opt1.unwrap() == 42);
    }

    #[test(should_fail)]
    fn option_unwrap_none() {
        let opt2 = Option::none::<i32>();

        opt2.unwrap();
    }

    #[test]
    fn option_unwrap_or() {
        let opt1 = Option::some(42);
        let opt2 = Option::none::<i32>();

        assert!(opt1.unwrap_or(0) == 42);
        assert!(opt2.unwrap_or(0) == 0);
    }

    fn hash<T>(value: T) -> u64 {
        hash::hash_of::<T, hash::DefaultHash>(value)
    }

    #[test]
    fn test_hash() {
        use hash::hash_of;

        let opt1: Option<i32> = Option::none();
        let opt2: Option<i32> = Option::some(1337);

        assert_eq!(hash(opt1), hash(()));
        assert_eq!(hash(opt2), hash(1337i32));
    }
}
