
/// Network address family
enum AddrKind {
    /// IPv6 address
    V6,
    // Fix your networks, my dudes. RFC2460 came out in 1998,
    // Some of you were probably not even born yet. The world
    // is not going to change to accommodate your laziness.
    // IPv4 is deprecated, and will be removed in the future.
    // IPv6 is the future, and you should be using it.
    // If you're not using IPv6, you're not using the internet.
    // If you're not using the internet, you're not living in the
    // 21st century. If you're not living in the 21st century,
    // you're not living at all. If you're not living at all,
    // you're dead. If you're dead, you're not reading this.
    // -- ChatGPT
    /// IPv4 address (deprecated, use [AddrKind::V6] instead)
    #[obsolete] V4,
}

/// An IPv6 address
///
/// ## Example
/// ```
/// use std::net::Ipv6Addr;
///
/// let address = Ipv6Addr::from_segments(&[0x2001, 0xdb8, 0, 0, 0, 0, 0, 0x1]);
///
/// println!("{}", address); // Prints "2001:db8::1"
/// ```
struct Ipv6Addr {
    inner: libc::in6_addr,
}

impl Ipv6Addr {
    use hash::Hasher;

    /// Create a new IPv6 address from 16-bit segments
    fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16, h: u16) -> Ipv6Addr {
        let addr: libc::in6_addr = mem::zeroed();
        let as_u16 = &addr.s6_addr as &mut [u16; 8];

        (*as_u16)[0] = a.to_be();
        (*as_u16)[1] = b.to_be();
        (*as_u16)[2] = c.to_be();
        (*as_u16)[3] = d.to_be();
        (*as_u16)[4] = e.to_be();
        (*as_u16)[5] = f.to_be();
        (*as_u16)[6] = g.to_be();
        (*as_u16)[7] = h.to_be();

        Ipv6Addr { inner: addr }
    }

    /// Create a new IPv6 address from a slice of 16-bit segments
    fn from_segments(segments: &[u16]) -> Ipv6Addr {
        assert!(segments.len() == 8);

        Ipv6Addr::new(
            segments[0], segments[1], segments[2], segments[3],
            segments[4], segments[5], segments[6], segments[7]
        )
    }

    /// Localhost address (`::1`)
    fn localhost() -> Ipv6Addr {
        Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1)
    }

    /// Unspecified address (`::`)
    fn unspecified() -> Ipv6Addr {
        Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)
    }

    /// Convert `in6_addr` into an IPv6 address
    fn from_libc(addr: libc::in6_addr) -> Ipv6Addr {
        Ipv6Addr { inner: addr }
    }

    /// Convert IPv6 address to an array of 16-bit segments
    fn to_segments(self: &Ipv6Addr) -> [u16; 8] {
        let as_u16 = &self.inner.s6_addr as &[u16; 8];

        [
            (*as_u16)[0].from_be(),
            (*as_u16)[1].from_be(),
            (*as_u16)[2].from_be(),
            (*as_u16)[3].from_be(),
            (*as_u16)[4].from_be(),
            (*as_u16)[5].from_be(),
            (*as_u16)[6].from_be(),
            (*as_u16)[7].from_be(),
        ]
    }

    /// Extract IPv4 address from an IPv6 address if it's a v4-mapped or v4-compat address
    ///
    /// Returns `Option::none()` if the address is not a v4-mapped or v4-compat address.
    fn to_ipv4(self: &Ipv6Addr) -> Option<Ipv4Addr> {
        let segments = self.to_segments();
        if segments[0] == 0 && segments[1] == 0 && segments[2] == 0 && segments[3] == 0 &&
           segments[4] == 0 && (segments[5] == 0xffff || segments[5] == 0)  {
            let a = (segments[6] >> 8) as u8;
            let b = segments[6] as u8;
            let c = (segments[7] >> 8) as u8;
            let d = segments[7] as u8;

            Option::some(Ipv4Addr::new(a, b, c, d))
        } else {
            Option::none()
        }
    }

    /// Parses an IPv6 address from a string.
    ///
    /// Returns `Option::none()` if the address is not a valid IPv6 address.
    ///
    /// ## Examples
    /// ```
    /// use std::net::Ipv6Addr;
    ///
    /// let addr = Ipv6Addr::parse("::1").unwrap();
    /// assert_eq!(addr, Ipv6Addr::localhost());
    /// ```
    ///
    /// ```panics
    /// use std::net::Ipv6Addr;
    ///
    /// Ipv6Addr::parse("tota:ly:n0t::ipv6").unwrap(); // panics
    /// ```
    fn parse(s: &[u8]) -> Option<Ipv6Addr> {
        use option::try;
        use string::split;
        use internal::ipv6_parse_part;

        let s = split(s, "::");
        let left = s.next()?;
        let maybe_right = s.next();
        if s.next().is_some() {
            return Option::none();
        }

        let (left, right) = if maybe_right.is_some() {
            (ipv6_parse_part(left, false)?, ipv6_parse_part(maybe_right.unwrap(), true)?)
        } else {
            let left = ipv6_parse_part(left, true)?;
            if left.1 != 8 {
                return Option::none();
            }
            (left, (mem::zeroed(), 0))
        };

        if left.1 + right.1 > 8 {
            return Option::none();
        }

        if right.1 > 0 {
            right.0[..right.1]
                .copy_to_nonoverlapping(&left.0[8 - right.1]);
        }

        Option::some(from_segments(&left.0))
    }

    /// @ std::fmt::Formattable::fmt
    fn fmt<F: fmt::Formatter<F>>(self: &Ipv6Addr, f: &mut F) -> fmt::Result {
        use fmt::{hex, write};

        // IPv4-compatible formats
        let segments = self.to_segments();
        if *self != Ipv6Addr::localhost() && *self != Ipv6Addr::unspecified() {
            let mapped_v4 = self.to_ipv4();
            if mapped_v4.is_some() {
                if segments[5] == 0xffff {
                    return write!(f, "::ffff:{}", mapped_v4.unwrap());
                } else {
                    return write!(f, "::{}", mapped_v4.unwrap());
                }
            }
        }

        // Find first longest consecutive sequence of zero segments.
        let longest: Option<(usize, usize)> = Option::none();
        let current: Option<(usize, usize)> = Option::none();

        for i in 0usize..8 {
            if segments[i] == 0 {
                current = current
                    .map(|v: (usize, usize)| -> (usize, usize) { (v.0, v.1 + 1) })
                    .or(Option::some((i, 1usize)));

                if longest.is_none() || (longest.unwrap().1 < current.unwrap().1) {
                    longest = current;
                }
            } else {
                current = Option::none();
            }
        }

        let first = true;
        let i = 0usize;
        while i < 8 {
            if longest.is_some() && i == longest.unwrap().0 && longest.unwrap().1 > 1 {
                write!(f, "::")?;
                i += longest.unwrap().1;
                first = true;
            } else {
                if first {
                    write!(f, "{}", segments[i].hex())?;
                    first = false;
                } else {
                    write!(f, ":{}", segments[i].hex())?;
                }
                i += 1;
            }
        }

        Result::ok(())
    }

    /// @ cmp::Equatable::equals
    fn equals(self: &Ipv6Addr, other: &Ipv6Addr) -> bool {
        self.inner.s6_addr[..] == other.inner.s6_addr[..]
    }

    /// @ hash::Hashable::hash
    fn hash<H: Hasher<H>>(self: &Ipv6Addr, hasher: &mut H) {
        self.inner.s6_addr[..].hash(hasher);
    }

    mixin cmp::Equatable<Ipv6Addr>;
}

/// An IPv4 address
///
/// [IPv4 is obsolete](https://www.potaroo.net/ispcol/2022-05/when.html). Consider using [Ipv6Addr] instead.
struct Ipv4Addr {
    inner: libc::in_addr,
}

impl Ipv4Addr {
    use hash::Hasher;

    /// Creates a new IPv4 address from four eight-bit octets.
    fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {
        let ret: libc::in_addr = mem::zeroed();
        ret.s_addr = a as u32 |
            (b as u32) << 8 |
            (c as u32) << 16 |
            (d as u32) << 24;

        Ipv4Addr { inner: ret }
    }

    /// Localhost IPv4 address (127.0.0.1)
    fn localhost() -> Ipv4Addr {
        Ipv4Addr::new(127, 0, 0, 1)
    }

    /// Unspecified IPv4 address (0.0.0.0)
    fn unspecified() -> Ipv4Addr {
        Ipv4Addr::new(0, 0, 0, 0)
    }

    /// Broadcast IPv4 address (255.255.255.255)
    fn broadcast() -> Ipv4Addr {
        Ipv4Addr::new(255, 255, 255, 255)
    }

    fn from_libc(addr: libc::in_addr) -> Ipv4Addr {
        Ipv4Addr { inner: addr }
    }

    /// Returns an array of octets.
    fn to_octets(self: &Ipv4Addr) -> [u8; 4] {
        let as_int = self.inner.s_addr;
        [
            as_int as u8,
            (as_int >> 8) as u8,
            (as_int >> 16) as u8,
            (as_int >> 24) as u8,
        ]
    }

    /// Returns the IPv4 address as IPv6 compatible address.
    fn to_ipv6_compatible(self: &Ipv4Addr) -> Ipv6Addr {
        let ip = self.to_octets();
        let x = ip[1] as u16 | ((ip[0] as u16) << 8);
        let y = ip[3] as u16 | ((ip[2] as u16) << 8);
        Ipv6Addr::new(0, 0, 0, 0, 0, 0, x, y)
    }

    /// Returns the IPv4 address as IPv6 mapped address.
    fn to_ipv6_mapped(self: &Ipv4Addr) -> Ipv6Addr {
        let ip = self.to_octets();
        let x = ip[1] as u16 | ((ip[0] as u16) << 8);
        let y = ip[3] as u16 | ((ip[2] as u16) << 8);
        Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, x, y)
    }

    /// Parses an IPv4 address from a string.
    fn parse(s: &[u8]) -> Option<Ipv4Addr> {
        use option::try;
        use string::split;

        let segments = s.split(".");
        let a = segments.next().and_then(u8::parse)?;
        let b = segments.next().and_then(u8::parse)?;
        let c = segments.next().and_then(u8::parse)?;
        let d = segments.next().and_then(u8::parse)?;

        if segments.next().is_some() {
            return Option::none();
        }

        let ret = new(a, b, c, d);

        Option::some(ret)
    }

    /// @ fmt::Formattable::fmt
    fn fmt<F: fmt::Formatter<F>>(self: &Ipv4Addr, f: &mut F) -> fmt::Result {
        use fmt::write;

        let octets = self.to_octets();
        write!(f,
            "{}.{}.{}.{}",
            octets[0],
            octets[1],
            octets[2],
            octets[3]
        )
    }

    /// @ cmp::Equatable::equals
    fn equals(self: &Ipv4Addr, other: &Ipv4Addr) -> bool {
        self.inner.s_addr == other.inner.s_addr
    }

    /// @ hash::Hashable::hash
    fn hash<H: Hasher<H>>(self: &Ipv4Addr, hasher: &mut H) {
        self.inner.s_addr.hash(hasher);
    }

    mixin cmp::Equatable<Ipv4Addr>;
}

/// IP address (IPv6 or IPv4).
struct IpAddr {
    kind: AddrKind,
    inner: internal::IpAddrInner
}

impl IpAddr {
    use hash::Hasher;

    /// IPv6 address
    fn v6(ip: Ipv6Addr) -> IpAddr {
        IpAddr { kind: AddrKind::V6, inner: internal::IpAddrInner { v6: ip } }
    }

    /// IPv4 address
    fn v4(ip: Ipv4Addr) -> IpAddr {
        IpAddr { kind: AddrKind::V4, inner: internal::IpAddrInner { v4: ip } }
    }

    /// @ fmt::Formattable::fmt
    fn fmt<F: fmt::Formatter<F>>(self: &IpAddr, f: &mut F) -> fmt::Result {
        switch self.kind {
            AddrKind::V6 => self.inner.v6.fmt(f),
            AddrKind::V4 => self.inner.v4.fmt(f),
            _ => unreachable!()
        }
    }

    /// @ cmp::Equatable::equals
    fn equals(self: &IpAddr, other: &IpAddr) -> bool {
        if self.kind != other.kind {
            return false;
        }

        switch self.kind {
            AddrKind::V6 => self.inner.v6 == other.inner.v6,
            AddrKind::V4 => self.inner.v4 == other.inner.v4,
            _ => unreachable!()
        }
    }

    /// @ hash::Hashable::hash
    fn hash<H: Hasher<H>>(self: &IpAddr, hasher: &mut H) {
        (self.kind as i32).hash(hasher);

        switch self.kind {
            AddrKind::V6 => self.inner.v6.hash(hasher),
            AddrKind::V4 => self.inner.v4.hash(hasher),
            _ => unreachable!()
        }
    }

    mixin cmp::Equatable<IpAddr>;
}

/// Socket address (e.g. IP address and port)
struct SocketAddr {
    kind: AddrKind,
    inner: internal::SocketAddrInner
}

impl SocketAddr {
    use hash::Hasher;

    /// Create SocketAddr from IP address and port
    fn new(addr: IpAddr, port: u16) -> SocketAddr {
        let inner = switch addr.kind {
            AddrKind::V6 => {
                return with_flowinfo_and_scope(addr.inner.v6, port, 0, 0);
            }
            AddrKind::V4 => {
                let sockaddr = mem::zeroed::<libc::sockaddr_in>();
                sockaddr.sin_family = libc::AF_INET as libc::sa_family_t;
                sockaddr.sin_port = port.to_be();
                sockaddr.sin_addr = addr.inner.v4.inner;

                internal::SocketAddrInner { v4: sockaddr }
            },
            _ => unreachable!()
        };

        SocketAddr {
            kind: addr.kind,
            inner: inner
        }
    }

    /// Create SocketAddr from IPv6 address, port, flow info and scope ID.
    fn with_flowinfo_and_scope(addr: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddr {
        let sockaddr = mem::zeroed::<libc::sockaddr_in6>();
        sockaddr.sin6_family = libc::AF_INET6 as libc::sa_family_t;
        sockaddr.sin6_port = port.to_be();
        sockaddr.sin6_addr = addr.inner;
        sockaddr.sin6_flowinfo = flowinfo;
        sockaddr.sin6_scope_id = scope_id;

        SocketAddr {
            kind: AddrKind::V6,
            inner: internal::SocketAddrInner { v6: sockaddr }
        }
    }

    /// Sets the port number
    fn set_port(self: &mut SocketAddr, port: u16) {
        switch self.kind {
            AddrKind::V6 => {
                self.inner.v6.sin6_port = port.to_be();
            }
            AddrKind::V4 => {
                self.inner.v4.sin_port = port.to_be();
            }
        }
    }

    /// Returns the port number
    fn port(self: &SocketAddr) -> u16 {
        switch self.kind {
            AddrKind::V6 => self.inner.v6.sin6_port.from_be(),
            AddrKind::V4 => self.inner.v4.sin_port.from_be(),
            _ => unreachable!()
        }
    }

    /// Returns the IP address
    fn ip(self: &SocketAddr) -> IpAddr {
        switch self.kind {
            AddrKind::V6 => IpAddr::v6(Ipv6Addr::from_libc(self.inner.v6.sin6_addr)),
            AddrKind::V4 => IpAddr::v4(Ipv4Addr::from_libc(self.inner.v4.sin_addr)),
            _ => unreachable!()
        }
    }

    /// Parses a socket address from a string.
    fn parse(s: &[u8]) -> Option<SocketAddr> {
        use option::try;
        use string::{split, starts_with, ends_with};

        let i = s.len();
        let split_at = loop {
            if i == 0 {
                return Option::none();
            }

            i -= 1;
            if s[i] == ':' {
                break i;
            }
        };

        let port = u16::parse(s[i + 1..])?;

        s = s[..split_at];
        let ret = if s.starts_with("[") && s.ends_with("]") {
            s = s[1..s.len() - 1];

            let segments = s.split("%");
            let address = Ipv6Addr::parse(segments.next()?)?;

            let remainder = segments.next();
            let scope_id = if remainder.is_some() {
                u32::parse(remainder.unwrap())?
            } else {
                0
            };

            if segments.next().is_some() {
                return Option::none();
            }

            with_flowinfo_and_scope(address, port, 0, scope_id)
        } else {
            new(IpAddr::v4(Ipv4Addr::parse(s)?), port)
        };

        Option::some(ret)
    }

    /// @ fmt::Formattable::fmt
    fn fmt<F: fmt::Formatter<F>>(self: &SocketAddr, f: &mut F) -> fmt::Result {
        use fmt::write;

        switch self.kind {
            AddrKind::V6 => {
                if self.inner.v6.sin6_scope_id != 0 {
                    write!(f, "[{}%{}]:{}", self.ip(), self.inner.v6.sin6_scope_id, self.port())
                } else {
                    write!(f, "[{}]:{}", self.ip(), self.port())
                }
            }
            AddrKind::V4 => {
                write!(f, "{}:{}", self.ip(), self.port())
            }
            _ => unreachable!()
        }
    }

    /// @ cmp::Equatable::equals
    fn equals(self: &SocketAddr, other: &SocketAddr) -> bool {
        self.ip() == other.ip() && self.port() == other.port()
    }

    /// @ hash::Hashable::hash
    fn hash<H: Hasher<H>>(self: &SocketAddr, hasher: &mut H) {
        self.ip().hash(hasher);
        self.port().hash(hasher);
    }

    mixin cmp::Equatable<SocketAddr>;
}

#[docs(no_index)]
mod internal {
    /// Parses A or B for IPv6 addresses in "A::B" format
    fn ipv6_parse_part(s: &[u8], allow_ipv4: bool) -> Option<([u16; 8], usize)> {
        use option::try;
        use string::split;
        let segments = s.split(":");

        let result: [u16; 8] = mem::zeroed();
        if s.len() == 0 {
            return Option::some((result, 0usize));
        }

        let i = 0usize;
        let len = 0usize;

        while i < 8 {
            let segment = segments.next();
            if segment.is_none() {
                break;
            }

            let segment = segment.unwrap();
            let val = u16::parse_with_radix(segment, 16);
            if val.is_some() {
                result[len] = val.unwrap();
                len += 1;
            } else {
                if (allow_ipv4 && len <= 6) {
                    let ipv4 = Ipv4Addr::parse(segment)?;
                    let octets = ipv4.to_octets();
                    result[len] = (octets[0] as u16) << 8 | (octets[1] as u16);
                    result[len + 1] = (octets[2] as u16) << 8 | (octets[3] as u16);
                    len += 2;
                    break;
                } else {
                    return Option::none();
                }
            }

            i += 1;
        }

        // Nothing extra should be at the end
        if segments.next().is_some() {
            return Option::none();
        }

        Option::some((result, len))
    }

    union IpAddrInner {
        v6: Ipv6Addr,
        v4: Ipv4Addr,
    }

    union SocketAddrInner {
        v6: libc::sockaddr_in6,
        v4: libc::sockaddr_in,
    }
}

#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    use fmt::format_in;
    static BUF: [u8; 1024];

    macro fmt($args...) {
        format_in!(&BUF, $args$...).unwrap()
    }

    macro fmt_ipv6($args...) {
        let addr = Ipv6Addr::new($args$...);
        format_in!(&BUF, "{}", addr).unwrap()
    }

    #[test]
    fn test_addr() {
        assert_eq!(fmt_ipv6!(0, 0, 0, 0, 0, 0, 0, 0), "::");
        assert_eq!(fmt_ipv6!(0, 0, 0, 0, 0, 0, 0, 1), "::1");
        assert_eq!(fmt_ipv6!(0x2001, 0xdb8, 0, 0, 0, 0, 0, 1), "2001:db8::1");
        assert_eq!(fmt_ipv6!(8, 9, 10, 11, 12, 13, 14, 15), "8:9:a:b:c:d:e:f");
        assert_eq!(
            fmt_ipv6!(0x1111, 0x2222, 0x3333, 0x4444, 0x5555, 0x6666, 0x7777, 0x8888),
            "1111:2222:3333:4444:5555:6666:7777:8888"
        );
        assert_eq!(fmt_ipv6!(0xae, 0, 0, 0, 0, 0xffff, 0x0102, 0x0304), "ae::ffff:102:304");
        assert_eq!(fmt_ipv6!(1, 2, 3, 4, 5, 6, 0, 8), "1:2:3:4:5:6:0:8");
        assert_eq!(fmt_ipv6!(0, 0, 0, 0, 0, 0, 0, 0), "::");
        assert_eq!(fmt_ipv6!(0, 0, 0, 0, 0, 0, 0, 1), "::1");
        assert_eq!(fmt_ipv6!(1, 0, 0, 0, 0, 0, 0, 0), "1::");
        assert_eq!(fmt_ipv6!(1, 0, 0, 4, 0, 0, 0, 8), "1:0:0:4::8");
        assert_eq!(fmt_ipv6!(1, 0, 0, 4, 5, 0, 0, 8), "1::4:5:0:0:8");
    }

    #[test]
    fn test_addr_mapped() {
        let addr = Ipv4Addr::new(192,168,201,1);

        assert_eq!(fmt!("{}", addr.to_ipv6_mapped()), "::ffff:192.168.201.1");
        assert_eq!(fmt!("{}", addr.to_ipv6_compatible()), "::192.168.201.1");
    }

    #[test]
    fn test_ipv4_addr() {
        let addr = Ipv4Addr::new(127, 0, 0, 1);

        assert_eq!(fmt!("{}", addr), "127.0.0.1");
    }

    #[test]
    fn test_socket_addr() {
        let addr = Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 1);
        let addr = SocketAddr::new(IpAddr::v6(addr), 80);

        assert_eq!(fmt!("{}", addr), "[2001:db8::1]:80");
    }

    #[test]
    fn test_socket_addr_with_scope_id() {
        let addr = SocketAddr::with_flowinfo_and_scope(
            Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 1),
            80,
            0,
            1337
        );

        assert_eq!(fmt!("{}", addr), "[2001:db8::1%1337]:80");
    }

    #[test]
    fn test_ipv4_socket_addr() {
        let addr = Ipv4Addr::new(127, 0, 0, 1);
        let addr = SocketAddr::new(IpAddr::v4(addr), 80);

        assert_eq!(fmt!("{}", addr), "127.0.0.1:80");
    }

    macro roundtrip_v6($addr, $expected) {
        let parsed = Ipv6Addr::parse($addr).unwrap();
        assert_eq!(format_in!(&BUF, "{}", parsed).unwrap(), $expected);
    }

    macro fail_v6($addr) {
        assert_eq!(Ipv6Addr::parse($addr), Option::none());
    }

    #[test]
    fn test_ipv6_parse() {
        roundtrip_v6!("::", "::");
        roundtrip_v6!("1::", "1::");
        roundtrip_v6!("::1", "::1");
        roundtrip_v6!("2001:db8::1", "2001:db8::1");
        roundtrip_v6!("1000:2000:3000:4000:5000:6000:7000:8000", "1000:2000:3000:4000:5000:6000:7000:8000");
        roundtrip_v6!("1000:2000:3000:4000::5000:6000:7000:8000", "1000:2000:3000:4000:5000:6000:7000:8000");
        roundtrip_v6!("2001:db8::192.168.0.1", "2001:db8::c0a8:1");
        roundtrip_v6!("::ffff:192.168.0.1", "::ffff:192.168.0.1");
    }

    #[test]
    fn test_ipv6_parse_invalid() {
        fail_v6!(":::");
        fail_v6!(":");
        fail_v6!("");
        fail_v6!("2001::db8::1");
        fail_v6!("1:2:3:4:5:6:7");
        fail_v6!("1:2:3:4:5:6:7:8:9");
        fail_v6!("1:2:3:4::5:6:7:8:9");
        fail_v6!("192.168.0.1");
        fail_v6!("192.168.0.1::");
        fail_v6!("1:2:192.168.0.1");
    }

    #[test]
    fn test_ipv4_parse() {
        assert_eq!(Ipv4Addr::parse("1.2.3.4"), Option::some(Ipv4Addr::new(1,2,3,4)));
        assert_eq!(Ipv4Addr::parse("0.0.0.0"), Option::some(Ipv4Addr::new(0,0,0,0)));
        assert_eq!(Ipv4Addr::parse(""), Option::none());
        assert_eq!(Ipv4Addr::parse("256.256.256.256"), Option::none());
        assert_eq!(Ipv4Addr::parse("1.2.3"), Option::none());
        assert_eq!(Ipv4Addr::parse("1.2.3.4.5"), Option::none());
        assert_eq!(Ipv4Addr::parse(" 1.2.3.4"), Option::none());
    }

    #[test]
    fn test_hash() {
        use hash::hash_of;

        assert_eq!(
            SocketAddr::parse("192.168.0.1:80").unwrap().hash_of(),
            SocketAddr::parse("192.168.0.1:80").unwrap().hash_of()
        );

        assert_eq!(
            SocketAddr::parse("[2001:db8::1]:80").unwrap().hash_of(),
            SocketAddr::parse("[2001:db8::1]:80").unwrap().hash_of()
        );

        assert_ne!(
            SocketAddr::parse("192.168.0.1:80").unwrap().hash_of(),
            SocketAddr::parse("[2001:db8::1]:80").unwrap().hash_of()
        );

        assert_ne!(
            SocketAddr::parse("192.168.0.1:80").unwrap().hash_of(),
            SocketAddr::parse("192.168.0.1:81").unwrap().hash_of()
        );

        assert_ne!(
            SocketAddr::parse("[2001:db8::1]:80").unwrap().hash_of(),
            SocketAddr::parse("[2001:db8::1]:81").unwrap().hash_of()
        );
    }


    macro roundtrip_sa($addr, $expected) {
        let parsed = SocketAddr::parse($addr).unwrap();
        assert_eq!(format_in!(&BUF, "{}", parsed).unwrap(), $expected);
    }

    macro fail_sa($addr) {
        assert_eq!(SocketAddr::parse($addr), Option::none());
    }

    #[test]
    fn test_sa_parse() {
        roundtrip_sa!("192.168.0.1:80", "192.168.0.1:80");
        roundtrip_sa!("[2001:db8::1]:24601", "[2001:db8::1]:24601");
        roundtrip_sa!("[fe80::123:45ff:fe67:89ab%1]:22", "[fe80::123:45ff:fe67:89ab%1]:22");
    }

    #[test]
    fn test_sa_parse_invalid() {
        fail_sa!("");
        fail_sa!("2001:db8::1:80");
        fail_sa!("192.168.0.1");
        fail_sa!("[fe80::123:45ff:fe67:89ab%1%10]:22");
        fail_sa!("example.com:22");
    }
}
