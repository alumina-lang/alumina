//! Time and duration functions
//!
//! Alumina does not have a builtin full-featured date and time functionality. This modules
//! mainly provides functionality needed for expressing and measuring durations.

const NANOS_PER_SEC: u32 = 1000000000;
const NANOS_PER_MILLI: u32 = 1000000;
const NANOS_PER_MICRO: u32 = 1000;
const MILLIS_PER_SEC: u64 = 1000;
const MICROS_PER_SEC: u64 = 1000000;

/// A specific point in time
///
/// This is typically a reading from a high-precision monotonic clock and not the wall-clock. It is useful
/// for measuring durations between two points in time.
///
/// ## Example
/// ```
/// use std::time::{Instant, Duration};
/// use std::thread::sleep;
///
/// let start = Instant::now();
/// sleep(Duration::from_millis(500));
///
/// assert!(Instant::now().duration_since(&start).total_secs() >= 0.5);
/// ```
struct Instant {
    #[cfg(not(all(target_os = "macos", not(target_arch = "aarch64"))))]
    spec: libc::timespec,
    #[cfg(all(target_os = "macos", not(target_arch = "aarch64")))]
    inner: u64,
}

impl Instant {
    use hash::Hasher;

    /// Current instant
    fn now() -> Instant {
        #[cfg(not(all(target_os = "macos", not(target_arch = "aarch64"))))]
        {
            let spec: libc::timespec;
            #[cfg(target_os = "macos")]
            libc::clock_gettime(libc::CLOCK_UPTIME_RAW, &spec);
            #[cfg(not(target_os = "macos"))]
            libc::clock_gettime(libc::CLOCK_MONOTONIC, &spec);
            Instant { spec: spec }
        }

        #[cfg(all(target_os = "macos", not(target_arch = "aarch64")))] {
            Instant { inner: libc::mach_absolute_time() }
        }
    }

    /// Returns time elapsed since an earlier instant.
    ///
    /// If `earlier` is after the current instant, then a negative duration is returned.
    fn duration_since(self: &Instant, earlier: &Instant) -> Duration {
        #[cfg(not(all(target_os = "macos", not(target_arch = "aarch64"))))] {
            let secs: i64 = util::cast(self.spec.tv_sec) - util::cast(earlier.spec.tv_sec);
            let nanos: i32 = util::cast(self.spec.tv_nsec) - util::cast(earlier.spec.tv_nsec);

            if nanos < 0 {
                secs -= 1;
                nanos += NANOS_PER_SEC as i32;
            }
            Duration::new(secs, nanos as u32)
        }


        #[cfg(all(target_os = "macos", not(target_arch = "aarch64")))] {
            let diff = self.inner - earlier.inner;
            let total_nanos = ((diff as i128) * (internal::TIMEBASE.numer as i128) /
                (internal::TIMEBASE.denom as i128)) as i64;
            let (secs, nanos) = math::div_floor(total_nanos, NANOS_PER_SEC as i64);
            Duration::new(secs, nanos as u32)
        }
    }

    /// Add a specific duration to an instant.
    fn add(lhs: &Instant, rhs: &Duration) -> Instant {
        #[cfg(not(all(target_os = "macos", not(target_arch = "aarch64"))))] {
            let secs = lhs.spec.tv_sec + util::cast(rhs.secs);
            let nanos = lhs.spec.tv_nsec as u32 + rhs.nanos;

            if nanos >= NANOS_PER_SEC {
                nanos -= NANOS_PER_SEC;
                secs += 1;
            }

            Instant {
                spec: libc::timespec {
                    tv_sec: secs,
                    tv_nsec: util::cast(nanos)
                }
            }
        }

        #[cfg(all(target_os = "macos", not(target_arch = "aarch64")))] {
            let total_nanos = (rhs.nanos as u128) + (rhs.secs as u128) * (NANOS_PER_SEC as u128);
            let nanos = (total_nanos * (internal::TIMEBASE.denom as u128) /
                (internal::TIMEBASE.numer as u128)) as u64;

            Instant {
                inner: lhs.inner + nanos
            }
        }
    }

    /// Subtract a specific duration from an instant.
    fn sub(lhs: &Instant, rhs: &Duration) -> Instant {
        #[cfg(not(all(target_os = "macos", not(target_arch = "aarch64"))))] {
            let secs = lhs.spec.tv_sec - util::cast(rhs.secs);
            let nsec = lhs.spec.tv_nsec as i32 - (rhs.nanos as i32);

            if nsec < 0 {
                nsec += NANOS_PER_SEC as i32;
                secs -= 1;
            }

            Instant {
                spec: libc::timespec {
                    tv_sec: secs,
                    tv_nsec: util::cast(nsec)
                }
            }
        }

        #[cfg(all(target_os = "macos", not(target_arch = "aarch64")))] {
            let total_nanos = (rhs.nanos as u128) + (rhs.secs as u128) * (NANOS_PER_SEC as u128);
            let nanos = (total_nanos * (internal::TIMEBASE.denom as u128) /
                (internal::TIMEBASE.numer as u128)) as u64;

            Instant {
                inner: lhs.inner - nanos
            }
        }
    }

    /// @ cmp::Equatable::equals
    fn equals(lhs: &Instant, rhs: &Instant) -> bool {
        #[cfg(not(all(target_os = "macos", not(target_arch = "aarch64"))))] {
            lhs.spec.tv_sec == rhs.spec.tv_sec && lhs.spec.tv_nsec == rhs.spec.tv_nsec
        }
        #[cfg(all(target_os = "macos", not(target_arch = "aarch64")))] {
            lhs.inner == rhs.inner
        }
    }

    /// @ hash::Hashable::hash
    fn hash<H: Hasher<H>>(self: &Instant, hasher: &mut H) {
        #[cfg(not(all(target_os = "macos", not(target_arch = "aarch64"))))] {
            self.spec.tv_sec.hash(hasher);
            self.spec.tv_nsec.hash(hasher);
        }
        #[cfg(all(target_os = "macos", not(target_arch = "aarch64")))] {
            self.inner.hash(hasher);
        }
    }

    /// @ cmp::Comparable::compare
    fn compare(lhs: &Instant, rhs: &Instant) -> cmp::Ordering {
        #[cfg(not(all(target_os = "macos", not(target_arch = "aarch64"))))] {
            cmp::lex_compare!(lhs.spec.tv_sec, rhs.spec.tv_sec);
            lhs.spec.tv_nsec.compare(&rhs.spec.tv_nsec)
        }
        #[cfg(all(target_os = "macos", not(target_arch = "aarch64")))] {
            lhs.inner.compare(&rhs.inner)
        }
    }

    mixin cmp::Comparable<Instant>;
    mixin cmp::Equatable<Instant>;
}

#[cfg(all(target_os = "macos", not(target_arch = "aarch64")))]
{
    /// Darwin-specific implementation.
    #[docs(no_index)]
    mod internal {
        static TIMEBASE: libc::mach_timebase_info_t = {
            let v: libc::mach_timebase_info_t;
            libc::mach_timebase_info(&v);
            v
        };
    }
}

/// Represents a span of time.
///
/// Duration is signed, so it can support both positive and negative durations. It is assumed
/// to always be normalized, i.e. 0 â‰¤ `nanos` < [NANOS_PER_SEC].
///
/// ## Example
/// ```
/// use std::time::Duration;
///
/// let d = Duration::zero();
/// d = d.add(&Duration::from_nanos(700000000));
/// d = d.sub(&Duration::from_micros(200000));
/// d = d.add(&Duration::from_millis(1500));
///
/// assert_eq!(d, Duration::from_secs(2));
/// ```
struct Duration {
    secs: i64,
    nanos: u32,
}

impl Duration {
    use hash::Hasher;

    fn new(secs: i64, nanos: u32) -> Duration {
        Duration {
            secs: (nanos / NANOS_PER_SEC) as i64 + secs,
            nanos: nanos % NANOS_PER_SEC
        }
    }

    /// A duration of zero time
    #[inline]
    fn zero() -> Duration {
        Duration { secs: 0, nanos: 0 }
    }


    /// Returns `true` if duration is negative, `false` otherwise
    #[inline]
    fn is_negative(self: Duration) -> bool {
        self.secs < 0
    }


    /// Duration from a specified number of seconds
    #[inline]
    fn from_secs(secs: i64) -> Duration {
        Duration { secs: secs, nanos: 0 }
    }


    /// Duration from a specified number of milliseconds
    #[inline]
    fn from_millis(millis: i64) -> Duration {
        let (secs, millis) = math::div_floor(millis, MILLIS_PER_SEC as i64);
        Duration {
            secs: secs,
            nanos: millis as u32 * NANOS_PER_MILLI
        }
    }

    /// Duration from a specified number of microseconds
    #[inline]
    fn from_micros(micros: i64) -> Duration {
        let (secs, micros) = math::div_floor(micros, MICROS_PER_SEC as i64);
        Duration {
            secs: secs,
            nanos: micros as u32 * NANOS_PER_MICRO
        }
    }

    /// Duration from a specified number of nanoseconds
    #[inline]
    fn from_nanos(nanos: i64) -> Duration {
        let (secs, nanos) = math::div_floor(nanos, NANOS_PER_SEC as i64);

        Duration {
            secs: secs,
            nanos: nanos as u32,
        }
    }

    /// Add a duration to another.
    #[inline]
    fn add(self: &Duration, rhs: &Duration) -> Duration {
        let secs = self.secs + rhs.secs;
        let nanos = self.nanos + rhs.nanos;

        if nanos >= NANOS_PER_SEC {
            secs += 1;
            nanos -= NANOS_PER_SEC
        }

        Duration {
            secs: secs,
            nanos: nanos,
        }
    }

    /// Subtract a duration from the current duration.
    #[inline]
    fn sub(self: &Duration, rhs: &Duration) -> Duration {
        let secs = self.secs - rhs.secs;
        let nanos = (self.nanos as i32) - (rhs.nanos as i32);

        if nanos < 0 {
            secs -= 1;
            nanos += NANOS_PER_SEC as i32
        }

        Duration {
            secs: secs,
            nanos: nanos as u32,
        }
    }

    /// Total number of seconds as a floating point.
    #[inline]
    fn total_secs(self: &Duration) -> f64 {
        (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)
    }

    /// @ std::cmp::Equatable::equals
    fn equals(lhs: &Duration, rhs: &Duration) -> bool {
        lhs.secs == rhs.secs && lhs.nanos == rhs.nanos
    }

    /// @ hash::Hashable::hash
    fn hash<H: Hasher<H>>(self: &Duration, hasher: &mut H) {
        self.secs.hash(hasher);
        self.nanos.hash(hasher);
    }

    /// @ std::cmp::Comparable::compare
    fn compare(lhs: &Duration, rhs: &Duration) -> cmp::Ordering {
        cmp::lex_compare!(lhs.secs, rhs.secs);
        lhs.nanos.compare(&rhs.nanos)
    }

    /// @ std::fmt::Formattable::fmt
    fn fmt<F: fmt::Formatter<F>>(self: &Duration, f: &mut F) -> Result<(), fmt::Error> {
        use fmt::{write, zero_pad};

        let abs = if self.is_negative() {
            f.write_byte('-')?;
            Duration::zero().sub(self)
        } else {
            *self
        };

        let secs = abs.secs % 60;
        let mins = (abs.secs / 60) % 60;
        let hours = abs.secs / 3600;

        if abs.nanos > 0 {
            write!(f, "{}:{}:{}.{}", hours.zero_pad(2), mins.zero_pad(2), secs.zero_pad(2), abs.nanos.zero_pad(9))
        } else {
            write!(f, "{}:{}:{}", hours.zero_pad(2), mins.zero_pad(2), secs.zero_pad(2))
        }
    }

    mixin cmp::Comparable<Duration>;
    mixin cmp::Equatable<Duration>;
}


#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    use fmt::format_in;

    #[test]
    fn test_monotonish() {
        use thread::sleep;

        let start = Instant::now();
        Duration::from_nanos(1000).sleep();
        let end = Instant::now();

        assert!(end > start);
    }

    #[test]
    fn test_from() {
        let dur = Duration::from_secs(1);
        assert_eq!(dur.secs, 1);
        assert_eq!(dur.nanos, 0);

        let dur = Duration::from_millis(1);
        assert_eq!(dur.secs, 0);
        assert_eq!(dur.nanos, 1000000);

        let dur = Duration::from_micros(1);
        assert_eq!(dur.secs, 0);
        assert_eq!(dur.nanos, 1000);

        let dur = Duration::from_nanos(1);
        assert_eq!(dur.secs, 0);
        assert_eq!(dur.nanos, 1);
    }

    #[test]
    fn test_from_negative() {
        let dur = Duration::from_secs(-1);
        assert_eq!(dur.secs, -1);
        assert_eq!(dur.nanos, 0);

        let dur = Duration::from_millis(-1);
        assert_eq!(dur.secs, -1);
        assert_eq!(dur.nanos, 999000000);

        let dur = Duration::from_micros(-1);
        assert_eq!(dur.secs, -1);
        assert_eq!(dur.nanos, 999999000);

        let dur = Duration::from_nanos(-1);
        assert_eq!(dur.secs, -1);
        assert_eq!(dur.nanos, 999999999);
    }

    #[test]
    fn test_artithmetic() {
        let start = Instant::now();
        let end = start.add(&Duration::from_secs(1));

        assert!(start == start);
        assert!(start >= start);
        assert!(end > start);
        assert!(end != start);

        assert_eq!(start.duration_since(&start), Duration::zero());
        assert_eq!(end.duration_since(&start), Duration::from_secs(1));
        assert_eq!(start.duration_since(&end), Duration::from_secs(-1));

        let start1 = end.sub(&Duration::from_secs(1));
        assert_eq!(start1, start);
    }

    #[test]
    fn test_hash() {
        use hash::hash_of;

        let start = Instant::now();
        assert_ne!(start.hash_of(), start.add(&Duration::from_secs(1)).hash_of());
        assert_ne!(start.hash_of(), start.add(&Duration::from_nanos(1)).hash_of());

        assert_ne!(Duration::from_secs(1).hash_of(), Duration::from_secs(2).hash_of());
        assert_ne!(Duration::from_nanos(1).hash_of(), Duration::from_nanos(2).hash_of());
    }

    static BUF: [u8; 1024];

    #[test]
    fn test_fmt() {
        let buf: [u8; 1024];

        macro chk($dur, $expected) {
            assert_eq!(
                format_in!(&buf, "{}", $dur).unwrap(),
                $expected
            );
        }

        chk!(Duration::zero(), "00:00:00");
        chk!(Duration::from_secs(1), "00:00:01");
        chk!(Duration::from_secs(60), "00:01:00");
        chk!(Duration::from_secs(60*60), "01:00:00");
        chk!(Duration::from_secs(86399), "23:59:59");
        chk!(Duration::from_nanos(1), "00:00:00.000000001");
        chk!(Duration::from_nanos(999999999), "00:00:00.999999999");

        chk!(Duration::from_secs(-1), "-00:00:01");
        chk!(Duration::from_secs(-60), "-00:01:00");
        chk!(Duration::from_secs(-60*60), "-01:00:00");
        chk!(Duration::from_secs(-86399), "-23:59:59");
        chk!(Duration::from_nanos(-1), "-00:00:00.000000001");
        chk!(Duration::from_nanos(-999999999), "-00:00:00.999999999");
    }
}
