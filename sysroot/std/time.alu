//! Time and duration functions

const NANOS_PER_SEC: u32 = 1000000000;
const NANOS_PER_MILLI: u32 = 1000000;
const NANOS_PER_MICRO: u32 = 1000;
const MILLIS_PER_SEC: u64 = 1000;
const MICROS_PER_SEC: u64 = 1000000;

#[cfg(not(target_os = "macos"))]
{
    struct Instant {
        spec: libc::timespec
    }

    impl Instant {
        fn now() -> Instant {
            let spec: libc::timespec;
            libc::clock_gettime(libc::CLOCK_MONOTONIC, &spec);
            Instant { spec: spec }
        }

        fn since(self: &Instant, other: &Instant) -> Duration {
            let secs = (self.spec.tv_sec as i64) - (other.spec.tv_sec as i64);
            let nanos = (self.spec.tv_nsec as i32) - (other.spec.tv_nsec as i32);

            if nanos < 0 {
                secs -= 1;
                nanos += NANOS_PER_SEC as i32;
            } 

            Duration::new(secs, nanos as u32)
        }

        fn add(lhs: &Instant, rhs: &Duration) -> Instant {
            let secs = lhs.spec.tv_sec + util::cast(rhs.secs);
            let nanos = lhs.spec.tv_nsec as u32 + rhs.nanos;

            if nanos >= NANOS_PER_SEC as u32 {
                nanos -= NANOS_PER_SEC as u32;
                secs += 1;
            }

            Instant {
                spec: libc::timespec {
                    tv_sec: secs,
                    tv_nsec: util::cast(nanos)
                }
            }
        }

        fn sub(lhs: &Instant, rhs: &Duration) -> Instant {
            let secs = lhs.spec.tv_sec - util::cast(rhs.secs);
            let nsec = lhs.spec.tv_nsec as i32 - (rhs.nanos as i32);

            if nsec < 0 {
                nsec += NANOS_PER_SEC as i32;
                secs -= 1;
            }

            Instant {
                spec: libc::timespec {
                    tv_sec: secs,
                    tv_nsec: util::cast(nsec)
                }
            }
        }

        fn equals(lhs: &Instant, rhs: &Instant) -> bool {
            lhs.spec.tv_sec == rhs.spec.tv_sec && lhs.spec.tv_nsec == rhs.spec.tv_nsec
        }

        fn compare(lhs: &Instant, rhs: &Instant) -> cmp::Ordering {
            cmp::lexicographic_cmp!(lhs.spec.tv_sec, rhs.spec.tv_sec);
            lhs.spec.tv_nsec.compare(&rhs.spec.tv_nsec)
        }

        mixin cmp::Comparable<Instant>;
        mixin cmp::Equatable<Instant>;
    }
}

#[cfg(target_os = "macos")]
{
    /// Darwin-specific implementation.
    mod internal {
        struct mach_timebase_info_t {
            numer: u32,
            denom: u32,
        }
        use libc::c_int as kern_return_t;

        extern "C" fn mach_absolute_time() -> u64;
        extern "C" fn mach_timebase_info(info: &mut mach_timebase_info_t) -> kern_return_t;

        static TIMEBASE: mach_timebase_info_t = {
            let v: mach_timebase_info_t;
            mach_timebase_info(&v);
            v
        };   
    }

    struct Instant {
        inner: u64
    }

    impl Instant {
        use internal::*;

        fn now() -> Instant {
            Instant { inner: mach_absolute_time() }
        }

        fn since(self: &Instant, other: &Instant) -> Duration {
            let diff = self.inner - other.inner;
            let total_nanos = ((diff as i128) * (TIMEBASE.numer as i128) / (TIMEBASE.denom as i128)) as i64;

            let (secs, nanos) = math::div_floor(total_nanos, NANOS_PER_SEC as i64);
            Duration::new(secs, nanos as u32)
        }

        fn add(lhs: &Instant, rhs: &Duration) -> Instant {
            let total_nanos = (rhs.nanos as u128) + (rhs.secs as u128) * (NANOS_PER_SEC as u128);
            let nanos = (total_nanos * (TIMEBASE.denom as u128) / (TIMEBASE.numer as u128)) as u64;

            Instant {
                inner: lhs.inner + nanos
            }
        }

        fn sub(lhs: &Instant, rhs: &Duration) -> Instant {
            let total_nanos = (rhs.nanos as u128) + (rhs.secs as u128) * (NANOS_PER_SEC as u128);
            let nanos = (total_nanos * (TIMEBASE.denom as u128) / (TIMEBASE.numer as u128)) as u64;

            Instant {
                inner: lhs.inner - nanos
            }
        }

        fn equals(lhs: &Instant, rhs: &Instant) -> bool {
            lhs.inner == rhs.inner
        }

        fn compare(lhs: &Instant, rhs: &Instant) -> cmp::Ordering {
            lhs.inner.compare(&rhs.inner)
        }

        mixin cmp::Comparable<Instant>;
        mixin cmp::Equatable<Instant>;
    }
}

struct Duration {
    secs: i64,
    nanos: u32,
}

// Duration is signed, unlike Rust, which only supports non-negative durations. It is assumed
// to always be normalized, i.e. 0 <= nanos < NANOS_PER_SEC.
impl Duration {
    fn new(secs: i64, nanos: u32) -> Duration {
        Duration { 
            secs: (nanos / NANOS_PER_SEC) as i64 + secs, 
            nanos: nanos % NANOS_PER_SEC 
        }
    }

    #[inline]
    fn zero() -> Duration {
        Duration { secs: 0, nanos: 0 }
    }


    #[inline]
    fn negative(self: Duration) -> bool {
        self.secs < 0
    }


    #[inline]
    fn from_secs(secs: i64) -> Duration {
        Duration { secs: secs, nanos: 0 }
    }


    #[inline]
    fn from_millis(millis: i64) -> Duration {
        let (secs, millis) = math::div_floor(millis, MILLIS_PER_SEC as i64);
        Duration {
            secs: secs,
            nanos: millis as u32 * NANOS_PER_MILLI
        }
    }


    #[inline]
    fn from_micros(micros: i64) -> Duration {
        let (secs, micros) = math::div_floor(micros, MICROS_PER_SEC as i64);
        Duration {
            secs: secs,
            nanos: micros as u32 * NANOS_PER_MICRO
        }
    }

    #[inline]
    fn from_nanos(nanos: i64) -> Duration {
        let (secs, nanos) = math::div_floor(nanos, NANOS_PER_SEC as i64);

        Duration {
            secs: secs,
            nanos: nanos as u32,
        }
    }

    #[inline]
    fn add(self: &Duration, rhs: &Duration) -> Duration {
        let secs = self.secs + rhs.secs;
        let nanos = self.nanos + rhs.nanos;

        if nanos >= NANOS_PER_SEC {
            secs += 1;
            nanos -= NANOS_PER_SEC
        } 

        Duration {
            secs: secs,
            nanos: nanos,
        }
    }

    #[inline]
    fn sub(self: &Duration, rhs: &Duration) -> Duration {
        let secs = self.secs - rhs.secs;
        let nanos = (self.nanos as i32) - (rhs.nanos as i32);

        if nanos < 0 {
            secs -= 1;
            nanos += NANOS_PER_SEC as i32
        }

        Duration {
            secs: secs,
            nanos: nanos as u32,
        }
    }

    #[inline]
    fn total_secs(self: &Duration) -> f64 {
        (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)
    }

    fn equals(lhs: &Duration, rhs: &Duration) -> bool {
        lhs.secs == rhs.secs && lhs.nanos == rhs.nanos
    }

    fn compare(lhs: &Duration, rhs: &Duration) -> cmp::Ordering {
        cmp::lexicographic_cmp!(lhs.secs, rhs.secs);
        lhs.nanos.compare(&rhs.nanos)
    }

    fn fmt<F: fmt::Formatter<F>>(self: &Duration, f: &mut F) -> Result<(), fmt::Error> {
        use fmt::{write, zero_pad};

        let abs = if self.negative() {
            f.write_char('-')?;
            Duration::zero().sub(self)
        } else {
            *self
        };
        
        let secs = abs.secs % 60;
        let mins = (abs.secs / 60) % 60;
        let hours = abs.secs / 3600;

        if abs.nanos > 0 {
            write!(f, "{}:{}:{}.{}", hours.zero_pad(2), mins.zero_pad(2), secs.zero_pad(2), abs.nanos.zero_pad(9))
        } else {
            write!(f, "{}:{}:{}", hours.zero_pad(2), mins.zero_pad(2), secs.zero_pad(2))
        }
    }

    mixin cmp::Comparable<Duration>;
    mixin cmp::Equatable<Duration>;
}


#[cfg(all(test, test_std))]
mod tests {
    use fmt::format_in;

    #[test]
    fn test_monotonish() {
        let start = Instant::now();
        let end = Instant::now();

        assert!(end > start);
    }

    #[test]
    fn test_from() {
        let dur = Duration::from_secs(1);
        assert_eq!(dur.secs, 1);
        assert_eq!(dur.nanos, 0);

        let dur = Duration::from_millis(1);
        assert_eq!(dur.secs, 0);
        assert_eq!(dur.nanos, 1000000);

        let dur = Duration::from_micros(1);
        assert_eq!(dur.secs, 0);
        assert_eq!(dur.nanos, 1000);

        let dur = Duration::from_nanos(1);
        assert_eq!(dur.secs, 0);
        assert_eq!(dur.nanos, 1);
    }

    #[test]
    fn test_from_negative() {
        let dur = Duration::from_secs(-1);
        assert_eq!(dur.secs, -1);
        assert_eq!(dur.nanos, 0);

        let dur = Duration::from_millis(-1);
        assert_eq!(dur.secs, -1);
        assert_eq!(dur.nanos, 999000000);

        let dur = Duration::from_micros(-1);
        assert_eq!(dur.secs, -1);
        assert_eq!(dur.nanos, 999999000);

        let dur = Duration::from_nanos(-1);
        assert_eq!(dur.secs, -1);
        assert_eq!(dur.nanos, 999999999);
    }

    #[test]
    fn test_artithmetic() {
        let start = Instant::now();
        let end = start.add(&Duration::from_secs(1));

        assert!(start == start);
        assert!(start >= start);
        assert!(end > start);
        assert!(end != start);

        assert_eq!(start.since(&start), Duration::zero());
        assert_eq!(end.since(&start), Duration::from_secs(1));
        assert_eq!(start.since(&end), Duration::from_secs(-1));

        let start1 = end.sub(&Duration::from_secs(1));
        assert_eq!(start1, start);
    }

    static BUF: [u8; 1024];

    #[test]
    fn test_fmt() {
        let buf: [u8; 1024];
        let buf = buf.as_slice_mut();

        macro chk($dur, $expected) {
            assert_eq!(
                format_in!(buf, "{}", $dur).unwrap(),
                $expected
            );    
        }
        
        chk!(Duration::zero(), "00:00:00");
        chk!(Duration::from_secs(1), "00:00:01");
        chk!(Duration::from_secs(60), "00:01:00");
        chk!(Duration::from_secs(60*60), "01:00:00");
        chk!(Duration::from_secs(86399), "23:59:59");
        chk!(Duration::from_nanos(1), "00:00:00.000000001");
        chk!(Duration::from_nanos(999999999), "00:00:00.999999999"); 

        chk!(Duration::from_secs(-1), "-00:00:01");
        chk!(Duration::from_secs(-60), "-00:01:00");
        chk!(Duration::from_secs(-60*60), "-01:00:00");
        chk!(Duration::from_secs(-86399), "-23:59:59");
        chk!(Duration::from_nanos(-1), "-00:00:00.000000001");
        chk!(Duration::from_nanos(-999999999), "-00:00:00.999999999");
    }
}
