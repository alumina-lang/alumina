use io::{Error, Result, FileDescriptor, SeekFrom, Readable, Writable, Seekable};
use io::unix::{errno_try, FdReadWrite};

/// Options for how the file should be opened.
struct OpenOptions {
    _read: bool,
    _write: bool,
    _append: bool,
    _truncate: bool,
    _create: bool,
    _create_new: bool,
    _custom_flags: i32,
    _mode: libc::mode_t,
}

impl OpenOptions {
    fn new() -> OpenOptions {
        OpenOptions {
            _read: false,
            _write: false,
            _append: false,
            _truncate: false,
            _create: false,
            _create_new: false,
            _custom_flags: 0,
            _mode: 0o666,
        }
    }

    /// Sets the option for read access.
    fn read(self: &mut OpenOptions, read: bool) -> &mut OpenOptions {
        self._read = read;
        self
    }

    /// Sets the option for write access.
    fn write(self: &mut OpenOptions, write: bool) -> &mut OpenOptions {
        self._write = write;
        self
    }

    /// Sets the option for append access.
    fn append(self: &mut OpenOptions, append: bool) -> &mut OpenOptions {
        self._append = append;
        self
    }

    /// Sets the option for truncate access.
    fn truncate(self: &mut OpenOptions, truncate: bool) -> &mut OpenOptions {
        self._truncate = truncate;
        self
    }

    /// Sets the option for create access.
    fn create(self: &mut OpenOptions, create: bool) -> &mut OpenOptions {
        self._create = create;
        self
    }

    /// Sets the option for create new access.
    fn create_new(self: &mut OpenOptions, create_new: bool) -> &mut OpenOptions {
        self._create_new = create_new;
        self
    }

    /// Sets the custom flags.
    fn custom_flags(self: &mut OpenOptions, flags: i32) -> &mut OpenOptions {
        self._custom_flags = flags;
        self
    }

    /// Sets the mode for creation.
    fn mode(self: &mut OpenOptions, mode: u32) -> &mut OpenOptions {
        self._mode = mode as libc::mode_t;
        self
    }

    fn get_access_mode(self: &OpenOptions) -> libc::c_int {
        switch (self._read, self._write, self._append) {
            (true, false, false) => libc::O_RDONLY,
            (false, true, false) => libc::O_WRONLY,
            (true, true, false) => libc::O_RDWR,
            (false, true, true), (false, false, true)  => libc::O_WRONLY | libc::O_APPEND,
            (true, true, true), (true, false, true) => libc::O_RDWR | libc::O_APPEND,
            _ => -1
        }
    }

    fn get_creation_mode(self: &OpenOptions) -> libc::c_int {
        switch (self._write, self._append) {
            (true, false) => {}
            (false, false) => {
                if self._truncate || self._create || self._create_new {
                    return -1;
                }
            }
            (true, true), (false, true) => {
                if self._truncate && !self._create_new {
                    return -1;
                }
            }
        }

        switch (self._create, self._truncate, self._create_new) {
            (false, false, false) => 0,
            (true, false, false) => libc::O_CREAT,
            (false, true, false) => libc::O_TRUNC,
            (true, true, false) => libc::O_CREAT | libc::O_TRUNC,
            _ => libc::O_CREAT | libc::O_EXCL,
        }
    }
}

/// Utility for creating directories.
///
/// ## Example
/// ```
/// use std::fs::{DirBuilder, Path};
///
/// DirBuilder::new()
///     .recursive(true)
///     .create(Path::new("/tmp/alumina/a/b/c/d/e/f"))
///     .unwrap();
/// ```
struct DirBuilder {
    _recursive: bool,
    _mode: libc::mode_t,
}

impl DirBuilder {
    fn new() -> DirBuilder {
        DirBuilder {
            _recursive: false,
            _mode: 0o777,
        }
    }

    /// Sets whether to create a recursive directory structure.
    fn recursive(self: &mut DirBuilder, recursive: bool) -> &mut DirBuilder {
        self._recursive = recursive;
        self
    }

    /// Sets the mode for creation.
    fn mode(self: &mut DirBuilder, mode: u32) -> &mut DirBuilder {
        self._mode = mode as libc::mode_t;
        self
    }

    fn _mkdir(self: &DirBuilder, path: Path) -> Result<()> {
        let path = ffi::CString::from_slice(path.inner);
        defer path.free();

        errno_try!(libc::mkdir(path.ptr, self._mode));
        Result::ok(())
    }

    /// Create the directory (or directory tree) specified by `path`.
    fn create(self: &DirBuilder, path: Path) -> Result<()> {
        if self._recursive {
            let res = self._mkdir(path);
            if res.is_ok() {
                return Result::ok(())
            } else if res.unwrap_err().as_errno() != Option::some(libc::ENOENT) {
                let attr = FileAttr::from_path(path)?;
                if attr.file_type() == FileType::Directory {
                    return Result::ok(());
                } else {
                    return res;
                }
            }

            let parent = path.parent();
            if parent.is_some() {
                self.create(parent.unwrap())?;
            } else {
                return Result::err(Error::custom("failed to create directory tree"))
            }
        }

        self._mkdir(path)
    }
}

/// Create an empty directory
///
/// See also [fs::DirBuilder] for creating directories with more options (e.g. recursively).
fn create_directory(path: Path) -> Result<()> {
    DirBuilder::new().create(path)
}

/// Remove a file
///
/// ## Example
/// ```
/// use std::fs::{File, Path, remove_file};
///
/// let filename = Path::new("foo.txt");
/// // Create an empty file
/// File::create(filename).unwrap().close().unwrap();
/// // Remove the file
/// remove_file(filename).unwrap();
/// ```
fn remove_file(path: Path) -> Result<()> {
    let path_c = std::ffi::CString::from_slice(path.inner);
    defer path_c.free();

    errno_try!(libc::unlink(path_c.ptr));

    Result::ok(())
}

/// Remove an empty directory
fn remove_directory(path: Path) -> Result<()> {
    let path_c = std::ffi::CString::from_slice(path.inner);
    defer path_c.free();

    errno_try!(libc::rmdir(path_c.ptr));

    Result::ok(())
}

/// A file.
///
/// ## Example
/// ```
/// use std::fs::{File, Path};
/// use std::string::StringBuf;
///
/// let file = File::open(Path::new("/etc/passwd")).unwrap();
/// defer file.close();
///
/// let buf = StringBuf::new();
/// defer buf.free();
///
/// file.read_to_end(&buf).unwrap();
///
/// println!("{}", buf[..]);
/// ```
struct File {
    fd: FileDescriptor
}

impl File {
    use ffi::CString;

    /// Opens file in read-only mode.
    fn open(path: Path) -> Result<File> {
        open_with(path, OpenOptions::new().read(true))
    }

    /// Creates a new file for writing (truncating it if it already exists).
    fn create(path: Path) -> Result<File> {
        open_with(path, OpenOptions::new().write(true).create(true).truncate(true))
    }

    /// Opens file with custom options.
    fn open_with(path: Path, opts: &OpenOptions) -> Result<File> {
        let path = CString::from_slice(path.inner);
        defer path.free();

        let flags = libc::O_CLOEXEC
            | opts.get_access_mode()
            | opts.get_creation_mode()
            | (opts._custom_flags as libc::c_int & ~libc::O_ACCMODE);

        let fd = errno_try!(libc::open(
            path.ptr,
            flags,
            opts._mode as libc::mode_t
        ));

        Result::ok(File { fd: FileDescriptor::new(fd) })
    }

    /// Returns the file attributes (`stat`) for the file
    fn attributes(self: &File) -> Result<FileAttr> {
        let result: FileAttr;

        #[cfg(any(target_os = "macos", target_env = "musl"))]
        errno_try!(libc::fstat(self.fd.value, &result.inner));

        #[cfg(not(any(target_os = "macos", target_env = "musl")))]
        errno_try!(libc::fstat64(self.fd.value, &result.inner));

        Result::ok(result)
    }

    /// Create a file object from an existing file descriptor.
    fn from_fd(fd: FileDescriptor) -> File {
        File { fd: fd }
    }

    /// Get the file descriptor for the file.
    fn as_fd(self: &File) -> FileDescriptor {
        self.fd
    }

    /// Read the entire file into a [std::string::StringBuf].
    fn read_to_string(path: Path) -> Result<string::StringBuf> {
        use string::StringBuf;

        let file = File::open(path)?;
        defer file.close();

        let attrs = file.attributes()?;

        let string = StringBuf::with_capacity(attrs.size() as usize);
        defer string.free();

        file.read_to_end(&string)?;

        Result::ok(string.move())
    }

    /// @ io::Seekable::seek
    fn seek(self: &mut File, whence: SeekFrom, offset: i64) -> Result<u64> {
        #[cfg(any(target_os = "macos", target_env = "musl"))]
        let ret = errno_try!(libc::lseek(self.fd.value, offset, whence as libc::c_int));
        #[cfg(not(any(target_os = "macos", target_env = "musl")))]
        let ret = errno_try!(libc::lseek64(self.fd.value, offset, whence as libc::c_int));

        Result::ok(ret as u64)
    }

    /// @ io::Writable::flush
    fn flush(self: &mut File) -> Result<()> {
        Result::ok(())
    }

    /// Flushes disk buffers to disk (`fsync`)
    fn sync(self: &mut File) -> Result<()> {
        errno_try!(libc::fsync(self.fd.value));
        Result::ok(())
    }

    /// Closes the file.
    fn close(self: &mut File) -> Result<()> {
        self.fd.close()
    }

    /// @ std::mem::Movable::move
    fn move(self: &mut File) -> File {
        File { fd: self.fd.move() }
    }

    mixin FdReadWrite<File>;
    mixin Readable<File>;
    mixin Writable<File>;
    mixin Seekable<File>;
}


/// Iterator over the items in a directory
///
/// See [fs::read_directory] for details.
struct DirIterator {
    inner: &mut libc::DIR
}

impl DirIterator {
    /// @ std::iter::Iterator::next
    fn next(self: &mut DirIterator) -> Option<Result<DirEntry>> {
        loop {
            *libc::__errno_location() = 0;

            #[cfg(any(target_os = "macos", target_env = "musl"))]
            let ent = libc::readdir(self.inner);
            #[cfg(not(any(target_os = "macos", target_env = "musl")))]
            let ent = libc::readdir64(self.inner);

            if ent == null {
                let err = Error::from_errno();
                if err.inner.errno == 0 {
                    return Option::none();
                } else {
                    return Option::some(Result::err(err));
                }
            }

            let res = DirEntry { inner: ent };
            let name = res.name();
            if name == "." || name == ".." {
                continue
            }

            return Option::some(Result::ok(res));
        }
    }

    /// Closes the file descriptor associated with the iterator.
    ///
    /// Make sure to call it when done with iteration.
    fn close(self: &mut DirIterator) -> Result<()> {
        errno_try!(libc::closedir(self.inner));
        Result::ok(())
    }

    mixin std::iter::Iterator<DirIterator, Result<DirEntry>>;
    mixin std::iter::IteratorExt<DirIterator, Result<DirEntry>>;
}

/// Directory entry
struct DirEntry {
    #[cfg(any(target_os = "macos", target_env = "musl"))]
    inner: &mut libc::dirent,
    #[cfg(not(any(target_os = "macos", target_env = "musl")))]
    inner: &mut libc::dirent64,
}

impl DirEntry {
    /// Return the name of the item in directory
    fn name(self: &DirEntry) -> &[u8] {
        std::ffi::CString::from_raw(&self.inner.d_name[0])[..]
    }

    /// Returns the file type
    fn file_type(self: &DirEntry) -> FileType {
        switch self.inner.d_type {
            libc::DT_FIFO => FileType::Fifo,
            libc::DT_CHR => FileType::CharacterDevice,
            libc::DT_DIR => FileType::Directory,
            libc::DT_BLK => FileType::BlockDevice,
            libc::DT_REG => FileType::Regular,
            libc::DT_LNK => FileType::Link,
            libc::DT_SOCK => FileType::Socket,
            _ => FileType::Unknown
        }
    }
}

/// Returns iterator over the items in a directory.
///
/// See [fs::DirEntry] for the item returned.
///
/// ## Example
/// ```
/// use std::fs::{Path, read_directory};
///
/// let dir = read_directory(Path::new(".")).unwrap();
/// defer dir.close();
///
/// for item in dir {
///     let item = item.unwrap();
///     println!("{}: {}", item.name(), item.file_type());
/// }
/// ```
fn read_directory(path: Path) -> Result<DirIterator> {
    let path_c = std::ffi::CString::from_slice(path.inner);
    defer path_c.free();

    let res = libc::opendir(path_c.ptr);
    if res == null {
        Result::err(Error::from_errno())
    } else {
        Result::ok(DirIterator { inner: res })
    }
}

/// Returns a canonical absolute path for the given path.
///
/// ## Example
/// ```
/// use std::fs::{Path, canonicalize};
///
/// let cwd = Path::new(".").canonicalize().unwrap();
/// defer cwd.free();
///
/// println!("Current directory: {}", cwd);
/// ```
fn canonicalize(path: Path) -> Result<PathBuf> {
    use ffi::CString;
    use string::StringBuf;

    let path_c = CString::from_slice(path.inner);
    defer path_c.free();

    let ret = libc::realpath(path_c.ptr, null);
    if ret == null {
        Result::err(Error::from_errno())
    } else {
        let len = CString::from_raw(ret).len();
        // We don't know the exact size of the allocated buffer, so we assume
        // that it is at least as big as the length of the string plus the null
        // terminator.
        #[allow(unnecessary_cast)]
        let slice = mem::slice::from_raw(ret as &mut u8, len + 1);

        Result::ok(PathBuf { inner: StringBuf::from_raw(slice, len) })
    }
}


/// Type of the file (regular file, symlink, directory, ...)
enum FileType {
    Fifo = libc::S_IFIFO,
    CharacterDevice = libc::S_IFCHR,
    Directory = libc::S_IFDIR,
    BlockDevice = libc::S_IFBLK,
    Regular = libc::S_IFREG,
    Link = libc::S_IFLNK,
    Socket = libc::S_IFSOCK,
    Unknown = 0,
}

impl FileType {
    use hash::Hasher;

    /// @ fmt::Formattable::fmt
    fn fmt<F: std::fmt::Formatter<F>>(self: &FileType, fmt: &mut F) -> std::fmt::Result {
        use fmt::write;
        switch *self {
            FileType::Unknown => write!(fmt, "unknown"),
            FileType::Fifo => write!(fmt, "fifo"),
            FileType::CharacterDevice => write!(fmt, "character device"),
            FileType::Directory => write!(fmt, "directory"),
            FileType::BlockDevice => write!(fmt, "block device"),
            FileType::Regular => write!(fmt, "regular"),
            FileType::Link => write!(fmt, "link"),
            FileType::Socket => write!(fmt, "socket"),
            _ => write!(fmt, "unknown"),
        }
    }

    /// @ cmp::Equatable::equals
    fn equals(self: &FileType, other: &FileType) -> bool {
        *self == *other
    }

    /// @ hash::Hashable::hash
    fn hash<H: Hasher<H>>(self: &FileType, hasher: &mut H) {
        (*self as i32).hash(hasher);
    }

    mixin std::cmp::Equatable<FileType>;
}

/// File attributes (`stat`)
struct FileAttr {
    #[cfg(any(target_os = "macos", target_env = "musl"))]
    inner: libc::stat_t,
    #[cfg(not(any(target_os = "macos", target_env = "musl")))]
    inner: libc::stat64_t,
}

impl FileAttr {
    /// Returns file attributes for a path.
    fn from_path(path: Path) -> Result<FileAttr> {
        let path = ffi::CString::from_slice(path.inner);
        defer path.free();

        let result: FileAttr;

        #[cfg(any(target_os = "macos", target_env = "musl"))]
        errno_try!(libc::stat(path.ptr, &result.inner));

        #[cfg(not(any(target_os = "macos", target_env = "musl")))]
        errno_try!(libc::stat64(path.ptr, &result.inner));

        Result::ok(result)
    }

    /// Returns file type.
    fn file_type(self: &FileAttr) -> FileType {
        (self.inner.st_mode & libc::S_IFMT) as FileType
    }

    /// Returns the size of the file, in bytes.
    fn size(self: &FileAttr) -> u64 {
        self.inner.st_size as u64
    }
}


#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    use fmt::{hex, zero_pad, format, format_in};
    use cmp::sort_by_key;
    use string::StringBuf;

    static BUF: [u8; 1024];
    static BUF1: [u8; 1024];

    fn mktemp() -> PathBuf {
        let tmpdir = PathBuf::from_path(
            Path::new(
                std::process::env()
                    .get("TMPDIR")
                    .unwrap_or("/tmp")
            )
        );

        tmpdir.push(Path::new(format_in!(&BUF1,
            "alumina_{}",
            random::OsRng::new().next_u64().hex().zero_pad(16)
        ).unwrap()));

        tmpdir
    }

    #[test]
    fn test_open() {
        let filename = mktemp();
        defer filename.free();

        let file = File::create(filename.as_path()).unwrap();

        file.write_all("Hello, world!").unwrap();
        file.close().unwrap();

        let file = File::open(filename.as_path()).unwrap();
        defer file.close();

        let read = file.read(&BUF).unwrap();
        assert_eq!(BUF[..read] as &[u8], "Hello, world!");

        file.seek(SeekFrom::Beginning, 7).unwrap();

        let read = file.read(&BUF).unwrap();
        assert_eq!(BUF[..read] as &[u8], "world!");

        let attrs = file.attributes().unwrap();
        assert_eq!(attrs.size(), 13);

        file.close().unwrap();

        FileAttr::from_path(filename.as_path()).unwrap();
        assert_eq!(attrs.size(), 13);
        assert_eq!(attrs.file_type(), FileType::Regular);

        let read_back = File::read_to_string(filename.as_path()).unwrap();
        defer read_back.free();

        assert_eq!(read_back[..] as &[u8], "Hello, world!");
    }


    #[test]
    fn test_read_directory() {
        let path = mktemp();
        defer path.free();

        create_directory(path.as_path()).unwrap();

        (0..5).foreach(|&path, i: i32| {
            let filename = path.clone();
            filename.push(Path::new(format_in!(&BUF1, "hello{}.txt", i.zero_pad(2)).unwrap()));
            defer filename.free();

            File::create(filename.as_path()).unwrap().close().unwrap();
        });

        let dir = read_directory(path.as_path()).unwrap();
        defer dir.close();

        let entries = dir
            .map(|e: Result<DirEntry>| -> StringBuf  {
                StringBuf::from_slice(e.unwrap().name())
            })
            .to_vector();
        defer entries.free_all();

        entries[..]
            .sort_by_key(|e: &StringBuf| -> &[u8] { e[..] });

        let it = entries.iter_ref().map(StringBuf::as_slice);

        assert_eq!(it.next(), Option::some("hello00.txt"));
        assert_eq!(it.next(), Option::some("hello01.txt"));
        assert_eq!(it.next(), Option::some("hello02.txt"));
        assert_eq!(it.next(), Option::some("hello03.txt"));
        assert_eq!(it.next(), Option::some("hello04.txt"));
        assert_eq!(it.next(), Option::none());
    }

    #[test]
    fn test_canonicalize() {
        let cwd = process::current_dir().unwrap();
        defer cwd.free();

        let path = canonicalize(Path::new(".")).unwrap();
        defer path.free();

        assert_eq!(path.as_path(), cwd.as_path());
    }

    #[test]
    fn test_create_remove_directory() {
        let path = mktemp();
        defer path.free();

        create_directory(path.as_path()).unwrap();
        remove_directory(path.as_path()).unwrap();

        let nested = path.clone();
        defer nested.free();
        nested.push(Path::new("a/b/c/d/e/f/g/h/i/j/k/l"));

        DirBuilder::new().recursive(true).create(nested.as_path()).unwrap();
        remove_directory(path.as_path()).unwrap_err();
    }

    #[test]
    fn test_remove_file() {
        let path = mktemp();
        defer path.free();

        File::create(path.as_path()).unwrap().close().unwrap();
        remove_file(path.as_path()).unwrap();
    }
}
