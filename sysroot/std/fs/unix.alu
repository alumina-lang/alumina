use io::{Error, FileDescriptor, SeekFrom, Readable, Writable, Seekable};
use io::unix::{errno_try, FdReadWrite};

struct OpenOptions {
    _read: bool,
    _write: bool,
    _append: bool,
    _truncate: bool,
    _create: bool,
    _create_new: bool,
    _custom_flags: i32,
    _mode: libc::mode_t,
}

impl OpenOptions {
    fn new() -> OpenOptions {
        OpenOptions {
            _read: false,
            _write: false,
            _append: false,
            _truncate: false,
            _create: false,
            _create_new: false,
            _custom_flags: 0,
            _mode: 0o666,
        }
    }

    fn read(self: &mut OpenOptions, read: bool) -> &mut OpenOptions {
        self._read = read;
        self
    }
    fn write(self: &mut OpenOptions, write: bool) -> &mut OpenOptions {
        self._write = write;
        self
    }
    fn append(self: &mut OpenOptions, append: bool) -> &mut OpenOptions {
        self._append = append;
        self
    }
    fn truncate(self: &mut OpenOptions, truncate: bool) -> &mut OpenOptions {
        self._truncate = truncate;
        self
    }
    fn create(self: &mut OpenOptions, create: bool) -> &mut OpenOptions {
        self._create = create;
        self
    }
    fn create_new(self: &mut OpenOptions, create_new: bool) -> &mut OpenOptions {
        self._create_new = create_new;
        self
    }
    fn custom_flags(self: &mut OpenOptions, flags: i32) -> &mut OpenOptions {
        self._custom_flags = flags;
        self
    }
    fn mode(self: &mut OpenOptions, mode: u32) -> &mut OpenOptions {
        self._mode = mode as libc::mode_t;
        self
    }

    fn get_access_mode(self: &OpenOptions) -> libc::c_int {
        switch (self._read, self._write, self._append) {
            (true, false, false) => libc::O_RDONLY,
            (false, true, false) => libc::O_WRONLY,
            (true, true, false) => libc::O_RDWR,
            (false, true, true), (false, false, true)  => libc::O_WRONLY | libc::O_APPEND,
            (true, true, true), (true, false, true) => libc::O_RDWR | libc::O_APPEND,
            _ => -1
        }
    }

    fn get_creation_mode(self: &OpenOptions) -> libc::c_int {
        switch (self._write, self._append) {
            (true, false) => {}
            (false, false) => {
                if self._truncate || self._create || self._create_new {
                    return -1;
                }
            }
            (true, true), (false, true) => {
                if self._truncate && !self._create_new {
                    return -1;
                }
            }
        }

        switch (self._create, self._truncate, self._create_new) {
            (false, false, false) => 0,
            (true, false, false) => libc::O_CREAT,
            (false, true, false) => libc::O_TRUNC,
            (true, true, false) => libc::O_CREAT | libc::O_TRUNC,
            _ => libc::O_CREAT | libc::O_EXCL,
        }
    }
}

struct DirBuilder {
    mode: libc::mode_t,
}

impl DirBuilder {
    fn new() -> DirBuilder {
        DirBuilder {
            mode: 0o777,
        }
    }

    fn mode(self: &mut DirBuilder, mode: u32) -> &mut DirBuilder {
        self.mode = mode as libc::mode_t;
        self
    }

    fn mkdir(self: &DirBuilder, path: &[u8]) -> Result<(), Error> {
        let path = ffi::CString::new(path);
        defer path.free();
        
        errno_try!(libc::mkdir(path.ptr, self.mode));
        Result::ok(())
    }
}

/// Create a new directory
fn create_directory(path: &[u8]) -> Result<(), Error> {
    DirBuilder::new().mkdir(path)
}


struct File {
    fd: FileDescriptor
}

impl File {
    use ffi::CString;

    /// Opens file in read-only mode.
    fn open(path: &[u8]) -> Result<File, Error> {
        open_with(path, OpenOptions::new().read(true))
    }

    /// Creates a new file for writing (truncating it if it already exists).
    fn create(path: &[u8]) -> Result<File, Error> {
        open_with(path, OpenOptions::new().write(true).create(true).truncate(true))
    }

    /// Opens file with custom options.
    fn open_with(path: &[u8], opts: &OpenOptions) -> Result<File, Error> {
        let path = CString::new(path);
        defer path.free();

        let flags = libc::O_CLOEXEC
            | opts.get_access_mode()
            | opts.get_creation_mode()
            | (opts._custom_flags as libc::c_int & ~libc::O_ACCMODE);

        let fd = errno_try!(libc::open(
            path.ptr,
            flags,
            opts._mode as libc::mode_t
        ));

        Result::ok(File { fd: FileDescriptor::new(fd) })
    }

    fn from_fd(fd: FileDescriptor) -> File {
        File { fd: fd }
    }

    fn as_fd(self: &File) -> FileDescriptor {
        self.fd
    }

    fn read_to_string(path: &[u8]) -> Result<string::StringBuf, Error> {
        use std::io::copy;

        let string = collections::Vector::new::<u8>();
        defer string.free();

        let file = File::open(path)?;
        defer file.close();

        let ret = file.read_to_end(&string)?;

        Result::ok(string.move())
    }

    fn seek(self: &mut File, whence: SeekFrom, offset: i64) -> Result<u64, Error> {
        #[cfg(not(target_os = "macos"))]
        let ret = errno_try!(libc::lseek64(self.fd.value, offset, whence as libc::c_int));
        #[cfg(target_os = "macos")]
        let ret = errno_try!(libc::lseek(self.fd.value, offset, whence as libc::c_int));

        Result::ok(ret as u64)
    }

    fn flush(self: &mut File) -> Result<(), Error> {
        Result::ok(())
    }

    fn sync(self: &mut File) -> Result<(), Error> {
        let ret = errno_try!(libc::fsync(self.fd.value));
        Result::ok(())
    }

    fn close(self: &mut File) -> Result<(), Error> {
        self.fd.close()
    }

    fn move(self: &mut File) -> File {
        File { fd: self.fd.move() }
    }

    mixin FdReadWrite<File>;
    mixin Readable<File>;
    mixin Writable<File>;
    mixin Seekable<File>;
}


/// Iterator over the items in a directory
///
/// See [std::fs::unix::read_directory]
struct DirIterator {
    inner: &mut libc::DIR
}

impl DirIterator {
    fn next(self: &mut DirIterator) -> Option<Result<DirEntry, Error>> {
        loop {
            *libc::__errno() = 0;

            #[cfg(target_os = "macos")]
            let ent = libc::readdir(self.inner);
            #[cfg(not(target_os = "macos"))]
            let ent = libc::readdir64(self.inner);
            
            if ent == null {
                let err = Error::from_errno();
                if err.inner.errno == 0 {
                    return Option::none();
                } else {
                    return Option::some(Result::err(err));
                }
            }

            let res = DirEntry { inner: ent };
            let name = res.name();
            if name == "." || name == ".." {
                continue
            }

            return Option::some(Result::ok(res));
        }
    }

    fn close(self: &mut DirIterator) -> Result<(), Error> {
        errno_try!(libc::closedir(self.inner));
        Result::ok(())
    }

    mixin std::iter::Iterator<DirIterator, Result<DirEntry, Error>>;
    mixin std::iter::IteratorExt<DirIterator, Result<DirEntry, Error>>;
}

/// Directory entry
struct DirEntry {
    #[cfg(target_os = "macos")]
    inner: &mut libc::dirent,
    #[cfg(not(target_os = "macos"))]
    inner: &mut libc::dirent64,
}

impl DirEntry {
    /// Return the name of the item in directory
    fn name(self: &DirEntry) -> &[u8] {
        std::ffi::CString::from_raw(&self.inner.d_name[0]).as_slice()
    }

    /// Returns the file type
    fn file_type(self: &DirEntry) -> FileType {
        self.inner.d_type as u8 as FileType
    }
}

/// Returns iterator over the items in a directory.
///
/// # Example
/// ```
/// use std::fs::read_directory;
///
/// let dir = read_directory("/home/alumina")?
/// defer dir.close()?;
/// 
/// for item in dir {
///     let item = item?;
///     println!("{}: {}", item.name(), item.file_type());
/// }
/// ```
fn read_directory(path: &[u8]) -> Result<DirIterator, Error> {
    let path_c = std::ffi::CString::new(path);
    defer path_c.free();

    let res = libc::opendir(path_c.ptr);
    if res == null {
        Result::err(Error::from_errno())
    } else {
        Result::ok(DirIterator { inner: res })
    }
}


enum FileType {
    Unknown = libc::DT_UNKNOWN,
    Fifo = libc::DT_FIFO,
    CharacterDevice = libc::DT_CHR,
    Directory = libc::DT_DIR,
    BlockDevice = libc::DT_BLK,
    Regular = libc::DT_REG,
    Link = libc::DT_LNK,
    Socket = libc::DT_SOCK,
}

impl FileType {
    fn fmt<F: std::fmt::Formatter<F>>(self: &FileType, fmt: &mut F) -> std::fmt::Result {
        use std::fmt::write;
        switch *self {
            FileType::Unknown => write!(fmt, "unknown"),
            FileType::Fifo => write!(fmt, "fifo"),
            FileType::CharacterDevice => write!(fmt, "character device"),
            FileType::Directory => write!(fmt, "directory"),
            FileType::BlockDevice => write!(fmt, "block device"),
            FileType::Regular => write!(fmt, "regular"),
            FileType::Link => write!(fmt, "link"),
            FileType::Socket => write!(fmt, "socket"),
            _ => write!(fmt, "unknown"),            
        }
    }

    fn equals(self: &FileType, other: &FileType) -> bool {
        *self == *other
    }

    mixin std::cmp::Equatable<FileType>;
}



#[cfg(all(test, test_std))]
mod tests {
    use fmt::{hex, pad, zero_pad, format};
    use collections::{free_all, sort_by};
    use string::StringBuf;
    
    static BUF: [u8; 1024];
    static BUF1: [u8; 1024];

    fn mktemp() -> StringBuf {
        let tmpdir = std::process::env()
            .filter(|e: (&[u8], &[u8])| -> bool { e.0 == "TMPDIR" })
            .map(|e: (&[u8], &[u8])| -> &[u8] { e.1 })
            .next()
            .unwrap_or("/tmp");

        format!(
            "{}/alumina_{}",
            tmpdir,
            random::OsRng::new().next_u64().hex().zero_pad(16)
        ).unwrap()
    }

    #[test]
    fn test_open() {
        let filename = mktemp();
        let buf = BUF.as_slice_mut();
        defer filename.free();

        let file = File::create(filename.as_slice()).unwrap();

        file.write_all("Hello, world!").unwrap();
        file.close().unwrap();

        let file = File::open(filename.as_slice()).unwrap();
        defer file.close();

        let read = file.read(buf).unwrap();
        assert_eq!(buf[..read] as &[u8], "Hello, world!");
        
        file.seek(SeekFrom::Beginning, 7).unwrap();

        let read = file.read(buf).unwrap();
        assert_eq!(buf[..read] as &[u8], "world!");

        file.close().unwrap();
    }

    #[test]
    fn test_read_directory() {
        let path = mktemp();
        defer path.free();
        
        create_directory(path.as_slice()).unwrap();

        (0..5).iter().foreach(|&path, i: i32| {
            let filename = format!("{}/hello{}.txt", path, i.zero_pad(2)).unwrap();
            defer filename.free();

            File::create(filename.as_slice()).unwrap().close();
        });

        let dir = read_directory(path.as_slice()).unwrap();
        defer dir.close();

        let entries = dir
            .map(|e: Result<DirEntry, Error>| -> StringBuf  {
                StringBuf::from_slice(e.unwrap().name())
            })
            .to_vector();
        defer entries.free_all();

        entries.as_slice_mut().sort_by(|e: &StringBuf| -> &[u8] { e.as_slice() });

        let it = entries.iter_ref().map(StringBuf::as_slice::<u8>);

        assert_eq!(it.next(), Option::some("hello00.txt"));
        assert_eq!(it.next(), Option::some("hello01.txt"));
        assert_eq!(it.next(), Option::some("hello02.txt"));
        assert_eq!(it.next(), Option::some("hello03.txt"));
        assert_eq!(it.next(), Option::some("hello04.txt"));
        assert_eq!(it.next(), Option::none());
    }
}
