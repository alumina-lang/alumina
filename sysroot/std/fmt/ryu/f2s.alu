// Translated from Rust to Alumina. The Rust port can be found at https://github.com/dtolnay/ryu
// The original C code can be found at https://github.com/ulfjack/ryu and carries the following license:
//
// Copyright 2018 Ulf Adams
//
// The contents of this file may be used under the terms of the Apache License,
// Version 2.0.
//
//    (See accompanying file LICENSE-Apache or copy at
//     http://www.apache.org/licenses/LICENSE-2.0)
//
// Alternatively, the contents of this file may be used under the terms of
// the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE-Boost or copy at
//     https://www.boost.org/LICENSE_1_0.txt)
//
// Unless required by applicable law or agreed to in writing, this software
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.

use common::*;
use f2s_intrinsics::*;

const FLOAT_MANTISSA_BITS: u32 = 23;
const FLOAT_EXPONENT_BITS: u32 = 8;
const FLOAT_BIAS: i32 = 127;
use f2s_intrinsics::{FLOAT_POW5_BITCOUNT, FLOAT_POW5_INV_BITCOUNT};

// A floating decimal representing m * 10^e.
struct FloatingDecimal32 {
    mantissa: u32,
    // Decimal exponent's range is -45 to 38
    // inclusive, and can fit in i16 if needed.
    exponent: i32,
}

#[inline]
fn f2d(ieee_mantissa: u32, ieee_exponent: u32) -> FloatingDecimal32 {
    let (e2, m2) = if ieee_exponent == 0 {
        (
            // We subtract 2 so that the bounds computation has 2 additional bits.
            1 - FLOAT_BIAS - FLOAT_MANTISSA_BITS as i32 - 2,
            ieee_mantissa,
        )
    } else {
        (
            ieee_exponent as i32 - FLOAT_BIAS - FLOAT_MANTISSA_BITS as i32 - 2,
            (1u32 << FLOAT_MANTISSA_BITS) | ieee_mantissa,
        )
    };
    let even = (m2 & 1) == 0;
    let accept_bounds = even;

    // Step 2: Determine the interval of valid decimal representations.
    let mv = 4u32 * m2;
    let mp = 4u32 * m2 + 2;
    // Implicit bool -> int conversion. True is 1, false is 0.
    let mm_shift = (ieee_mantissa != 0 || ieee_exponent <= 1) as u32;
    let mm = 4u32 * m2 - 1 - mm_shift;

    // Step 3: Convert to a decimal power base using 64-bit arithmetic.
    let vr: u32;
    let vp: u32;
    let vm: u32;
    let e10: i32;
    let vm_is_trailing_zeros = false;
    let vr_is_trailing_zeros = false;
    let last_removed_digit = 0u8;
    if e2 >= 0 {
        let q = log10_pow2(e2);
        e10 = q as i32;
        let k = FLOAT_POW5_INV_BITCOUNT + pow5bits(q as i32) - 1;
        let i = -e2 + q as i32 + k;
        vr = mul_pow5_inv_div_pow2(mv, q, i);
        vp = mul_pow5_inv_div_pow2(mp, q, i);
        vm = mul_pow5_inv_div_pow2(mm, q, i);
        if q != 0 && (vp - 1) / 10 <= vm / 10 {
            // We need to know one removed digit even if we are not going to loop below. We could use
            // q = X - 1 above, except that would require 33 bits for the result, and we've found that
            // 32-bit arithmetic is faster even on 64-bit machines.
            let l = FLOAT_POW5_INV_BITCOUNT + pow5bits(q as i32 - 1) - 1;
            last_removed_digit =
                (mul_pow5_inv_div_pow2(mv, q - 1, -e2 + q as i32 - 1 + l) % 10) as u8;
        }
        if q <= 9 {
            // The largest power of 5 that fits in 24 bits is 5^10, but q <= 9 seems to be safe as well.
            // Only one of mp, mv, and mm can be a multiple of 5, if any.
            if mv % 5 == 0 {
                vr_is_trailing_zeros = multiple_of_power_of_5_32(mv, q);
            } else if accept_bounds {
                vm_is_trailing_zeros = multiple_of_power_of_5_32(mm, q);
            } else {
                vp -= multiple_of_power_of_5_32(mp, q) as u32;
            }
        }
    } else {
        let q = log10_pow5(-e2);
        e10 = q as i32 + e2;
        let i = -e2 - q as i32;
        let k = pow5bits(i) - FLOAT_POW5_BITCOUNT;
        let j = q as i32 - k;
        vr = mul_pow5_div_pow2(mv, i as u32, j);
        vp = mul_pow5_div_pow2(mp, i as u32, j);
        vm = mul_pow5_div_pow2(mm, i as u32, j);
        if q != 0 && (vp - 1) / 10 <= vm / 10 {
            j = q as i32 - 1 - (pow5bits(i + 1) - FLOAT_POW5_BITCOUNT);
            last_removed_digit = (mul_pow5_div_pow2(mv, (i + 1) as u32, j) % 10) as u8;
        }
        if q <= 1 {
            // {vr,vp,vm} is trailing zeros if {mv,mp,mm} has at least q trailing 0 bits.
            // mv = 4 * m2, so it always has at least two trailing 0 bits.
            vr_is_trailing_zeros = true;
            if accept_bounds {
                // mm = mv - 1 - mm_shift, so it has 1 trailing 0 bit iff mm_shift == 1.
                vm_is_trailing_zeros = mm_shift == 1;
            } else {
                // mp = mv + 2, so it always has at least one trailing 0 bit.
                vp -= 1;
            }
        } else if q < 31 {
            // TODO(ulfjack): Use a tighter bound here.
            vr_is_trailing_zeros = multiple_of_power_of_2_32(mv, q - 1);
        }
    }

    // Step 4: Find the shortest decimal representation in the interval of valid representations.
    let removed = 0i32;
    let output = if vm_is_trailing_zeros || vr_is_trailing_zeros {
        // General case, which happens rarely (~4.0%).
        while vp / 10 > vm / 10 {
            vm_is_trailing_zeros = vm_is_trailing_zeros && (vm - (vm / 10) * 10 == 0);
            vr_is_trailing_zeros = vr_is_trailing_zeros && (last_removed_digit == 0);
            last_removed_digit = (vr % 10) as u8;
            vr /= 10;
            vp /= 10;
            vm /= 10;
            removed += 1;
        }
        if vm_is_trailing_zeros {
            while vm % 10 == 0 {
                vr_is_trailing_zeros = vr_is_trailing_zeros && (last_removed_digit == 0);
                last_removed_digit = (vr % 10) as u8;
                vr /= 10;
                vp /= 10;
                vm /= 10;
                removed += 1;
            }
        }
        if vr_is_trailing_zeros && last_removed_digit == 5 && vr % 2 == 0 {
            // Round even if the exact number is .....50..0.
            last_removed_digit = 4;
        }
        // We need to take vr + 1 if vr is outside bounds or we need to round up.
        vr + ((vr == vm && (!accept_bounds || !vm_is_trailing_zeros)) || last_removed_digit >= 5)
            as u32
    } else {
        // Specialized for the common case (~96.0%). Percentages below are relative to this.
        // Loop iterations below (approximately):
        // 0: 13.6%, 1: 70.7%, 2: 14.1%, 3: 1.39%, 4: 0.14%, 5+: 0.01%
        while vp / 10 > vm / 10 {
            last_removed_digit = (vr % 10) as u8;
            vr /= 10;
            vp /= 10;
            vm /= 10;
            removed += 1;
        }
        // We need to take vr + 1 if vr is outside bounds or we need to round up.
        vr + (vr == vm || last_removed_digit >= 5) as u32
    };
    let exp = e10 + removed;

    FloatingDecimal32 {
        exponent: exp,
        mantissa: output,
    }
}

#[cfg(all(test_std, test))]
#[docs(hide)]
mod tests {
    macro check($val, $expected) {
        let buf: [u8; 100];
        let size = pretty::format32($val, &buf[0]);
        assert_eq!(buf[..size] as &[u8], $expected);
    }

    #[test]
    fn test_ryu() {
        check!(0.3, "0.3");
        check!(1234000000000.0, "1234000000000.0");
        check!(1.234e13, "1.234e13");
        check!(2.71828, "2.71828");
        check!(1.1e32, "1.1e32");
        check!(1.1e-32, "1.1e-32");
        check!(2.7182817, "2.7182817");
        check!(1.0e-45, "1e-45");
        check!(3.4028235e38, "3.4028235e38");
        check!(-0.001234, "-0.001234");
    }

    #[test]
    fn test_basic() {
        check!(0.0, "0.0");
        check!(-0.0, "-0.0");
        check!(1.0, "1.0");
        check!(-1.0, "-1.0");
        // Not handled in this port
        // check!(f32::nan(), "NaN");
        // check!(f32::infinity(), "inf");
        // check!(f32::neg_infinity(), "-inf");
    }

    #[test]
    fn test_switch_to_subnormal() {
        check!(1.1754944e-38, "1.1754944e-38");
    }

    #[test]
    fn test_min_and_max() {
        assert_eq!(f32::from_bits(0x7f7fffff), 3.4028235e38);
        check!(3.4028235e38, "3.4028235e38");
        assert_eq!(f32::from_bits(1), 1.0e-45);
        check!(1.0e-45, "1e-45");
    }

    // Check that we return the exact boundary if it is the shortest
    // representation, but only if the original floating point number is even.
    #[test]
    fn test_boundary_round_even() {
        check!(33554450.0, "33554450.0");
        check!(9000000000.0, "9000000000.0");
        check!(34366720000.0, "34366720000.0");
    }

    // If the exact value is exactly halfway between two shortest representations,
    // then we round to even. It seems like this only makes a difference if the
    // last two digits are ...2|5 or ...7|5, and we cut off the 5.
    #[test]
    fn test_exact_value_round_even() {
        check!(305404.12, "305404.12");
        check!(8099.0312, "8099.0312");
    }

    #[test]
    fn test_lots_of_trailing_zeros() {
        // Pattern for the first test: 00111001100000000000000000000000
        check!(0.00024414062, "0.00024414062");
        check!(0.0024414062, "0.0024414062");
        check!(0.0043945312, "0.0043945312");
        check!(0.0063476562, "0.0063476562");
    }

    #[test]
    fn test_regression() {
        check!(4.7223665e21, "4.7223665e21");
        check!(8388608.0, "8388608.0");
        check!(16777216.0, "16777216.0");
        check!(33554436.0, "33554436.0");
        check!(67131496.0, "67131496.0");
        check!(1.9310392e-38, "1.9310392e-38");
        check!(-2.47e-43, "-2.47e-43");
        check!(1.993244e-38, "1.993244e-38");
        check!(4103.9004, "4103.9004");
        check!(5339999700.0, "5339999700.0");
        check!(6.0898e-39, "6.0898e-39");
        check!(0.0010310042, "0.0010310042");
        check!(2.882326e17, "2.882326e17");
        check!(7.038531e-26, "7.038531e-26");
        check!(9.223404e17, "9.223404e17");
        check!(67108870.0, "67108870.0");
        check!(1.0e-44, "1e-44");
        check!(2.816025e14, "2.816025e14");
        check!(9.223372e18, "9.223372e18");
        check!(1.5846086e29, "1.5846086e29");
        check!(1.1811161e19, "1.1811161e19");
        check!(5.368709e18, "5.368709e18");
        check!(4.6143166e18, "4.6143166e18");
        check!(0.007812537, "0.007812537");
        check!(1.0e-45, "1e-45");
        check!(1.18697725e20, "1.18697725e20");
        check!(1.00014165e-36, "1.00014165e-36");
        check!(200.0, "200.0");
        check!(33554432.0, "33554432.0");
    }

    #[test]
    fn test_looks_like_pow5() {
        // These numbers have a mantissa that is the largest power of 5 that fits,
        // and an exponent that causes the computation for q to result in 10, which
        // is a corner case for Ryū.
        assert_eq!(f32::from_bits(0x5D1502F9), 6.7108864e17);
        check!(6.7108864e17, "6.7108864e17");
        assert_eq!(f32::from_bits(0x5D9502F9), 1.3421773e18);
        check!(1.3421773e18, "1.3421773e18");
        assert_eq!(f32::from_bits(0x5E1502F9), 2.6843546e18);
        check!(2.6843546e18, "2.6843546e18");
    }

    #[test]
    fn test_output_length() {
        check!(1.0, "1.0"); // already tested in Basic
        check!(1.2, "1.2");
        check!(1.23, "1.23");
        check!(1.234, "1.234");
        check!(1.2345, "1.2345");
        check!(1.23456, "1.23456");
        check!(1.234567, "1.234567");
        check!(1.2345678, "1.2345678");
        check!(1.23456735e-36, "1.23456735e-36");
    }
}
