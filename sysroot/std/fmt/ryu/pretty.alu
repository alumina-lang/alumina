// Translated from Rust to Alumina. The Rust port can be found at https://github.com/dtolnay/ryu
// The original C code can be found at https://github.com/ulfjack/ryu and carries the following license:
//
// Copyright 2018 Ulf Adams
//
// The contents of this file may be used under the terms of the Apache License,
// Version 2.0.
//
//    (See accompanying file LICENSE-Apache or copy at
//     http://www.apache.org/licenses/LICENSE-2.0)
//
// Alternatively, the contents of this file may be used under the terms of
// the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE-Boost or copy at
//     https://www.boost.org/LICENSE_1_0.txt)
//
// Unless required by applicable law or agreed to in writing, this software
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.

use exponent::*;
use mantissa::*;
use d2s::*;
use f2s::*;

/// Print f64 to the given buffer and return number of bytes written.
///
/// At most 24 bytes will be written.
///
/// ## Special cases
///
/// This function **does not** check for NaN or infinity. If the input
/// number is not a finite float, the printed representation will be some
/// correctly formatted but unspecified numerical value.
fn format64(f: f64, result: &mut u8) -> usize {
    let bits = f.to_bits();
    let sign = ((bits >> (DOUBLE_MANTISSA_BITS + DOUBLE_EXPONENT_BITS)) & 1) != 0;
    let ieee_mantissa = bits & ((1u64 << DOUBLE_MANTISSA_BITS) - 1);
    let ieee_exponent =
        (bits >> DOUBLE_MANTISSA_BITS) as u32 & ((1u32 << DOUBLE_EXPONENT_BITS) - 1);

    let index = 0isize;
    if sign {
        *result = '-';
        index += 1;
    }

    if ieee_exponent == 0 && ieee_mantissa == 0 {
        mem::copy_nonoverlapping("0.0".as_ptr(), result + index, 3);
        return sign as usize + 3;
    }

    let v = d2d(ieee_mantissa, ieee_exponent);

    let length = d2s::decimal_length17(v.mantissa) as isize;
    let k = v.exponent as isize;
    let kk = length + k; // 10^(kk-1) <= v < 10^kk
    debug_assert!(k >= -324);

    if 0isize <= k && kk <= 16 {
        // 1234e7 -> 12340000000.0
        write_mantissa_long(v.mantissa, result + (index + length));
        for i in length..kk {
            *(result + (index + i)) = '0';
        }
        *(result + (index + kk)) = '.';
        *(result + (index + kk + 1)) = '0';
        index as usize + kk as usize + 2
    } else if 0isize < kk && kk <= 16 {
        // 1234e-2 -> 12.34
        write_mantissa_long(v.mantissa, result + (index + length + 1));
        mem::copy(result + (index + 1), result + index, kk as usize);
        *(result + (index + kk)) = '.';
        index as usize + length as usize + 1
    } else if -5isize < kk && kk <= 0 {
        // 1234e-6 -> 0.001234
        *(result + index) = '0';
        *(result + (index + 1)) = '.';
        let offset = 2isize - kk;
        for i in 2isize..offset {
            *(result + (index + i)) = '0';
        }
        write_mantissa_long(v.mantissa, result + (index + length + offset));
        index as usize + length as usize + offset as usize
    } else if length == 1 {
        // 1e30
        *(result + index) = '0' + v.mantissa as u8;
        *(result + (index + 1)) = 'e';
        index as usize + 2 + write_exponent3(kk - 1, result + (index + 2))
    } else {
        // 1234e30 -> 1.234e33
        write_mantissa_long(v.mantissa, result + (index + length + 1));
        *(result + index) = *(result + (index + 1));
        *(result + (index + 1)) = '.';
        *(result + (index + length + 1)) = 'e';
        index as usize
            + length as usize
            + 2
            + write_exponent3(kk - 1, result + (index + length + 2))
    }
}

/// Print f32 to the given buffer and return number of bytes written.
///
/// At most 16 bytes will be written.
///
/// ## Special cases
///
/// This function **does not** check for NaN or infinity. If the input
/// number is not a finite float, the printed representation will be some
/// correctly formatted but unspecified numerical value.
fn format32(f: f32, result: &mut u8) -> usize {
    let bits = f.to_bits();
    let sign = ((bits >> (FLOAT_MANTISSA_BITS + FLOAT_EXPONENT_BITS)) & 1) != 0;
    let ieee_mantissa = bits & ((1u32 << FLOAT_MANTISSA_BITS) - 1);
    let ieee_exponent = (bits >> FLOAT_MANTISSA_BITS) & ((1u32 << FLOAT_EXPONENT_BITS) - 1);

    let index = 0isize;
    if sign {
        *result = '-';
        index += 1;
    }

    if ieee_exponent == 0 && ieee_mantissa == 0 {
        mem::copy_nonoverlapping("0.0".as_ptr(), result + index, 3);
        return sign as usize + 3;
    }

    let v = f2d(ieee_mantissa, ieee_exponent);

    let length = common::decimal_length9(v.mantissa) as isize;
    let k = v.exponent as isize;
    let kk = length + k; // 10^(kk-1) <= v < 10^kk
    debug_assert!(k >= -45);

    if 0isize <= k && kk <= 13 {
        // 1234e7 -> 12340000000.0
        write_mantissa(v.mantissa, result + (index + length));
        for i in length..kk {
            *(result + (index + i)) = '0';
        }
        *(result + (index + kk)) = '.';
        *(result + (index + kk + 1)) = '0';
        index as usize + kk as usize + 2
    } else if 0isize < kk && kk <= 13 {
        // 1234e-2 -> 12.34
        write_mantissa(v.mantissa, result + (index + length + 1));
        mem::copy(result + (index + 1), result + index, kk as usize);
        *(result + (index + kk)) = '.';
        index as usize + length as usize + 1
    } else if -6isize < kk && kk <= 0 {
        // 1234e-6 -> 0.001234
        *(result + index) = '0';
        *(result + (index + 1)) = '.';
        let offset = 2isize - kk;
        for i in 2isize..offset {
            *(result + (index + i)) = '0';
        }
        write_mantissa(v.mantissa, result + (index + length + offset));
        index as usize + length as usize + offset as usize
    } else if length == 1 {
        // 1e30
        *(result + index) = '0' + v.mantissa as u8;
        *(result + (index + 1)) = 'e';
        index as usize + 2 + write_exponent2(kk - 1, result + (index + 2))
    } else {
        // 1234e30 -> 1.234e33
        write_mantissa(v.mantissa, result + (index + length + 1));
        *(result + index) = *(result + (index + 1));
        *(result + (index + 1)) = '.';
        *(result + (index + length + 1)) = 'e';
        index as usize
            + length as usize
            + 2
            + write_exponent2(kk - 1, result + (index + length + 2))
    }
}
