// Translated from Rust to Alumina. The Rust port can be found at https://github.com/dtolnay/ryu
// The original C code can be found at https://github.com/ulfjack/ryu and carries the following license:
//
// Copyright 2018 Ulf Adams
//
// The contents of this file may be used under the terms of the Apache License,
// Version 2.0.
//
//    (See accompanying file LICENSE-Apache or copy at
//     http://www.apache.org/licenses/LICENSE-2.0)
//
// Alternatively, the contents of this file may be used under the terms of
// the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE-Boost or copy at
//     https://www.boost.org/LICENSE_1_0.txt)
//
// Unless required by applicable law or agreed to in writing, this software
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.

use std::result::Result;
use common::*;
use d2s_intrinsics::*;

const DOUBLE_EXPONENT_BIAS: usize = 1023;

fn floor_log2(value: u64) -> u32 {
    63u32.wrapping_sub(value.leading_zeros())
}

fn parse64(buffer: &[u8]) -> Result<f64, Error> {
    let len = buffer.len();
    if len == 0 {
        return Result::err(Error::InputTooShort);
    }

    let m10digits = 0;
    let e10digits = 0;
    let dot_index = len;
    let e_index = len;
    let m10 = 0u64;
    let e10 = 0i32;
    let signed_m = false;
    let signed_e = false;

    let i = 0usize;
    if buffer[0] == '-' {
        signed_m = true;
        i += 1;
    }

    while i < buffer.len() {
        let c = buffer[i];
        if c == '.' {
            if dot_index != len {
                return Result::err(Error::MalformedInput);
            }
            dot_index = i;
            i += 1;
            continue;
        }
        if c < '0' || c > '9' {
            break;
        }
        if m10digits >= 17 {
            return Result::err(Error::InputTooLong);
        }
        m10 = 10 * m10 + (c - '0') as u64;
        if m10 != 0 {
            m10digits += 1;
        }
        i += 1;
    }

    if i < buffer.len() && (buffer[i] == 'e' || buffer[i] == 'E') {
        e_index = i;
        i += 1;
        if i < buffer.len() {
            if buffer[i] == '-' {
                signed_e = true;
                i += 1;
            } else if buffer[i] == '+' {
                i += 1;
            }
        }
        while i < buffer.len() {
            let c = buffer[i];
            if c < '0' || c > '9' {
                return Result::err(Error::MalformedInput);
            }
            if e10digits > 3 {
                // TODO: Be more lenient. Return +/-Infinity or +/-0 instead.
                return Result::err(Error::InputTooLong);
            }
            e10 = 10 * e10 + (c - '0') as i32;
            if e10 != 0 {
                e10digits += 1;
            }
            i += 1;
        }
    }

    if i < len {
        return Result::err(Error::MalformedInput);
    }
    if signed_e {
        e10 = -e10;
    }
    e10 -= if dot_index < e_index {
        (e_index - dot_index - 1) as i32
    } else {
        0
    };
    if m10 == 0 {
        return Result::ok(if signed_m { -0.0 } else { 0.0 });
    }

    if m10digits + e10 <= -324 || m10 == 0 {
        // Number is less than 1e-324, which should be rounded down to 0; return
        // +/-0.0.
        let ieee = (signed_m as u64) << (d2s::DOUBLE_EXPONENT_BITS + d2s::DOUBLE_MANTISSA_BITS);
        return Result::ok(f64::from_bits(ieee));
    }
    if m10digits + e10 >= 310 {
        // Number is larger than 1e+309, which should be rounded to +/-Infinity.
        let ieee = ((signed_m as u64) << (d2s::DOUBLE_EXPONENT_BITS + d2s::DOUBLE_MANTISSA_BITS))
            | (0x7ffu64 << d2s::DOUBLE_MANTISSA_BITS);
        return Result::ok(f64::from_bits(ieee));
    }

    // Convert to binary float m2 * 2^e2, while retaining information about
    // whether the conversion was exact (trailing_zeros).
    let e2: i32;
    let m2: u64;
    let trailing_zeros: bool;
    if e10 >= 0 {
        // The length of m * 10^e in bits is:
        //   log2(m10 * 10^e10) = log2(m10) + e10 log2(10) = log2(m10) + e10 + e10 * log2(5)
        //
        // We want to compute the DOUBLE_MANTISSA_BITS + 1 top-most bits (+1 for
        // the implicit leading one in IEEE format). We therefore choose a
        // binary output exponent of
        //   log2(m10 * 10^e10) - (DOUBLE_MANTISSA_BITS + 1).
        //
        // We use floor(log2(5^e10)) so that we get at least this many bits;
        // better to have an additional bit than to not have enough bits.
        e2 = floor_log2(m10)
            .wrapping_add(e10 as u32)
            .wrapping_add(log2_pow5(e10) as u32)
            .wrapping_sub(d2s::DOUBLE_MANTISSA_BITS + 1) as i32;

        // We now compute [m10 * 10^e10 / 2^e2] = [m10 * 5^e10 / 2^(e2-e10)].
        // To that end, we use the DOUBLE_POW5_SPLIT table.
        let j = e2
            .wrapping_sub(e10)
            .wrapping_sub(ceil_log2_pow5(e10))
            .wrapping_add(d2s::DOUBLE_POW5_BITCOUNT);
        debug_assert!(j >= 0);
        debug_assert!(e10 < d2s::DOUBLE_POW5_SPLIT.len() as i32);
        m2 = mul_shift_64(
            m10,
            &d2s::DOUBLE_POW5_SPLIT[e10 as usize],
            j as u32,
        );

        // We also compute if the result is exact, i.e.,
        //   [m10 * 10^e10 / 2^e2] == m10 * 10^e10 / 2^e2.
        // This can only be the case if 2^e2 divides m10 * 10^e10, which in turn
        // requires that the largest power of 2 that divides m10 + e10 is
        // greater than e2. If e2 is less than e10, then the result must be
        // exact. Otherwise we use the existing multiple_of_power_of_2 function.
        trailing_zeros =
            e2 < e10 || e2 - e10 < 64 && multiple_of_power_of_2(m10, (e2 - e10) as u32);
    } else {
        e2 = floor_log2(m10)
            .wrapping_add(e10 as u32)
            .wrapping_sub(ceil_log2_pow5(-e10) as u32)
            .wrapping_sub(d2s::DOUBLE_MANTISSA_BITS + 1) as i32;
        let j = e2
            .wrapping_sub(e10)
            .wrapping_add(ceil_log2_pow5(-e10))
            .wrapping_sub(1)
            .wrapping_add(d2s::DOUBLE_POW5_INV_BITCOUNT);
        debug_assert!(-e10 < d2s::DOUBLE_POW5_INV_SPLIT.len() as i32);
        m2 = mul_shift_64(
            m10,
            &d2s::DOUBLE_POW5_INV_SPLIT[-e10 as usize],
            j as u32,
        );
        trailing_zeros = multiple_of_power_of_5(m10, -e10 as u32);
    }

    // Compute the final IEEE exponent.
    let ieee_e2 = std::cmp::max(0, e2 + DOUBLE_EXPONENT_BIAS as i32 + floor_log2(m2) as i32) as u32;

    if ieee_e2 > 0x7fe {
        // Final IEEE exponent is larger than the maximum representable; return +/-Infinity.
        let ieee = ((signed_m as u64) << (d2s::DOUBLE_EXPONENT_BITS + d2s::DOUBLE_MANTISSA_BITS))
            | (0x7ffu64 << d2s::DOUBLE_MANTISSA_BITS);
        return Result::ok(f64::from_bits(ieee));
    }

    // We need to figure out how much we need to shift m2. The tricky part is
    // that we need to take the final IEEE exponent into account, so we need to
    // reverse the bias and also special-case the value 0.
    let shift = if ieee_e2 == 0 { 1 } else { ieee_e2 as i32 }
        .wrapping_sub(e2)
        .wrapping_sub(DOUBLE_EXPONENT_BIAS as i32)
        .wrapping_sub(d2s::DOUBLE_MANTISSA_BITS as i32);
    debug_assert!(shift >= 0);

    // We need to round up if the exact value is more than 0.5 above the value
    // we computed. That's equivalent to checking if the last removed bit was 1
    // and either the value was not just trailing zeros or the result would
    // otherwise be odd.
    //
    // We need to update trailing_zeros given that we have the exact output
    // exponent ieee_e2 now.
    trailing_zeros = trailing_zeros && (m2 & ((1u64 << (shift - 1)) - 1)) == 0;
    let last_removed_bit = (m2 >> (shift - 1)) & 1;
    let round_up = last_removed_bit != 0 && (!trailing_zeros || ((m2 >> shift) & 1) != 0);

    let ieee_m2 = (m2 >> shift).wrapping_add(round_up as u64);
    debug_assert!(ieee_m2 <= 1u64 << (d2s::DOUBLE_MANTISSA_BITS + 1));
    ieee_m2 &= (1u64 << d2s::DOUBLE_MANTISSA_BITS) - 1;
    if ieee_m2 == 0 && round_up {
        // Due to how the IEEE represents +/-Infinity, we don't need to check
        // for overflow here.
        ieee_e2 += 1;
    }
    let ieee = ((((signed_m as u64) << d2s::DOUBLE_EXPONENT_BITS) | ieee_e2 as u64)
        << d2s::DOUBLE_MANTISSA_BITS)
        | ieee_m2;
    Result::ok(f64::from_bits(ieee))
}


#[cfg(all(test_std, test))]
#[docs(hide)]
mod tests {
    #[test]
    fn test_bad_input() {
        assert_eq!(Error::MalformedInput, parse64("x").unwrap_err());
        assert_eq!(Error::MalformedInput, parse64("1..1").unwrap_err());
        assert_eq!(Error::MalformedInput, parse64("..").unwrap_err());
        assert_eq!(Error::MalformedInput, parse64("1..1").unwrap_err());
        assert_eq!(Error::MalformedInput, parse64("1ee1").unwrap_err());
        assert_eq!(Error::MalformedInput, parse64("1e.1").unwrap_err());
        assert_eq!(Error::InputTooShort, parse64("").unwrap_err());
        assert_eq!(Error::InputTooLong, parse64("123456789012345678").unwrap_err());
        assert_eq!(Error::InputTooLong, parse64("1e12345").unwrap_err());
    }

    #[test]
    fn test_basic() {
        assert_eq!(0.0, parse64("0").unwrap());
        assert_eq!(-0.0, parse64("-0").unwrap());
        assert_eq!(1.0, parse64("1").unwrap());
        assert_eq!(2.0, parse64("2").unwrap());
        assert_eq!(123456789.0, parse64("123456789").unwrap());
        assert_eq!(123.456, parse64("123.456").unwrap());
        assert_eq!(123.456, parse64("123456e-3").unwrap());
        assert_eq!(123.456, parse64("1234.56e-1").unwrap());
        assert_eq!(1.453, parse64("1.453").unwrap());
        assert_eq!(1453.0, parse64("1.453e+3").unwrap());
        assert_eq!(0.0, parse64(".0").unwrap());
        assert_eq!(1.0, parse64("1e0").unwrap());
        assert_eq!(1.0, parse64("1E0").unwrap());
        assert_eq!(1.0, parse64("000001.000000").unwrap());
        assert_eq!(0.2316419, parse64("0.2316419").unwrap());
    }

    #[test]
    fn test_min_max() {
        assert_eq!(
            1.7976931348623157e308,
            parse64("1.7976931348623157e308").unwrap(),
        );
        assert_eq!(5.0E-324, parse64("5E-324").unwrap());
    }

    #[test]
    fn test_mantissa_rounding_overflow() {
        // This results in binary mantissa that is all ones and requires rounding up
        // because it is closer to 1 than to the next smaller float. This is a
        // regression test that the mantissa overflow is handled correctly by
        // increasing the exponent.
        assert_eq!(1.0, parse64("0.99999999999999999").unwrap());
        // This number overflows the mantissa *and* the IEEE exponent.
        assert_eq!(f64::infinity(), parse64("1.7976931348623159e308").unwrap());
    }

    #[test]
    fn test_underflow() {
        assert_eq!(0.0, parse64("2.4e-324").unwrap());
        assert_eq!(0.0, parse64("1e-324").unwrap());
        assert_eq!(0.0, parse64("9.99999e-325").unwrap());
        // These are just about halfway between 0 and the smallest float.
        // The first is just below the halfway point, the second just above.
        assert_eq!(0.0, parse64("2.4703282292062327e-324").unwrap());
        assert_eq!(5.0e-324, parse64("2.4703282292062328e-324").unwrap());
    }

    #[test]
    fn test_overflow() {
        assert_eq!(f64::infinity(), parse64("2e308").unwrap());
        assert_eq!(f64::infinity(), parse64("1e309").unwrap());
    }

    #[test]
    fn test_table_size_denormal() {
        assert_eq!(5.0e-324, parse64("4.9406564584124654e-324").unwrap());
    }

    #[test]
    fn test_issue157() {
        assert_eq!(
            1.2999999999999999E+154,
            parse64("1.2999999999999999E+154").unwrap(),
        );
    }

    #[test]
    fn test_issue173() {
        // Denormal boundary
        assert_eq!(
            2.2250738585072012e-308,
            parse64("2.2250738585072012e-308").unwrap(),
        );
        assert_eq!(
            2.2250738585072013e-308,
            parse64("2.2250738585072013e-308").unwrap(),
        );
        assert_eq!(
            2.2250738585072014e-308,
            parse64("2.2250738585072014e-308").unwrap(),
        );
    }
}
