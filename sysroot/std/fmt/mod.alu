//! String formatting
//!
//! The core of the formatting system is the [Formattable] protocol. Implementing it on custom types
//! allows them to be formatted using the standard string-formatting macros ([format], [write], ...)
//! and the convenience standard I/O macros ([io::print], [io::println], ...).
type Result = std::result::Result<(), Error>;

/// Error that can occur during a string formatting operation.
///
/// This error can signal many different things - either the value is somehow
/// invalid and cannot be formatted, or there is an I/O error if the formatter is performing
/// I/O operations.
struct Error {}

impl Error {
    fn new() -> Error {
        Error {}
    }

    /// @ Formattable::fmt
    fn fmt<F: Formatter<F>>(self: &Error, f: &mut F) -> Result {
        f.write_str("error occurred during formatting")
    }

    fn from<T>(_: T) -> Error {
        Error {}
    }
}

/// A sink for string formatting operations
protocol Formatter<Self> {
    /// Write a string
    fn write_str(self: &mut Self, buf: &[u8]) -> Result;
    /// Write a single character
    fn write_byte(self: &mut Self, byte: u8) -> Result {
        self.write_str(mem::slice::from_raw(&byte, 1))
    }
}

/// Types that implement custom debug formatting.
protocol DebugFormattable<Self, F: Formatter<F>> {
    /// Write the debug representation object into a given formatter.
    ///
    /// See [Formattable] for details.
    fn debug_fmt(self: &Self, f: &mut F) -> Result;
}

/// Types that can be formatted. This is the standard way to implement custom
/// formatting for types.
///
/// ## Example
/// ```
/// struct Point3D { x: i32, y: i32, z: i32 }
/// impl Point3D {
///     use std::fmt::{Formatter, Result, write};
///
///     fn fmt<F: Formatter<F>>(self: &Point3D, f: &mut F) -> Result {
///         write!(f, "({}, {}, {})", self.x, self.y, self.z)
///     }
/// }
///
/// // prints "You are at (1, 2, 3)"
/// println!("You are at {}", Point3D { x: 1, y: 2, z: 3 });
/// ```
protocol Formattable<Self, F: Formatter<F> = NullFormatter> {
    /// Write the object into a given formatter.
    ///
    /// See [Formattable] for details.
    fn fmt(self: &Self, f: &mut F) -> Result;
}

/// Transforms a format string and arguments into a sequence of chunks.
///
/// This macro is implemented in the compiler, and is used as a foundation for other formatting macros,
/// such as [format] and [println]. You probably want to use one of those formatting macros instead.
///
/// ```pseudo_alumina
/// format_args!(receiver, "{} = {}", a, b);  // Expands to: receiver!(a, " = ", b)
/// ```
///
/// ## Examples
/// ```
/// use std::fmt::format_args;
/// use std::concat;
///
/// // This only works where all format arguments are string literals.
/// let s = format_args!(concat, "{} + {} = {}", "1", "2", "3");
///
/// assert_eq!(s, "1 + 2 = 3");
/// ```
/// ```
/// use std::fmt::format_args;
/// use std::typing::type_name;
///
/// macro debug($arg...)  {
///     {
///         let arg = $arg;
///         println!("'{}' {}", arg, type_name::<typeof(arg)>());
///     }$...;
/// }
///
/// // '1' i32
/// // ' + ' &[u8]
/// // '2' i32
/// // ' = ' &[u8]
/// // '3' i32
/// format_args!(debug, "{} + {} = {}", 1, 2, 3);
/// ```
#[builtin] macro format_args($fmt, $args...) { }

/// Write a formatted string into a given formatter.
///
/// ## Example
/// ```
/// use std::fmt::{write, SliceFormatter};
/// let buf: [u8; 64];
/// let fmt = SliceFormatter::new(&buf);
///
/// let _ = write!(&fmt, "{} + {} = {}", 1, 2, 3);
///
/// assert_eq!(fmt.get()[0..9], "1 + 2 = 3");
/// ```
macro write($fmt, $fmt_str, $arg...) {
    let fmt = $fmt;
    format_args!(
            macros::bind!(internal::static_format_args, fmt),
            $fmt_str,
            $arg$...
    )
}

/// Write a formatted string and a newline into a given formatter.
macro writeln($fmt, $fmt_str, $arg...) {
    write!($fmt, concat!($fmt_str, "\n"), $arg$...)
}

/// Format a string into a `StringBuf`.
///
/// ## Example
/// ```
/// use std::fmt::format;
///
/// let s = format!("{} + {} = {}", 1, 2, 3).unwrap();
/// defer s.free();
///
/// assert_eq!(s[..] as &[u8], "1 + 2 = 3");
/// ```
macro format($fmt_str, $arg...) {
    let buf = string::StringBuf::with_capacity($fmt_str.len());
    let ret = fmt::write!(&buf, $fmt_str, $arg$...);
    if ret.is_ok() {
        Result::ok::<string::StringBuf, Error>(buf)
    } else {
        buf.free();
        Result::err::<string::StringBuf, Error>(Error::new())
    }
}

/// Format a string into a preexisting buffer.
///
/// Returns an error if the buffer is not large enough.
///
/// ## Example
/// ```
/// use std::fmt::format_in;
///
/// let buf: [u8; 64];
/// let f = format_in!(&buf, "{} + {} = {}", 1, 2, 3).unwrap();
///
/// assert_eq!(f, "1 + 2 = 3");
/// ```
macro format_in($buf, $fmt_str, $arg...) {
    let fmt = SliceFormatter::new($buf);
    let ret = fmt::write!(&fmt, $fmt_str, $arg$...);
    if ret.is_ok() {
        Result::ok::<&[u8], Error>(fmt.get())
    } else {
        Result::err::<&[u8], Error>(Error::new())
    }
}

/// Formatter that writes into a string slice.
struct SliceFormatter {
    buf: &mut [u8],
    buf_pos: usize
}

impl SliceFormatter {
    fn new(buf: &mut [u8]) -> SliceFormatter {
        SliceFormatter {
            buf: buf,
            buf_pos: 0
        }
    }

    /// @ Formatter::write_str
    #[inline]
    fn write_str(self: &mut SliceFormatter, buf: &[u8]) -> Result {
        if self.buf_pos + buf.len() > self.buf.len() {
            return Result::err(Error::new());
        }
        buf.copy_to(&self.buf[self.buf_pos]);
        self.buf_pos += buf.len();

        Result::ok(())
    }

    /// @ Formatter::write_byte
    #[inline]
    fn write_byte(self: &mut SliceFormatter, byte: u8) -> Result {
        if self.buf_pos >= self.buf.len() {
            return Result::err(Error::new());
        }
        self.buf[self.buf_pos] = byte;
        self.buf_pos += 1;

        Result::ok(())
    }

    /// Get the resulting string
    #[inline]
    fn get(self: &SliceFormatter) -> &[u8] {
        self.buf[..self.buf_pos]
    }
}

/// A formatter that discards output.
struct NullFormatter {}

impl NullFormatter {
    /// @ Formatter::write_str
    fn write_str(self: &mut NullFormatter, _buf: &[u8]) -> Result {
        Result::ok(())
    }
    /// @ Formatter::write_byte
    fn write_byte(self: &mut NullFormatter, _byte: u8) -> Result {
        Result::ok(())
    }
}

/// Adapter for writting formatted data into a stream
///
/// Consider also using [io::BufferedWriter], which implements [Formatter] directly to wrap the stream
/// in order to avoid performance penalty as string formatting usually performs many small writes.
struct StreamFormatter<W: io::Writable<W>> {
    inner: &mut W
}

impl StreamFormatter<W: io::Writable<W>> {
    fn new(inner: &mut W) -> StreamFormatter<W> {
        StreamFormatter {
            inner: inner
        }
    }

    /// @ Formatter::write_str
    #[inline]
    fn write_str(self: &mut StreamFormatter<W>, buf: &[u8]) -> Result {
        when typing::matches::<W, Formattable<W>>() {
            self.inner.write_str(buf)
        } else {
            self.inner.write_all(buf).map_err(Error::from::<io::Error>)
        }
    }

    /// @ Formatter::write_byte
    #[inline]
    fn write_byte(self: &mut StreamFormatter<W>, byte: u8) -> Result {
        when typing::matches::<W, Formattable<W>>() {
            self.inner.write_byte(byte)
        } else {
            self.write_str(mem::slice::from_raw(&byte, 1))
        }
    }

    mixin Formatter<StreamFormatter<W>>;
}

#[docs(no_index)]
mod internal {
    /// Returns a type-erased wrapper around a formattable object.
    #[lang(format_arg)]
    #[inline(always)]
    fn dyn_format_arg<F: Formatter<F>, T: Formattable<T, F>>(self: &T) -> &dyn Formattable<Self, F> {
        self
    }

    /// Receiver macro for [format_args] that constructs an array of type-erased pointers to
    /// to the formatting args, which can then be printed with [write_fmt].
    ///
    /// This is the default receiver for standard formattimg macros like [write] and [writeln] and
    /// is used primarily to reduce code size as doing it statically would lead to
    macro dyn_format_args($args...) {
        [dyn_format_arg(&$args)$...]
    }

    macro _fold_result($left, $right) {
        let left = $left;
        if left.is_err() {
            left
        } else {
            $right
        }
    }

    /// Receiver macro for [format_args] that constructs a tuple of the formatting args.
    macro tuple_format_args($arg...) {
        (&$arg$...,)
    }

    fn write_fmt_tuple<T: builtins::Tuple, F: Formatter<F>>(f: &mut F, args: T) -> Result {
        for const i in 0usize..args.len() {
            args.(i).fmt(f)?;
        }
        Result::ok(())
    }

    /// Receiver macro for [format_args] that constructs a fold expression chain that writes
    /// each argument into the formatter and bails early if an error occurs. This is the
    /// default receiver for [format_args].
    macro static_format_args($fmt, $arg...) {
        macros::reduce!(
            _fold_result,
            Result::ok::<(), fmt::Error>(()),
            $arg.fmt($fmt)$...
        )
    }

    fn format_integer<T: builtins::Integer, F: Formatter<F>>(val: T, radix: u16, pad: usize, fmt: &mut F) -> Result {
        assert!(radix >= 2 && radix <= 36);

        let buf: [u8; 128];

        when val is builtins::Signed {
            if val < 0 {
                fmt.write_byte('-')?;
            }
        }

        let val_u = math::widening_abs(val);
        let i: usize = 0;
        loop {
            buf[buf.len() - i - 1] = string::RADIX_DIGITS[util::cast(val_u % (radix as builtins::unsigned_of<T>))];
            val_u /= radix as builtins::unsigned_of<T>;

            if val_u == 0 {
                while i + 1 < pad {
                    fmt.write_byte('0')?;
                    pad -= 1;
                }
                fmt.write_str(buf[(buf.len() - i - 1)..])?;
                break;
            }
            i += 1;
        }

        Result::ok(())
    }

    fn format_float<T: builtins::FloatingPoint, F: Formatter<F>>(
        val: T,
        fmt: &mut F,
        _precision: u16
    ) -> Result {
        // TODO: precision doesn't do anything yet
        if val.is_nan() {
            return fmt.write_str("NaN")
        }

        if val.is_infinite() {
            if val.is_sign_negative() {
                return fmt.write_str("-inf");
            } else {
                return fmt.write_str("inf");
            }
        }

        // f64 representations are at most 24 bytes long, f32 ones are at most 16 bytes long
        let buf: [u8; 25];
        let written = when val is f64 {
            ryu::format64(val, &buf[0])
        } else {
            ryu::format32(val, &buf[0])
        };

        fmt.write_str(buf[..written])
    }

    fn write_fmt<F: Formatter<F>>(parts: &[&dyn Formattable<Self, F>], f: &mut F) -> Result {
        for part in parts {
            part.fmt(f)?;
        }
        Result::ok(())
    }

    struct NumFormatAdapter<T: builtins::Integer> {
        radix: u16,
        _pad: usize,
        value: T
    }

    impl NumFormatAdapter<T: builtins::Integer> {
        fn fmt<F: Formatter<F>>(self: &NumFormatAdapter<T>, fmt: &mut F) -> Result {
            format_integer(self.value, self.radix, self._pad, fmt)
        }

        fn hex(self: NumFormatAdapter<T>) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: 16, _pad: self._pad, value: self.value }
        }

        fn oct(self: NumFormatAdapter<T>) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: 8, _pad: self._pad, value: self.value }
        }

        fn bin(self: NumFormatAdapter<T>) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: 2, _pad: self._pad, value: self.value }
        }

        fn zero_pad(self: NumFormatAdapter<T>, pad: usize) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: self.radix, _pad: pad, value: self.value }
        }
    }

    struct FloatFormatAdapter<T: builtins::FloatingPoint> {
        precision: u16,
        value: T
    }

    impl FloatFormatAdapter<T: builtins::FloatingPoint> {
        fn fmt<F: Formatter<F>>(self: &FloatFormatAdapter<T>, fmt: &mut F) -> Result {
            format_float::<T, F>(self.value, fmt, self.precision)
        }
    }

    struct RepeatAdapter<T: Formattable<T>> {
        times: usize,
        inner: T
    }

    impl RepeatAdapter {
        fn fmt<T: Formattable<T, F>, F: Formatter<F>>(self: &RepeatAdapter<T>, fmt: &mut F) -> Result {
            for _ in 0usize..self.times {
                self.inner.fmt(fmt)?;
            }
            Result::ok(())
        }
    }

    struct GenericPadAdapter<T: Formattable<T>> {
        len: usize,
        pad: u8,
        inner: T
    }

    impl GenericPadAdapter {
        fn fmt<T: Formattable<T, F>, F: Formatter<F>>(self: &GenericPadAdapter<T>, fmt: &mut F) -> Result {
            let buf: [u8; 32];
            let res = format_in!(&buf, "{}", self.inner);
            let s: &[u8] = if res.is_ok() {
                res.unwrap()
            } else {
                // We fall back to the heap-allocating variant if the stack buffer was not large enough.
                let res = format!("{}", self.inner)?;
                defer res.free();
                res[..]
            };

            if s.len() < self.len {
                for _ in (0usize..self.len - s.len()) {
                    fmt.write_byte(self.pad)?;
                }
            }
            fmt.write_str(s)
        }
    }

    struct CharAdapter {
        inner: u8
    }

    impl CharAdapter {
        fn fmt<F: Formatter<F>>(self: &CharAdapter, fmt: &mut F) -> Result {
            fmt.write_byte(self.inner)
        }
    }

    struct StackGuard {
        previous: &StackGuard,
        ptr: &void
    }

    impl StackGuard {
        fn check_recursion<Ptr: builtins::Pointer>(self: &StackGuard, ptr: Ptr) -> bool {
            let current = self;
            while current.ptr != null {
                #[allow(unnecessary_cast)]
                if current.ptr == (ptr as &void) {
                    return true;
                }
                current = current.previous;
            }
            return false;
        }
    }

    struct DebugAdapter<T> {
        _value: T,
    }

    impl DebugAdapter<T> {
        fn fmt<F: Formatter<F>>(self: &DebugAdapter<T>, f: &mut F) -> Result {
            DebugAdapter::write(self._value, f, null)
        }

        fn write<F: Formatter<F>>(value: T, f: &mut F, stack_guard: &StackGuard) -> Result {
            let name = runtime::const_eval!(typing::type_name::<T>());

            let stack_guard = StackGuard {
                previous: stack_guard,
                ptr: null
            };

            let ty = typing::Type::new::<T>();
            when value is DebugFormattable<T, F> {
                value.debug_fmt(f)?;
            } else when ty.is_numeric() || value is bool {
                value.fmt(f)?;
            } else when ty.is_pointer() {
                if value == null {
                    f.write_str("null")?;
                } else when value is &void || value is &mut void {
                    fmt::write!(f, "0x{}", (value as usize).hex())?;
                } else if stack_guard.check_recursion(value) {
                    f.write_str("<recursive>")?;
                } else {
                    #[allow(unnecessary_cast)]
                    stack_guard.ptr = value as &void;
                    DebugAdapter::write(*value, f, &stack_guard)?;
                }
            } else when ty.is_tuple() {
                f.write_str("(")?;
                for const i in 0usize..value.len() {
                    when i != 0 {
                        f.write_str(", ")?;
                    }
                    DebugAdapter::write(value.(i), f, &stack_guard)?;
                }
                f.write_str(")")?;
            } else when value is &[u8] || value is &mut [u8] {
                f.write_str("\"")?;
                for byte in value {
                    if byte == '\n' {
                        f.write_str("\\n")?;
                    } else if byte == '\r' {
                        f.write_str("\\r")?;
                    } else if byte == '\t' {
                        f.write_str("\\t")?;
                    } else if byte == '\\' {
                        f.write_str("\\\\")?;
                    } else if byte == '"' {
                        f.write_str("\\\"")?;
                    } else if byte < 0x20 || byte >= 0x7F {
                        // TODO: Check if it is a valid UTF-8 sequence and print it as a character
                        fmt::write!(f, "\\x{}", byte.hex().zero_pad(2))?;
                    } else {
                        f.write_byte(byte)?;
                    }
                }
                f.write_str("\"")?;
            } else when ty.is_array() || ty.is_slice() {
                when ty.is_slice() {
                    if stack_guard.check_recursion(value.as_ptr()) {
                        f.write_str("<recursive>")?;
                        return Result::ok(());
                    }
                    stack_guard.ptr = value.as_ptr() as &void;
                }
                f.write_str("[")?;
                for i in 0usize..value.len() {
                    if i != 0 {
                        f.write_str(", ")?;
                    }
                    DebugAdapter::write(value[i], f, &stack_guard)?;
                }
                f.write_str("]")?;
            } else when ty.is_union() {
                // We do not know which field is active, so we cannot print it.
                f.write_str("<union>")?;
            } else when ty.is_enum() {
                for variant in ty.variants() {
                    if value == variant.value() {
                        fmt::write!(f, "{}::{}", ty.name().unwrap_or("<unnamed>"), variant.name())?;
                        return Result::ok(());
                    }
                }
                DebugAdapter::write(value as builtins::underlying_type_of<T>, f, &stack_guard)?;
            } else when ty.is_function_pointer() {
                if (value as &void) == null {
                    f.write_str("null")?;
                } else {
                    f.write_str("<function>")?;
                }
            } else when ty.is_closure() || ty.is_struct() {
                let fields = when ty.is_closure() {
                    f.write_str("<closure> { ")?;
                    ty.captures()
                } else {
                    fmt::write!(f, "{} {{ ", ty.name().unwrap_or("<unnamed>"))?;
                    ty.fields()
                };

                for const i in 0usize..fields.len() {
                    when i != 0 {
                        f.write_str(", ")?;
                    }
                    fmt::write!(f, "{}: ", fields.(i).name().unwrap_or("<unnamed>"))?;
                    DebugAdapter::write(*fields.(i).as_ptr(&value), f, &stack_guard)?;
                }
                f.write_str(" }")?;
            } else {
                fmt::write!(f, "{}", ty.name().unwrap_or("<unknown>"))?;
            }

            Result::ok(())
        }
    }
}


/// Adapter for printing a debug representation of a value.
///
/// This can print most types without them needing to implment custom formatting.
/// Types can override the default behavior by implementing the [DebugFormattable] protocol,
/// but this is only recommended for types that e.g. contain untagged unions or normally
/// uninitialized fields.
///
/// ## Example
/// ```
/// use std::fmt::debug;
///
/// struct Point { x: i32, y: i32 }
///
/// println!("{}", Point { x: 1, y: 2 }.debug()); // prints 'Point { x: 1, y: 2 }'
/// ```
fn debug<T>(value: T) -> internal::DebugAdapter<T> {
    internal::DebugAdapter { _value: value }
}


/// Write value as a hexadecimal number
///
/// ## Example
/// ```
/// use std::fmt::hex;
///
/// println!("{}", 42.hex()); // prints '2a'
/// ```
fn hex<T: builtins::Integer>(val: T) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 16, _pad: 0, value: val }
}

/// Write value as a binary number
///
/// ## Example
/// ```
/// use std::fmt::bin;
///
/// println!("{}", 42.bin()); // prints '101010'
/// ```
fn bin<T: builtins::Integer>(val: T) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 2, _pad: 0, value: val }
}

/// Write value as an octal number
///
/// ## Example
/// ```
/// use std::fmt::oct;
///
/// println!("{}", 42.oct()); // prints '52'
/// ```
fn oct<T: builtins::Integer>(val: T) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 8, _pad: 0, value: val }
}

/// Pads number with zeros on the left.
///
/// ## Example
/// ```
/// use std::fmt::zero_pad;
///
/// println!("{}", 42.zero_pad(5)); // prints '00042'
/// ```
fn zero_pad<T: builtins::Integer>(val: T, pad: usize) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 10, _pad: pad, value: val }
}

fn precision<T: builtins::FloatingPoint>(val: T, prec: u16) -> internal::FloatFormatAdapter<T> {
    internal::FloatFormatAdapter { precision: prec, value: val }
}

/// Repeats value `times` times.
///
/// ## Example
/// ```
/// use std::fmt::repeat;
///
/// println!("{}", "ha".repeat(3)); // prints 'hahaha'
/// ```
fn repeat<T: Formattable<T>>(inner: T, times: usize) -> internal::RepeatAdapter<T> {
    internal::RepeatAdapter { times: times, inner: inner }
}

/// Pads arbitrary formattable value on the left with a specified character.
///
/// ## Example
/// ```
/// use std::fmt::pad_with;
///
/// println!("{}", "ha".pad_with(5, ' ')); // prints '   ha'
/// ```
fn pad_with<T: Formattable<T>>(val: T, len: usize, pad: u8) -> internal::GenericPadAdapter<T> {
    internal::GenericPadAdapter { len: len, pad: pad, inner: val }
}

/// Writes a single [u8] as a character (byte).
///
/// By default, [u8] is written as a number.
///
/// ## Example
/// ```
/// use std::fmt::char;
///
/// println!("{}", 'A'); // prints '65'
/// println!("{}", 'A'.char()); // prints 'A'
/// ```
fn char(val: u8) -> internal::CharAdapter {
    internal::CharAdapter { inner: val }
}

#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    static BUF: [u8; 1024];

    macro fmt($args...) {
        format_in!(&BUF, $args$...).unwrap()
    }

    #[test]
    fn test_format_positional() {
        assert_eq!(fmt!("{1} {0}", "hello", "world"), "world hello");
        assert_eq!(fmt!("{1} {0} {} {}", "hello", "world"), "world hello hello world");
        assert_eq!(fmt!("{} {1} {0} {}", "hello", "world"), "hello world hello world");
    }

    #[test]
    fn test_format_integer() {
        assert_eq!(fmt!("{}", u8::max_value()), "255");
        assert_eq!(fmt!("{}", -23847), "-23847");
        assert_eq!(fmt!("{}", i64::min_value()), "-9223372036854775808");
        assert_eq!(
            fmt!("{}", i128::min_value()),
            "-170141183460469231731687303715884105728"
        );
    }

    #[test]
    fn test_format_radix() {
        assert_eq!(fmt!("{}", 255u32.hex()), "ff");
        assert_eq!(fmt!("{}", 255u32.bin()), "11111111");
        assert_eq!(fmt!("{}", 255u32.oct()), "377");
    }

    #[test]
    fn test_format_zero_pad() {
        assert_eq!(fmt!("{}", 255u32.zero_pad(4)), "0255");
        assert_eq!(fmt!("{}", 255u32.zero_pad(8)), "00000255");
    }

    #[test]
    fn test_format_radix_and_pad() {
        assert_eq!(fmt!("{}", 15u8.zero_pad(2).hex()), "0f");
        assert_eq!(fmt!("{}", 15u8.hex().zero_pad(2)), "0f");
    }

    #[test]
    fn test_format_repeat() {
        assert_eq!(fmt!("{}", "world".repeat(3)), "worldworldworld");
    }

    #[test]
    fn test_format_generic_pad() {
        assert_eq!(fmt!("{}", "world".pad_with(10, ' ')), "     world");
    }

    #[test]
    fn test_format_float() {
        assert_eq!(fmt!("{}", f64::nan()), "NaN");
        assert_eq!(fmt!("{}", f64::infinity()), "inf");
        assert_eq!(fmt!("{}", f64::neg_infinity()), "-inf");

        // Basic sanity tests only, comprehensive tests are in ryu module
        assert_eq!(fmt!("{}", 3.1415), "3.1415");
        assert_eq!(fmt!("{}", 3.1415e100), "3.1415e100");
        assert_eq!(fmt!("{}", -3.1415f32), "-3.1415");
        assert_eq!(fmt!("{}", -3.1415e20f32), "-3.1415e20");
    }

    #[test]
    fn test_format_args() {
        /// Compile-only test
        let _: [&dyn Formattable<Self, NullFormatter>; 0] = format_args!(fmt::internal::dyn_format_args,  "");
        let _: [&dyn Formattable<Self, NullFormatter>; 1] = format_args!(fmt::internal::dyn_format_args,  "hello");
        let _: [&dyn Formattable<Self, NullFormatter>; 2] = format_args!(fmt::internal::dyn_format_args,  "hello {}", 1);
        let _: [&dyn Formattable<Self, NullFormatter>; 4] = format_args!(fmt::internal::dyn_format_args,  "hello {} {}", 1, 2);
    }

    #[test]
    fn test_const_println() {
        const FOO: bool = {
            println!("Hello, {}!", 42);
            true
        };

        assert!(FOO);
    }

    #[test]
    fn test_debug_formatter() {
        assert_eq!(fmt!("{}", debug(42)), "42");
        assert_eq!(fmt!("{}", debug("hello! 👋")), "\"hello! \\xf0\\x9f\\x91\\x8b\"");
        assert_eq!(fmt!("{}", debug(true)), "true");
        assert_eq!(fmt!("{}", debug(&true)), "true");
        assert_eq!(fmt!("{}", debug((1, 2, 3))), "(1, 2, 3)");

        struct Point {
            x: i32,
            y: i32
        }

        assert_eq!(fmt!("{}", debug(Point { x: 1, y: 2 })), "Point { x: 1, y: 2 }");
        let a = 1;
        let b = 2;
        #[allow(unused_closure_binding)]
        let closure = |=a, &b, _c: i32| {};

        assert_eq!(fmt!("{}", debug(closure)), "<closure> { a: 1, b: 2 }");

        enum Enum {
            A,
            B,
            C
        }

        assert_eq!(fmt!("{}", debug(Enum::A)), "Enum::A");
        assert_eq!(fmt!("{}", debug(42 as Enum)), "42");

        union Union {
            a: i32,
            b: f32
        }

        assert_eq!(fmt!("{}", debug(Union { a: 42 })), "<union>");

        let f: test_debug_formatter;
        assert_eq!(fmt!("{}", debug(f)), "test_debug_formatter");

        struct Custom {}
        impl Custom {
            fn debug_fmt<F: Formatter<F>>(self: &Custom, f: &mut F) -> Result {
                f.write_str("hello")
            }
        }
        assert_eq!(fmt!("{}", debug(Custom {})), "hello");
    }
}

