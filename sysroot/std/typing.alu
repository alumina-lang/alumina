//! Type reflection and `dyn` objects
//!
//! Most functions in this module are const-evaluable, so they can be used in `when`
//! expression for conditional compilation based on e.g. the generic parameter.

type TypeId = usize;

/// Returns a unique identifer for the type passed as the generic parameter.
///
/// The resulting value is not guaranteed to be the same across compilations, but it is
/// guaranteed to be unique for each distinct type.
///
/// ## Example
/// ```
/// use std::typing::type_id;
///
/// assert_ne!(type_id::<u8>(), type_id::<u16>());
/// ```
#[inline(ir)]
fn type_id<T>() -> TypeId {
    intrinsics::type_id::<T>() as TypeId
}

/// Returns a human-readable name for the type passed as the generic parameter.
///
/// ## Example
/// ```
/// use std::typing::type_name;
///
/// assert_eq!(type_name::<u8>(), "u8");
/// ```
#[inline(ir)]
fn type_name<T>() -> &[u8] {
    intrinsics::type_name::<T>()
}

/// "Dyn" object, a type-erased pointer to an object and a vtable for protocol functions.
///
/// ```pseudo_alumina
/// type &dyn P = dyn<(P, ), &void>
/// type &mut dyn P = dyn<(P, ), &mut void>
/// type &dyn (P1 + P2) = dyn<(P1, P2), &void>
/// ```
/// ## Example
/// ```
/// protocol Foo<Self> { fn foo(self: &Self); }
///
/// struct Bar {};
/// impl Bar {
///     fn foo(self: &Bar) { println!("Bar::foo"); }
/// }
///
/// struct Quux {};
/// impl Quux {
///     fn foo(self: &Quux) { println!("Quux::foo"); }
/// }
///
/// let bar: &dyn Foo<Self> = &Bar {};
/// let quux: &dyn Foo<Self> = &Quux {};
///
/// bar.foo(); // prints "Bar::foo"
/// quux.foo(); // prints "Quux::foo"
/// ```
#[lang(dyn)]
struct dyn<Protos, Ptr> {
    _ptr: Ptr,
    _vtable: &fn(),
}

/// A placeholder for the `Self` type in the protocol of a `dyn` object.
#[lang(dyn_self)]
struct Self {}

/// Returns the names and associated values of enum variants.
///
/// ## Example
/// ```
/// use std::typing::enum_variants;
///
/// enum Foo {
///     Bar,
///     Quux,
/// }
///
/// let variants = enum_variants::<Foo>();
///
/// assert_eq!(variants.len(), 2);
/// assert_eq!(variants[0].0, "Bar");
/// assert_eq!(variants[0].1, Foo::Bar);
/// assert_eq!(variants[1].0, "Quux");
/// assert_eq!(variants[1].1, Foo::Quux);
/// ```
fn enum_variants<E: builtins::Enum>() -> &[(&[u8], E)] {
    (internal::ENUM_VARIANTS::<E>)[..]
}

/// Returns `true` if type T1 matches bound T2.
///
/// T2 can be a protocol or a type (in which case the result indicates
/// whether T1 and T2 refer to the same type).
///
/// See also [is_same].
///
/// ## Example
/// ```
/// use std::typing::matches;
/// use std::builtins::Primitive;
///
/// assert!(matches::<u8, u8>());
/// assert!(!matches::<u8, u16>());
/// assert!(matches::<u8, Primitive>());
/// assert!(!matches::<&[u8], Primitive>());
/// ```
#[inline(ir)]
fn matches<T1, T2>() -> bool {
    intrinsics::uninitialized::<T1>() is T2
}

/// Returns `true` if type T1 is exactly the same type as T2.
///
/// See also [matches].
///
/// ## Example
/// ```
/// use std::typing::is_same;
/// use std::builtins::Primitive;
///
/// assert!(is_same::<u8, u8>());
/// assert!(!is_same::<u8, u16>());
/// // Protocols can also be compared for equality
/// assert!(is_same::<Fn(u8) -> u8, std::builtins::Callable<(u8), u8>>());
/// assert!(!is_same::<u8, Primitive>());
/// ```
#[inline(ir)]
fn is_same<T1, T2>() -> bool {
    intrinsics::type_id::<T1>() == intrinsics::type_id::<T2>()
}

/// Returns `true` if T is zero sized.
///
/// See also [builtins::ZeroSized].
///
/// ## Example
/// ```
/// use std::typing::*;
///
/// assert!(is_zero_sized::<()>());
/// assert!(is_zero_sized::<([u8; 0], ())>());
/// assert!(!is_zero_sized::<u8>());
/// ```
#[inline(ir)]
fn is_zero_sized<T>() -> bool {
    matches::<T, builtins::ZeroSized>()
}

/// Returns `true` if T is primitive.
///
/// See also [builtins::Primitive].
/// ## Example
/// ```
/// use std::typing::*;
///
/// assert!(is_primitive::<u8>());
/// assert!(!is_primitive::<(u8, bool)>());
/// ```
#[inline(ir)]
fn is_primitive<T>() -> bool {
    matches::<T, builtins::Primitive>()
}

/// Returns `true` if T is numeric.
///
/// See also [builtins::Numeric].
/// ## Example
/// ```
/// use std::typing::*;
///
/// assert!(is_numeric::<u8>());
/// assert!(is_numeric::<i32>());
/// assert!(is_numeric::<f64>());
/// assert!(!is_numeric::<bool>());
/// assert!(!is_numeric::<&u8>());
/// ```
#[inline(ir)]
fn is_numeric<T>() -> bool {
    matches::<T, builtins::Numeric>()
}

/// Returns `true` if T is integer.
///
/// See also [builtins::Integer].
/// ## Example
/// ```
/// use std::typing::*;
///
/// assert!(is_integer::<u8>());
/// assert!(is_integer::<i32>());
/// assert!(!is_integer::<f64>());
/// assert!(!is_numeric::<bool>());
/// ```
#[inline(ir)]
fn is_integer<T>() -> bool {
    matches::<T, builtins::Integer>()
}

/// Returns `true` if T is a floating point type.
///
/// See also [builtins::FloatingPoint].
#[inline(ir)]
fn is_floating_point<T>() -> bool {
    matches::<T, builtins::FloatingPoint>()
}

/// Returns `true` if T is a signed type.
///
/// See also [builtins::Signed].
#[inline(ir)]
fn is_signed<T>() -> bool {
    matches::<T, builtins::Signed>()
}

/// Returns `true` if T is an unsigned type.
///
/// See also [builtins::Unsigned].
#[inline(ir)]
fn is_unsigned<T>() -> bool {
    matches::<T, builtins::Unsigned>()
}

/// Returns `true` if T is a pointer.
///
/// See also [builtins::Pointer].
#[inline(ir)]
fn is_pointer<T>() -> bool {
    matches::<T, builtins::Pointer>()
}

/// Returns `true` if T is array.
///
/// See also [builtins::Array].
#[inline(ir)]
fn is_array<T>() -> bool {
    matches::<T, builtins::Array>()
}

/// Returns `true` if T is tuple.
///
/// See also [builtins::Tuple].
#[inline(ir)]
fn is_tuple<T>() -> bool {
    matches::<T, builtins::Tuple>()
}

/// Returns `true` if T is a struct.
///
/// See also [builtins::Struct].
#[inline(ir)]
fn is_struct<T>() -> bool {
    matches::<T, builtins::Struct>()
}

/// Returns `true` if T is a union.
///
/// See also [builtins::Union].
#[inline(ir)]
fn is_union<T>() -> bool {
    matches::<T, builtins::Union>()
}

/// Returns `true` if T is a range.
///
/// See also [builtins::Range] and [is_range_of].
#[inline(ir)]
fn is_range<T>() -> bool {
    matches::<T, builtins::Range>()
}

/// Returns `true` if T is named function.
///
/// See also [builtins::NamedFunction].
#[inline(ir)]
fn is_named_function<T>() -> bool {
    matches::<T, builtins::NamedFunction>()
}

/// Returns `true` if T is function pointer.
///
/// See also [builtins::FunctionPointer].
#[inline(ir)]
fn is_function_pointer<T>() -> bool {
    matches::<T, builtins::FunctionPointer>()
}

/// Returns `true` if T is protocol.
///
/// See also [builtins::Protocol].
#[inline(ir)]
fn is_protocol<T>() -> bool {
    matches::<T, builtins::Protocol>()
}

/// Returns `true` if T1 and T2 have the same memory layout.
///
/// See also [builtins::SameLayoutAs].
#[inline(ir)]
fn is_same_layout_as<T1, T2>() -> bool {
    matches::<T1, builtins::SameLayoutAs<T2>>()
}

/// Returns `true` if T is an array of any size of elements
/// with type U.
///
/// See also [builtins::ArrayOf].
#[inline(ir)]
fn is_array_of<T, U>() -> bool {
    matches::<T, builtins::ArrayOf<U>>()
}

/// Returns `true` if T is an array of any size of elements
/// with type Elem.
///
/// See also [builtins::PointerOf].
#[inline(ir)]
fn is_pointer_of<T, U>() -> bool {
    matches::<T, builtins::PointerOf<U>>()
}

/// Returns `true` if T is a range over U.
///
/// See also [builtins::RangeOf].
#[inline(ir)]
fn is_range_of<T, U>() -> bool {
    matches::<T, builtins::RangeOf<U>>()
}

#[docs(no_index)]
mod internal {
    const ENUM_VARIANTS<E> = intrinsics::enum_variants::<E>();
    const VTABLE<Protos, T> = intrinsics::vtable::<Protos, T>();

    type void_ptr_of<Ptr> = builtins::pointer_with_mut_of<void, Ptr>;

    #[lang(enum_variant_new)]
    #[inline(ir)]
    fn make_enum_variant<E>(name: &[u8], value: E) -> (&[u8], E) {
        (name, value)
    }

    #[lang(dyn_new)]
    #[inline(ir)]
    fn dyn_new<Protos, Ptr>(ptr: Ptr) -> dyn<Protos, void_ptr_of<Ptr>> {
        dyn {
            _ptr: ptr as void_ptr_of<Ptr>,
            _vtable: &VTABLE::<Protos, builtins::deref_of<Ptr>>[0]
        }
    }

    #[lang(dyn_const_coerce)]
    #[inline(ir)]
    fn dyn_const_coerce<Protos>(self: dyn<Protos, &mut void>) -> dyn<Protos, &void> {
        util::transmute(self)
    }

    #[lang(dyn_const_cast)]
    #[inline(ir)]
    fn dyn_const_cast<Protos>(self: dyn<Protos, &void>) -> dyn<Protos, &mut void> {
        util::transmute(self)
    }

    #[lang(dyn_data)]
    #[inline(ir)]
    fn dyn_data<Protos, Ptr>(self: dyn<Protos, Ptr>) -> Ptr {
        self._ptr
    }

    #[lang(dyn_vtable_index)]
    #[inline(ir)]
    fn dyn_vtable_index<Protos, Ptr>(self: dyn<Protos, Ptr>, idx: usize) -> fn() {
        *(self._vtable + idx)
    }
}


#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    #[test]
    fn test_type_id() {
        assert_eq!(type_id::<u8>(), type_id::<u8>());
        assert_ne!(type_id::<u8>(), type_id::<u16>());

        assert_eq!(type_id::<Option<&[u8]>>(), type_id::<Option<&[u8]>>());
        assert_ne!(type_id::<Option<&[u8]>>(), type_id::<Option<&mut [u8]>>());
    }


    #[test]
    fn test_type_name() {
        assert_eq!(type_name::<u8>(), "u8");
        assert_eq!(type_name::<u16>(), "u16");

        // inception
        assert_eq!(type_name::<type_name<type_name<u32>>>(), "type_name<type_name<u32>>");

    }

    #[test]
    fn test_dyn() {
        let b: &mut dyn iter::Iterator<Self, i32>;

        b = &iter::repeat(42);
        let a: &dyn iter::Iterator<Self, i32> = b;
        assert_eq!(a.size_hint(), Option::some(usize::max_value()));
        assert_eq!(b.size_hint(), Option::some(usize::max_value()));
        assert_eq!(b.next(), Option::some(42));
        assert_eq!(b.next(), Option::some(42));
        assert_eq!(b.next(), Option::some(42));
        // ...

        b = &iter::once(10);
        assert_eq!(b.next(), Option::some(10));
        assert_eq!(b.next(), Option::none());

        let c = a as &mut dyn iter::Iterator<Self, i32>;
        assert_eq!(c.next(), Option::some(42));
        assert_eq!(c.next(), Option::some(42));
        assert_eq!(c.next(), Option::some(42));
        // ...
    }

    protocol Foo<Self> {
        fn foo(self: &Self) -> i32;
    }

    protocol Bar<Self> {
        fn bar(self: &Self) -> i32;
    }

    struct Quux {}

    impl Quux {
        fn foo(self: &Quux) -> i32 {
            42
        }

        fn bar(self: &Quux) -> i32 {
            1337
        }
    }

    struct Frob {}

    impl Frob {
        fn foo(self: &Frob) -> i32 {
            1337
        }

        fn bar(self: &Frob) -> i32 {
            42
        }
    }

    #[test]
    fn test_dyn_multi_protocol() {
        let a = Quux {};
        let b: &dyn (Foo<Self> + Bar<Self>) = &a;
        let c: &dyn (Bar<Self> + Foo<Self>) = &a;

        assert_eq!(b.foo(), 42);
        assert_eq!(b.bar(), 1337);

        assert_eq!(c.foo(), 42);
        assert_eq!(c.bar(), 1337);

        assert!(!matches::<typeof(b), typeof(c)>());
    }

    #[test]
    fn test_dyn_empty_protocol() {
        protocol Empty<Self> {}

        let a = 42;
        let b: &mut dyn Empty<Self> = &a;

        assert_eq!(b as &mut void, &a as &mut void);
    }

    #[test]
    fn test_dyn_if_coercion() {
        for cond in [true, false] {
            let p: &dyn Foo<Self> = if cond {
                &Quux {}
            } else {
                &Frob {}
            };

            assert_eq!(p.foo(), if cond { 42 } else { 1337 });
        }
    }

    #[test]
    fn test_dyn_if_coercion_switch() {
        for i in 0..5 {
            let p: &dyn Foo<Self> = switch i {
                0 => &Quux {},
                1 => &Frob {},
                2 => &Quux {},
                3 => &Frob {},
                4 => &Quux {},
                _ => unreachable!(),
            };

            assert_eq!(p.foo(), if i % 2 == 0 { 42 } else { 1337 });
        }
    }

    #[test]
    fn test_enum_variant() {
        enum Foo {
            Bar,
            Quux,
        }
        let variants = enum_variants::<Foo>();
        assert_eq!(variants.len(), 2);

        assert_eq!(variants[0].0, "Bar");
        assert_eq!(variants[0].1, Foo::Bar);
        assert_eq!(variants[1].0, "Quux");
        assert_eq!(variants[1].1, Foo::Quux);
    }
}
