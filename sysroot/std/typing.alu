//! Type reflection and `dyn` objects

type TypeId = usize;

/// Returns a unique identifer for the type passed as the generic parameter.
///
/// The resulting value is not guaranteed to be the same across compilations, but it is
/// guaranteed to be unique for each distinct type.
///
/// ## Example
/// ```
/// use std::typing::type_id;
///
/// assert_ne!(type_id::<u8>(), type_id::<u16>());
/// ```
fn type_id<T>() -> TypeId {
    intrinsics::type_id::<T>() as TypeId
}

/// Returns a human-readable name for the type passed as the generic parameter.
///
/// ## Example
/// ```
/// use std::typing::type_name;
///
/// assert_eq!(type_name::<u8>(), "u8");
/// ```
fn type_name<T>() -> &[u8] {
    intrinsics::type_name::<T>()
}

/// "Dyn" object, a type-erased pointer to an object and a vtable for protocol functions.
///
/// ```pseudo_alumina
/// type &dyn P = dyn<(P, ), &void>
/// type &mut dyn P = dyn<(P, ), &mut void>
/// type &dyn (P1 + P2) = dyn<(P1, P2), &void>
/// ```
/// ## Example
/// ```
/// protocol Foo<Self> { fn foo(self: &Self); }
///
/// struct Bar {};
/// impl Bar {
///     fn foo(self: &Bar) { println!("Bar::foo"); }
/// }
///
/// struct Quux {};
/// impl Quux {
///     fn foo(self: &Quux) { println!("Quux::foo"); }
/// }
///
/// let bar: &dyn Foo<Self> = &Bar {};
/// let quux: &dyn Foo<Self> = &Quux {};
///
/// bar.foo(); // prints "Bar::foo"
/// quux.foo(); // prints "Quux::foo"
/// ```
#[lang(dyn)]
struct dyn<Protos, Ptr> {
    _ptr: Ptr,
    _vtable: &fn(),
}

/// A placeholder for the `Self` type in the protocol of a `dyn` object.
#[lang(dyn_self)]
struct Self {}


/// Returns the names and associated values of enum variants.
///
/// ## Example
/// ```
/// use std::typing::enum_variants;
///
/// enum Foo {
///     Bar,
///     Quux,
/// }
///
/// let variants = enum_variants::<Foo>();
///
/// assert_eq!(variants.len(), 2);
/// assert_eq!(variants[0].0, "Bar");
/// assert_eq!(variants[0].1, Foo::Bar);
/// assert_eq!(variants[1].0, "Quux");
/// assert_eq!(variants[1].1, Foo::Quux);
/// ```
fn enum_variants<E: builtins::Enum>() -> &[(&[u8], E)] {
    (internal::ENUM_VARIANTS::<E>).as_slice()
}

/// Asserts that the types are equal.
///
/// ## Examples
/// ```
/// use std::typing::assert_type_eq;
/// use std::string::StringBuf;
/// use std::collections::Vector;
///
/// assert_type_eq::<u8, u8>();
/// assert_type_eq::<StringBuf, Vector<u8>>();
/// ```
///
/// ```panics
/// use std::typing::assert_type_eq;
///
/// assert_type_eq::<u64, usize>(); // panics
/// ```
///
/// ## Note
/// This causes a run-time panic if the types are not equal rather than a compile-time error.
/// If a compile time error is desired, it is recommended to use a `when` expression and [std::compile_fail]:
///
/// ```
/// type T = u8;
///
/// when T: !u8 {
///     compile_fail!("T is not equal to u8");
/// }
/// ```
fn assert_type_eq<T1, T2>() {
    when T1: T2 {
    } else {
        panic!("{} is not equal to {}", type_name::<T1>(), type_name::<T2>());
    }
}

/// Asserts that the types are not equal.
///
/// ## Examples
/// ```
/// use std::typing::assert_type_ne;
///
/// assert_type_ne::<u8, u16>();
/// ```
///
/// ```panics
/// use std::typing::assert_type_ne;
///
/// assert_type_ne::<u64, u64>(); // panics
/// ```
/// ## Note
/// This causes a run-time panic if the types are equal rather than a compile-time error.
/// If a compile time error is desired, it is recommended to use a `when` expression and [std::compile_fail]:
///
/// ```
/// type T = u16;
///
/// when T: u8 {
///     compile_fail!("T is equal to u8");
/// }
/// ```
fn assert_type_ne<T1, T2>() {
    when T1: !T2 {
    } else {
        panic!("{} is equal to {}", type_name::<T1>(), type_name::<T2>());
    }
}

mod internal {
    static ENUM_VARIANTS<E> = intrinsics::enum_variants::<E>();
    static VTABLE<Protos, T> = intrinsics::vtable::<Protos, T>();

    type void_ptr_of<Ptr> = builtins::pointer_with_mut_of<void, Ptr>;

    #[lang(enum_variant_new)]
    #[force_inline]
    fn make_enum_variant<E>(name: &[u8], value: E) -> (&[u8], E) {
        (name, value)
    }

    #[lang(dyn_new)]
    #[force_inline]
    fn dyn_new<Protos, Ptr>(ptr: Ptr) -> dyn<Protos, void_ptr_of<Ptr>> {
        dyn {
            _ptr: ptr as void_ptr_of<Ptr>,
            _vtable: &VTABLE::<Protos, builtins::deref_of<Ptr>>[0]
        }
    }

    #[lang(dyn_const_coerce)]
    #[force_inline]
    fn dyn_const_coerce<Protos>(self: dyn<Protos, &mut void>) -> dyn<Protos, &void> {
        dyn { _ptr: self._ptr, _vtable: self._vtable }
    }

    #[lang(dyn_const_cast)]
    #[force_inline]
    fn dyn_const_cast<Protos>(self: dyn<Protos, &void>) -> dyn<Protos, &mut void> {
        dyn { _ptr: self._ptr as &mut void, _vtable: self._vtable }
    }

    #[lang(dyn_data)]
    #[force_inline]
    fn dyn_data<Protos, Ptr>(self: dyn<Protos, Ptr>) -> Ptr {
        self._ptr
    }

    #[lang(dyn_vtable_index)]
    #[force_inline]
    fn dyn_vtable_index<Protos, Ptr>(self: dyn<Protos, Ptr>, idx: usize) -> fn() {
        *(self._vtable + idx)
    }
}


#[cfg(all(test, test_std))]
mod tests {
    #[test]
    fn test_type_id() {
        assert_eq!(type_id::<u8>(), type_id::<u8>());
        assert_ne!(type_id::<u8>(), type_id::<u16>());

        assert_eq!(type_id::<Option<&[u8]>>(), type_id::<Option<&[u8]>>());
        assert_ne!(type_id::<Option<&[u8]>>(), type_id::<Option<&mut [u8]>>());
    }


    #[test]
    fn test_type_name() {
        assert_eq!(type_name::<u8>(), "u8");
        assert_eq!(type_name::<u16>(), "u16");

        // inception
        assert_eq!(type_name::<type_name<type_name<u32>>>(), "type_name<type_name<u32>>");

    }

    #[test]
    fn test_dyn() {
        let b: &mut dyn iter::Iterator<Self, i32>;

        b = &iter::repeat(42);
        let a: &dyn iter::Iterator<Self, i32> = b;
        assert_eq!(a.size_hint(), Option::some(usize::max_value()));
        assert_eq!(b.size_hint(), Option::some(usize::max_value()));
        assert_eq!(b.next(), Option::some(42));
        assert_eq!(b.next(), Option::some(42));
        assert_eq!(b.next(), Option::some(42));
        // ...

        b = &iter::once(10);
        assert_eq!(b.next(), Option::some(10));
        assert_eq!(b.next(), Option::none());

        let c = a as &mut dyn iter::Iterator<Self, i32>;
        assert_eq!(c.next(), Option::some(42));
        assert_eq!(c.next(), Option::some(42));
        assert_eq!(c.next(), Option::some(42));
        // ...
    }

    protocol Foo<Self> {
        fn foo(self: &Self) -> i32;
    }

    protocol Bar<Self> {
        fn bar(self: &Self) -> i32;
    }

    struct Quux {}

    impl Quux {
        fn foo(self: &Quux) -> i32 {
            42
        }

        fn bar(self: &Quux) -> i32 {
            1337
        }
    }

    struct Frob {}

    impl Frob {
        fn foo(self: &Frob) -> i32 {
            1337
        }

        fn bar(self: &Frob) -> i32 {
            42
        }
    }

    #[test]
    fn test_dyn_multi_protocol() {
        let a = Quux {};
        let b: &dyn (Foo<Self> + Bar<Self>) = &a;
        let c: &dyn (Bar<Self> + Foo<Self>) = &a;

        assert_eq!(b.foo(), 42);
        assert_eq!(b.bar(), 1337);

        assert_eq!(c.foo(), 42);
        assert_eq!(c.bar(), 1337);

        assert_type_ne::<typeof(b), typeof(c)>();
    }

    #[test]
    fn test_dyn_empty_protocol() {
        protocol Empty<Self> {}

        let a = 42;
        let b: &mut dyn Empty<Self> = &a;

        assert_eq!(b as &mut void, &a as &mut void);
    }

    #[test]
    fn test_dyn_if_coercion() {
        for cond in [true, false] {
            let p: &dyn Foo<Self> = if cond {
                &Quux {}
            } else {
                &Frob {}
            };

            assert_eq!(p.foo(), if cond { 42 } else { 1337 });
        }
    }

    #[test]
    fn test_dyn_if_coercion_switch() {
        for i in 0..5 {
            let p: &dyn Foo<Self> = switch i {
                0 => &Quux {},
                1 => &Frob {},
                2 => &Quux {},
                3 => &Frob {},
                4 => &Quux {},
                _ => unreachable!(),
            };

            assert_eq!(p.foo(), if i % 2 == 0 { 42 } else { 1337 });
        }
    }
}
