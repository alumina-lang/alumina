//! Generic (non-cryptographic) hashing support
//!
//! The main purpose of this module is to support the hashing functionality required for
//! hashed collections such as [collections::HashMap] in a generic and algorithm-agnostic fashion.
//! See the [Hashable] module for how to make a custom type hashable and [Hasher] for
//! implementing other hashing algorithms.

/// Hashing algorithms.
///
/// Hasher is a visitor that is accepted by a hashable type through the [Hashable::hash] method.
/// Each hasher is a disposable object that is used to hash a single value.
///
/// ## Example
/// ```
/// use std::hash::hash_of;
///
/// // A bad hash, do not use
/// struct CountingHash {
///     length: usize
/// }
///
/// impl CountingHash {
///     fn new() -> CountingHash { CountingHash { length: 0 } }
///     fn write(self: &mut CountingHash, val: &[u8]) { self.length += val.len() }
///     fn finish(self: &mut CountingHash) -> u64 { self.length as u64 }
/// }
///
/// assert_eq!(hash_of::<&[u8], CountingHash>(&""), 0);
/// assert_eq!(hash_of::<&[u8], CountingHash>(&"a"), 1);
/// assert_eq!(hash_of::<&[u8], CountingHash>(&"ab"), 2);
/// ```
protocol Hasher<Self> {
    /// Create a new hasher.
    fn new() -> Self;
    /// Write a byte slice into a hasher.
    fn write(self: &mut Self, val: &[u8]);
    /// Finalize the hashing and return the hash value.
    fn finish(self: &mut Self) -> u64;
}

/// Types that can be hashed.
///
/// The [Hashable::hash] method can be implemented directly or an automatic implementation can be
/// mixed in using the [DefaultHashable] protocol.
///
/// ## Examples
/// ### A default implementation
/// ```
/// struct FancyI32 { a: i32 }
///
/// impl FancyI32 {
///    use std::hash::{DefaultHashable, Hasher};
///
///    mixin<H: Hasher<H>> DefaultHashable<FancyI32, H>;
/// }
///
/// use std::hash::hash_of;
///
/// let x = FancyI32 { a: 1 };
/// let y = FancyI32 { a: 1 };
/// let z = FancyI32 { a: 2 };
///
/// assert_eq!(x.hash_of(), y.hash_of());
/// assert_ne!(x.hash_of(), z.hash_of());
/// ```
/// ### A custom implementation
/// ```
/// struct Foo { a: i32, b: &[u8], extra: u64 }
///
/// impl Foo {
///     use std::hash::Hasher;
///     fn hash<H: Hasher<H>>(self: &Foo, hasher: &mut H) {
///         self.a.hash(hasher);
///         self.b.hash(hasher);
///         // Skip the `extra`, if two instances of `Foo` are otherwise equal,
///         // but differ in the value of `extra`, they will hash to the same value.
///     }
/// }
///
/// use std::hash::hash_of;
///
/// let v1 = Foo { a: 1, b: "foo", extra: 0 };
/// let v2 = Foo { a: 1, b: "foo", extra: 1 };
/// let v3 = Foo { a: 1, b: "bar", extra: 0 };
///
/// assert_eq!(v1.hash_of(), v2.hash_of());
/// assert_ne!(v1.hash_of(), v3.hash_of());
/// ```
protocol Hashable<Self, H: Hasher<H>> {
    /// Update hasher state with the contents of this object.
    ///
    /// See [Hashable] for details.
    #[inline]
    fn hash(a: &Self, hasher: &mut H);
}

/// Mixin to provide a default implementation of [Hashable] for a type.
///
/// This mixin provides a default implementation of [Hashable::hash] for a type. If the type is a
/// struct, it will hash each field in order. If the type is an enum, it will hash the underlying
/// value.
///
/// Pointers are hashed by casting them to `usize` and hashing the result. If a field is not
/// hashable, the program will not compile.
///
/// See also [cmp::DefaultEquatable] for a similar mixin for equality comparison.
protocol DefaultHashable<Self, H: Hasher<H>> {
    fn hash(self: &Self, hasher: &mut H) {
        let ty = typing::Type::new::<Self>();

        when ty.is_struct() {
            let fields = ty.fields();

            for const i in 0usize..fields.len() {
                let field_ty = fields.(i).type();
                let field_ptr = fields.(i).as_ptr(self);
                when field_ty.is_pointer() || field_ty.is_function_pointer() {
                    // Pointers are always hashable
                    #[allow(unnecessary_cast)]
                    (*field_ptr as &void as usize).hash(hasher);
                } else when *field_ptr is Hashable<typeof(*field_ptr), H> {
                    field_ptr.hash(hasher);
                } else {
                    compile_fail!(
                        "field {} is not automatically hashable",
                        ty.fields().(i).name()
                    );
                }
            }
        } else when ty.is_enum() {
            (*self as builtins::underlying_type_of<Self>).hash(hasher);
        } else {
            compile_fail!("type cannot be automatically hashed")
        }
    }
}

/// Calculate the hash of a value passed by pointer.
fn hash_of<T: Hashable<T, H>, H: Hasher<H> = DefaultHash>(val: &T) -> u64 {
    let hasher = H::new();
    val.hash(&hasher);
    hasher.finish()
}

/// The default hashing algorithm used for hash-based collections if none is specified.
type DefaultHash = xxhash::Xxh64;

#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    #[test]
    fn test_default_hasher() {
        struct Foo {
            a: i32,
            b: i32,
            c: Option<i32>,
        }
        impl Foo {
            mixin<H: Hasher<H>> DefaultHashable<Foo, H>;
        }

        struct Quux {
            p1: &i32,
            p2: fn()
        }
        impl Quux {
            mixin<H: Hasher<H>> DefaultHashable<Quux, H>;
        }

        enum Bar {
            A,
            B,
            C,
        }

        impl Bar {
            mixin<H: Hasher<H>> DefaultHashable<Bar, H>;
        }

        assert_eq!(
            hash_of(&Foo { a: 1, b: 2, c: Option::none() }),
            hash_of(&Foo { a: 1, b: 2, c: Option::none() }),
        );

        assert_ne!(
            hash_of(&Foo { a: 1, b: 2, c: Option::none() }),
            hash_of(&Foo { a: 1, b: 2, c: Option::some(0) }),
        );


        assert_eq!(hash_of(&Bar::A), hash_of(&Bar::A));
        assert_ne!(hash_of(&Bar::A), hash_of(&Bar::B));

        let x = 42;
        let y = 42;

        let quux1 = Quux { p1: &x, p2: util::unit::<()> };
        let quux2 = Quux { p1: &y, p2: util::unit::<()> };
        let quux3 = Quux { p1: &x, p2: mem::uninitialized::<()> };

        assert_eq!(hash_of(&quux1), hash_of(&quux1));
        assert_ne!(hash_of(&quux1), hash_of(&quux2));
        assert_ne!(hash_of(&quux1), hash_of(&quux3));
    }
}
