//! Math functions
//!
//! Note that many standard math functions such as `sin` and `sqrt` are defined as methods on the [f32] and [f64] types.

use builtins::{Numeric, Unsigned, Integer};

/// Base of the natural logarithm
const E: f64 = 2.71828182845904523536028747135266250f64;
/// 1/π
const FRAC_1_PI: f64 = 0.318309886183790671537767526745028724f64;
/// 1/sqrt(2)
const FRAC_1_SQRT_2: f64 = 0.707106781186547524400844362104849039f64;
/// 2/π
const FRAC_2_PI: f64 = 0.636619772367581343075535053490057448f64;
/// 2/sqrt(π)
const FRAC_2_SQRT_PI: f64 = 1.12837916709551257389615890312154517f64;
/// π/2
const FRAC_PI_2: f64 = 1.57079632679489661923132169163975144f64;
/// π/3
const FRAC_PI_3: f64 = 1.04719755119659774615421446109316763f64;
/// π/4
const FRAC_PI_4: f64 = 0.785398163397448309615660845819875721f64;
/// π/6
const FRAC_PI_6: f64 = 0.52359877559829887307710723054658381f64;
/// π/8
const FRAC_PI_8: f64 = 0.39269908169872415480783042290993786f64;
/// Natural logarithm of 10
const LN_10: f64 = 2.30258509299404568401799145468436421f64;
/// Natural logarithm of 2
const LN_2: f64 = 0.693147180559945309417232121458176568f64;
/// Logarithm base 10 of 2
const LOG10_2: f64 = 0.301029995663981195213738894724493027f64;
/// Logarithm base 10 of E
const LOG10_E: f64 = 0.434294481903251827651128918916605082f64;
/// Logarithm base 2 of 10
const LOG2_10: f64 = 3.32192809488736234787031942948939018f64;
/// Logarithm base 2 of E
const LOG2_E: f64 = 1.44269504088896340735992468100189214f64;
/// π
const PI: f64 = 3.14159265358979323846264338327950288f64;
/// Square root of 2
const SQRT_2: f64 = 1.41421356237309504880168872420969808f64;
/// 2π (also known as τ)
const TAU: f64 = 6.28318530717958647692528676655900577f64;

/// Absolute value of a number
#[inline]
fn abs<T: Numeric>(a: T) -> T {
    when a is Unsigned {
        a
    } else when a is f64 {
        libc::fabs(a)
    } else when a is f32 {
        libc::fabsf(a)
    } else {
        if a < (0 as T) {
            -a
        } else {
            a
        }
    }
}

/// Absolute value of an integer (widened to the unsigned type)
///
/// ## Example
/// ```
/// use std::math::widening_abs;
///
/// assert_eq!(widening_abs(-128i8), 128u8);
/// ```
#[inline]
fn widening_abs<T: Integer>(a: T) -> builtins::unsigned_of<T> {
    when a is Unsigned {
        a
    } else {
        if a < 0 {
            ((~a) as builtins::unsigned_of<T>) + 1
        } else {
            a as builtins::unsigned_of<T>
        }
    }
}

/// Calculates the quotient and remainder of integer division
///
/// Unlike the `/` operator which rounds towards zero, this function always rounds towards
/// negative infinity. This is similar to how `//` and `%` work in Python.
///
/// ## Example
/// ```
/// use std::math::div_floor;
///
/// let a = -3;
/// let b = 2;
///
/// assert_eq!((a / b, a % b), (-1, -1));
/// assert_eq!(a.div_floor(b), (-2, 1));
/// ```
fn div_floor<T: Integer>(a: T, b: T) -> (T, T) {
    when a is Unsigned {
        (a / b, a % b)
    } else {
        let (q, r) = (a / b, a % b);
        if r != 0 && ((r < 0) != (b < 0)) {
            (q - 1, r + b)
        } else {
            (q, r)
        }
    }
}

#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    #[test]
    fn test_abs() {
        assert_eq!(abs::<usize>(0), 0);
        assert_eq!(abs::<isize>(-1), 1);
        assert_eq!(abs::<f64>(-1.0), 1.0);
        assert_eq!(abs::<f32>(-1.0), 1.0);
    }

    #[test]
    fn test_div_floor() {
        assert_eq!(div_floor(-3, -3), (1, 0));
        assert_eq!(div_floor(-2, -3), (0, -2));
        assert_eq!(div_floor(-1, -3), (0, -1));
        assert_eq!(div_floor(0, -3), (0, 0));
        assert_eq!(div_floor(1, -3), (-1, -2));
        assert_eq!(div_floor(2, -3), (-1, -1));
        assert_eq!(div_floor(3, -3), (-1, 0));
        assert_eq!(div_floor(-3, -2), (1, -1));
        assert_eq!(div_floor(-2, -2), (1, 0));
        assert_eq!(div_floor(-1, -2), (0, -1));
        assert_eq!(div_floor(0, -2), (0, 0));
        assert_eq!(div_floor(1, -2), (-1, -1));
        assert_eq!(div_floor(2, -2), (-1, 0));
        assert_eq!(div_floor(3, -2), (-2, -1));
        assert_eq!(div_floor(-3, -1), (3, 0));
        assert_eq!(div_floor(-2, -1), (2, 0));
        assert_eq!(div_floor(-1, -1), (1, 0));
        assert_eq!(div_floor(0, -1), (0, 0));
        assert_eq!(div_floor(1, -1), (-1, 0));
        assert_eq!(div_floor(2, -1), (-2, 0));
        assert_eq!(div_floor(3, -1), (-3, 0));
        assert_eq!(div_floor(-3, 1), (-3, 0));
        assert_eq!(div_floor(-2, 1), (-2, 0));
        assert_eq!(div_floor(-1, 1), (-1, 0));
        assert_eq!(div_floor(0, 1), (0, 0));
        assert_eq!(div_floor(1, 1), (1, 0));
        assert_eq!(div_floor(2, 1), (2, 0));
        assert_eq!(div_floor(3, 1), (3, 0));
        assert_eq!(div_floor(-3, 2), (-2, 1));
        assert_eq!(div_floor(-2, 2), (-1, 0));
        assert_eq!(div_floor(-1, 2), (-1, 1));
        assert_eq!(div_floor(0, 2), (0, 0));
        assert_eq!(div_floor(1, 2), (0, 1));
        assert_eq!(div_floor(2, 2), (1, 0));
        assert_eq!(div_floor(3, 2), (1, 1));
        assert_eq!(div_floor(-3, 3), (-1, 0));
        assert_eq!(div_floor(-2, 3), (-1, 1));
        assert_eq!(div_floor(-1, 3), (-1, 2));
        assert_eq!(div_floor(0, 3), (0, 0));
        assert_eq!(div_floor(1, 3), (0, 1));
        assert_eq!(div_floor(2, 3), (0, 2));
        assert_eq!(div_floor(3, 3), (1, 0));
    }

    #[test]
    fn test_various_math() {
        assert_eq!(E.log(), 1.0);
        assert_eq!(1f64.exp(), E);
    }
}
