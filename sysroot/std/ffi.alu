//! Utilities related to FFI bindings.

/// Compile-time null-terminated string.
///
/// ## Example
/// ```
/// use std::ffi::c_str;
/// let f = c_str!("Hello, world!");
///
/// libc::puts(f);
/// ```
macro c_str($s) {
    // This concat is technically redundant since C codegen already emits
    // those as C strings, but it doesn't hurt to be explicit if this is
    // ever changed. Also concat has a nice side-effect of guarding against
    // strings that are not a compile-time constant.
    concat!($s, "\0")._ptr as &libc::c_char
}

/// A wrapper for a null-terminated (C) string.
///
/// Allocates memory for the string on the heap, so it must be freed.
///
/// ## Example
/// ```
/// use std::ffi::CString;
/// let s = CString::from_slice("Hello, world!");
/// defer s.free();
///
/// libc::puts(s.ptr);
/// ```
#[transparent]
struct CString {
    ptr: &libc::c_char,
}

impl CString {
    /// Create a new CString from a string slice
    ///
    /// Allocates memory.
    fn from_slice(s: &[u8]) -> CString {
        use mem::slice;

        let ret = slice::alloc::<u8>(s.len() + 1);
        s.copy_to_nonoverlapping(&ret[0]);
        ret[s.len()] = '\0';

        CString { ptr: &ret[0] as &libc::c_char }
    }

    /// Create a CString from a raw pointer to a null-terminated string.
    fn from_raw(ptr: &libc::c_char) -> CString {
        CString { ptr: ptr }
    }

    /// A null C string.
    fn null() -> CString {
        CString { ptr: null }
    }

    /// Returns the length of the string.
    fn len(self: &CString) -> usize {
        util::cast(libc::strlen(self.ptr))
    }

    /// @ mem::AsSlice::as_slice
    #[allow(unnecessary_cast)]
    fn as_slice(self: &CString) -> &[u8] {
        mem::slice::from_raw(self.ptr as &u8, self.len())
    }

    /// @ mem::Freeable::free
    fn free(self: &mut CString) {
        libc::free(self.ptr as &mut void);
    }

    /// @ mem::Clonable::clone
    fn clone(self: &CString) -> CString {
        from_slice(self[..])
    }

    /// @ mem::Movable::move
    fn move(self: &mut CString) -> CString {
        let ret = *self;
        self.ptr = null;
        ret
    }

    /// @ fmt::Formattable::fmt
    fn fmt<F: fmt::Formatter<F>>(self: &CString, f: &mut F) -> fmt::Result {
        f.write_str(self.as_slice())
    }
}


#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    #[test]
    fn test_cstring() {
        let s = CString::from_raw(c_str!("Hello, World"));

        assert_eq!(s[..], "Hello, World");
        let f = fmt::format!("{}", s).unwrap();
        defer f.free();

        assert_eq!(f[..] as &[u8], "Hello, World");
    }

    #[test]
    fn test_cstring_clone() {
        let s1 = CString::from_raw(c_str!("Hello, World"));
        let s2 = s1.clone();
        defer s2.free();

        *(s2.ptr as &mut u8) = 'Y';

        assert_eq!(s1[..], "Hello, World");
        assert_eq!(s2[..], "Yello, World");
    }
}
