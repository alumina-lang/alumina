//! Utilities related to FFI bindings.

/// Compile-time null-terminated string.
///
/// # Example usage
/// ```
/// use std::ffi::c_str;
/// let f = c_str!("Hello, world!");
///
/// libc::puts(f);
/// ```
macro c_str($s) {
    // This concat is technically redundant since C codegen already emits
    // those as C strings, but it doesn't hurt to be explicit if this is 
    // ever changed. Also concat has a nice side-effect of guarding against
    // strings that are not a compile-time constant.
    concat!($s, "\0").ptr as &libc::c_char
}

struct CString {
    ptr: &libc::c_char,
}

impl CString {
    fn from_slice(s: &[u8]) -> CString {
        use std::mem::slice;

        let ret = slice::alloc::<u8>(s.len + 1);
        s.copy_to_nonoverlapping(&ret[0]);
        ret[s.len] = '\0';

        CString { ptr: ret.ptr as &libc::c_char }
    }

    fn from_raw(ptr: &libc::c_char) -> CString {
        CString { ptr: ptr }
    }

    fn null() -> CString {
        CString { ptr: null }
    }

    fn len(self: &CString) -> usize {
        libc::strlen(self.ptr) as usize
    }

    fn as_slice(self: &CString) -> &[u8] {
        mem::slice::from_raw(self.ptr as &u8, self.len())
    }

    fn free(self: &mut CString) {
        libc::free(self.ptr as &mut void);
    }

    fn move(self: &mut CString) -> CString {
        let ret = *self;
        self.ptr = null;
        ret
    }
}


#[cfg(all(test_std, test))]
mod tests {
    #[test]
    fn test_cstring() {
        let s = CString::from_raw(c_str!("Hello, World"));

        assert_eq!(s.as_slice(), "Hello, World");
    }
}
