//! Utilities related to FFI bindings.

#[repr(transparent)]
struct CString {
    ptr: &libc::c_char,
}

/// Compile-time null-terminated string.
///
/// # Example usage
/// ```
/// use std::ffi::c_str;
/// let f = c_str!("Hello, world!");
///
/// libc::puts(f);
/// ```
macro c_str($s) {
    concat!($s, "\0").ptr as &libc::c_char
}

impl CString {
    fn new(s: &[u8]) -> CString {
        use std::mem::{slice, alloc, copy_nonoverlapping};

        let ptr = libc::malloc(s.len + 1) as &mut libc::c_char;
        s.copy_nonoverlapping(ptr as &mut u8);
        *(ptr + s.len) = 0;

        CString { ptr: ptr }
    }

    fn from_raw(ptr: &libc::c_char) -> CString {
        CString { ptr: ptr }
    }

    fn null() -> CString {
        CString { ptr: null }
    }

    fn len(self: &CString) -> usize {
        libc::strlen(self.ptr) as usize
    }

    fn as_slice(self: &CString) -> &[u8] {
        mem::slice::from_raw(self.ptr as &u8, self.len())
    }

    fn free(self: &mut CString) {
        libc::free(self.ptr as &mut void);
    }

    fn move(self: &mut CString) -> CString {
        let ret = *self;
        self.ptr = null;
        ret
    }
}
