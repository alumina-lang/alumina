//! Generic (non-cryptographic) hashing support
//!
//! The main purpose of this module is to support the hashing functionality required for
//! hashed collections such as [collections::HashMap] in a generic and algorithm-agnostic fashion.
//! See the [Hashable] module for how to make a custom type hashable and [Hasher] for
//! implementing other hashing algorithms.

/// Hashing algorithms.
///
/// Hasher is a visitor that is accepted by a hashable type through the [Hashable::hash] method.
/// Each hasher is a disposable object that is used to hash a single value.
///
/// ## Example
/// ```
/// use std::hash::hash_of;
///
/// // A bad hash, do not use
/// struct CountingHash {
///     length: usize
/// }
///
/// impl CountingHash {
///     fn new() -> CountingHash { CountingHash { length: 0 } }
///     fn write(self: &mut CountingHash, val: &[u8]) { self.length += val.len() }
///     fn finish(self: &mut CountingHash) -> u64 { self.length as u64 }
/// }
///
/// assert_eq!(hash_of::<&[u8], CountingHash>(""), 0);
/// assert_eq!(hash_of::<&[u8], CountingHash>("a"), 1);
/// assert_eq!(hash_of::<&[u8], CountingHash>("ab"), 2);
/// ```
protocol Hasher<Self> {
    use std::mem::{size_of,slice::from_raw};

    /// Create a new hasher.
    fn new() -> Self;
    /// Write a byte slice into a hasher.
    fn write(self: &mut Self, val: &[u8]);
    /// Finalize the hashing and return the hash value.
    fn finish(self: &mut Self) -> u64;
}

/// Types that can be hashed.
///
/// The [Hashable::hash] method can be implemented directly or a default implementation can
/// be mixed in, in which case the memory representation of the type is used as an input to
/// the hash function.
///
/// This is only recommended if the memory layout of the type does not contain padding, as
/// the value of the padding bytes may be unpredictable and cause undefined behavior.
///
/// ## Examples
/// ### A default implementation
/// ```
/// struct FancyI32 { a: i32 }
///
/// impl FancyI32 {
///    use std::hash::{Hashable, Hasher};
///
///    mixin<H: Hasher<H>> std::hash::Hashable<FancyI32, H>;
/// }
///
/// use std::hash::hash_of;
///
/// let x = FancyI32 { a: 1 };
/// let y = FancyI32 { a: 1 };
/// let z = FancyI32 { a: 2 };
///
/// assert_eq!(hash_of(x), hash_of(y));
/// assert_ne!(hash_of(x), hash_of(z));
/// ```
/// ### A custom implementation
/// ```
/// struct Foo { a: i32, b: &[u8], extra: u64 }
///
/// impl Foo {
///     use std::hash::Hasher;
///     fn hash<H: Hasher<H>>(self: &Foo, hasher: &mut H) {
///         self.a.hash(hasher);
///         self.b.hash(hasher);
///         // Skip the `extra`, if two instances of `Foo` are otherwise equal,
///         // but differ in the value of `extra`, they will hash to the same value.
///     }
/// }
///
/// use std::hash::hash_of;
///
/// let v1 = Foo { a: 1, b: "foo", extra: 0 };
/// let v2 = Foo { a: 1, b: "foo", extra: 1 };
/// let v3 = Foo { a: 1, b: "bar", extra: 0 };
///
/// assert_eq!(hash_of(v1), hash_of(v2));
/// assert_ne!(hash_of(v1), hash_of(v3));
/// ```
protocol Hashable<Self, H: Hasher<H>> {
    /// Update hasher state with the contents of this object.
    ///
    /// See [Hashable] for details.
    #[inline]
    fn hash(a: &Self, hasher: &mut H) {
        use std::mem::{size_of,slice::from_raw};
        hasher.write(from_raw(a as &u8, size_of::<Self>()));
    }
}

/// Calculate the hash of a value.
fn hash_of<T: Hashable<T, H>, H: Hasher<H> = DefaultHash>(val: T) -> u64 {
    let hasher = H::new();
    val.hash(&hasher);
    hasher.finish()
}

/// The default hashing algorithm used for hash-based collections if none is specified.
type DefaultHash = xxhash::Xxh64;
