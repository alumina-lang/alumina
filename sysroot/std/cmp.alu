//! Equality and comparison

/// Types that can be compared for equality.
///
/// Types that implement this protocol can be compared for equality using the `==` and `!=` operators.
/// Many built-in types implement this protocol, such as primitive types, slices, [Option], etc.
///
/// `Equatable` can be automatically generated for by using [DefaultEquatable] mixin, but if custom equality
/// comparison is needed, the protocol can be implemented manually.
///
/// Method [equals] must be implemented, other methods can be mixed in.
///
/// ## Example
/// ```
/// struct Point { x: i32, y: i32 }
///
/// impl Point {
///     use std::cmp::Equatable;
///
///     fn equals(self: &Point, other: &Point) -> bool {
///         self.x == other.x && self.y == other.y
///     }
///     mixin Equatable<Point>;
/// }
///
/// assert_eq!(Point { x: 1, y: 2 }, Point { x: 1, y: 2 });
/// assert_ne!(Point { x: 1, y: 2 }, Point { x: 1, y: 3 });
/// ```
protocol Equatable<Self> {
    /// Returns `true` if arguments are equal, `false` otherwise
    ///
    /// See [Equatable] for details.
    fn equals(lhs: &Self, rhs: &Self) -> bool;

    /// Returns `false` if arguments are equal, `true` otherwise
    #[inline]
    fn not_equals(lhs: &Self, rhs: &Self) -> bool {
        !Self::equals(lhs, rhs)
    }
}

/// Mixin to provide a default implementation of [Equatable] for a type.
///
/// This mixin provides a default implementation of [Equatable::equals] for a type. If the type is a
/// struct, it will compare each field as with the `==` operator. If the type is an enum, it will
/// compare the underlying value using the `==` operator.
///
/// If any field is not equatable, this will result in a compilation error.
///
/// ## Example
/// ```
/// struct FullName { first: &[u8], last: &[u8] }
///
/// impl FullName {
///     use std::cmp::DefaultEquatable;
///     mixin DefaultEquatable<FullName>;
/// }
///
/// assert_eq!(
///     FullName { first: "John", last: "Doe" },
///     FullName { first: "John", last: "Doe" }
/// );
/// assert_ne!(
///     FullName { first: "John", last: "Doe" },
///     FullName { first: "John", last: "Smith" }
/// );
/// ```
protocol DefaultEquatable<Self> {
    /// @ Equatable::equals
    fn equals(lhs: &Self, rhs: &Self) -> bool {
        let ty = typing::Type::new::<Self>();

        when ty.is_struct() {
            let fields = ty.fields();

            for const i in 0usize..fields.len() {
                let field_ty = fields.(i).type();
                let lhs_ptr = fields.(i).as_ptr(lhs);
                let rhs_ptr = fields.(i).as_ptr(rhs);

                when field_ty.is_pointer() || field_ty.is_function_pointer() {
                    if *lhs_ptr != *rhs_ptr {
                        return false;
                    }
                } else when *lhs_ptr is Equatable<typeof(*lhs_ptr)> {
                    if (*lhs_ptr).not_equals(rhs_ptr) {
                        return false;
                    }
                } else {
                    compile_fail!(
                        "field {} is not automatically equatable",
                        ty.fields().(i).name()
                    );
                }
            }

            true
        } else when ty.is_enum() {
            lhs == rhs
        } else {
            compile_fail!("type cannot be automatically hashed")
        }
    }

    /// @ Equatable::not_equals
    #[inline]
    fn not_equals(lhs: &Self, rhs: &Self) -> bool {
        !Self::equals(lhs, rhs)
    }
}

/// Result of comparing two values.
///
/// ## Example
/// ```
/// use std::cmp::Ordering;
///
/// assert_eq!(1.compare(&2), Ordering::Less);
/// assert_eq!(2.compare(&1), Ordering::Greater);
/// assert_eq!(2.compare(&2), Ordering::Equal);
/// ```
enum Ordering {
    /// The left value is less than the right value.
    Less = -1i8,
    /// The left value is equal to the right value.
    Equal = 0i8,
    /// The left value is greater than the right value.
    Greater = 1i8,
}

/// Types that have a total order.
///
/// Types that implement this protocol can be compared using the `<`, `<=`, `>` and `>=` operators.
///
/// Method [compare] must be implemented, other methods can be mixed in. This includes the default
/// implementations for [Equatable::equals] and [Equatable::not_equals] of the [Equatable] protocol.
///
/// ## Example
/// ```
/// struct FullName { first: &[u8], last: &[u8] }
///
/// impl FullName {
///     use std::cmp::{Ordering, Comparable};
///
///     fn new(first: &[u8], last: &[u8]) -> FullName {
///         FullName { first: first, last: last }
///     }
///
///     fn compare(self: &FullName, other: &FullName) -> Ordering {
///         let first_cmp = self.first.compare(&other.first);
///         if first_cmp != Ordering::Equal {
///             return first_cmp;
///         }
///         self.last.compare(&other.last)
///     }
///
///     mixin Comparable<FullName>;
/// }
///
/// assert!(FullName::new("John", "Malkovich") < FullName::new("John", "McCain"));
/// assert!(FullName::new("John", "Doe") == FullName::new("John", "Doe"));
/// ```
///
/// See also [lex_compare] for a convenient way to implement the `compare` method.
protocol Comparable<Self: Equatable<Self>> {
    /// Compare the value
    ///
    /// See [Comparable] for details.
    fn compare(lhs: &Self, rhs: &Self) -> Ordering;

    /// Returns `true` if `lhs` is equal to `rhs`, `false` otherwise
    #[inline]
    fn equals(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) == Ordering::Equal
    }

    /// Returns `true` if `lhs` not equal to `rhs`, `false` otherwise
    #[inline]
    fn not_equals(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) != Ordering::Equal
    }

    /// Returns `true` if `lhs` is strictly less than `rhs`, `false` otherwise
    #[inline]
    fn less_than(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) == Ordering::Less
    }

    /// Returns `true` if `lhs` is less or equal to `rhs`, `false` otherwise
    #[inline]
    fn less_than_or_equal(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) != Ordering::Greater
    }

    /// Returns `true` if `lhs` strictly greater than `rhs`, `false` otherwise
    #[inline]
    fn greater_than(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) == Ordering::Greater
    }

    /// Returns `true` if `lhs` greater than or equal `rhs`, `false` otherwise
    #[inline]
    fn greater_than_or_equal(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) != Ordering::Less
    }
}

/// Mixin to provide a default implementation of [Comparable] for a type
///
/// This mixin provides a default implementation of [Comparable::compare] for a type. If the type is a
/// struct, it will compare each field lexicographically in order of declaration. If the type is an
/// enum, it will compare the underlying value.
///
/// If any field is not comparable, this will result in a compilation error.
///
/// ## Example
/// ```
/// struct FullName { first: &[u8], last: &[u8] }
///
/// impl FullName {
///     use std::cmp::LexicographicComparable;
///     mixin LexicographicComparable<FullName>;
/// }
///
/// assert!(FullName { first: "John", last: "Malkovich" } < FullName { first: "John", last: "McCain" });
/// assert!(FullName { first: "John", last: "Doe" } == FullName { first: "John", last: "Doe" });
/// ```
protocol LexicographicComparable<Self> {
    /// @ Comparable::compare
    fn compare(lhs: &Self, rhs: &Self) -> Ordering {
        let ty = typing::Type::new::<Self>();

        when ty.is_struct() {
            let fields = ty.fields();

            for const i in 0usize..fields.len() {
                let lhs_ptr = fields.(i).as_ptr(lhs);
                let rhs_ptr = fields.(i).as_ptr(rhs);

                when *lhs_ptr is Comparable<typeof(*lhs_ptr)> {
                    let cmp = (*lhs_ptr).compare(rhs_ptr);
                    if cmp != Ordering::Equal {
                        return cmp;
                    }
                } else {
                    compile_fail!(
                        "field {} is not automatically comparable",
                        ty.fields().(i).name()
                    );
                }
            }

            Ordering::Equal
        } else {
            compile_fail!("type cannot be lexicographically compared")
        }
    }

    /// @ Comparable::equals
    fn equals(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) == Ordering::Equal
    }

    /// @ Comparable::not_equals
    fn not_equals(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) != Ordering::Equal
    }

    /// @ Comparable::less_than
    fn less_than(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) == Ordering::Less
    }

    /// @ Comparable::less_than_or_equal
    fn less_than_or_equal(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) != Ordering::Greater
    }

    /// @ Comparable::greater_than
    fn greater_than(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) == Ordering::Greater
    }

    /// @ Comparable::greater_than_or_equal
    fn greater_than_or_equal(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) != Ordering::Less
    }
}

/// Protocol for comparison functions.
///
/// See [Comparable] for details.
type CompareFunction<T> = Fn(&T, &T) -> Ordering;

/// Compare two values using the [Comparable::compare] method of a type
/// implementing the [Comparable] protocol.
///
/// See [Comparable] for details.
#[inline]
fn compare<T: Comparable<T>>(a: &T, b: &T) -> Ordering {
    a.compare(b)
}

/// Compare two values using the [Comparable::compare] method of a type
/// implementing the [Comparable] protocol, but in reverse order.
///
/// Useful for sorting collections in descending order. See also [compare].
///
/// ## Example
/// ```
/// use std::cmp::{sort_by, reversed};
///
/// let arr = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5];
/// arr[..].sort_by(reversed::<i32>);
///
/// assert_eq!(arr[..], &[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
/// ```
#[inline]
fn reversed<T: Comparable<T>>(a: &T, b: &T) -> Ordering {
    b.compare(a)
}

/// Helper macro for implementing a lexicographic order.
///
/// The macro will short-circuit the enclosuing function if `lhs` and `rhs` are not equal
/// and continue if they are.
///
/// ## Example
/// ```
/// use std::cmp::{Ordering, Comparable, lex_compare};
///
/// struct IPv4 {
///     a: u8,
///     b: u8,
///     c: u8,
///     d: u8,
/// }
///
/// impl IPv4 {
///     fn compare(lhs: &IPv4, rhs: &IPv4) -> Ordering {
///         lex_compare!(lhs.a, rhs.a);
///         lex_compare!(lhs.b, rhs.b);
///         lex_compare!(lhs.c, rhs.c);
///         lex_compare!(lhs.d, rhs.d);
///         Ordering::Equal
///     }
///
///     mixin Comparable<IPv4>;
/// }
/// ```
macro lex_compare($lhs, $rhs) {
    let cmp = $lhs.compare(&$rhs);
    if cmp != Ordering::Equal {
        return cmp;
    }
}


/// Returns the greater of the two arguments.
/// ## Example
/// ```
/// use std::cmp::max;
///
/// assert_eq!(max(1, 2), 2);
/// ```
#[inline]
fn max<T: Comparable<T>>(a: T, b: T) -> T {
    if a < b {
        b
    } else {
        a
    }
}

/// Returns the least of the two arguments.
/// ## Example
/// ```
/// use std::cmp::min;
///
/// assert_eq!(min(1, 2), 1);
/// ```
#[inline]
fn min<T: Comparable<T>>(a: T, b: T) -> T {
    if a < b {
        a
    } else {
        b
    }
}

/// Returns `true` if the array is sorted by the given comparison function.
///
/// ## Example
/// ```
/// use std::cmp::is_sorted_by;
///
/// let arr1 = [5, 3, 2, 4, 1];
/// let arr2 = [1, 2, 3, 4, 5];
///
/// assert!(!arr1[..].is_sorted_by(i32::compare));
/// assert!(arr2[..].is_sorted_by(i32::compare));
/// ```
fn is_sorted_by<T, F: CompareFunction<T>>(arr: &[T], f: F) -> bool {
    for i in 1usize..arr.len() {
        if f(&arr[i - 1], &arr[i]) == Ordering::Greater {
            return false;
        }
    }

    true
}

/// Returns `true` if the array is sorted using a key extraction function.
///
/// ## Example
/// ```
/// use std::cmp::is_sorted_by_key;
///
/// let arr = [(5, 1), (3, 2), (2, 3), (4, 4), (1, 5)];
///
/// assert!(!arr[..].is_sorted_by_key(|e: &(i32, i32)| -> i32 { e.0 }));
/// assert!(arr[..].is_sorted_by_key(|e: &(i32, i32)| -> i32 { e.1 }));
/// ```
fn is_sorted_by_key<T, F: Fn(&T) -> K, K: Comparable<K>>(arr: &[T], key: F) -> bool {
    arr.is_sorted_by(|=key, a: &T, b: &T| -> Ordering { key(a).compare(&key(b)) })
}

/// Returns `true` if the array is sorted.
///
/// ## Example
/// ```
/// use std::cmp::is_sorted;
///
/// let arr1 = [5, 3, 2, 4, 1];
/// let arr2 = [1, 2, 3, 4, 5];
///
/// assert!(!arr1[..].is_sorted());
/// assert!(arr2[..].is_sorted());
/// ```
fn is_sorted<T: Comparable<T>>(arr: &[T]) -> bool {
    arr.is_sorted_by(|a: &T, b: &T| -> Ordering { a.compare(b) })
}

/// Sorts a slice using a custom comparison function. The sort is unstable (i.e. does not
/// preserve the order of equal elements).
///
/// The algorithm used is introsort (quicksort with a fallback to heapsort and insertion sort
/// when the recursion depth exceeds a certain limit and when the array is small, respectively).
///
/// ## Example
/// ```
/// use std::cmp::{Ordering, sort_by};
///
/// let arr = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5];
/// arr[..].sort_by(|a: &i32, b: &i32| -> Ordering { b.compare(a) });
///
/// assert_eq!(arr[..], &[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
/// ```
fn sort_by<T, F: CompareFunction<T>>(arr: &mut [T], f: F) {
    let max_depth = collections::heap::internal::log2_fast(arr.len()) * 2;
    internal::introsort_by(arr, max_depth, f);
}

/// Sorts a slice using a key extraction function. The sort is unstable (i.e. does not
/// preserve the order of equal elements).
///
/// The algorithm used is introsort (quicksort with a fallback to heapsort and insertion sort
/// when the recursion depth exceeds a certain limit and when the array is small, respectively).
///
/// ## Example
/// ```
/// use std::cmp::sort_by_key;
///
/// let arr = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5];
/// arr[..].sort_by_key(|v: &i32| -> i32 { -*v });
///
/// assert_eq!(arr[..], &[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
/// ```
fn sort_by_key<T, F: Fn(&T) -> K, K: Comparable<K>>(arr: &mut [T], key: F) {
    arr.sort_by(|=key, a: &T, b: &T| -> Ordering { key(a).compare(&key(b)) });
}

/// Sorts a slice. The sort is unstable (i.e. does not preserve the order of equal elements).
///
/// The algorithm used is introsort (quicksort with a fallback to heapsort and insertion sort
/// when the recursion depth exceeds a certain limit and when the array is small, respectively).
///
/// ## Example
/// ```
/// use std::cmp::sort;
///
/// let arr = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5];
/// arr[..].sort();
///
/// assert_eq!(arr[..], &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
/// ```
fn sort<T: Comparable<T>>(arr: &mut [T]) {
    arr.sort_by(compare::<T>);
}

/// Sorts a slice using a custom comparison function. The sort is stable (i.e. preserves the
/// order of equal elements).
///
/// The algorithm used is mergesort. it internally allocates a temporary buffer the size of
/// the slice.
///
/// ## Example
/// ```
/// use std::cmp::{Ordering, stable_sort_by};
///
/// let arr = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5];
/// arr[..].stable_sort_by(|a: &i32, b: &i32| -> Ordering { b.compare(a) });
///
/// assert_eq!(arr[..], &[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
/// ```
fn stable_sort_by<T, F: CompareFunction<T>>(arr: &mut [T], f: F) {
    if arr.len() < internal::MERGESORT_MIN_SIZE {
        // Avoid an allocation in case the array is small.
        return internal::insertion_sort_by(arr, f);
    }

    let scratch = mem::slice::alloc::<T>(arr.len());
    defer scratch.free();

    // Alternating buffers are used to minimize copying and since we
    // do not know the depth, we ensure that both buffers have the same
    // by doing a full copy first.
    arr.copy_to_nonoverlapping(&scratch[0]);
    internal::merge_sort_by(scratch, arr, f);
}

/// Sorts a slice using a key extraction function. The sort is stable (i.e. preserves the
/// order of equal elements).
///
/// The algorithm used is mergesort. it internally allocates a temporary buffer the size of
/// the slice.
///
/// ## Example
/// ```
/// use std::cmp::stable_sort_by_key;
///
/// let arr = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5];
/// arr[..].stable_sort_by_key(|v: &i32| -> i32 { -*v });
///
/// assert_eq!(arr[..], &[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
/// ```
fn stable_sort_by_key<T, F: Fn(&T) -> K, K: Comparable<K>>(arr: &mut [T], key: F) {
    arr.stable_sort_by(|=key, a: &T, b: &T| -> Ordering { key(a).compare(&key(b)) });
}

/// Sorts a slice. The sort is stable (i.e. preserves the order of equal elements).
///
/// The algorithm used is mergesort. it internally allocates a temporary buffer the size of
/// the slice.
///
/// ## Example
/// ```
/// use std::cmp::stable_sort;
///
/// let arr = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5];
/// arr[..].stable_sort();
///
/// assert_eq!(arr[..], &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
/// ```
fn stable_sort<T: Comparable<T>>(arr: &mut [T]) {
    arr.stable_sort_by(compare::<T>);
}


/// Performs a binary search on a sorted slice.
///
/// If the element is found, returns `Result::ok(index)`, otherwise returns the index where the
/// element should be inserted as `Result::err(index)`.
///
/// ## Example
/// ```
/// use std::cmp::binary_search;
///
/// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
///
/// assert_eq!(arr[..].binary_search(&5), Result::ok(4usize));
/// assert_eq!(arr[..].binary_search(&11), Result::err(10usize));
/// ```
fn binary_search<T: Comparable<T>>(arr: &[T], needle: &T) -> Result<usize, usize> {
    arr.binary_search_by(|=needle, k: &T| -> Ordering { k.compare(needle) })
}

/// Performs a binary search on a sorted slice using a custom comparison function.
///
/// If the element is found, returns `Result::ok(index)`, otherwise returns the index where the
/// element should be inserted as `Result::err(index)`.
///
/// ## Example
/// ```
/// use std::cmp::{Ordering, binary_search_by};
///
/// let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
///
/// assert_eq!(arr[..].binary_search_by(|k: &i32| -> Ordering { k.compare(&5) }), Result::ok(4usize));
/// assert_eq!(arr[..].binary_search_by(|k: &i32| -> Ordering { k.compare(&11) }), Result::err(10usize));
/// ```
fn binary_search_by<T, F: Fn(&T) -> Ordering>(arr: &[T], f: F) -> Result<usize, usize> {
    let size = arr.len();
    let left = 0usize;
    let right = size;

    while left < right {
        let mid = left + size / 2;
        let cmp = f(&arr[mid]);

        switch cmp {
            Ordering::Less => left = mid + 1,
            Ordering::Greater => right = mid,
            _ => return Result::ok(mid)
        }

        size = right - left;
    }

    Result::err(left)
}

/// Performs a binary search on a sorted slice using a key extraction function.
///
/// If the element is found, returns `Result::ok(index)`, otherwise returns the index where the
/// element should be inserted as `Result::err(index)`.
///
/// ## Example
/// ```
/// use std::cmp::binary_search_by_key;
///
/// let arr = [
///     (0, 0), (1, 2), (2, 4),
///     (3, 6), (4, 8), (5, 10),
///     (6, 12), (7, 14), (8, 16)
/// ];
///
/// assert_eq!(arr[..].binary_search_by_key(&5, |v: &(i32, i32)| -> i32 { v.0 }), Result::ok(5usize));
/// assert_eq!(arr[..].binary_search_by_key(&11, |v: &(i32, i32)| -> i32 { v.0 }), Result::err(9usize));
/// ```
fn binary_search_by_key<T, F: Fn(&T) -> K, K: Comparable<K>>(arr: &[T], needle: &K, key: F) -> Result<usize, usize> {
    arr.binary_search_by(|=needle, =key, k: &T| -> Ordering { key(k).compare(needle) })
}

#[docs(no_index)]
mod internal {
    const NINTHER_THRESHOLD: usize = 128;
    const INTROSORT_MIN_SIZE: usize = 24;
    const MERGESORT_MIN_SIZE: usize = 32;

    #[inline(ir)]
    #[lang(operator_eq)]
    fn operator_eq<T: Equatable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.equals(rhs)
    }

    #[inline(ir)]
    #[lang(operator_neq)]
    fn operator_neq<T: Equatable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.not_equals(rhs)
    }

    #[inline(ir)]
    #[lang(operator_lt)]
    fn operator_lt<T: Comparable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.less_than(rhs)
    }

    #[inline(ir)]
    #[lang(operator_lte)]
    fn operator_lte<T: Comparable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.less_than_or_equal(rhs)
    }

    #[inline(ir)]
    #[lang(operator_gt)]
    fn operator_gt<T: Comparable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.greater_than(rhs)
    }

    #[inline(ir)]
    #[lang(operator_gte)]
    fn operator_gte<T: Comparable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.greater_than_or_equal(rhs)
    }

    #[inline]
    fn sort2<T, F: CompareFunction<T>>(a: &mut T, b: &mut T, f: F) {
        if f(a, b) == Ordering::Greater {
            std::mem::swap(a, b);
        }
    }

    #[inline]
    fn sort3<T, F: CompareFunction<T>>(a: &mut T, b: &mut T, c: &mut T, f: F) {
        sort2(a, b, f);
        sort2(b, c, f);
        sort2(a, b, f);
    }

    fn partition_by<T, F: CompareFunction<T>>(arr: &mut [T], f: F) -> usize {
        use mem::swap;

        let mid = arr.len() / 2;
        if arr.len() >= NINTHER_THRESHOLD {
            // Tukey ninther for larger slices
            sort3(&arr[0], &arr[mid], &arr[arr.len() - 1], f);
            sort3(&arr[1], &arr[mid - 1], &arr[arr.len() - 2], f);
            sort3(&arr[2], &arr[mid + 1], &arr[arr.len() - 3], f);
            sort3(&arr[mid - 1], &arr[mid], &arr[mid + 1], f);
        } else {
            // Median-of-three for smaller slices
            sort3(&arr[0], &arr[mid], &arr[arr.len() - 1], f);
        }

        let pivot = arr[mid];
        let i = 0usize;
        let j = arr.len() - 1;

        loop {
            while f(&arr[i], &pivot) == Ordering::Less {
                i += 1;
            }
            while f(&arr[j], &pivot) == Ordering::Greater {
                j -= 1;
            }
            if i >= j {
                return j;
            }

            swap(&arr[i], &arr[j]);
            i += 1;
            j -= 1;
        }
    }

    fn insertion_sort_by<T, F: CompareFunction<T>>(arr: &mut [T], f: F) {
        for i in 1usize..arr.len() {
            let j = i;
            let elem = arr[i];
            while j > 0 && f(&arr[j - 1], &elem) == Ordering::Greater {
                arr[j] = arr[j - 1];
                j -= 1;
            }
            arr[j] = elem;
        }
    }

    fn merge<T, F: CompareFunction<T>>(left: &[T], right: &[T], dest: &mut [T], f: F) {
        let i = 0usize;
        let j = 0usize;
        let k = 0usize;
        while i < left.len() && j < right.len() {
            if f(&left[i], &right[j]) != Ordering::Greater {
                dest[k] = left[i];
                i += 1;
            } else {
                dest[k] = right[j];
                j += 1;
            }
            k += 1;
        }
        while i < left.len() {
            dest[k] = left[i];
            i += 1;
            k += 1;
        }
        while j < right.len() {
            dest[k] = right[j];
            j += 1;
            k += 1;
        }
    }

    fn merge_sort_by<T, F: CompareFunction<T>>(src: &mut [T], dest: &mut [T], f: F) {
        if src.len() < MERGESORT_MIN_SIZE {
            // Switch to insertion sort when the array is small enough
            return insertion_sort_by(dest, f);
        }

        let mid = src.len() / 2;

        // Swap the source and destination arrays in the recursive calls
        merge_sort_by(dest[..mid], src[..mid], f);
        merge_sort_by(dest[mid..], src[mid..], f);

        merge(src[..mid], src[mid..], dest, f);
    }

    fn introsort_by<T, F: CompareFunction<T>>(arr: &mut [T], max_depth: usize, f: F) {
        if arr.len() < INTROSORT_MIN_SIZE {
            insertion_sort_by(arr, f);
        } else if max_depth == 0 {
            // Fall back to heapsort
            collections::heap::heapify_by(arr, f);
            collections::heap::sort_heap_by(arr, f);
        } else {
            let p = partition_by(arr, f);
            introsort_by(arr[..p+1], max_depth - 1,  f);
            introsort_by(arr[p+1..], max_depth - 1, f);
        }
    }
}

#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    #[test]
    fn test_sort() {
        let arr = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5];
        arr[..].sort();

        assert_eq!(arr[..], &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    }

    #[test]
    fn test_sort_by_key() {
        let arr = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5];
        arr[..].sort_by_key(|x: &i32| -> i32 { -*x });

        assert_eq!(arr[..], &[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
    }

    #[test]
    fn test_sort_by() {
        let arr = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5];
        arr[..].sort_by(reversed::<i32>);

        assert_eq!(arr[..], &[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
    }

    #[test]
    fn test_binary_search() {
        let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

        assert_eq!(arr[..].binary_search(&5), Result::ok(4usize));
        assert_eq!(arr[..].binary_search(&11), Result::err(10usize));
    }

    #[test]
    fn test_sort_stability() {
        let vec = (0..6561).to_vector();
        defer vec.free();

        vec[..]
            .stable_sort_by_key(|i: &i32| -> i32 { (*i as u32).leading_zeros() as i32 });

        let expected = [
            (4096..6561),
            (2048..4096),
            (1024..2048),
            (512..1024),
            (256..512),
            (128..256),
            (64..128),
            (32..64),
            (16..32),
            (8..16),
            (4..8),
            (2..4),
            (1..2),
            (0..1)
        ]
        .iter()
        .flatten()
        .enumerate();

        for (idx, val) in expected {
            assert_eq!(vec[idx], val);
        }
    }

    #[test]
    fn test_binary_search_by() {
        let arr = [
            (0, 0), (1, 2), (2, 4),
            (3, 6), (4, 8), (5, 10),
            (6, 12), (7, 14), (8, 16)
        ];

        assert_eq!(arr[..].binary_search_by(|v: &(i32, i32)| -> Ordering { v.0.compare(&5) }), Result::ok(5usize));
        assert_eq!(arr[..].binary_search_by(|v: &(i32, i32)| -> Ordering { v.0.compare(&11) }), Result::err(9usize));
    }

    #[test]
    fn test_binary_search_by_key() {
        let arr = [
            (0, 0), (1, 2), (2, 4),
            (3, 6), (4, 8), (5, 10),
            (6, 12), (7, 14), (8, 16)
        ];

        assert_eq!(arr[..].binary_search_by_key(&5, |v: &(i32, i32)| -> i32 { v.0 }), Result::ok(5usize));
        assert_eq!(arr[..].binary_search_by_key(&11, |v: &(i32, i32)| -> i32 { v.0 }), Result::err(9usize));
    }

    #[test]
    fn test_default_equatable() {
        struct Foo {
            a: i32,
            b: i32,
            c: Option<i32>,
        }
        impl Foo {
            mixin DefaultEquatable<Foo>;
        }

        struct Quux {
            p1: &i32,
            p2: fn()
        }
        impl Quux {
            mixin DefaultEquatable<Quux>;
        }

        enum Bar {
            A,
            B,
            C,
        }

        impl Bar {
            mixin DefaultEquatable<Bar>;
        }

        assert_eq!(
            Foo { a: 1, b: 2, c: Option::none() },
            Foo { a: 1, b: 2, c: Option::none() },
        );

        assert_ne!(
            Foo { a: 1, b: 2, c: Option::none() },
            Foo { a: 1, b: 2, c: Option::some(0) },
        );


        assert_eq!(Bar::A, Bar::A);
        assert_ne!(Bar::A, Bar::B);

        let x = 42;
        let y = 42;

        let quux1 = Quux { p1: &x, p2: util::unit::<()> };
        let quux2 = Quux { p1: &y, p2: util::unit::<()> };
        let quux3 = Quux { p1: &x, p2: mem::uninitialized::<()> };

        assert_eq!(quux1, quux1);
        assert_ne!(quux1, quux2);
        assert_ne!(quux1, quux3);
    }

    #[test]
    fn test_lexicographic_comparable() {
        struct Foo {
            a: i32,
            b: i32,
        }

        impl Foo {
            mixin LexicographicComparable<Foo>;
        }

        assert!(Foo { a: 1, b: 1 } < Foo { a: 1, b: 2 });
        assert!(Foo { a: 1, b: 1 } <= Foo { a: 1, b: 1 });
        assert!(Foo { a: 1, b: 2 } > Foo { a: 1, b: 1 });
        assert!(Foo { a: 1, b: 2 } >= Foo { a: 1, b: 1 });
        assert!(Foo { a: 1, b: 1 } == Foo { a: 1, b: 1 });
        assert!(Foo { a: 1, b: 2 } != Foo { a: 1, b: 3 });
    }
}
