//! Equality and comparison

/// Types that can be compared for equality.
///
/// Types that implement this trait can be compared for equality using the `==` and `!=` operators.
/// Many built-in types implement this protocol, such as primitive types, slices, [Option], etc.
///
/// Method [equals] must be implemented, other methods can be mixed in.
///
/// ## Example
/// ```
/// struct Point { x: i32, y: i32 }
///
/// impl Point {
///     use std::cmp::Equatable;
///
///     fn equals(self: &Point, other: &Point) -> bool {
///         self.x == other.x && self.y == other.y
///     }
///     mixin Equatable<Point>;
/// }
///
/// assert_eq!(Point { x: 1, y: 2 }, Point { x: 1, y: 2 });
/// assert_ne!(Point { x: 1, y: 2 }, Point { x: 1, y: 3 });
/// ```
protocol Equatable<Self> {
    /// Returns `true` if arguments are equal, `false` otherwise
    ///
    /// See [Equatable] for details.
    fn equals(lhs: &Self, rhs: &Self) -> bool;

    /// Returns `false` if arguments are equal, `true` otherwise
    #[inline]
    fn not_equals(lhs: &Self, rhs: &Self) -> bool {
        !Self::equals(lhs, rhs)
    }
}

/// Result of comparing two values.
enum Ordering {
    Less = -1i8,
    Equal = 0i8,
    Greater = 1i8,
}

/// Types that have a total order.
///
/// Types that implement this trait can be compared using the `<`, `<=`, `>` and `>=` operators.
///
/// Method [compare] must be implemented, other methods can be mixed in. This includes the default
/// implementations for [Equatable::equals] and [Equatable::not_equals] of the [Equatable] trait.
///
/// ## Example
/// ```
/// struct FullName { first: &[u8], last: &[u8] }
///
/// impl FullName {
///     use std::cmp::{Ordering, Comparable};
///
///     fn new(first: &[u8], last: &[u8]) -> FullName {
///         FullName { first: first, last: last }
///     }
///
///     fn compare(self: &FullName, other: &FullName) -> Ordering {
///         let first_cmp = self.first.compare(&other.first);
///         if first_cmp != Ordering::Equal {
///             return first_cmp;
///         }
///         self.last.compare(&other.last)
///     }
///
///     mixin Comparable<FullName>;
/// }
///
/// assert!(FullName::new("John", "Malkovich") < FullName::new("John", "McCain"));
/// assert!(FullName::new("John", "Doe") == FullName::new("John", "Doe"));
/// ```
///
/// See also [lexicographic_cmp] for a convenient way to implement the `compare` method.
protocol Comparable<Self: Equatable<Self>> {
    /// Compare the value
    ///
    /// See [Comparable] for details.
    fn compare(lhs: &Self, rhs: &Self) -> Ordering;

    /// Returns `true` if `lhs` is equal to `rhs`, `false` otherwise
    #[inline]
    fn equals(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) == Ordering::Equal
    }

    /// Returns `true` if `lhs` not equal to `rhs`, `false` otherwise
    #[inline]
    fn not_equals(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) != Ordering::Equal
    }

    /// Returns `true` if `lhs` is strictly less than `rhs`, `false` otherwise
    #[inline]
    fn less_than(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) == Ordering::Less
    }

    /// Returns `true` if `lhs` is less or equal to `rhs`, `false` otherwise
    #[inline]
    fn less_than_or_equal(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) != Ordering::Greater
    }

    /// Returns `true` if `lhs` strictly greater than `rhs`, `false` otherwise
    #[inline]
    fn greater_than(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) == Ordering::Greater
    }

    /// Returns `true` if `lhs` greater than or equal `rhs`, `false` otherwise
    #[inline]
    fn greater_than_or_equal(lhs: &Self, rhs: &Self) -> bool {
        Self::compare(lhs, rhs) != Ordering::Less
    }
}

/// A wrapper that can be used to reverse the ordering of a Comparable.
///
/// See [reversed] for details.
struct Reversed<T: Comparable<T>> {
    value: &T,
}

impl Reversed<T: Comparable<T>> {
    /// @ Comparable::compare
    fn compare(self: &Reversed<T>, other: &Reversed<T>) -> Ordering {
        other.value.compare(self.value)
    }

    /// @ Equatable::equals
    fn equals(self: &Reversed<T>, other: &Reversed<T>) -> bool {
        self.value.equals(other.value)
    }

    mixin Equatable<Reversed<T>>;
    mixin Comparable<Reversed<T>>;
}

/// Reverses the ordering of a Comparable.
///
/// ## Example
/// ```
/// use std::cmp::{sort_by, reversed};
///
/// let slice = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5].as_slice_mut();
/// slice.sort_by(reversed::<i32>);
///
/// assert_eq!(slice, &[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
/// ```
fn reversed<T: Comparable<T>>(value: &T) -> Reversed<T> {
    Reversed { value: value }
}

/// Helper macro for implementing a lexicographic order.
///
/// The macro will short-ciricuit the enclosuing function if `lhs` and `rhs` are not equal
/// and continue if they are.
///
/// ## Example
/// ```
/// use std::cmp::{Ordering, Comparable, lexicographic_cmp};
///
/// struct IPv4 {
///     a: u8,
///     b: u8,
///     c: u8,
///     d: u8,
/// }
///
/// impl IPv4 {
///     fn compare(lhs: &IPv4, rhs: &IPv4) -> Ordering {
///         lexicographic_cmp!(lhs.a, rhs.a);
///         lexicographic_cmp!(lhs.b, rhs.b);
///         lexicographic_cmp!(lhs.c, rhs.c);
///         lexicographic_cmp!(lhs.d, rhs.d);
///         Ordering::Equal
///     }
///
///     mixin Comparable<IPv4>;
/// }
/// ```
macro lexicographic_cmp($lhs, $rhs) {
    let cmp = $lhs.compare(&$rhs);
    if cmp != Ordering::Equal {
        return cmp;
    }
}

/// Returns the greater of the two arguments.
/// ## Example
/// ```
/// use std::cmp::max;
///
/// assert_eq!(max(1, 2), 2);
/// ```
#[inline]
fn max<T: Comparable<T>>(a: T, b: T) -> T {
    if a < b {
        b
    } else {
        a
    }
}

/// Returns the least of the two arguments.
/// ## Example
/// ```
/// use std::cmp::min;
///
/// assert_eq!(min(1, 2), 1);
/// ```
#[inline]
fn min<T: Comparable<T>>(a: T, b: T) -> T {
    if a < b {
        a
    } else {
        b
    }
}

/// Sorts a slice using a key extraction function.
///
/// ## Example
/// ```
/// use std::cmp::sort_by;
///
/// let slice = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5].as_slice_mut();
/// slice.sort_by(|v: &i32| -> i32 { -*v });
///
/// assert_eq!(slice, &[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
/// ```
fn sort_by<T, F: builtins::Callable<(&T), K>, K: Comparable<K>>(arr: &mut [T], key: F) {
    if arr.len() <= 1 {
        return;
    }

    let p = internal::partition_by(arr, key);
    sort_by(arr[..p], key);
    sort_by(arr[p+1..], key);
}

/// Sorts a slice.
///
/// Uses quicksort with naive partitioning. Sort is not stable.
///
/// ## Example
/// ```
/// use std::cmp::sort;
///
/// let slice = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5].as_slice_mut();
/// slice.sort();
///
/// assert_eq!(slice, &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
/// ```
fn sort<T: Comparable<T>>(arr: &mut [T]) {
    sort_by(arr, |k: &T| -> T { *k });
}


mod internal {
    #[force_inline]
    #[lang(operator_eq)]
    fn operator_eq<T: Equatable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.equals(rhs)
    }

    #[force_inline]
    #[lang(operator_neq)]
    fn operator_neq<T: Equatable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.not_equals(rhs)
    }

    #[force_inline]
    #[lang(operator_lt)]
    fn operator_lt<T: Comparable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.less_than(rhs)
    }

    #[force_inline]
    #[lang(operator_lte)]
    fn operator_lte<T: Comparable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.less_than_or_equal(rhs)
    }

    #[force_inline]
    #[lang(operator_gt)]
    fn operator_gt<T: Comparable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.greater_than(rhs)
    }

    #[force_inline]
    #[lang(operator_gte)]
    fn operator_gte<T: Comparable<T>>(lhs: &T, rhs: &T) -> bool {
        lhs.greater_than_or_equal(rhs)
    }

    fn partition_by<T, F: builtins::Callable<(&T), K>, K: Comparable<K>>(arr: &mut [T], key: F) -> usize {
        use std::mem::swap;

        let pivot = arr[arr.len() - 1];
        let i = 0usize;
        let j = 0usize;
        while j < arr.len() - 1 {
            if key(&arr[j]) <= key(&pivot) {
                swap(&arr[i], &arr[j]);
                i += 1;
            }
            j += 1;
        }
        swap(&arr[i], &arr[arr.len() - 1]);
        i
    }
}

#[cfg(all(test, test_std))]
mod tests {
    #[test]
    fn test_sort() {
        let slice = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5].as_slice_mut();
        sort(slice);

        assert_eq!(slice, &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    }

    #[test]
    fn test_sort_by() {
        let slice = [4, 8, 2, 9, 7, 10, 3, 1, 6, 5].as_slice_mut();
        sort_by(slice, |x: &i32| -> i32 { -*x });

        assert_eq!(slice, &[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);
    }
}
