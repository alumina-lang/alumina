//! String formatting
//!
//! The core of the formatting system is the [Formattable] protocol. Implementing it on custom types
//! allows them to be formatted using the standard string-formatting macros ([format], [write], ...)
//! and the convenience standard I/O macros ([io::print], [io::println], ...).
type Result = std::result::Result<(), Error>;

/// Error that can occur during a string formatting operation.
///
/// This error can signal many different things - either the value is somehow
/// invalid and cannot be formatted, or there is an I/O error if the formatter is performing
/// I/O operations.
struct Error {}

impl Error {
    fn new() -> Error {
        Error {}
    }

    /// @ Formattable::fmt
    fn fmt<F: Formatter<F>>(self: &Error, f: &mut F) -> Result {
        f.write_str("error occurred during formatting")
    }

    fn from<T>(_: T) -> Error {
        Error {}
    }
}

/// A sink for string formatting operations
protocol Formatter<Self> {
    /// Write a string
    fn write_str(self: &mut Self, buf: &[u8]) -> Result;
    /// Write a single character
    fn write_char(self: &mut Self, byte: u8) -> Result {
        self.write_str(mem::slice::from_raw(&byte, 1))
    }
}

/// Types that can be formatted. This is the standard way to implement custom
/// formatting for types.
///
/// ## Example
/// ```
/// struct Point3D { x: i32, y: i32, z: i32 }
/// impl Point3D {
///     use std::fmt::{Formatter, Result, write};
///
///     fn fmt<F: Formatter<F>>(self: &Point3D, f: &mut F) -> Result {
///         write!(f, "({}, {}, {})", self.x, self.y, self.z)
///     }
/// }
///
/// // prints "You are at (1, 2, 3)"
/// println!("You are at {}", Point3D { x: 1, y: 2, z: 3 });
/// ```
protocol Formattable<Self, F: Formatter<F> = NullFormatter> {
    /// Write the object into a given formatter.
    ///
    /// See [Formattable] for details.
    fn fmt(self: &Self, f: &mut F) -> Result;
}

/// Constructs an array of pieces from a format string and arguments.
///
/// This macro is implemented in the compiler, and is used as a foundation for other formatting macros,
/// such as [format] and [println]. You probably want to use one of those formatting macros instead.
///
/// ```pseudo_alumina
/// format_args!("{} = {}", a, b);
/// // Expands to:
/// [
///     ::std::fmt::internal::format_arg(&a),
///     ::std::fmt::internal::format_arg(&" = "),
///     ::std::fmt::internal::format_arg(&b)
/// ]
/// ```
///
/// See also [internal::format_arg].
///
/// As the type-erased `&dyn Formattable<...>` wraps a pointer to the original arguments, it is generally not safe to
/// store the array that is returned by `format_args`.
///
/// ## Example
/// ```
/// use std::fmt::{format_args, Formattable, StreamFormatter};
/// use std::io::StdioStream;
///
/// let stdout = StreamFormatter::new(&StdioStream::stdout());
///
/// // Type hint is required here in order to infer the formatter type
/// let args: [&dyn Formattable<Self, StreamFormatter<StdioStream>>; 5]
///     = format_args!("{} + {} = {}", 1, 2, 3);
///
/// args[0].fmt(&stdout); // "1"
/// args[1].fmt(&stdout); // " + "
/// args[2].fmt(&stdout); // "2"
/// args[3].fmt(&stdout); // " = "
/// args[4].fmt(&stdout); // "3"
/// ```
#[builtin] macro format_args($fmt, $args...) { }

/// Write a formatted string into a given formatter.
///
/// ## Example
/// ```
/// use std::fmt::{write, SliceFormatter};
/// let buf: [u8; 64];
/// let fmt = SliceFormatter::new(&buf);
///
/// write!(&fmt, "{} + {} = {}", 1, 2, 3);
///
/// assert_eq!(fmt.get()[0..9], "1 + 2 = 3");
/// ```
macro write($fmt, $fmt_str, $arg...) {
    internal::write_fmt(
        &format_args!($fmt_str, $arg...),
        $fmt
    )
}

/// Write a formatted string and a newline into a given formatter.
macro writeln($fmt, $fmt_str, $arg...) {
    internal::write_fmt(
        &format_args!(concat!($fmt_str, "\n"), $arg...),
        $fmt
    )
}

/// Format a string into a `StringBuf`.
///
/// ## Example
/// ```
/// use std::fmt::format;
/// use std::string::StringBuf;
///
/// let s: StringBuf = format!("{} + {} = {}", 1, 2, 3).unwrap();
/// defer s.free();
///
/// assert_eq!(s[..] as &[u8], "1 + 2 = 3");
/// ```
macro format($fmt_str, $arg...) {
    let vec = collections::Vector::with_capacity::<u8>($fmt_str.len());
    let ret = fmt::write!(&vec, $fmt_str, $arg...);
    if ret.is_ok() {
        Result::ok::<string::StringBuf, Error>(vec)
    } else {
        vec.free();
        Result::err::<string::StringBuf, Error>(Error::new())
    }
}

/// Format a string into a preexisting buffer.
///
/// Returns an error if the buffer is not large enough.
///
/// ## Example
/// ```
/// use std::fmt::format_in;
///
/// let buf: [u8; 64];
/// let f = format_in!(&buf, "{} + {} = {}", 1, 2, 3).unwrap();
///
/// assert_eq!(f, "1 + 2 = 3");
/// ```
macro format_in($buf, $fmt_str, $arg...) {
    let fmt = SliceFormatter::new($buf);
    let ret = fmt::write!(&fmt, $fmt_str, $arg...);
    if ret.is_ok() {
        Result::ok::<&[u8], Error>(fmt.get())
    } else {
        Result::err::<&[u8], Error>(Error::new())
    }
}

/// Formatter that writes into a string slice.
struct SliceFormatter {
    buf: &mut [u8],
    buf_pos: usize
}

impl SliceFormatter {
    fn new(buf: &mut [u8]) -> SliceFormatter {
        SliceFormatter {
            buf: buf,
            buf_pos: 0
        }
    }

    /// @ Formatter::write_str
    #[inline]
    fn write_str(self: &mut SliceFormatter, buf: &[u8]) -> Result {
        if self.buf_pos + buf.len() > self.buf.len() {
            return Result::err(Error::new());
        }
        buf.copy_to(&self.buf[self.buf_pos]);
        self.buf_pos += buf.len();

        Result::ok(())
    }

    /// @ Formatter::write_char
    #[inline]
    fn write_char(self: &mut SliceFormatter, byte: u8) -> Result {
        if self.buf_pos >= self.buf.len() {
            return Result::err(Error::new());
        }
        self.buf[self.buf_pos] = byte;
        self.buf_pos += 1;

        Result::ok(())
    }

    /// Get the resulting string
    #[inline]
    fn get(self: &SliceFormatter) -> &[u8] {
        self.buf[..self.buf_pos]
    }
}

/// A formatter that discards output.
struct NullFormatter {}

impl NullFormatter {
    /// @ Formatter::write_str
    fn write_str(self: &mut NullFormatter, buf: &[u8]) -> Result {
        Result::ok(())
    }
    /// @ Formatter::write_char
    fn write_char(self: &mut NullFormatter, byte: u8) -> Result {
        Result::ok(())
    }
}

/// Adapter for writting formatted data into a stream
///
/// Consider also using [io::BufferedWriter], which implements [Formatter] directly to wrap the stream
/// in order to avoid performance penalty as string formatting usually performs many small writes.
struct StreamFormatter<W: io::Writable<W>> {
    inner: &mut W
}

impl StreamFormatter<W: io::Writable<W>> {
    fn new(inner: &mut W) -> StreamFormatter<W> {
        StreamFormatter {
            inner: inner
        }
    }

    /// @ Formatter::write_str
    #[inline]
    fn write_str(self: &mut StreamFormatter<W>, buf: &[u8]) -> Result {
        when W: Formattable<W> {
            self.inner.write_str(buf)
        } else {
            self.inner.write_all(buf).map_err(Error::from::<io::Error>)
        }
    }

    /// @ Formatter::write_char
    #[inline]
    fn write_char(self: &mut StreamFormatter<W>, byte: u8) -> Result {
        when W: Formattable<W> {
            self.inner.write_char(byte)
        } else {
            self.write_str(mem::slice::from_raw(&byte, 1))
        }
    }

    mixin Formatter<StreamFormatter<W>>;
}

#[docs(no_index)]
mod internal {
    /// Returns a type-erased wrapper around a formattable object.
    #[lang(format_arg)]
    fn format_arg<F: Formatter<F>, T: Formattable<T, F>>(self: &T) -> &dyn Formattable<Self, F> {
        self
    }

    fn format_integer<T: builtins::Integer, F: Formatter<F>>(val: T, radix: u16, pad: usize, fmt: &mut F) -> Result {
        assert!(radix >= 2 && radix <= 36);

        let buf: [u8; 128];

        when T: builtins::Signed {
            if val < 0 {
                fmt.write_char('-')?;
            }
        }

        let val_u = math::widening_abs(val);

        let i: usize = 0;
        loop {
            buf[buf.len() - i - 1] = string::RADIX_DIGITS[(val_u % (radix as builtins::unsigned_of<T>)) as usize];
            val_u /= radix as builtins::unsigned_of<T>;

            if val_u == 0 {
                while i + 1 < pad {
                    fmt.write_char('0')?;
                    pad -= 1;
                }
                fmt.write_str(buf[(buf.len() - i - 1)..])?;
                break;
            }
            i += 1;
        }

        Result::ok(())
    }

    fn format_float<T: builtins::FloatingPoint, F: Formatter<F>>(
        val: T,
        fmt: &mut F,
        precision: u16
    ) -> Result {
        // TODO: precision doesn't do anything yet
        if val.is_nan() {
            return fmt.write_str("NaN")
        }

        if val.is_infinite() {
            if val.is_sign_negative() {
                return fmt.write_str("-inf");
            } else {
                return fmt.write_str("inf");
            }
        }

        // f64 representations are at most 24 bytes long, f32 ones are at most 16 bytes long
        let buf: [u8; 25];
        let written = when T: f64 {
            ryu::format64(val, &buf[0])
        } else {
            ryu::format32(val, &buf[0])
        };

        fmt.write_str(buf[..written])
    }

    fn write_fmt<F: Formatter<F>>(parts: &[&dyn Formattable<Self, F>], f: &mut F) -> Result {
        for part in parts {
            part.fmt(f)?;
        }
        Result::ok(())
    }

    struct NumFormatAdapter<T: builtins::Integer> {
        radix: u16,
        _pad: usize,
        value: T
    }

    impl NumFormatAdapter<T: builtins::Integer> {
        fn fmt<F: Formatter<F>>(self: &NumFormatAdapter<T>, fmt: &mut F) -> Result {
            format_integer(self.value, self.radix, self._pad, fmt)
        }

        fn hex(self: NumFormatAdapter<T>) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: 16, _pad: self._pad, value: self.value }
        }

        fn oct(self: NumFormatAdapter<T>) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: 8, _pad: self._pad, value: self.value }
        }

        fn bin(self: NumFormatAdapter<T>) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: 2, _pad: self._pad, value: self.value }
        }

        fn zero_pad(self: NumFormatAdapter<T>, pad: usize) -> NumFormatAdapter<T> {
            NumFormatAdapter { radix: self.radix, _pad: pad, value: self.value }
        }
    }

    struct FloatFormatAdapter<T: builtins::FloatingPoint> {
        precision: u16,
        value: T
    }

    impl FloatFormatAdapter<T: builtins::FloatingPoint> {
        fn fmt<F: Formatter<F>>(self: &FloatFormatAdapter<T>, fmt: &mut F) -> Result {
            format_float::<T, F>(self.value, fmt, self.precision)
        }
    }

    struct RepeatAdapter<T: Formattable<T>> {
        times: usize,
        inner: T
    }

    impl RepeatAdapter {
        fn fmt<T: Formattable<T, F>, F: Formatter<F>>(self: &RepeatAdapter<T>, fmt: &mut F) -> Result {
            for i in 0usize..self.times {
                self.inner.fmt(fmt)?;
            }
            Result::ok(())
        }
    }

    struct GenericPadAdapter<T: Formattable<T>> {
        len: usize,
        pad: u8,
        inner: T
    }

    impl GenericPadAdapter {
        fn fmt<T: Formattable<T, F>, F: Formatter<F>>(self: &GenericPadAdapter<T>, fmt: &mut F) -> Result {
            let buf: [u8; 32];
            let res = format_in!(&buf, "{}", self.inner);
            let s: &[u8] = if res.is_ok() {
                res.unwrap()
            } else {
                // We fall back to the heap-allocating variant if the stack buffer was not large enough.
                let res = format!("{}", self.inner)?;
                defer res.free();
                res[..]
            };

            if s.len() < self.len {
                for _ in (0usize..self.len - s.len()) {
                    fmt.write_char(self.pad)?;
                }
            }
            fmt.write_str(s)
        }
    }
}

/// Write value as a hexadecimal number
///
/// ## Example
/// ```
/// use std::fmt::hex;
///
/// println!("{}", 42.hex()); // prints '2a'
/// ```
fn hex<T: builtins::Integer>(val: T) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 16, _pad: 0, value: val }
}

/// Write value as a binary number
///
/// ## Example
/// ```
/// use std::fmt::bin;
///
/// println!("{}", 42.bin()); // prints '101010'
/// ```
fn bin<T: builtins::Integer>(val: T) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 2, _pad: 0, value: val }
}

/// Write value as an octal number
///
/// ## Example
/// ```
/// use std::fmt::oct;
///
/// println!("{}", 42.oct()); // prints '52'
/// ```
fn oct<T: builtins::Integer>(val: T) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 8, _pad: 0, value: val }
}

/// Pads number with zeros on the left.
///
/// ## Example
/// ```
/// use std::fmt::zero_pad;
///
/// println!("{}", 42.zero_pad(5)); // prints '00042'
/// ```
fn zero_pad<T: builtins::Integer>(val: T, pad: usize) -> internal::NumFormatAdapter<T> {
    internal::NumFormatAdapter { radix: 10, _pad: pad, value: val }
}

fn precision<T: builtins::FloatingPoint>(val: T, prec: u16) -> internal::FloatFormatAdapter<T> {
    internal::FloatFormatAdapter { precision: prec, value: val }
}

/// Repeats value `times` times.
///
/// ## Example
/// ```
/// use std::fmt::repeat;
///
/// println!("{}", "ha".repeat(3)); // prints 'hahaha'
/// ```
fn repeat<T: Formattable<T>>(inner: T, times: usize) -> internal::RepeatAdapter<T> {
    internal::RepeatAdapter { times: times, inner: inner }
}

/// Pads arbitrary formattable value on the left with a specified character.
///
/// ## Example
/// ```
/// use std::fmt::pad_with;
///
/// println!("{}", "ha".pad_with(5, ' ')); // prints '   ha'
/// ```
fn pad_with<T: Formattable<T>>(val: T, len: usize, pad: u8) -> internal::GenericPadAdapter<T> {
    internal::GenericPadAdapter { len: len, pad: pad, inner: val }
}


#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    static BUF: [u8; 1024];

    macro fmt($args...) {
        format_in!(&BUF, $args...).unwrap()
    }

    #[test]
    fn test_format_integer() {
        assert_eq!(fmt!("{}", u8::max_value()), "255");
        assert_eq!(fmt!("{}", -23847), "-23847");
        assert_eq!(fmt!("{}", i64::min_value()), "-9223372036854775808");
        assert_eq!(
            fmt!("{}", i128::min_value()),
            "-170141183460469231731687303715884105728"
        );
    }

    #[test]
    fn test_format_radix() {
        assert_eq!(fmt!("{}", 255u32.hex()), "ff");
        assert_eq!(fmt!("{}", 255u32.bin()), "11111111");
        assert_eq!(fmt!("{}", 255u32.oct()), "377");
    }

    #[test]
    fn test_format_zero_pad() {
        assert_eq!(fmt!("{}", 255u32.zero_pad(4)), "0255");
        assert_eq!(fmt!("{}", 255u32.zero_pad(8)), "00000255");
    }

    #[test]
    fn test_format_radix_and_pad() {
        assert_eq!(fmt!("{}", 15u8.zero_pad(2).hex()), "0f");
        assert_eq!(fmt!("{}", 15u8.hex().zero_pad(2)), "0f");
    }

    #[test]
    fn test_format_repeat() {
        assert_eq!(fmt!("{}", "world".repeat(3)), "worldworldworld");
    }

    #[test]
    fn test_format_generic_pad() {
        assert_eq!(fmt!("{}", "world".pad_with(10, ' ')), "     world");
    }

    #[test]
    fn test_format_float() {
        assert_eq!(fmt!("{}", f64::nan()), "NaN");
        assert_eq!(fmt!("{}", f64::infinity()), "inf");
        assert_eq!(fmt!("{}", f64::neg_infinity()), "-inf");

        // Basic sanity tests only, comprehensive tests are in ryu module
        assert_eq!(fmt!("{}", 3.1415), "3.1415");
        assert_eq!(fmt!("{}", 3.1415e100), "3.1415e100");
        assert_eq!(fmt!("{}", -3.1415), "-3.1415");
        assert_eq!(fmt!("{}", -3.1415e100), "-3.1415e100");
    }

    #[test]
    fn test_format_args() {
        /// Compile-only test
        let f: [&dyn Formattable<Self, NullFormatter>; 0] = format_args!("");
        let f: [&dyn Formattable<Self, NullFormatter>; 1] = format_args!("hello");
        let f: [&dyn Formattable<Self, NullFormatter>; 2] = format_args!("hello {}", 1);
        let f: [&dyn Formattable<Self, NullFormatter>; 4] = format_args!("hello {} {}", 1, 2);
    }
}
