//! Error handling functionality.

/// Extract the success value or short-circuit the calling function.
///
/// When expression is suffixed with `?`, this is de-sugared to an invocation of `try` macro on the
/// expression.
///
/// Expands to the following expression
/// ```
/// if $.is_ok {
///     $.inner.ok
/// } else {
///     return Result::err(self.inner.err)
/// }
/// ```
///
/// See also [std::option::try] for [std::option::Option].
macro try($res) {
    let res = $res;
    if res.is_ok {
        res.inner.ok
    } else {
        return Result::err(res.inner.err)
    }
}

/// Type for operations that can fail.
///
/// `Result` is the type that can be used to express fallible operations in the type system.
/// Alumina does not have exceptions. Value `Result<T, E>` can be either a successfull value of
/// type `T` or an error value `E`, usually in some form representing the failure that happened.
///
/// # Example
/// ```
/// enum ExecutableType {
///     ELF,
///     PE
/// }
///
/// struct Error {}
///
/// fn executable_type(contents: &[u8]) -> Result<ExecutableType, Error> {
///     use std::string::starts_with;
///     if contents.starts_with("MZ") {
///         Result::ok(ExecutableType::PE)
///     } else if contents.starts_with("\x7FELF") {
///         Result::ok(ExecutableType::ELF)
///     } else {
///         /// Invalid executable
///         Result::err(Error {})
///     }
/// }
///
/// let result = executable_type();
///
/// if !result.is_ok {
///     eprintln!("Invalid executable");
/// } else {
///     // e.g. result.unwrap();
///     // do something with it
/// }
/// ```
///
/// `Result` is commonly used with the [try operator](try) (`?`) so that fallible functions can
/// be composed easily by bailing early.
struct Result<T, E> {
    is_ok: bool,
    inner: ResultT<T, E>
}

union ResultT<T, E> {
    ok: T,
    err: E
}

impl Result<T, E> {
    use std::fmt::{write, Formatter, Formattable};

    /// Create a success variant
    #[force_inline]
    fn ok(ok: T) -> Result<T, E> {
        Result::<T, E> {
            is_ok: true,
            inner: ResultT::<T, E> {
                ok: ok
            }
        }
    }

    /// Create a error variant
    #[force_inline]
    fn err(err: E) -> Result<T, E> {
        Result::<T, E> {
            is_ok: false,
            inner: ResultT::<T, E> {
                err: err
            }
        }
    }

    /// Return the success value, panicking if error value is present
    fn unwrap(self: Result<T, E>) -> T {
        if self.is_ok {
            self.inner.ok
        } else {
            when E: Formattable<E, panicking::internal::PanicFormatter> {
                panic!("unwrap on an err value: {}", self.inner.err)
            } else {
                panic!("unwrap on an err value")
            }
        }
    }

    /// Return the success value or a default value
    fn unwrap_or(self: Result<T, E>, val: T) -> T {
        if self.is_ok {
            self.inner.ok
        } else {
            val
        }
    }

    /// Return the success value or a default value provided by a callback
    fn unwrap_or_else<F: builtins::Callable<(), T>>(self: Result<T, E>, func: F) -> T {
        if self.is_ok {
            self.inner.ok
        } else {
            func()
        }
    }

    /// Return the error value, panicking if success value is present
    fn unwrap_err(self: Result<T, E>) -> E {
        if !self.is_ok {
            self.inner.err
        } else {
            when T: Formattable<T, panicking::internal::PanicFormatter> {
                panic!("unwrap_err on a ok value: {}", self.inner.ok)
            } else {
                panic!("unwrap_err on a ok value")
            }
        }
    }

    /// Transform the success value inside the `Result` by calling the provided function.
    ///
    /// If the error value is present, function is not called and the original error is
    /// passed through.
    ///
    /// # Example
    /// ```
    /// let a: Result<i32, ()> = Result::ok(42).map(|v: i32| -> i32 { i + 1 });
    /// let b: Result<i32, ()> = Result::err(()).map(|v: i32| -> i32 { i + 1 });
    ///
    /// assert_eq!(a, Result::ok(43));
    /// assert_eq!(b, Result::err(()));
    /// ```
    fn map<Tm, F: builtins::Callable<(T), Tm>>(self: Result<T, E>, func: F) -> Result<Tm, E> {
        if self.is_ok {
            Result::ok(func(self.inner.ok))
        } else {
            Result::err(self.inner.err)
        }
    }

    /// Transform the error value inside the `Result` by calling the provided function.
    ///
    /// If the success value is present, function is not called and the original error is
    /// passed through.
    ///
    /// # Example
    /// ```
    /// let a: Result<(), i32> = Result::err(42).map(|v: i32| -> i32 { i + 1 });
    /// let b: Result<(), i32> = Result::ok(()).map(|v: i32| -> i32 { i + 1 });
    ///
    /// assert_eq!(a, Result::err(43));
    /// assert_eq!(b, Result::ok(()));
    /// ```
    fn map_err<Em, F: builtins::Callable<(E), Em>>(self: Result<T, E>, func: F) -> Result<T, Em> {
        if self.is_ok {
            Result::ok(self.inner.ok)
        } else {
            Result::err(func(self.inner.err))
        }
    }

    fn and_then<Tm, F: builtins::Callable<(T), Result<Tm, E>>>(self: Result<T, E>, func: F) -> Result<Tm, E> {
        if self.is_ok {
            func(self.inner.ok)
        } else {
            Result::err(self.inner.err)
        }
    }
}

impl Result {
    use std::fmt::{write, Formatter, Formattable};
    use std::hash::{Hashable, Hasher};
    use std::cmp::{Equatable};
    use std::mem::{Freeable, Movable};

    /// @ std::fmt::Formattable::fmt
    fn fmt<T: Formattable<T, F>, E: Formattable<E, F>, F: Formatter<F>>(self: &Result<T, E>, formatter: &mut F) -> fmt::Result {
        if self.is_ok {
            write!(formatter, "ok({})", self.inner.ok)
        } else {
            write!(formatter, "err({})", self.inner.err)
        }
    }

    /// @ std::hash::Hashable::hash
    #[inline]
    fn hash<T: Hashable<T, H>, E: Hashable<E, H>, H: Hasher<H>>(self: &Result<T, E>, hasher: &mut H) {
        self.is_ok.hash(hasher);
        if self.is_ok {
            self.inner.ok.hash(hasher);
        } else {
            self.inner.err.hash(hasher);
        }
    }

    /// @ std::cmp::Equatable::equals
    #[inline]
    fn equals<T: Equatable<T>, E: Equatable<E>>(lhs: &Result<T, E>, rhs: &Result<T, E>) -> bool {
        if lhs.is_ok && rhs.is_ok {
            lhs.inner.ok.equals(&rhs.inner.ok)
        } else if !lhs.is_ok && !rhs.is_ok {
            lhs.inner.err.equals(&rhs.inner.err)
        } else {
            false
        }
    }

    /// @ std::mem::Movable::move
    fn move<T: Movable<T>, E: Movable<E>>(self: &mut Result<T, E>) -> Result<T, E> {
        if self.is_ok {
            Result::ok(self.inner.ok.move())
        } else {
            Result::err(self.inner.err.move())
        }
    }

    /// @ std::mem::Freeable::free
    fn free<T: Freeable<T>, E: Freeable<E>>(self: &mut Result<T, E>) {
        if self.is_ok {
            self.inner.ok.free();
        } else {
            self.inner.err.free();
        }
    }

    mixin<T: Equatable<T>, E: Equatable<E>> Equatable<Result<T, E>>;
}
