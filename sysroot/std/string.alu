//! String functions

use std::option::Option;

const RADIX_DIGITS = "0123456789abcdefghijklmnopqrstuvwxyz";

/// A heap-allocated string.
///
/// `StringBuf` is just a vector of bytes.
type StringBuf = std::collections::Vector<u8>;

/// Returns `true` if character is an ASCII whitespace character, `false` otherwise.
fn is_whitespace(c: u8) -> bool {
    c == 0x20 || c == 0x85 || c == 0xa0 || (c >= 0x09 && c <= 0x0D)
}

/// Convert character to lower case.
///
/// If character is not an ASCII uppercase letter, returns the same character.
fn to_lower(self: u8) -> u8 {
    if self >= 'A' && self <= 'Z' {
        self + 0x20
    } else {
        self
    }
}

/// Convert character to upper case.
///
/// If character is not an ASCII lowercase letter, returns the same character.
fn to_upper(self: u8) -> u8 {
    if self >= 'a' && self <= 'z' {
        self - 0x20
    } else {
        self
    }
}

/// Returns `true` if string starts with the given prefix, `false` otherwise.
fn starts_with(self: &[u8], prefix: &[u8]) -> bool {
    if self.len < prefix.len {
        return false;
    }
    self[..prefix.len] == prefix
}

/// Returns `true` if string ends with the given suffix, `false` otherwise.
fn ends_with(self: &[u8], suffix: &[u8]) -> bool {
    if self.len < suffix.len {
        return false;
    }
    self[self.len - suffix.len..] == suffix
}

/// Return string without the given prefix.
///
/// If the string does not start with the given prefix, returns the string unchanged.
fn trim_prefix(self: &[u8], prefix: &[u8]) -> &[u8] {
    if self.starts_with(prefix) {
        self[prefix.len..]
    } else {
        self
    }
}

/// Return string without the given suffix.
///
/// If the string does not end with the given suffix, returns the string unchanged.
fn trim_suffix(self: &[u8], suffix: &[u8]) -> &[u8] {
    if self.ends_with(suffix) {
        &self[..self.len - suffix.len]
    } else {
        self
    }
}

/// Finds a substring in a string.
///
/// It returns the index of the first occurrence of `needle` in `haystack`, or `Option::none()` if
/// `needle` is not part of `haystack`.
fn find(self: &[u8], needle: &[u8]) -> Option<usize> {
    if needle.len == 0 {
        return Option::some(0usize);
    }

    if self.len == 0 {
        return Option::none();
    }

    let ret = libc::memmem(
        self.ptr as &void,
        self.len,
        needle.ptr as &void,
        needle.len
    )

    if ret == null {
        Option::none()
    } else {
        Option::some(((ret as &u8) - self.ptr) as usize)
    }
}

/// Finds the first occurrence of a character in a string.
fn find_char(self: &[u8], needle: u8) -> Option<usize> {
    let p = libc::memchr(
        self.ptr as &void,
        needle as libc::c_int,
        self.len,
    );

    if p == null {
        Option::none()
    } else {
        Option::some(p as usize - (self.ptr as usize))
    }
}

/// Returns `true` if `needle` is a substring of self, `false` otherwise.
fn contains(self: &[u8], needle: &[u8]) -> bool {
    self.find(needle).is_some
}

/// Trims the whitespace from the start of the string.
fn trim_start(self: &[u8]) -> &[u8] {
    let i = 0usize;
    while i < self.len && self[i].is_whitespace() {
        i += 1;
    }
    self[i..]
}

/// Trims the whitespace from the end of the string.
fn trim_end(self: &[u8]) -> &[u8] {
    let i = self.len;
    while i > 0 && self[i - 1].is_whitespace() {
        i -= 1;
    }
    self[..i]
}

/// Trims the whitespace from the start and end of the string.
fn trim(self: &[u8]) -> &[u8] {
    self.trim_start().trim_end()
}

/// Iterator over parts of a string split by a delimiter.
///
/// See [split] for details.
struct SplitIterator {
    data: &[u8],
    sep: &[u8],
    done: bool
}

impl SplitIterator {
    fn new(data: &[u8], sep: &[u8]) -> SplitIterator {
        SplitIterator {
            data: data,
            sep: sep,
            done: false
        }
    }

    /// @ std::iter::Iterator::next
    fn next(self: &mut SplitIterator) -> Option<&[u8]> {
        if self.done {
            return Option::none();
        }

        let pos = self.data.find(self.sep);
        if !pos.is_some {
            self.done = true;
            return Option::some(self.data);
        }

        let pos = pos.unwrap();
        let ret = Option::some(self.data[..pos]);
        self.data = self.data[pos + self.sep.len..];

        ret
    }

    mixin iter::Iterator<SplitIterator, &[u8]>;
    mixin iter::IteratorExt<SplitIterator, &[u8]>;
}

/// Returns an iterator over the parts of the string split by the given delimiter.
///
/// # Example
/// ```
/// use std::string::split;
/// 
/// let iter = "192.168.0.1".split(".");
/// assert_eq!(iter.next(), Option::some("192"));
/// assert_eq!(iter.next(), Option::some("168"));
/// assert_eq!(iter.next(), Option::some("0"));
/// assert_eq!(iter.next(), Option::some("1"));
/// assert_eq!(iter.next(), Option::none());
/// ```
fn split(self: &[u8], sep: &[u8]) -> SplitIterator {
    SplitIterator::new(self, sep)
}

struct ReplaceAdapter {
    inner: &[u8],
    needle: &[u8],
    replacement: &[u8],
}

impl ReplaceAdapter {
    use std::fmt::{write, Error, Formatter};

    fn fmt<F: Formatter<F>>(self: &ReplaceAdapter, f: &mut F) -> Result<(), Error> {
        let first = true;    
        for chunk in self.inner.split(self.needle) {
            if first {
                first = false;
            } else {
                f.write_str(self.replacement)?;
            }
            f.write_str(chunk)?;
        }
        Result::ok(())
    }
}

/// Replaces all occurrences of `needle` with `replacement`, returning a new string.
///
/// See also [replace_fmt] for a non-allocating variant.
fn replace(self: &[u8], needle: &[u8], replacement: &[u8]) -> StringBuf {
    let ret: StringBuf = StringBuf::new();
    self.replace_fmt(needle, replacement).fmt(&ret).unwrap();
    ret
}

/// Returns an object that formats to the string with all `needle` occurrences replaced with
/// `replacement`.
///
/// # Example
/// ```
/// use std::string::replace_fmt;
/// 
/// // Prints "I like cake"
/// println!("{}", "I like pie".replace_fmt("pie", "cake"));
/// ```
fn replace_fmt(self: &[u8], needle: &[u8], replacement: &[u8]) -> ReplaceAdapter {
    ReplaceAdapter { inner: self, needle: needle, replacement: replacement }
}

struct JoinAdapter<It: iter::Iterator<It, &[u8]>> {
    separator: &[u8],
    inner: &mut It,
}

impl JoinAdapter<It: iter::Iterator<It, &[u8]>> {
    use std::fmt::{write, Error, Formatter};

    fn fmt<F: fmt::Formatter<F>>(self: &JoinAdapter<It>, f: &mut F) -> Result<(), Error> {
        let first = true;
        for chunk in self.inner {
            if first {
                first = false;
            } else {
                f.write_str(self.separator)?;
            }
            f.write_str(chunk)?;
        }
        Result::ok(())
    }
}

/// Join the parts of a string with the given delimiter, returning a new string.
///
/// See also [join_fmt] for a non-allocating string formatting adapter.
fn join<It: iter::Iterator<It, &[u8]>>(self: &[u8], iter: &mut It) -> StringBuf {
    let ret: StringBuf = StringBuf::new();
    self.join_fmt(iter).fmt(&ret).unwrap();
    ret
}


/// Returns an object that formats to parts joined with the separartor.
///
/// # Example
/// ```
/// use std::string::join_fmt;
/// 
/// // Prints 192.168.0.1
/// println!("{}", ".".join_fmt(&["192", "168", "0", "1"].iter()));
/// ```
fn join_fmt<It: iter::Iterator<It, &[u8]>>(self: &[u8], iter: &mut It) -> JoinAdapter<It> {
    JoinAdapter { separator: self, inner: iter }
}

/// Parses an integer with the given radix.
///
/// See also [std::builtins::IntegerParsable], a mixin available on all integer types
fn parse_integer<T: builtins::Integer>(s: &[u8], radix: u16) -> Option<T> {
    assert!(radix >= 2 && radix <= 36);

    use builtins::unsigned_of;
    use option::try;

    if s.len == 0 {
        return Option::none();
    }

    let negative = if s[0] == '-' {
        when T: builtins::Signed {
            s = s[1..];
            true
        } else {
            return Option::none();
        }
    } else {
        false
    };

    let result: unsigned_of<T> = 0;
    let radix = radix as unsigned_of<T>;
    for ch in s {
        let digit = RADIX_DIGITS.find_char(ch.to_lower())? as unsigned_of<T>;
        if digit >= radix {
            return Option::none();
        }

        let a = result * radix; 
        if a / radix != result {
            return Option::none();
        } 
        let b = a + digit;
        if b < a {
            return Option::none();
        }
        result = b;
    }

    when T: builtins::Signed {
        // We only need to check for unsigned-to-signed conversion overflow, other
        // cases have already been handled.
        if negative {
            if result > (T::max_value() as unsigned_of<T>) + 1 {
                Option::none()
            } else {
                Option::some(-(result as T))
            }
        } else {
            if result > T::max_value() as unsigned_of<T> {
                Option::none()
            } else {
                Option::some(result as T)
            }
        }
    } else {
        Option::some(result)
    }
}


#[cfg(all(test, test_std))]
mod tests {
    use std::{assert, assert_eq, assert_ne};

    #[test]
    fn starts_with_positive() {
        assert!("".starts_with(""))
        assert!("hello world".starts_with("hello world"))
        assert!("hello world".starts_with("hello"))
        assert!("hello world".starts_with(""))
    }

    #[test]
    fn starts_with_negative() {
        assert!(!"".starts_with("world"))
        assert!(!"hello world".starts_with("world"))
        assert!(!"hello world".starts_with("hello world hello world"))
    }

    #[test]
    fn find_positive() {
        assert_eq!("needle".find("needle"), Option::some(0usize));
        assert_eq!("needle".find("dle"), Option::some(3usize));
        assert_eq!("needle".find(""), Option::some(0usize));
        assert_eq!("".find(""), Option::some(0usize));
    }

    #[test]
    fn find_negative() {
        assert_eq!("needle".find("weedle"), Option::none());
        assert_eq!("needle".find("superlongstring"), Option::none());
    }

    #[test]
    fn test_parse_integer() {
        assert_eq!(parse_integer::<usize>("0", 10), Option::some(0usize));
        assert_eq!(parse_integer::<isize>("0", 10), Option::some(0isize));
        
        assert_eq!(parse_integer::<usize>("-0", 10), Option::none());
        assert_eq!(parse_integer::<isize>("-0", 10), Option::some(0isize));

        assert_eq!(parse_integer::<usize>("24601", 10), Option::some(24601usize));
        assert_eq!(parse_integer::<isize>("-24601", 10), Option::some(-24601isize));

        assert_eq!(parse_integer::<usize>("", 10), Option::none());
        assert_eq!(parse_integer::<usize>("abcdes", 10), Option::none());
        assert_eq!(parse_integer::<usize>("-243", 10), Option::none());  

        // Unsigned overflow
        assert_eq!(parse_integer::<u8>("256", 10), Option::none());
        assert_eq!(parse_integer::<u8>("255", 10), Option::some(255u8));

        assert_eq!(parse_integer::<u16>("65535", 10), Option::some(0xffffu16));
        assert_eq!(parse_integer::<u16>("65536", 10), Option::none());

        // Signed overflow
        assert_eq!(parse_integer::<i8>("127", 10), Option::some(127i8));  
        assert_eq!(parse_integer::<i8>("128", 10), Option::none());  
        assert_eq!(parse_integer::<i8>("-128", 10), Option::some(-128 as i8));  
        assert_eq!(parse_integer::<i8>("-129", 10), Option::none());  
        assert_eq!(
            parse_integer::<i128>("170141183460469231731687303715884105727", 10),
            Option::some(170141183460469231731687303715884105727i128)
        );
        assert_eq!(
            parse_integer::<i128>("170141183460469231731687303715884105728", 10),
            Option::none()
        );
    }

    #[test]
    fn test_parse_integer_radix() {
        assert_eq!(parse_integer::<u8>("ff", 16), Option::some(255u8));       
        assert_eq!(parse_integer::<u32>("11111111111111111111111111111111", 2), Option::some(u32::max_value()));       
        assert_eq!(parse_integer::<u32>("DeAdBeEf", 16), Option::some(3735928559u32));

        assert_eq!(parse_integer::<u8>("ff", 10), Option::none());       
    }

    #[test]
    fn test_trim_start() {
        assert_eq!("".trim_start(), "")
        assert_eq!("hello world".trim_start(), "hello world")
        assert_eq!("  hello world".trim_start(), "hello world")
        assert_eq!("\t\t\thello world".trim_start(), "hello world")
        assert_eq!("\n\n\nhello world".trim_start(), "hello world")
        assert_eq!("\r\r\rhello world".trim_start(), "hello world")
    }

    #[test]
    fn test_trim_end() {
        assert_eq!("".trim_end(), "")
        assert_eq!("hello world".trim_end(), "hello world")
        assert_eq!("hello world  ".trim_end(), "hello world")
        assert_eq!("hello world\t\t\t".trim_end(), "hello world")
        assert_eq!("hello world\n\n\n".trim_end(), "hello world")
        assert_eq!("hello world\r\r\r".trim_end(), "hello world")
    }

    #[test]
    fn test_trim() {
        assert_eq!("".trim(), "")
        assert_eq!("hello world".trim(), "hello world")
        assert_eq!("  hello world   ".trim(), "hello world")
        assert_eq!("\t\t\thello world \n\t ".trim(), "hello world")
        assert_eq!("\n\n\nhello world".trim(), "hello world")
        assert_eq!("\r\r\rhello world".trim(), "hello world")
    }

    #[test]
    fn test_split() {
        let iter = "".split(".");
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::none());

        let iter = "192.168.0.1".split(".");
        assert_eq!(iter.next(), Option::some("192"));
        assert_eq!(iter.next(), Option::some("168"));
        assert_eq!(iter.next(), Option::some("0"));
        assert_eq!(iter.next(), Option::some("1"));
        assert_eq!(iter.next(), Option::none());

        let iter = "192.168.0.1".split("%");
        assert_eq!(iter.next(), Option::some("192.168.0.1"));
        assert_eq!(iter.next(), Option::none());

        let iter = "192.168.0.1".split("");
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::some(""));
        // ...

        let iter = "  ab c ".split(" ");
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::some("ab"));
        assert_eq!(iter.next(), Option::some("c"));
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::none());
        // ...
    }

    #[test]
    fn test_join() {
        let vec = ".".join(&["192", "168", "0", "1"].iter());
        defer vec.free();
        assert_eq!(vec.as_slice(), "192.168.0.1");

        let vec = "".join(&["192", "168", "0", "1"].iter());
        defer vec.free();
        assert_eq!(vec.as_slice(), "19216801");

        let vec = "%".join(&["192.168.0.1"].iter());
        defer vec.free();
        assert_eq!(vec.as_slice(), "192.168.0.1");
    }
/*
    #[test]
    fn test_with_replacement() {
        let f = fmt::format!("{}", "192.168.0.1".with_replacement(".", "::")).unwrap();
        defer f.free();

        assert_eq!(f.as_slice(), "192::168::0::1");
    }
*/
    #[test] 
    fn test_replace() {
        let f = "192.168.0.1".replace(".", "::");
        defer f.free();

        assert_eq!(f.as_slice(), "192::168::0::1");
    }
}
