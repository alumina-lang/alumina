/// Growable heap-allocated array.
///
/// ## Example
/// ```
/// use std::collections::Vector;
///
/// let vec = Vector::new::<i32>();
/// defer vec.free();
///
/// vec.push(1);
/// vec.push(2);
/// vec.push(3);
///
/// assert_eq!(vec.len(), 3);
/// assert_eq!(vec[0], 1);
/// assert_eq!(vec[1], 2);
/// assert_eq!(vec[2], 3);
/// ```
struct Vector<T> {
    _data: &mut [T],
    _length: usize,
}

impl Vector<T> {
    use mem::slice;
    use iter::Iterator;

    /// Create an empty vector
    ///
    /// This will not allocate until the first element is inserted.
    fn new() -> Vector<T> {
        Vector {
            _data: slice::empty(),
            _length: 0,
        }
    }

    /// Create a vector from a raw slice and a length.
    ///
    /// The slice must be allocated with [mem::slice::alloc] and its length must be greater
    /// than or equal to `length`.
    fn from_raw(data: &mut [T], length: usize) -> Vector<T> {
        Vector {
            _data: data,
            _length: length,
        }
    }

    /// Create a vector that can hold up to `capacity` elements without reallocating.
    fn with_capacity(capacity: usize) -> Vector<T> {
        Vector {
            _data: if capacity == 0 {
                slice::empty()
            } else {
                slice::alloc::<T>(capacity)
            },
            _length: 0,
        }
    }

    /// Create a vector from a slice, copying the elements.
    ///
    /// ## Example
    /// ```
    /// use std::collections::Vector;
    ///
    /// let vec = Vector::from_slice(&[1, 2, 3]);
    /// assert_eq!(vec.len(), 3);
    /// assert_eq!(vec[..], &[1, 2, 3]);
    /// ```
    fn from_slice(slice: &[T]) -> Vector<T> {
        let vec = with_capacity::<T>(slice.len());
        if slice.len() > 0 {
            slice.copy_to_nonoverlapping(&vec._data[0]);
        }
        vec._length = slice.len();
        vec
    }

    /// Create a vector from an iterator.
    ///
    /// See also [iter::IteratorExt::to_vector] for a chainable version.
    ///
    /// ## Example
    /// ```
    /// use std::collections::Vector;
    ///
    /// let vec: Vector<i32> = Vector::from_iter(&(0..3));
    /// assert_eq!(vec.len(), 3);
    /// assert_eq!(vec[..], &[0, 1, 2]);
    /// ```
    fn from_iter<I: Iterator<I, T>>(iter: &mut I) -> Vector<T> {
        let vec = Vector::new::<T>();
        vec.extend(iter);
        vec
    }

    /// Reserve capacity for at least `additional` elements.
    fn reserve(self: &mut Vector<T>, additional: usize) {
        if self._length + additional > self._data.len() {
            let new_size = cmp::max(self._length * 2, self._length + additional);
            if self._data.is_empty() {
                self._data = mem::slice::alloc(new_size);
            } else {
                self._data = self._data.realloc(new_size);
            }
        }
    }

    /// Extend the vector with the elements from a slice.
    ///
    /// ## Example
    /// ```
    /// use std::collections::Vector;
    ///
    /// let vec = Vector::new::<i32>();
    /// vec.extend_from_slice(&[1, 2, 3]);
    /// vec.extend_from_slice(&[4, 5, 6]);
    /// assert_eq!(vec.len(), 6);
    /// assert_eq!(vec[..], &[1, 2, 3, 4, 5, 6]);
    /// ```
    fn extend_from_slice(self: &mut Vector<T>, value: &[T]) {
        if value.len() == 0 {
            return;
        }

        self.reserve(value.len());

        value.copy_to(&self._data[self._length]);
        self._length += value.len();
    }

    /// Extend the vector with the elements from an iterator.
    fn extend<I: Iterator<I, T>>(self: &mut Vector<T>, iter: &mut I) {
        self.reserve(iter.size_hint().unwrap_or(0));

        loop {
            let item = iter.next();
            if item.is_some() {
                self.push(item.unwrap());
            } else {
                break;
            }
        }
    }

    /// Insert an element at the given index, shifting all elements after it.
    ///
    /// ## Example
    /// ```
    /// use std::collections::Vector;
    ///
    /// let vec = Vector::from_slice(&[0, 1, 2, 3, 4]);
    /// vec.insert(0, 100);
    /// vec.insert(4, 200);
    /// vec.insert(7, 300);
    /// assert_eq!(vec[..], &[100, 0, 1, 2, 200, 3, 4, 300]);
    /// ```
    fn insert(self: &mut Vector<T>, index: usize, value: T) {
        self.reserve(1);

        if index < self._length {
            self._data[index..self._length].copy_to(&self._data[index + 1]);
        }
        self._data[index] = value;

        self._length += 1;
    }

    /// Get the element at the given index.
    ///
    /// If the index is out of bounds, it returns `Option::none()`.
    fn get(self: &Vector<T>, index: usize) -> Option<T> {
        if index < self._length {
            Option::some(self._data[index])
        } else {
            Option::none()
        }
    }

    /// @ mem::AsSlice::as_slice
    fn as_slice(self: &Vector<T>) -> &[T] {
        self._data[0..self._length]
    }

    /// @ mem::AsSliceMut::as_slice_mut
    fn as_slice_mut(self: &mut Vector<T>) -> &mut [T] {
        self._data[0..self._length]
    }

    /// Push an element to the end of the vector.
    fn push(self: &mut Vector<T>, value: T) {
        self.reserve(1);

        self._data[self._length] = value;
        self._length += 1;
    }

    /// Pop an element from the end of the vector.
    ///
    /// If the vector is empty, it returns `Option::none()`.
    fn pop(self: &mut Vector<T>) -> Option<T> {
        if self._length == 0 {
            Option::none()
        } else {
            self._length -= 1;
            Option::some(self._data[self._length])
        }
    }

    /// Remove an element at the given index, shifting all elements after it.
    fn remove(self: &mut Vector<T>, index: usize) -> T {
        let value = self._data[index];
        self._data[index + 1..self._length].copy_to(&self._data[index]);
        self._length -= 1;
        value
    }

    /// Return the length of the vector.
    fn len(self: &Vector<T>) -> usize {
        self._length
    }

    /// Return the size of the underlying buffer.
    fn capacity(self: &Vector<T>) -> usize {
        self._data.len()
    }

    /// Returns a region of memory "after the last element".
    ///
    /// This can be used to efficiently append elements to the vector. The memory
    /// may not be initialized.
    fn spare_capacity(self: &mut Vector<T>) -> &mut [T] {
        self._data[self._length..]
    }

    /// Returns `true` if the vector is empty, `false` otherwise.
    #[inline]
    fn is_empty(self: &Vector<T>) -> bool {
        self._length == 0
    }

    /// Clear the vector, removing all elements.
    ///
    /// Does not remove excess capacity, call [shrink_to_fit] afterwards, if this
    /// is desired.
    fn clear(self: &mut Vector<T>) {
        self._length = 0;
    }

    /// Truncate the vector, removing all but the first `new_size` elements.
    ///
    /// `new_size` should not be greater than the current capacity of the vector, but it may be
    /// greater than the current length of the vector. In this case the vector will grow to the
    /// specified capacity.
    ///
    /// `vec.truncate(0)` is equivalent to `vec.clear()`.
    fn truncate(self: &mut Vector<T>, new_size: usize) {
        debug_assert!(new_size <= self._data.len());

        self._length = new_size;
    }

    /// Removes the elements not mathing the given predicate.
    ///
    /// Does not remove excess capacity, call [shrink_to_fit] afterwards, if this
    /// is desired.
    ///
    /// ## Example
    /// ```
    /// let vec = (0..=10).to_vector();
    /// defer vec.free();
    ///
    /// vec.retain(|x: &i32| -> bool { *x % 2 == 0 });
    /// assert_eq!(vec[..], &[0, 2, 4, 6, 8, 10]);
    /// ```
    fn retain<F: Fn(&T) -> bool>(self: &mut Vector<T>, func: F) {
        let i = 0usize;
        let off = 0usize;
        while i + off < self._length {
            if !func(&self._data[i + off]) {
                off += 1;
            } else {
                self._data[i] = self._data[i + off];
                i += 1;
            }
        }
        self._length -= off;
    }

    /// @ iter::Iterable::iter
    #[inline]
    fn iter(self: &Vector<T>) -> mem::SliceIterator<&T> {
        self.as_slice().iter()
    }

    /// @ iter::IterableRef::iter_ref
    #[inline]
    fn iter_ref(self: &Vector<T>) -> mem::SliceRefIterator<&T> {
        self.as_slice().iter_ref()
    }

    /// @ iter::IterableMut::iter_mut
    #[inline]
    fn iter_mut(self: &mut Vector<T>) -> mem::SliceRefIterator<&mut T> {
        self.as_slice_mut().iter_mut()
    }

    /// @ std::mem::Borrowable::borrow
    #[inline]
    fn borrow(self: &Vector<T>) -> &[T] {
        self.as_slice()
    }

    /// @ std::mem::BorrowableMut::borrow_mut
    #[inline]
    fn borrow_mut(self: &mut Vector<T>) -> &mut [T] {
        self.as_slice_mut()
    }

    /// Shrink the underlying buffer to the length of the vector.
    fn shrink_to_fit(self: &mut Vector<T>) {
        if self._length == 0 {
            self._data.free();
            self._data = slice::empty();
        } else {
            self._data = self._data.realloc(self._length);
        }
    }

    /// @ std::mem::Freeable::free
    fn free(self: &mut Vector<T>) {
        if !self._data.is_empty() {
            self._data.free();
        }
    }

    /// Helper for collections that own heap-allocated objects. This is used to
    /// be able to do `defer col.free_all()` without much boilerplate.
    ///
    /// ## Example
    /// ```
    /// use std::collections::Vector;
    /// use std::string::StringBuf;
    /// use std::fmt::format;
    ///
    /// let v: Vector<StringBuf> = Vector::new();
    /// defer v.free_all();
    ///
    /// for i in 1..10 {
    ///     v.push("{} + {} = {}".format!(i, i, i + i).unwrap());
    /// }
    /// ```
    fn free_all(self: &mut Vector<T>) {
        use typing::matches;
        use mem::Freeable;

        when matches::<T, Freeable<T>>() {
            for i in 0usize..self._length {
                self._data[i].free();
            }
        }

        self.free();
    }

    /// @ std::mem::Movable::move
    fn move(self: &mut Vector<T>) -> Vector<T> {
        let ret = *self;
        self._data = mem::slice::empty();
        self._length = 0;
        ret
    }

    /// @ mem::Clonable::clone
    fn clone(self: &Vector<T>) -> Vector<T> {
        let vec = Vector::new::<T>();
        vec.extend_from_slice(self[..]);
        vec
    }
}


#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {

    #[test]
    fn test_vector_new() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        assert_eq!(vec.len(), 0);
    }

    #[test]
    fn test_vector_from_slice() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.len(), 3);
        assert_eq!(vec[..], &[1, 2, 3]);
    }

    #[test]
    fn test_vector_from_iter() {
        let vec : Vector<i32> = Vector::from_iter(&[1, 2, 3].iter());
        defer vec.free();

        assert_eq!(vec.len(), 3);
        assert_eq!(vec[..], &[1, 2, 3]);
    }

    #[test]
    fn test_vector_reserve() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        vec.reserve(10);
        assert_eq!(vec.len(), 0);
        assert_eq!(vec[..], &[]);
    }

    #[test]
    fn test_vector_extend_from_slice() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        vec.extend_from_slice(&[1, 2, 3]);
        assert_eq!(vec.len(), 3);
        assert_eq!(vec[..], &[1, 2, 3]);
    }

    #[test]
    fn test_vector_extend() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        vec.extend(&[1, 2, 3].iter());
        assert_eq!(vec.len(), 3);
        assert_eq!(vec[..], &[1, 2, 3]);
    }

    #[test]
    fn test_vector_insert() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        vec.insert(0, 1);
        assert_eq!(vec.len(), 1);
        assert_eq!(vec[..], &[1]);
        vec.insert(0, 2);
        assert_eq!(vec.len(), 2);
        assert_eq!(vec[..], &[2, 1]);
        vec.insert(1, 3);
        assert_eq!(vec.len(), 3);
        assert_eq!(vec[..], &[2, 3, 1]);
    }

    #[test]
    fn test_vector_as_slice() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.as_slice(), &[1, 2, 3]);
    }

    #[test]
    fn test_vector_as_slice_mut() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.as_slice_mut(), &[1, 2, 3]);
    }

    #[test]
    fn test_vector_push() {
        let vec = Vector::new::<i32>();
        defer vec.free();

        vec.push(1);
        assert_eq!(vec.len(), 1);
        assert_eq!(vec[..], &[1]);
        vec.push(2);
        assert_eq!(vec.len(), 2);
        assert_eq!(vec[..], &[1, 2]);
        vec.push(3);
        assert_eq!(vec.len(), 3);
        assert_eq!(vec[..], &[1, 2, 3]);
    }

    #[test]
    fn test_vector_pop() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.pop(), Option::some(3));
        assert_eq!(vec.len(), 2);
        assert_eq!(vec.pop(), Option::some(2));
        assert_eq!(vec.len(), 1);
        assert_eq!(vec.pop(), Option::some(1));
        assert_eq!(vec.len(), 0);
        assert_eq!(vec.pop(), Option::none());
        assert_eq!(vec.len(), 0);
    }

    #[test]
    fn test_vector_remove() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.remove(0), 1);
        assert_eq!(vec.len(), 2);
        assert_eq!(vec.remove(0), 2);
        assert_eq!(vec.len(), 1);
        assert_eq!(vec.remove(0), 3);
        assert_eq!(vec.len(), 0);
    }

    #[test]
    fn test_vector_clear() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        vec.clear();
        assert_eq!(vec.len(), 0);
        assert_eq!(vec[..], &[]);
    }

    #[test]
    fn test_vector_get() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        assert_eq!(vec.get(0), Option::some(1));
        assert_eq!(vec.get(1), Option::some(2));
        assert_eq!(vec.get(2), Option::some(3));
        assert_eq!(vec.get(3), Option::none());
    }

    #[test]
    fn test_vector_move() {
        let vec = Vector::from_slice(&[1, 2, 3]);
        defer vec.free();

        let vec2 = vec.move();
        defer vec2.free();

        assert_eq!(vec.len(), 0);
        assert_eq!(vec2.len(), 3);
        assert_eq!(vec2[..], &[1, 2, 3]);
    }

    #[test]
    fn test_iter_ref() {
        let vec = Vector::from_slice(&[1, 2, 3]);

        let it = vec.iter_ref();

        assert_eq!(it.next().unwrap(), &vec[0]);
        assert_eq!(it.next().unwrap(), &vec[1]);
        assert_eq!(it.next().unwrap(), &vec[2]);
        assert!(it.next().is_none());
    }

    #[test]
    fn test_iter_mut() {
        let vec = Vector::from_slice(&[1, 2, 3]);

        let it = vec.iter_mut();

        assert_eq!(it.next().unwrap(), &vec[0]);
        assert_eq!(it.next().unwrap(), &vec[1]);
        assert_eq!(it.next().unwrap(), &vec[2]);
        assert!(it.next().is_none());
    }

    #[test]
    fn test_retain() {
        let vec = (0..=6).to_vector();
        defer vec.free();

        vec.retain(|_x: &i32| -> bool { true });
        assert_eq!(vec[..], &[0, 1, 2, 3, 4, 5, 6]);

        vec.retain(|x: &i32| -> bool { *x % 2 == 0 });
        assert_eq!(vec[..], &[0, 2, 4, 6]);

        vec.retain(|x: &i32| -> bool { *x % 3 == 0 });
        assert_eq!(vec[..], &[0, 6]);

        vec.retain(|_x: &i32| -> bool { false });
        assert_eq!(vec[..], &[]);
    }
}
