//! Binary heap collection and utilities.
//!
//! This module provides an allocating binary heap collection type, [BinaryHeap] as well as
//! methods for in-place binary heaps over raw slices ([heapify_by], [sift_up_by], [sift_down_by], ...).

use cmp::{Comparable, Ordering, CompareFunction};

/// A binary max-heap (priority queue).
///
/// ## Example
/// ```
/// use std::collections::BinaryHeap;
///
/// let heap: BinaryHeap<i32> = BinaryHeap::new();
/// defer heap.free();
///
/// heap.push(2);
/// heap.push(9);
/// heap.push(5);
///
/// assert_eq!(heap.pop(), Option::some(9));
/// assert_eq!(heap.pop(), Option::some(5));
/// assert_eq!(heap.pop(), Option::some(2));
/// assert_eq!(heap.pop(), Option::none());
/// ```
///
/// Min-heap functionality can be achieved by using a `BinaryHeap` over a type
/// that implements [cmp::Comparable] in reverse order.
///
/// ```
/// use std::collections::BinaryHeap;
/// use std::cmp::{Comparable, Ordering};
///
/// struct ReversedI32 { val: i32 }
///
/// impl ReversedI32 {
///     fn compare(self: &ReversedI32, other: &ReversedI32) -> Ordering {
///         other.val.compare(&self.val)
///     }
///
///     mixin Comparable<ReversedI32>;
/// }
///
/// let heap: BinaryHeap<ReversedI32> = BinaryHeap::new();
/// defer heap.free();
///
/// heap.push(ReversedI32 { val: 2 });
/// heap.push(ReversedI32 { val: 9 });
/// heap.push(ReversedI32 { val: 5 });
///
/// assert_eq!(heap.pop(), Option::some(ReversedI32 { val: 2 }));
/// assert_eq!(heap.pop(), Option::some(ReversedI32 { val: 5 }));
/// assert_eq!(heap.pop(), Option::some(ReversedI32 { val: 9 }));
/// assert_eq!(heap.pop(), Option::none());
/// ```
struct BinaryHeap<T: Comparable<T>> {
    _data: Vector<T>
}

impl BinaryHeap<T: Comparable<T>> {
    use iter::Iterator;
    use cmp::compare;

    /// Creates an empty binary heap.
    ///
    /// This will not allocate until the first element is inserted.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::new();
    /// defer heap.free();
    ///
    /// assert_eq!(heap.is_empty(), true);
    /// ```
    fn new() -> BinaryHeap<T> {
        BinaryHeap { _data: Vector::new() }
    }

    /// Create a heap that can accept at least `capacity` elements without reallocating.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::with_capacity(8);
    /// defer heap.free();
    ///
    /// assert!(heap.capacity() >= 8);
    /// ```
    fn with_capacity(capacity: usize) -> BinaryHeap<T> {
        BinaryHeap { _data: Vector::with_capacity(capacity) }
    }

    /// Creates a heap from an existing vector.
    ///
    /// The vector will be heapified in-place.
    ///
    /// ## Example
    /// ```
    /// use std::collections::{BinaryHeap, Vector};
    ///
    /// let vec = Vector::from_slice(&[1, 4, 6, 7, 2, 9, 2]);
    /// let heap = BinaryHeap::from_vector(vec);
    /// defer heap.free();
    ///
    /// assert_eq!(heap.pop(), Option::some(9));
    /// ```
    fn from_vector(vector: Vector<T>) -> BinaryHeap<T> {
        let heap = BinaryHeap { _data: vector };
        heap._data
            .as_slice_mut()
            .heapify_by(compare::<T>);

        heap
    }

    /// Creates a heap from an existing vector.
    ///
    /// The vector is assumed to satisfy the max heap property `a[i] <= a[(i-1)/2]`.
    /// If it does not, the behavior is unspecified.
    ///
    /// ## Example
    /// ```dubious
    /// use std::collections::{BinaryHeap, Vector};
    ///
    /// let vec = Vector::from_slice(&[1, 2, 3]);
    /// let heap = BinaryHeap::from_vector_raw(vec);
    /// defer heap.free();
    ///
    /// assert_eq!(heap.pop(), Option::some(1)); // ???
    /// ```
    fn from_vector_raw(vector: Vector<T>) -> BinaryHeap<T> {
        BinaryHeap { _data: vector }
    }

    /// Creates a heap from a slice of elements.
    ///
    /// The elements are copied into the heap and heapified.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap = BinaryHeap::from_slice(&[4, 4, 6, 7, 2, 9, 2]);
    /// defer heap.free();
    ///
    /// assert_eq!(heap.pop(), Option::some(9));
    /// ```
    fn from_slice(slice: &[T]) -> BinaryHeap<T> {
        from_vector(Vector::from_slice(slice))
    }

    /// Creates a heap from an iterator.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::from_iter(&(1..5));
    /// defer heap.free();
    ///
    /// assert_eq!(heap.pop(), Option::some(4));
    /// ```
    fn from_iter<I: Iterator<I, T>>(iter: &mut I) -> BinaryHeap<T> {
        let heap = BinaryHeap::new::<T>();
        heap.extend(iter);
        heap
    }

    /// Reserves capacity for at least `additional` more elements
    /// to be inserted without reallocating.
    ///
    /// Does nothing if the capacity is already sufficient.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::new();
    /// defer heap.free();
    ///
    /// heap.reserve(1000); // pre-allocate space for 1000 more elements
    ///
    /// for i in (1..1000) {
    ///     heap.push(i); // won't reallocate
    /// }
    /// ```
    fn reserve(self: &mut BinaryHeap<T>, additional: usize) {
        self._data.reserve(additional);
    }

    /// Returns the maximum number of elements the heap can hold
    /// without reallocating.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);
    /// defer heap.free();
    ///
    /// let i = 0;
    /// while heap.len() < heap.capacity() {
    ///     heap.push(i);
    ///     i += 1;
    /// }
    /// ```
    fn capacity(self: &BinaryHeap<T>) -> usize {
        self._data.capacity()
    }

    /// Returns `true` if the heap contains no elements.
    fn is_empty(self: &BinaryHeap<T>) -> bool {
        self._data.is_empty()
    }

    /// Returns the number of elements in the heap.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::new();
    /// defer heap.free();
    ///
    /// assert_eq!(heap.len(), 0);
    ///
    /// heap.push(3);
    /// heap.push(6);
    /// assert_eq!(heap.len(), 2);
    /// ```
    fn len(self: &BinaryHeap<T>) -> usize {
        self._data.len()
    }

    /// Extends the heap from an iterator.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::new();
    /// defer heap.free();
    ///
    /// heap.extend(&(1..5));
    /// assert_eq!(heap.len(), 4);
    /// ```
    fn extend<I: Iterator<I, T>>(self: &mut BinaryHeap<T>, iter: &mut I) {
        self.reserve(iter.size_hint().unwrap_or(0));

        loop {
            let item = iter.next();
            if item.is_some() {
                self.push(item.unwrap());
            } else {
                break;
            }
        }
    }

    /// Extends the heap from a slice of elements.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::new();
    /// defer heap.free();
    ///
    /// heap.extend_from_slice(&[1, 2, 3, 4]);
    /// heap.extend_from_slice(&[5, 6, 7, 8]);
    /// assert_eq!(heap.len(), 8);
    /// ```
    fn extend_from_slice(self: &mut BinaryHeap<T>, slice: &[T]) {
        let old_len = self.len();
        self._data.extend_from_slice(slice);
        self._data
            .as_slice_mut()
            .heapify_tail_by(old_len, compare::<T>);
    }

    /// Inserts an element into the heap.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::new();
    /// defer heap.free();
    ///
    /// heap.push(3);
    /// ```
    fn push(self: &mut BinaryHeap<T>, value: T) {
        let old_len = self._data.len();
        self._data.push(value);

        self._data
            .as_slice_mut()
            .sift_up_by(old_len, compare::<T>);
    }

    /// Returns the largest element in the heap without removing it.
    ///
    /// Returns `Option::none()` if the heap is empty.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::new();
    /// defer heap.free();
    ///
    /// assert_eq!(heap.peek(), Option::none());
    /// heap.push(3);
    /// heap.push(7);
    /// assert_eq!(heap.peek(), Option::some(7));
    /// assert_eq!(heap.peek(), Option::some(7));
    /// assert_eq!(heap.len(), 2);
    /// ```
    fn peek(self: &BinaryHeap<T>) -> Option<T> {
        self._data.get(0)
    }

    /// Removes the maximum element in the heap, returning it.
    ///
    /// Returns `Option::none()` if the heap is empty.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::new();
    /// defer heap.free();
    ///
    /// heap.push(3);
    /// heap.push(5);
    /// assert_eq!(heap.pop(), Option::some(5));
    /// ```
    fn pop(self: &mut BinaryHeap<T>) -> Option<T> {
        self._data.pop().map(|=self, item: T| -> T {
            if !self.is_empty() {
                mem::swap(&item, &self._data._data[0]);
                self._data
                    .as_slice_mut()
                    .sift_down_to_bottom_by(0, compare::<T>);
            }

            item
        })
    }

    /// Shrink the size of the underlying buffer to the minimum size
    /// needed to hold the current elements.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100000);
    /// defer heap.free();
    ///
    /// heap.push(3);
    /// heap.shrink_to_fit();
    ///
    /// assert!(heap.capacity() == 1);
    /// ```
    fn shrink_to_fit(self: &mut BinaryHeap<T>) {
        self._data.shrink_to_fit();
    }

    /// Removes the elements not mathing the given predicate.
    ///
    /// The heap property is maintained after the operation.
    ///
    /// Does not remove excess capacity, call [shrink_to_fit] afterwards, if this
    /// is desired.
    fn retain<F: Fn(&T) -> bool>(self: &mut BinaryHeap<T>, f: F) {
        let first_removed = self.len();

        let i = 0usize;
        self._data.retain(|=f, &first_removed, &i, e: &T| -> bool {
            let keep = f(e);
            if !keep && i < first_removed {
                first_removed = i;
            }
            i += 1;
            keep
        });

        self._data
            .as_slice_mut()
            .heapify_tail_by(first_removed, compare::<T>);
    }

    /// Returns an iterator over the elements in the heap.
    ///
    /// The iterator will return the elements in arbitrary order (satisfying the
    /// heap property).
    ///
    /// See [iter_drain] for an iterator that removes the elements from the heap, but in
    /// descending order.
    fn iter(self: &BinaryHeap<T>) -> mem::SliceIterator<&T> {
        self._data.iter()
    }

    /// Returns a iterator over the pointers to elements in the heap.
    ///
    /// The iterator will return the elements in arbitrary order (satisfying the
    /// heap property).
    ///
    /// See [iter_drain] for an iterator that removes the elements from the heap, but in
    /// descending order.
    fn iter_ref(self: &BinaryHeap<T>) -> mem::SliceRefIterator<&T> {
        self._data.iter_ref()
    }

    /// @ std::mem::AsSlice::as_slice
    fn as_slice(self: &BinaryHeap<T>) -> &[T] {
        self._data.as_slice()
    }

    /// Converts the heap into the underlying vector. The elements
    /// are in no particular order (satisfying the heap property).
    ///
    /// `self` is emptied after this operation (like after [move]).
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::new();
    /// defer heap.free();
    ///
    /// heap.push(3);
    /// heap.push(0);
    /// heap.push(6);
    ///
    /// let vec = heap.into_vector();
    /// defer vec.free();
    ///
    /// assert_eq!(vec.len(), 3);
    /// assert_eq!(heap.len(), 0);
    /// ```
     fn into_vector(self: &mut BinaryHeap<T>) -> Vector<T> {
        self._data.move()
    }

    /// Converts the heap into the underlying vector. The elements
    /// are additionally sorted in ascending order.
    ///
    /// `self` is emptied after this operation (like after [move]).
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::from_slice(&[5, 3, 4, 1, 2]);
    /// defer heap.free();
    ///
    /// let vec = heap.into_vector_sorted();
    /// defer vec.free();
    ///
    /// assert_eq!(vec[..], &[1, 2, 3, 4, 5]);
    /// ```
    fn into_vector_sorted(self: &mut BinaryHeap<T>) -> Vector<T> {
        self._data
            .as_slice_mut()
            .sort_heap_by(compare::<T>);

        self.into_vector()
    }

    /// Clears the heap, removing all values.
    ///
    /// This does not reduce the capacity of the heap (use [shrink_to_fit] afterwards or
    /// use [move] instead).
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::new();
    /// defer heap.free();
    ///
    /// heap.push(3);
    /// heap.push(5);
    /// heap.clear();
    ///
    /// assert_eq!(heap.len(), 0);
    /// ```
    fn clear(self: &mut BinaryHeap<T>) {
        self._data.clear();
    }

    /// Returns an iterator that removes all elements from the heap and yields them in
    /// sorted order (descending).
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    ///
    /// let heap: BinaryHeap<i32> = BinaryHeap::from_slice(&[5, 3, 4, 1, 2]);
    /// defer heap.free();
    ///
    /// // Prints "5 4 3 2 1 "
    /// for x in heap.iter_drain() {
    ///     print!("{} ", x);
    /// }
    ///
    /// assert!(heap.is_empty());
    /// ```
    fn iter_drain(self: &mut BinaryHeap<T>) -> HeapIterator<T> {
        HeapIterator { heap: self }
    }

    /// @ mem::Freeable::free
    fn free(self: &mut BinaryHeap<T>) {
        self._data.free();
    }

    /// Helper for collections that own heap-allocated objects. This is used to
    /// be able to do `defer col.free_all()` without much boilerplate.
    ///
    /// ## Example
    /// ```
    /// use std::collections::BinaryHeap;
    /// use std::string::StringBuf;
    /// use std::fmt::format;
    ///
    /// let v: BinaryHeap<StringBuf> = BinaryHeap::new();
    /// defer v.free_all();
    ///
    /// for i in 1..10 {
    ///     v.push("{} + {} = {}".format!(i, i, i + i).unwrap());
    /// }
    /// ```
    fn free_all(self: &mut BinaryHeap<T>) {
        use typing::matches;
        use mem::Freeable;

        when matches::<T, Freeable<T>>() {
            for i in 0usize..self._data.len() {
                self._data[i].free();
            }
        }

        self.free();
    }

    /// @ mem::Movable::move
    fn move(self: &mut BinaryHeap<T>) -> BinaryHeap<T> {
        BinaryHeap { _data: self._data.move() }
    }

    /// @ mem::Clonable::clone
    fn clone(self: &BinaryHeap<T>) -> BinaryHeap<T> {
        from_vector_raw(self._data.clone())
    }
}

/// Draining heap iterator.
///
/// See [BinaryHeap::iter_drain].
struct HeapIterator<T: Comparable<T>> {
    heap: &mut BinaryHeap<T>,
}

impl HeapIterator<T: Comparable<T>> {
    /// @ iter::Iterator::next
    fn next(self: &mut HeapIterator<T>) -> Option<T> {
        self.heap.pop()
    }

    /// @ iter::Iterator::size_hint
    fn size_hint(self: &HeapIterator<T>) -> Option<usize> {
        Option::some(self.heap.len())
    }

    mixin iter::Iterator<HeapIterator<T>, T>;
    mixin iter::IteratorExt<HeapIterator<T>, T>;
}

/// Reorder the elements of a slice so they satisfy the (max) heap property.
///
/// ## Example
/// ```
/// use std::collections::heap::heapify_by;
/// use std::cmp::compare;
///
/// let v = [3, 5, 1, 2, 9, 8];
/// v[..].heapify_by(compare::<i32>);
///
/// assert_eq!(v[0], 9); // max element
/// ```
fn heapify_by<T, F: CompareFunction<T>>(self: &mut [T], f: F) {
    let n = self.len() / 2;
    while n > 0 {
        n -= 1;
        self.sift_down_by(n, f);
    }
}

/// Reorder the elements of a slice so they satisfy the (max) heap property.
///
/// This variant assumes that the slice before `start` already satisfies the
/// heap property and sifts up the elements in the tail.
///
/// The method is adaptive and will perform a standard heapification if that
/// would be more efficient (if the tail is too long with respect to the existing
/// heap in the head).
///
/// ## Example
/// ```
/// use std::collections::heap::{heapify_by, heapify_tail_by};
/// use std::cmp::compare;
///
/// let v = [3, 5, 1, 2, 9, 8];
/// v[0..4].heapify_by(compare::<i32>);
/// v[..].heapify_tail_by(4, compare::<i32>);
///
/// assert_eq!(v[0], 9); // max element
/// ```
fn heapify_tail_by<T, F: CompareFunction<T>>(self: &mut [T], start: usize, f: F) {
    if start == self.len() {
        return;
    }

    let tail_len = self.len() - start;

    let better_to_rebuild = if start < tail_len {
        true
    } else if self.len() <= 2048 {
        2usize * self.len() < tail_len * internal::log2_fast(start)
    } else {
        2usize * self.len() < tail_len * 11
    };

    if better_to_rebuild {
        self.heapify_by(f);
    } else {
        for i in start..self.len() {
            self.sift_up_by(i, f);
        }
    }
}

/// Sorts an array satisfying the max heap property in ascending order.
///
/// ## Example
/// ```
/// use std::collections::heap::{heapify_by, sort_heap_by};
/// use std::cmp::compare;
///
/// fn heapsort(slice: &mut [i32]) {
///     slice.heapify_by(compare::<i32>);
///     slice.sort_heap_by(compare::<i32>);
/// }
///
/// let arr = [3, 5, 1, 2, 9, 8];
/// arr[..].heapsort();
///
/// assert_eq!(arr[..], &[1, 2, 3, 5, 8, 9]);
/// ```
fn sort_heap_by<T, F: CompareFunction<T>>(self: &mut [T], f: F) {
    let end = self.len();
    while end > 1 {
        end -= 1;
        mem::swap(&self[0], &self[end]);
        self[..end].sift_down_by(0, f);
    }
}

/// Sifts an element up the heap until it reaches its correct position.
///
/// This is used e.g. to restore the heap property after appending an element to the
/// end of the heap.
///
/// ## Example
/// ```
/// use std::collections::heap::{heapify_by, sift_up_by};
/// use std::cmp::compare;
///
/// let v = [1, 2, 3, 4, 5];
/// v[..].heapify_by(compare::<i32>);
/// assert_eq!(v[0], 5); // 5 is the max element
///
/// v[4] = 100;
/// v[..].sift_up_by(4, compare::<i32>);
/// assert_eq!(v[0], 100); // 100 is the new max element
/// ```
fn sift_up_by<T, F: CompareFunction<T>>(self: &mut [T], pos: usize, f: F) {
    let elem = self[pos];
    while pos > 0 {
        let parent = (pos - 1) / 2;
        if f(&elem, &self[parent]) != Ordering::Greater {
            break;
        }
        self[pos] = self[parent];
        pos = parent;
    }
    self[pos] = elem;
}

/// Sifts an element down the heap until it reaches its correct position.
///
/// This is used e.g. to restore the heap property after removing the root element.
/// If replacing the root element with the last element of the heap, consider using
/// [sift_down_to_bottom_by] instead, as it can be more efficient when the element
/// should be close to the bottom of the heap.
///
/// ## Example
/// ```
/// use std::collections::heap::{heapify_by, sift_down_by};
/// use std::cmp::compare;
///
/// let v = [1, 2, 3, 4, 5];
/// v[..].heapify_by(compare::<i32>);
/// assert_eq!(v[0], 5); // 5 is the max element
///
/// v[0] = 3;
/// v[..].sift_down_by(0, compare::<i32>);
/// assert_eq!(v[0], 4); // 4 is the new max element
/// ```
fn sift_down_by<T, F: CompareFunction<T>>(self: &mut [T], pos: usize, f: F) {
    let child = 2usize * pos + 1;
    let elem = self[pos];

    while child + 1 < self.len() {
        if f(&self[child], &self[child + 1]) == Ordering::Less {
            child += 1;
        }

        if f(&elem, &self[child]) != Ordering::Less {
            self[pos] = elem;
            return;
        }

        self[pos] = self[child];
        pos = child;
        child = 2 * pos + 1;
    }

    if child == self.len() - 1 && f(&elem, &self[child]) == Ordering::Less {
        self[pos] = self[child];
        pos = child;
    }

    self[pos] = elem;
}

/// Sifts an element at index `pos` to the bottom of the heap, then sifts it up until it reaches
/// its correct position.
///
/// This avoids extra comparisons on the way down and hence can be faster than just calling
/// [sift_down_by] until the element reaches the correct position when the element is known
/// to have to be near the bottom of the heap.
///
/// ## Example
/// ```
/// use std::collections::heap::{heapify_by, sift_down_to_bottom_by};
/// use std::cmp::compare;
/// use std::mem::swap;
///
/// let v = [1, 2, 3, 4, 5].as_slice_mut();
/// v.heapify_by(compare::<i32>);
///
/// swap(&v[0], &v[4]);
/// v = v[..4]; // remove the last element
///
/// v.sift_down_to_bottom_by(0, compare::<i32>);
/// assert_eq!(v[0], 4); // 4 is the new max element
/// ```
fn sift_down_to_bottom_by<T, F: CompareFunction<T>>(self: &mut [T], pos: usize, f: F) {
    let end = self.len();
    let elem = self[pos];

    let child = 2usize * pos + 1;
    while child + 1 < end {
        if f(&self[child], &self[child + 1]) == Ordering::Less {
            child += 1;
        }
        self[pos] = self[child];
        pos = child;
        child = 2 * pos + 1;
    }

    if child == end - 1 {
        self[pos] = self[child];
        pos = child;
    }

    self[pos] = elem;
    self.sift_up_by(pos, f);
}

#[docs(no_index)]
mod internal {
    #[inline]
    fn log2_fast(x: usize) -> usize {
        mem::size_of::<usize>() * 8 - (x.leading_zeros() as usize) - 1
    }
}

#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    #[test]
    fn test_basic() {
        let heap: BinaryHeap<i32> = BinaryHeap::new();
        defer heap.free();

        assert!(heap.is_empty());
        assert_eq!(heap.len(), 0);

        heap.push(2);
        heap.push(6);
        heap.push(5);

        assert!(!heap.is_empty());
        assert_eq!(heap.len(), 3);

        assert_eq!(heap.pop(), Option::some(6));
        assert_eq!(heap.pop(), Option::some(5));
        assert_eq!(heap.pop(), Option::some(2));
        assert_eq!(heap.pop(), Option::none());
    }

    #[test]
    fn test_peek() {
        let heap: BinaryHeap<i32> = BinaryHeap::new();
        defer heap.free();

        assert_eq!(heap.peek(), Option::none());

        heap.push(2);
        heap.push(6);
        heap.push(5);

        assert_eq!(heap.peek(), Option::some(6));
        assert_eq!(heap.peek(), Option::some(6));
    }

    #[test]
    fn test_from_slice() {
        let heap = BinaryHeap::from_slice(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ]);
        defer heap.free();

        assert_eq!(heap.pop(), Option::some(10));
        assert_eq!(heap.pop(), Option::some(9));
        assert_eq!(heap.pop(), Option::some(8));
        assert_eq!(heap.pop(), Option::some(7));
        assert_eq!(heap.pop(), Option::some(6));
        assert_eq!(heap.pop(), Option::some(5));
        assert_eq!(heap.pop(), Option::some(4));
        assert_eq!(heap.pop(), Option::some(3));
        assert_eq!(heap.pop(), Option::some(2));
        assert_eq!(heap.pop(), Option::some(1));
        assert_eq!(heap.pop(), Option::none());
    }

    #[test]
    fn test_from_iter() {
        let heap: BinaryHeap<i32> = BinaryHeap::from_iter(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ].iter());
        defer heap.free();

        assert_eq!(heap.pop(), Option::some(10));
        assert_eq!(heap.pop(), Option::some(9));
        assert_eq!(heap.pop(), Option::some(8));
        assert_eq!(heap.pop(), Option::some(7));
        assert_eq!(heap.pop(), Option::some(6));
        assert_eq!(heap.pop(), Option::some(5));
        assert_eq!(heap.pop(), Option::some(4));
        assert_eq!(heap.pop(), Option::some(3));
        assert_eq!(heap.pop(), Option::some(2));
        assert_eq!(heap.pop(), Option::some(1));
        assert_eq!(heap.pop(), Option::none());
    }

    #[test]
    fn test_extend_from_slice() {
        let heap: BinaryHeap<i32> = BinaryHeap::new();
        defer heap.free();

        heap.push(6);
        heap.push(10);
        heap.push(3);
        heap.extend_from_slice(&[ 5, 8, 2, 7, 1, 9, 4 ]);

        assert_eq!(heap.pop(), Option::some(10));
        assert_eq!(heap.pop(), Option::some(9));
        assert_eq!(heap.pop(), Option::some(8));
        assert_eq!(heap.pop(), Option::some(7));
        assert_eq!(heap.pop(), Option::some(6));
        assert_eq!(heap.pop(), Option::some(5));
        assert_eq!(heap.pop(), Option::some(4));
        assert_eq!(heap.pop(), Option::some(3));
        assert_eq!(heap.pop(), Option::some(2));
        assert_eq!(heap.pop(), Option::some(1));
        assert_eq!(heap.pop(), Option::none());
    }

    #[test]
    fn test_retain() {
        let heap = BinaryHeap::from_slice(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ]);
        defer heap.free();

        heap.retain(|i: &i32| -> bool { *i > 3 });

        assert_eq!(heap.pop(), Option::some(10));
        assert_eq!(heap.pop(), Option::some(9));
        assert_eq!(heap.pop(), Option::some(8));
        assert_eq!(heap.pop(), Option::some(7));
        assert_eq!(heap.pop(), Option::some(6));
        assert_eq!(heap.pop(), Option::some(5));
        assert_eq!(heap.pop(), Option::some(4));
        assert_eq!(heap.pop(), Option::none());
    }

    #[test]
    fn test_clear() {
        let heap = BinaryHeap::from_slice(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ]);
        defer heap.free();

        heap.clear();

        assert!(heap.is_empty());
        assert_eq!(heap.len(), 0);
    }

    #[test]
    fn test_into_vector() {
        let heap = BinaryHeap::from_slice(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ]);
        defer heap.free();

        let vec = heap.into_vector();
        defer vec.free();

        // "Arbitrary" order that satisfies the heap property.
        assert_eq!(vec[..], &[ 10, 9, 5, 8, 6, 2, 3, 1, 7, 4 ]);
    }

    #[test]
    fn test_as_slice() {
        let heap = BinaryHeap::from_slice(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ]);
        defer heap.free();

        // "Arbitrary" order that satisfies the heap property.
        assert_eq!(heap[..], &[ 10, 9, 5, 8, 6, 2, 3, 1, 7, 4 ]);
    }

    #[test]
    fn test_iter() {
        let heap = BinaryHeap::from_slice(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ]);
        defer heap.free();

        let iter = heap.iter();
        assert_eq!(iter.next(), Option::some(10));
        assert_eq!(iter.next(), Option::some(9));
        assert_eq!(iter.next(), Option::some(5));
        assert_eq!(iter.next(), Option::some(8));
        assert_eq!(iter.next(), Option::some(6));
        assert_eq!(iter.next(), Option::some(2));
        assert_eq!(iter.next(), Option::some(3));
        assert_eq!(iter.next(), Option::some(1));
        assert_eq!(iter.next(), Option::some(7));
        assert_eq!(iter.next(), Option::some(4));
        assert_eq!(iter.next(), Option::none());
    }

    #[test]
    fn test_iter_ref() {
        let heap = BinaryHeap::from_slice(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ]);
        defer heap.free();

        let iter = heap.iter_ref();
        assert_eq!(*iter.next().unwrap(), 10);
        assert_eq!(*iter.next().unwrap(), 9);
        assert_eq!(*iter.next().unwrap(), 5);
        assert_eq!(*iter.next().unwrap(), 8);
        assert_eq!(*iter.next().unwrap(), 6);
        assert_eq!(*iter.next().unwrap(), 2);
        assert_eq!(*iter.next().unwrap(), 3);
        assert_eq!(*iter.next().unwrap(), 1);
        assert_eq!(*iter.next().unwrap(), 7);
        assert_eq!(*iter.next().unwrap(), 4);
        assert!(iter.next().is_none());
    }

    #[test]
    fn test_iter_drain() {
        let heap = BinaryHeap::from_slice(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ]);
        defer heap.free();

        let iter = heap.iter_drain();
        assert_eq!(iter.next(), Option::some(10));
        assert_eq!(iter.next(), Option::some(9));
        assert_eq!(iter.next(), Option::some(8));
        assert_eq!(iter.next(), Option::some(7));
        assert_eq!(iter.next(), Option::some(6));
        assert_eq!(iter.next(), Option::some(5));
        assert_eq!(iter.next(), Option::some(4));
        assert_eq!(iter.next(), Option::some(3));
        assert_eq!(iter.next(), Option::some(2));
        assert_eq!(iter.next(), Option::some(1));
        assert_eq!(iter.next(), Option::none());

        assert!(heap.is_empty());
        assert_eq!(heap.len(), 0);
    }

    #[test]
    fn test_into_vector_sorted() {
        let heap = BinaryHeap::from_slice(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ]);
        defer heap.free();

        let vec = heap.into_vector_sorted();
        defer vec.free();

        assert_eq!(vec[..], &[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]);
    }

    #[test]
    fn test_clone() {
        let heap = BinaryHeap::from_slice(&[ 5, 8, 2, 7, 6, 10, 3, 1, 9, 4 ]);
        defer heap.free();

        let heap2 = heap.clone();
        defer heap2.free();

        assert_eq!(heap2.pop(), Option::some(10));
        assert_eq!(heap2.pop(), Option::some(9));
        assert_eq!(heap2.pop(), Option::some(8));
        assert_eq!(heap2.pop(), Option::some(7));
        assert_eq!(heap2.pop(), Option::some(6));
        assert_eq!(heap2.pop(), Option::some(5));
        assert_eq!(heap2.pop(), Option::some(4));
        assert_eq!(heap2.pop(), Option::some(3));
        assert_eq!(heap2.pop(), Option::some(2));
        assert_eq!(heap2.pop(), Option::some(1));
        assert_eq!(heap2.pop(), Option::none());
    }
}
