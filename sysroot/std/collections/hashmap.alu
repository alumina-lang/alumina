use std::hash::{Hashable, Hasher, DefaultHash, hash_of};
use std::option::{Option, try};
use std::cmp::Equatable;
use std::iter::{Iterator, Iterable};

const INITIAL_SIZE: usize = 32;

enum State {
    Vacant = 0u8,
    Occupied = 1,
    Deleted = 2,
}

struct HashItem<T> {
    state: State,
    item: T
}

struct HashMapRefIterator<K, V> {
    _buckets: &[HashItem<(K, V)>],
    _index: usize,
}

impl HashMapRefIterator<K, V> {
    fn next(self: &mut HashMapRefIterator<K, V>) -> Option<(&K, &V)> {
        while self._index < self._buckets.len {
            let item = &self._buckets[self._index];
            self._index += 1;
            if item.state == State::Occupied {
                return Option::some((&item.item.0, &item.item.1));
            }
        }
        Option::none()
    }

    mixin iter::Iterator<HashMapRefIterator<K, V>, (&K, &V)>;
    mixin iter::IteratorExt<HashMapRefIterator<K, V>, (&K, &V)>;
}

struct HashMapMutIterator<K, V> {
    _buckets: &mut [HashItem<(K, V)>],
    _index: usize,
}

impl HashMapMutIterator<K, V> {
    fn next(self: &mut HashMapMutIterator<K, V>) -> Option<(&K, &mut V)> {
        while self._index < self._buckets.len {
            let item = &self._buckets[self._index];
            self._index += 1;
            if item.state == State::Occupied {
                return Option::some((&item.item.0 as &K, &item.item.1));
            }
        }
        Option::none()
    }

    mixin iter::Iterator<HashMapMutIterator<K, V>, (&K, &mut V)>;
    mixin iter::IteratorExt<HashMapMutIterator<K, V>, (&K, &mut V)>;
}

struct HashMapIterator<K, V> {
    _buckets: &[HashItem<(K, V)>],
    _index: usize,
}

impl HashMapIterator<K, V> {
    fn next(self: &mut HashMapIterator<K, V>) -> Option<(K, V)> {
        while self._index < self._buckets.len {
            let item = &self._buckets[self._index];
            self._index += 1;
            if item.state == State::Occupied {
                return Option::some(item.item);
            }
        }
        Option::none()
    }

    mixin iter::Iterator<HashMapIterator<K, V>, (K, V)>;
    mixin iter::IteratorExt<HashMapIterator<K, V>, (K, V)>;
}


/// A simple linear probing hash table.
struct HashMap<K: Hashable<K, H> + Equatable<K>, V, H: Hasher<H> = DefaultHash> {
    _buckets: &mut [HashItem<(K, V)>],
    _length: usize
}

impl HashMap<K: Hashable<K, H> + Equatable<K>, V, H: Hasher<H> = DefaultHash> {
    use std::mem::alloc_zeroed;

    fn new() -> HashMap<K, V, H> {
        with_capacity(0)
    }

    fn with_capacity(capacity: usize) -> HashMap<K, V, H> {
        with_size(capacity * 4 / 3 + 1)
    }

    fn with_size(size: usize) -> HashMap<K, V, H> {
        HashMap::<K, V, H> {
            _buckets: alloc_zeroed::<HashItem<(K, V)>>(size),
            _length: 0,
        }
    }

    /// Reserves space for at least `additional` more elements to be inserted without
    /// reallocating. This follows the amortized growth strategy.
    fn reserve(self: &mut HashMap<K, V, H>, additional: usize) -> bool {            
        // We keep the load factor below 0.75.
        let new_length = self._length + additional;
        if new_length * 4 > self._buckets.len * 3 { 
            self.rehash(math::max(self._buckets.len * 2, new_length * 2));
            return true;
        }
        return false;
    }

    /// Resizes the underlying array to exactly the given `new_capacity`. Note that
    /// this could lead to poor performance if the resulting load factor is close to 
    /// 1. 
    fn rehash(self: &mut HashMap<K, V, H>, new_capacity: usize) {
        debug_assert!(self._length <= new_capacity);

        let new_map = with_size::<K, V, H>(new_capacity);
        for item in self {
            new_map._insert(item, false);
        }

        self.free();
        self._buckets = new_map._buckets;
    }

    fn shrink_to_fit(self: &mut HashMap<K, V, H>) {
        if self._length == 0 {
            self.free();
            self._buckets = mem::slice::empty();
        } else if self._length * 2 > INITIAL_SIZE {
            self.rehash(self._length * 2);
        }
    }

    fn _insert(self: &mut HashMap<K, V, H>, item: (K, V), grow: bool) -> Option<V> {
        let initial_index = (hash_of::<K, H>(item.0) as usize) % self._buckets.len; 
        let index = initial_index;

        loop {
            switch self._buckets[index].state {
                State::Vacant => {
                    if grow && self.reserve(1) {
                        return self._insert(item, false);
                    }
                    self._length += 1;
                    self._buckets[index].state = State::Occupied;
                    self._buckets[index].item = item;
                    return Option::none();
                }
                State::Occupied => {
                    if self._buckets[index].item.0 == item.0 {
                        return Option::some(std::mem::replace(&self._buckets[index].item.1, item.1));
                    }
                }
            }
            index = (index + 1) % self._buckets.len;
            if index == initial_index {
                assert!(grow);

                // We wrapped around because of deleted items, we don't
                // need to grow the hashmap, but we need to get rid of the
                // tombstones by rehashing.
                self.rehash(self._buckets.len);
                return self._insert(item, false);
            }
        }
    }

    fn _get_slot(self: &HashMap<K, V, H>, key: K) -> Option<&mut HashItem<(K, V)>> {
        if self._length == 0 {
            return Option::none();
        }

        let initial_index = (hash_of::<K, H>(key) as usize) % self._buckets.len; 
        let index = initial_index;

        loop {
            switch self._buckets[index].state {
                State::Vacant => {
                    return Option::none();
                }
                State::Occupied => {
                    if self._buckets[index].item.0 == key {
                        return Option::some(&self._buckets[index]);
                    }
                }
            }
            index = (index + 1) % self._buckets.len;
            if index == initial_index {
                // We can wrap around if all the buckets are Occupied or Deleted
                return Option::none();
            }
        }
    }

    fn insert(self: &mut HashMap<K, V, H>, key: K, value: V) -> Option<V> {
        if self._buckets.len == 0 {
            self.rehash(INITIAL_SIZE);
        }

        self._insert((key, value), true)
    }

    fn get(self: &HashMap<K, V, H>, key: K) -> Option<V> {
        Option::some(self._get_slot(key)?.item.1)
    }

    fn get_mut(self: &mut HashMap<K, V, H>, key: K) -> Option<&mut V> {
        Option::some(&self._get_slot(key)?.item.1)
    }

    fn remove(self: &mut HashMap<K, V, H>, key: K) -> Option<V> {
        let item = self._get_slot(key)?;
        self._length -= 1;
        item.state = State::Deleted;

        // We leave the tombstones in the map and do not clean them up, which will lead to sub-optimal
        // performance when a lot of items are deleted. Call shrink_to_fit() to get rid of them.

        Option::some(item.item.1)
    }

    #[inline]
    fn len(self: &HashMap<K, V, H>) -> usize {
        self._length
    }

    #[inline]
    fn empty(self: &HashMap<K, V, H>) -> bool {
        self._length == 0
    }

    fn clear(self: &mut HashMap<K, V, H>) {
        for i in (0usize..self._buckets.len) {
            self._buckets[i].state = State::Vacant;
        }
        self._length = 0;
    }

    fn iter(self: &HashMap<K, V, H>) -> HashMapIterator<K, V> {
        HashMapIterator::<K, V> {
            _buckets: self._buckets,
            _index: 0,
        }
    }

    fn iter_ref(self: &HashMap<K, V, H>) -> HashMapRefIterator<K, V> {
        HashMapRefIterator::<K, V> {
            _buckets: self._buckets,
            _index: 0,
        }
    }

    fn iter_mut(self: &mut HashMap<K, V, H>) -> HashMapMutIterator<K, V> {
        HashMapMutIterator::<K, V> {
            _buckets: self._buckets,
            _index: 0,
        }
    }

    fn free(self: &mut HashMap<K, V, H>) {
        use std::mem::free;
        self._buckets.free();
    }

    fn move(self: &mut HashMap<K, V, H>) -> HashMap<K, V, H> {
        let ret = *self;
        self._buckets = mem::slice::empty();
        self._length = 0;
        ret
    }

    fn clone(self: &HashMap<K, V, H>) -> HashMap<K, V, H> {
        let ret = HashMap::with_capacity::<K, V, H>(self._length);
        for item in self {
            ret.insert(item.0, item.1);
        }
        ret
    }
}

impl HashMap<
    K: Hashable<K, H> + Equatable<K>, 
    V,
    I: Iterator<I, (K, V)>, 
    H: Hasher<H> = DefaultHash
> {
    fn from_iter(iter: &mut I) -> HashMap<K, V, H> {
        let map = HashMap::new::<K, V, H>();
        map.extend(iter);
        map
    }

    fn extend(self: &mut HashMap<K, V, H>, iter: &mut I) {
        self.reserve(iter.size_hint().unwrap_or(0));
        
        if self._buckets.len == 0 {
            self.rehash(INITIAL_SIZE);
        }

        for item in iter {
            self._insert(item, true);
        }
    }
}

#[cfg(all(test, test_std))]
mod tests {
    struct DummyHasher {
        state: u64    
    }

    impl DummyHasher {
        fn new() -> DummyHasher {
            DummyHasher {
                state: 0
            }
        }

        fn write(self: &mut DummyHasher, val: &[u8]) {
            mem::copy(
                val[..math::min(val.len, mem::size_of::<u64>())],
                &self.state as &mut u8
            );
        }

        fn finish(self: &mut DummyHasher) -> u64 {
            self.state
        }
    }

    #[test]
    fn test_hashmap_new() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();
        
        assert!(map.len() == 0);
    }

    #[test]
    fn test_hashmap_insert() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();

        assert!(map.insert(1, 2) == Option::none());
        assert!(map.insert(1, 3) == Option::some(2));
        assert!(map.insert(2, 4) == Option::none());
        assert!(map.insert(3, 5) == Option::none());

        assert!(map.len() == 3);
    }

    #[test]
    fn test_hashmap_get() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();

        map.insert(1, 2);
        map.insert(2, 4);
        map.insert(3, 5);

        assert!(map.get(1) == Option::some(2));
        assert!(map.get(2) == Option::some(4));
        assert!(map.get(3) == Option::some(5));
        assert!(map.get(4) == Option::none());
    }

    #[test]
    fn test_hashmap_get_mut() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();

        map.insert(1, 2);
        map.insert(2, 4);
        map.insert(3, 5);

        *map.get_mut(1).unwrap() = 3;

        assert!(map.get(1) == Option::some(3));
    }

    #[test]
    fn test_hashmap_remove() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();

        map.insert(1, 2);
        map.insert(2, 4);
        map.insert(3, 5);

        assert!(map.remove(1) == Option::some(2));
        assert!(map.remove(2) == Option::some(4));
        assert!(map.remove(3) == Option::some(5));
        assert!(map.remove(4) == Option::none());
    }

    #[test]
    fn test_hashmap_len() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();

        map.insert(1, 2);
        map.insert(2, 4);
        map.insert(3, 5);

        assert!(map.len() == 3);
    }

    #[test]
    fn test_hashmap_empty() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();

        assert!(map.empty());
    }

    #[test]
    fn test_hashmap_clear() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();

        map.insert(1, 2);
        map.insert(2, 4);
        map.insert(3, 5);

        map.clear();

        assert!(map.len() == 0);
    }

    #[test]
    fn test_hashmap_iter() {
        let map = HashMap::new::<i32, i32, DummyHasher>();
        defer map.free();

        map.insert(1, 2);
        map.insert(2, 4);
        map.insert(3, 5);

        let iter = map.iter();
        assert!(iter.next() == Option::some((1, 2)));
        assert!(iter.next() == Option::some((2, 4)));
        assert!(iter.next() == Option::some((3, 5)));
        assert!(iter.next() == Option::none());
    }

    #[test]
    fn test_hashmap_iter_ref() {
        let map = HashMap::new::<i32, i32, DummyHasher>();
        defer map.free();

        map.insert(1, 2);
        map.insert(2, 4);
        map.insert(3, 5);

        let iter = map.iter_ref();
        let v = iter.next().unwrap();
        assert_eq!(*v.0, 1);
        assert_eq!(*v.1, 2);
        let v = iter.next().unwrap();
        assert_eq!(*v.0, 2);
        assert_eq!(*v.1, 4);
        let v = iter.next().unwrap();
        assert_eq!(*v.0, 3);
        assert_eq!(*v.1, 5);

        assert!(!iter.next().is_some);
    }

    #[test]
    fn test_hashmap_iter_mut() {
        let map = HashMap::new::<i32, i32, DummyHasher>();
        defer map.free();

        map.insert(1, 2);
        map.insert(2, 4);
        map.insert(3, 5);

        let iter = map.iter_mut();
        let v = iter.next().unwrap();
        assert_eq!(*v.0, 1);
        assert_eq!(*v.1, 2);
        *v.1 = 100;

        assert_eq!(map.get(1).unwrap(), 100);
    }

    #[test]
    fn test_reserve() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();

        map.reserve(100);
        
        let ptr = map._buckets.ptr;
        for i in 0..100 {
            map.insert(i, i);
        }

        // Did not reallocate
        assert_eq!(map._buckets.ptr, ptr);        
    }

    #[test]
    fn test_hashmap_from_iter() {
        let map: HashMap<i32, i32> = HashMap::from_iter(
            &[(1, 2), (2, 4), (3, 5)].iter()
        );
        defer map.free();

        assert!(map.len() == 3);
    }

    #[test]
    fn test_hashmap_extend() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();

        map.insert(1, 2);
        map.insert(2, 4);
        map.insert(3, 5);

        map.extend(
            &[(4, 6), (5, 7), (6, 8)].iter()
        );

        assert!(map.len() == 6);
    }

    #[test]
    fn test_hashmap_move() {
        let map = HashMap::new::<i32, i32>();
        defer map.free();

        map.insert(1, 2);
        map.insert(2, 4);
        map.insert(3, 5);

        let map2 = map.move();
        defer map2.free();

        assert!(map.len() == 0);
        assert!(map2.len() == 3);
    }
}
