/// A double-ended queue (growable ring buffer).
///
/// Elements can be efficiently pushed to and popped from either end of the queue.
///
/// ## Example
/// ```
/// use std::collections::Deque;
///
/// let deque: Deque<i32> = Deque::new();
/// defer deque.free();
///
/// deque.push(1);
/// deque.push(2);
/// deque.push_front(3);
/// deque.push_front(4);
///
/// assert_eq!(deque.len(), 4);
///
/// assert_eq!(deque.pop(), Option::some(2));
/// assert_eq!(deque.pop_front(), Option::some(4));
/// assert_eq!(deque.pop(), Option::some(1));
/// assert_eq!(deque.pop_front(), Option::some(3));
/// ```
struct Deque<T> {
    _data: &mut [T],
    _tail: usize,
    _head: usize,
}

impl Deque<T> {
    /// Create an empty deque
    ///
    /// This will not allocate until the first element is inserted.
    fn new() -> Deque<T> {
        with_capacity(0)
    }

     /// Create a deque that can hold up to `capacity` elements without reallocating.
    fn with_capacity(capacity: usize) -> Deque<T> {
        Deque::<T> {
            _data: if capacity != 0 {
                mem::slice::alloc::<T>(_cap_to_size(capacity))
            } else {
                mem::slice::empty()
            },
            _tail: 0,
            _head: 0,
        }
    }

    /// Create a deque from a slice, copying the elements.
    fn from_slice(slice: &[T]) -> Deque<T> {
        let deque = with_capacity::<T>(slice.len());
        slice.copy_to_nonoverlapping(deque._data[0]);
        deque._head = 0;
        deque._tail = slice.len();
        deque
    }

    /// Create a deque from an iterator of elements.
    fn from_iter<I: iter::Iterator<I, T>>(iter: &mut I) -> Deque<T> {
        let deque = Deque::new::<T>();
        deque.extend(iter);
        deque
    }

    /// Reserve capacity for at least `additional` elements.
    fn reserve(self: &mut Deque<T>, additional: usize) {
        if self._data.len() <= self.len() + additional {
            self._resize(_cap_to_size(self.len() + additional));
        }
    }

    /// Shrink the size of the underlying buffer to the minimum size
    /// needed to hold the current elements.
    fn shrink_to_fit(self: &mut Deque<T>) {
        if self._data.len() > self.len() + 1 {
            self._resize(_cap_to_size(self.len()));
        }
    }

    #[cold]
    #[inline(never)]
    fn _resize(self: &mut Deque<T>, new_size: usize) {
        debug_assert!(new_size > self.len());

        let len = self.len();
        let new_data = mem::slice::alloc::<T>(new_size);

        if self._tail > self._head {
            self._data[self._head..self._tail]
                .copy_to_nonoverlapping(&new_data[0]);
        } else if self._tail < self._head {
            self._data[self._head..]
                .copy_to_nonoverlapping(&new_data[0]);
            self._data[..self._tail]
                .copy_to_nonoverlapping(&new_data[self._data.len() - self._head]);
        }

        self.free();
        self._data = new_data;
        self._head = 0;
        self._tail = len;
    }

    /// Returns the number of elements in the deque.
    #[inline]
    fn len(self: &Deque<T>) -> usize {
        (self._tail - self._head) & (self._data.len() - 1)
    }

    /// Returns the total number of elements that the deque can hold without reallocating.
    fn capacity(self: &Deque<T>) -> usize {
        if self._data.len() == 0 {
            0
        } else {
            self._data.len() - 1
        }
    }

    /// Returns `true` if the deque is empty, `false` otherwise.
    #[inline]
    fn is_empty(self: &Deque<T>) -> bool {
        self._tail == self._head
    }

    /// Clears the deque, removing all values.
    ///
    /// This does not shrink the underlying buffer, call
    /// [Deque::shrink_to_fit] to free up unused memory.
    fn clear(self: &mut Deque<T>) {
        self._head = 0;
        self._tail = 0;
    }

    /// Returns a pair of slices that represent the deque's contents in order.
    ///
    /// If the deque has not wrapped around (elements are contiguous in memory),
    /// the second slice will be empty.
    fn as_slices(self: &Deque<T>) -> (&[T], &[T]) {
        if self._head <= self._tail {
            (self._data[self._head..self._tail] as &[T], mem::slice::empty::<&T>())
        } else {
            (self._data[self._head..] as &[T], self._data[..self._tail] as &[T])
        }
    }

    /// Returns a pair of mutable slices that represent the deque's contents in order.
    ///
    /// If the deque has not wrapped around (elements are contiguous in memory),
    /// the second slice will be empty.
    fn as_slices_mut(self: &mut Deque<T>) -> (&mut [T], &mut [T]) {
        if self._head <= self._tail {
            (self._data[self._head..self._tail], mem::slice::empty::<&mut T>())
        } else {
            (self._data[self._head..], self._data[..self._tail])
        }
    }

    /// Pushes an element to the back of the deque.
    fn push(self: &mut Deque<T>, element: T) {
        self.reserve(1);
        self._data[self._tail] = element;
        self._tail = (self._tail + 1) & (self._data.len() - 1);
    }

    /// Pops an element from the back of the deque.
    ///
    /// If the queue is empty, returns `Option::none()`.
    fn pop(self: &mut Deque<T>) -> Option<T> {
        if self.is_empty() {
            Option::none()
        } else {
            self._tail = (self._tail - 1) & (self._data.len() - 1);
            Option::some(self._data[self._tail])
        }
    }

    /// Pushes an element to the front of the deque.
    fn push_front(self: &mut Deque<T>, element: T) {
        self.reserve(1);
        self._head = (self._head - 1) & (self._data.len() - 1);
        self._data[self._head] = element;
    }

    /// Pops an element from the front of the deque.
    ///
    /// If the queue is empty, returns `Option::none()`.
    fn pop_front(self: &mut Deque<T>) -> Option<T> {
        if self.is_empty() {
            Option::none()
        } else {
            let element = self._data[self._head];
            self._head = (self._head + 1) & (self._data.len() - 1);
            Option::some(element)
        }
    }

    /// @ iter::Iterable::iter
    fn iter(self: &Deque<T>) -> DequeIterator<T> {
        // Just pass a shallow copy of self and use pop_front and pop to iterate.
        // This works because Deque never shrinks the buffer when popping elements.
        // If this is ever changes, this will need to be updated in a similar fashion as
        // the DequeRefIterator.
        DequeIterator { _inner: *self }
    }

    /// @ iter::IterableRef::iter_ref
    fn iter_ref(self: &Deque<T>) -> DequeRefIterator<&T> {
        DequeRefIterator::<&T> {
            _data: self._data,
            _head: self._head,
            _tail: self._tail
        }
    }

    /// @ iter::IterableMut::iter_mut
    fn iter_mut(self: &mut Deque<T>) -> DequeRefIterator<&mut T> {
        DequeRefIterator::<&mut T> {
            _data: self._data,
            _head: self._head,
            _tail: self._tail
        }
    }

    /// Extends the deque on the back end with the contents of an iterator.
    fn extend<I: iter::Iterator<I, T>>(self: &mut Deque<T>, iter: &mut I) {
        self.reserve(iter.size_hint().unwrap_or(0));

        loop {
            let item = iter.next();
            if item.is_some() {
                self.push(item.unwrap());
            } else {
                break;
            }
        }
    }

    /// Extends the deque on the front end with the contents of an iterator.
    fn extend_front<I: iter::Iterator<I, T>>(self: &mut Deque<T>, iter: &mut I) {
        self.reserve(iter.size_hint().unwrap_or(0));

        loop {
            let item = iter.next();
            if item.is_some() {
                self.push_front(item.unwrap());
            } else {
                break;
            }
        }
    }

    /// Extends the deque on the back end with the contents of a slice.
    fn extend_from_slice(self: &mut Deque<T>, value: &[T]) {
        if value.len() == 0 {
            return;
        }

        self.reserve(value.len());

        if self._tail < self._head {
            value.copy_to_nonoverlapping(&self._data[self._tail])
        } else {
            let spare = self._data.len() - self._tail;
            if value.len() <= spare {
                value.copy_to_nonoverlapping(&self._data[self._tail]);
            } else {
                value[..spare].copy_to_nonoverlapping(&self._data[self._tail]);
                value[spare..].copy_to_nonoverlapping(&self._data[0]);
            }
        }

        self._tail = (self._tail + value.len()) & (self._data.len() - 1);
    }

    /// Removes the elements not mathing the given predicate.
    ///
    /// Does not remove excess capacity, call [shrink_to_fit] afterwards, if this
    /// is desired.
    ///
    /// ## Example
    /// ```
    /// use std::collections::Deque;
    ///
    /// let queue: Deque<i32> = Deque::from_iter(&(0..=6));
    /// defer queue.free();
    ///
    /// queue.retain(|x: &i32| -> bool { *x % 2 == 0 });
    ///
    /// assert_eq!(queue.len(), 4);
    /// let iter = queue.iter();
    /// assert_eq!(iter.next(), Option::some(0));
    /// assert_eq!(iter.next(), Option::some(2));
    /// assert_eq!(iter.next(), Option::some(4));
    /// assert_eq!(iter.next(), Option::some(6));
    /// assert_eq!(iter.next(), Option::none());
    /// ```
    fn retain<F: Fn(&T) -> bool>(self: &mut Deque<T>, func: F) {
        let i = 0usize;
        let off = 0usize;

        while i + off < self.len() {
            if !func(&self._data[self._offset(i + off)]) {
                off += 1;
            } else {
                self._data[self._offset(i)] =
                    self._data[self._offset(i + off)];
                i += 1;
            }
        }
        self._tail = (self._tail - off) & (self._data.len() - 1);
    }

    #[inline]
    fn _offset(self: &Deque<T>, index: usize) -> usize {
        (self._head + index) & (self._data.len() - 1)
    }

    /// @ mem::Movable::move
    fn move(self: &mut Deque<T>) -> Deque<T> {
        let ret = *self;
        self.clear(); // this just resets the head and tail
        self._data = mem::slice::empty();
        ret
    }

    /// @ mem::Freeable::free
    fn free(self: &mut Deque<T>) {
        if !self._data.is_empty() {
            self._data.free();
        }
    }

    /// Helper for collections that own heap-allocated objects. This is used to
    /// be able to do `defer col.free_all()` without much boilerplate.
    ///
    /// ## Example
    /// ```
    /// use std::collections::Deque;
    /// use std::string::StringBuf;
    /// use std::fmt::format;
    ///
    /// let v: Deque<StringBuf> = Deque::new();
    /// defer v.free_all();
    ///
    /// for i in 1..10 {
    ///     v.push("{} + {} = {}".format!(i, i, i + i).unwrap());
    /// }
    /// ```
    fn free_all(self: &mut Deque<T>) {
        use typing::matches;
        use mem::Freeable;

        when matches::<T, Freeable<T>>() {
            for v in self.iter_mut() {
                v.free();
            }
        }

        self.free();
    }

    /// @ mem::Clonable::clone
    fn clone(self: &Deque<T>) -> Deque<T> {
        let cloned = with_capacity(self.len());
        let (h, t) = self.as_slices();
        cloned.extend_from_slice(h);
        cloned.extend_from_slice(t);
        cloned
    }
}

#[inline]
fn _cap_to_size(size: usize) -> usize {
    if size == 0 {
        // Align to the power of two with a special case for 0 (do not allocate until first push)
        0
    } else {
        (usize::max_value() >> size.leading_zeros()) + 1
    }
}

/// Iterator over the elements of a deque.
struct DequeIterator<T> {
    _inner: Deque<T>,
}

impl DequeIterator<T> {
    /// @ iter::Iterator::next
    fn next(self: &mut DequeIterator<T>) -> Option<T> {
        self._inner.pop_front()
    }

    /// @ iter::DoubleEndedIterator::next_back
    fn next_back(self: &mut DequeIterator<T>) -> Option<T> {
        self._inner.pop()
    }

    /// @ iter::Iterator::size_hint
    fn size_hint(self: &DequeIterator<T>) -> Option<usize> {
        Option::some(self._inner.len())
    }

    mixin iter::Iterator<DequeIterator<T>, T>;
    mixin iter::IteratorExt<DequeIterator<T>, T>;
    mixin iter::DoubleEndedIterator<DequeIterator<T>, T>;
    mixin iter::DoubleEndedIteratorExt<DequeIterator<T>, T>;
}

/// Iterator over the pointers to the elements of a deque.
struct DequeRefIterator<Ptr> {
    _data: std::mem::slice<Ptr>,
    _head: usize,
    _tail: usize,
}

impl DequeRefIterator<Ptr> {
    /// @ iter::Iterator::next
    fn next(self: &mut DequeRefIterator<Ptr>) -> Option<Ptr> {
        if self._tail == self._head {
            Option::none()
        } else {
            let element = &self._data[self._head];
            self._head = (self._head + 1) & (self._data.len() - 1);
            Option::some(element)
        }
    }

    /// @ iter::DoubleEndedIterator::next_back
    fn next_back(self: &mut DequeRefIterator<Ptr>) -> Option<Ptr> {
        if self._tail == self._head {
            Option::none()
        } else {
            self._tail = (self._tail - 1) & (self._data.len() - 1);
            Option::some(&self._data[self._tail])
        }
    }

    /// @ iter::Iterator::size_hint
    fn size_hint(self: &DequeRefIterator<Ptr>) -> Option<usize> {
        Option::some((self._tail - self._head) & (self._data.len() - 1))
    }

    mixin iter::Iterator<DequeRefIterator<Ptr>, Ptr>;
    mixin iter::IteratorExt<DequeRefIterator<Ptr>, Ptr>;
    mixin iter::DoubleEndedIterator<DequeRefIterator<Ptr>, Ptr>;
    mixin iter::DoubleEndedIteratorExt<DequeRefIterator<Ptr>, Ptr>;
}


#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    macro assert_deque_eq($q, $elems) {
        let vec = $q.iter().to_vector();
        defer vec.free();
        assert_eq!(vec[..], $elems);
    }

    #[test]
    fn test_basic() {
        let deque: Deque<i32> = Deque::new();
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        assert_eq!(deque.len(), 4);

        assert_eq!(deque.pop(), Option::some(2));
        assert_eq!(deque.pop_front(), Option::some(4));
        assert_eq!(deque.pop(), Option::some(1));
        assert_eq!(deque.pop_front(), Option::some(3));
    }

    #[test]
    fn test_push_pop() {
        let deque: Deque<i32> = Deque::new();
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push(3);

        assert_eq!(deque.len(), 3);

        assert_eq!(deque.pop(), Option::some(3));
        assert_eq!(deque.pop(), Option::some(2));
        assert_eq!(deque.pop(), Option::some(1));
        assert_eq!(deque.pop(), Option::none());
    }

    #[test]
    fn test_push_front_pop_front() {
        let deque: Deque<i32> = Deque::new();
        defer deque.free();

        deque.push_front(1);
        deque.push_front(2);
        deque.push_front(3);

        assert_eq!(deque.len(), 3);

        assert_eq!(deque.pop_front(), Option::some(3));
        assert_eq!(deque.pop_front(), Option::some(2));
        assert_eq!(deque.pop_front(), Option::some(1));
        assert_eq!(deque.pop_front(), Option::none());
    }

    #[test]
    fn test_push_pop_front() {
        let deque: Deque<i32> = Deque::new();
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push(3);

        assert_eq!(deque.len(), 3);

        assert_eq!(deque.pop_front(), Option::some(1));
        assert_eq!(deque.pop_front(), Option::some(2));
        assert_eq!(deque.pop_front(), Option::some(3));
        assert_eq!(deque.pop_front(), Option::none());
    }

    #[test]
    fn test_push_front_pop() {
        let deque: Deque<i32> = Deque::new();
        defer deque.free();

        deque.push_front(1);
        deque.push_front(2);
        deque.push_front(3);

        assert_eq!(deque.len(), 3);

        assert_eq!(deque.pop(), Option::some(1));
        assert_eq!(deque.pop(), Option::some(2));
        assert_eq!(deque.pop(), Option::some(3));
        assert_eq!(deque.pop(), Option::none());
    }

    #[test]
    fn test_as_slices_contiguous() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push(3);
        deque.push(4);

        let (h, t) = deque.as_slices();
        assert_eq!(h, &[1, 2, 3, 4]);
        assert!(t.len() == 0);

        let (h, t) = deque.as_slices_mut();
        assert_eq!(h, &[1, 2, 3, 4]);
        assert!(t.len() == 0);
    }

    #[test]
    fn test_as_slices_non_contiguous() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        let (h, t) = deque.as_slices();

        assert_eq!(h, &[4, 3]);
        assert_eq!(t, &[1, 2]);

        let (h, t) = deque.as_slices_mut();

        assert_eq!(h, &[4, 3]);
        assert_eq!(t, &[1, 2]);
    }

    #[test]
    fn test_iter() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        let it = deque.iter();
        assert_eq!(it.next(), Option::some(4));
        assert_eq!(it.next(), Option::some(3));
        assert_eq!(it.next(), Option::some(1));
        assert_eq!(it.next(), Option::some(2));
        assert_eq!(it.next(), Option::none());
    }

    #[test]
    fn test_iter_rev() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        let it = deque.iter().rev();
        assert_eq!(it.next(), Option::some(2));
        assert_eq!(it.next(), Option::some(1));
        assert_eq!(it.next(), Option::some(3));
        assert_eq!(it.next(), Option::some(4));
        assert_eq!(it.next(), Option::none());
    }

    #[test]
    fn test_iter_ref() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        let it = deque.iter_ref();
        assert_eq!(*it.next().unwrap(), 4);
        assert_eq!(*it.next().unwrap(), 3);
        assert_eq!(*it.next().unwrap(), 1);
        assert_eq!(*it.next().unwrap(), 2);
        assert!(it.next().is_none());
    }

    #[test]
    fn test_iter_ref_rev() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        let it = deque.iter_ref().rev();
        assert_eq!(*it.next().unwrap(), 2);
        assert_eq!(*it.next().unwrap(), 1);
        assert_eq!(*it.next().unwrap(), 3);
        assert_eq!(*it.next().unwrap(), 4);
        assert!(it.next().is_none());
    }

    #[test]
    fn test_iter_mut() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        for v in deque.iter_mut() {
            *v += 50;
        }

        for v in deque.iter_mut().rev() {
            *v += 50;
        }

        let it = deque.iter();
        assert_eq!(it.next(), Option::some(104));
        assert_eq!(it.next(), Option::some(103));
        assert_eq!(it.next(), Option::some(101));
        assert_eq!(it.next(), Option::some(102));
        assert_eq!(it.next(), Option::none());
    }

    #[test]
    fn test_extend() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.extend(&[1, 2, 3, 4].iter());

        assert_deque_eq!(deque, &[1, 2, 3, 4]);
    }

    #[test]
    fn test_extend_front() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.extend_front(&[1, 2, 3, 4].iter());

        assert_deque_eq!(deque, &[4, 3, 2, 1]);
    }

    #[test]
    fn test_extend_1() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        deque.extend(&[5, 6, 7, 8].iter());

        assert_deque_eq!(deque, &[4, 3, 1, 2, 5, 6, 7, 8]);
    }

    #[test]
    fn test_extend_front_1() {
        let deque: Deque<i32> = Deque::with_capacity(8);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        deque.extend_front(&[5, 6, 7, 8].iter());

        assert_deque_eq!(deque, &[8, 7, 6, 5, 4, 3, 1, 2]);
    }

    #[test]
    fn test_extend_from_slice() {
        let deque: Deque<i32> = Deque::with_capacity(10);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        deque.extend_from_slice(&[5, 6, 7, 8]);

        assert_deque_eq!(deque, &[4, 3, 1, 2, 5, 6, 7, 8]);
    }

    #[test]
    fn test_extend_from_slice_1() {
        let deque: Deque<i32> = Deque::with_capacity(8);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push(3);
        deque.push(4);

        deque.extend_from_slice(&[5, 6, 7, 8]);

        assert_deque_eq!(deque, &[1, 2, 3, 4, 5, 6, 7, 8]);
    }

    #[test]
    fn test_clone() {
        let deque: Deque<i32> = Deque::with_capacity(8);
        defer deque.free();

        deque.push(1);
        deque.push(2);
        deque.push_front(3);
        deque.push_front(4);

        let cloned = deque.clone();
        defer cloned.free();

        assert_deque_eq!(cloned, &[4, 3, 1, 2]);
    }

    #[test]
    fn test_retain() {
        let deque: Deque<i32> = Deque::with_capacity(8);
        defer deque.free();

        for i in 0..5 {
            deque.push(i + 5);
            deque.push_front(4 - i);
        }

        deque.retain(|x: &i32| -> bool { *x % 2 == 0 });

        assert_deque_eq!(deque, &[0, 2, 4, 6, 8]);
    }
}
