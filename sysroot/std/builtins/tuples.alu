//! Method implementations for tuple types
//!
//! As Alumina does not have variadic generics, only tuples up to 8 elements
//! have methods.
//!
//! This is ugly af, but without variadic generics, this is probably the best way
//! without implementing it all inside the compiler
//!
//! Also, who needs Rust-like macros when you have GitHub Copilot?

#[lang(builtin_tuple_1)]
struct tuple_1 {}
impl tuple_1 {
    #[inline]
    fn equals<T1: Equatable<T1>>(lhs: &(T1,), rhs: &(T1,)) -> bool {
        lhs.0.equals(&rhs.0)
    }

    #[inline]
    fn compare<T1: Comparable<T1>>(lhs: &(T1,), rhs: &(T1,)) -> Ordering {
        lhs.0.compare(&rhs.0)
    }

    #[inline]
    fn hash<T1: Hashable<T1, H>, H: Hasher<H>>(lhs: &(T1,), h: &mut H) {
        lhs.0.hash(h)
    }

    mixin<T1: Equatable<T1>> Equatable<(T1,)>;
    mixin<T1: Comparable<T1>> Comparable<(T1,)>;
}

#[lang(builtin_tuple_2)]
struct tuple_2 {}
impl tuple_2 {
    #[inline]
    fn equals<
        T1: Equatable<T1>,
        T2: Equatable<T2>
    >(lhs: &(T1, T2), rhs: &(T1, T2)) -> bool {
        lhs.0.equals(&rhs.0) && lhs.1.equals(&rhs.1)
    }

    #[inline]
    fn compare<
        T1: Comparable<T1>,
        T2: Comparable<T2>
    >(lhs: &(T1, T2), rhs: &(T1, T2)) -> Ordering {
        lexicographic_cmp!(lhs.0, rhs.0);
        lexicographic_cmp!(lhs.1, rhs.1);
        Ordering::Equal
    }

    #[inline]
    fn hash<
        T1: Hashable<T1, H>,
        T2: Hashable<T2, H>,
        H: Hasher<H>
    >(lhs: &(T1, T2), h: &mut H) {
        lhs.0.hash(h);
        lhs.1.hash(h);
    }

    mixin<T1: Equatable<T1>, T2: Equatable<T2>> Equatable<(T1, T2)>;
    mixin<T1: Comparable<T1>, T2: Comparable<T2>> Comparable<(T1, T2)>;
}

#[lang(builtin_tuple_3)]
struct tuple_3 {}
impl tuple_3 {
    #[inline]
    fn equals<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>
    >(lhs: &(T1, T2, T3), rhs: &(T1, T2, T3)) -> bool {
        lhs.0.equals(&rhs.0) && lhs.1.equals(&rhs.1) && lhs.2.equals(&rhs.2)
    }

    #[inline]
    fn compare<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>
    >(lhs: &(T1, T2, T3), rhs: &(T1, T2, T3)) -> Ordering {
        lexicographic_cmp!(lhs.0, rhs.0);
        lexicographic_cmp!(lhs.1, rhs.1);
        lexicographic_cmp!(lhs.2, rhs.2);
        Ordering::Equal
    }

    #[inline]
    fn hash<
        T1: Hashable<T1, H>,
        T2: Hashable<T2, H>,
        T3: Hashable<T3, H>,
        H: Hasher<H>
    >(lhs: &(T1, T2, T3), h: &mut H) {
        lhs.0.hash(h);
        lhs.1.hash(h);
        lhs.2.hash(h);
    }

    mixin<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>
    > Equatable<(T1, T2, T3)>;

    mixin<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>
    > Comparable<(T1, T2, T3)>;
}

#[lang(builtin_tuple_4)]
struct tuple_4 {}
impl tuple_4 {
    #[inline]
    fn equals<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>,
        T4: Equatable<T4>
    >(lhs: &(T1, T2, T3, T4), rhs: &(T1, T2, T3, T4)) -> bool {
        lhs.0.equals(&rhs.0) &&
            lhs.1.equals(&rhs.1) &&
            lhs.2.equals(&rhs.2) &&
            lhs.3.equals(&rhs.3)
    }

    #[inline]
    fn compare<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>,
        T4: Comparable<T4>
    >(lhs: &(T1, T2, T3, T4), rhs: &(T1, T2, T3, T4)) -> Ordering {
        lexicographic_cmp!(lhs.0, rhs.0);
        lexicographic_cmp!(lhs.1, rhs.1);
        lexicographic_cmp!(lhs.2, rhs.2);
        lexicographic_cmp!(lhs.3, rhs.3);
        Ordering::Equal
    }

    #[inline]
    fn hash<
        T1: Hashable<T1, H>,
        T2: Hashable<T2, H>,
        T3: Hashable<T3, H>,
        T4: Hashable<T4, H>,
        H: Hasher<H>
    >(lhs: &(T1, T2, T3, T4), h: &mut H) {
        lhs.0.hash(h);
        lhs.1.hash(h);
        lhs.2.hash(h);
        lhs.3.hash(h);
    }

    mixin<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>,
        T4: Equatable<T4>
    > Equatable<(T1, T2, T3, T4)>;

    mixin<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>,
        T4: Comparable<T4>
    > Comparable<(T1, T2, T3, T4)>;
}

#[lang(builtin_tuple_5)]
struct tuple_5 {}
impl tuple_5 {
    #[inline]
    fn equals<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>,
        T4: Equatable<T4>,
        T5: Equatable<T5>
    >(lhs: &(T1, T2, T3, T4, T5), rhs: &(T1, T2, T3, T4, T5)) -> bool {
        lhs.0.equals(&rhs.0) &&
            lhs.1.equals(&rhs.1) &&
            lhs.2.equals(&rhs.2) &&
            lhs.3.equals(&rhs.3) &&
            lhs.4.equals(&rhs.4)
    }

    #[inline]
    fn compare<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>,
        T4: Comparable<T4>,
        T5: Comparable<T5>
    >(lhs: &(T1, T2, T3, T4, T5), rhs: &(T1, T2, T3, T4, T5)) -> Ordering {
        lexicographic_cmp!(lhs.0, rhs.0);
        lexicographic_cmp!(lhs.1, rhs.1);
        lexicographic_cmp!(lhs.2, rhs.2);
        lexicographic_cmp!(lhs.3, rhs.3);
        lexicographic_cmp!(lhs.4, rhs.4);
        Ordering::Equal
    }

    #[inline]
    fn hash<
        T1: Hashable<T1, H>,
        T2: Hashable<T2, H>,
        T3: Hashable<T3, H>,
        T4: Hashable<T4, H>,
        T5: Hashable<T5, H>,
        H: Hasher<H>
    >(lhs: &(T1, T2, T3, T4, T5), h: &mut H) {
        lhs.0.hash(h);
        lhs.1.hash(h);
        lhs.2.hash(h);
        lhs.3.hash(h);
        lhs.4.hash(h);
    }

    mixin<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>,
        T4: Equatable<T4>,
        T5: Equatable<T5>
    > Equatable<(T1, T2, T3, T4, T5)>;

    mixin<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>,
        T4: Comparable<T4>,
        T5: Comparable<T5>
    > Comparable<(T1, T2, T3, T4, T5)>;
}

#[lang(builtin_tuple_6)]
struct tuple_6 {}
impl tuple_6 {
    #[inline]
    fn equals<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>,
        T4: Equatable<T4>,
        T5: Equatable<T5>,
        T6: Equatable<T6>
    >(
        lhs: &(T1, T2, T3, T4, T5, T6),
        rhs: &(T1, T2, T3, T4, T5, T6)
    ) -> bool {
        lhs.0.equals(&rhs.0) &&
            lhs.1.equals(&rhs.1) &&
            lhs.2.equals(&rhs.2) &&
            lhs.3.equals(&rhs.3) &&
            lhs.4.equals(&rhs.4) &&
            lhs.5.equals(&rhs.5)
    }

    #[inline]
    fn compare<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>,
        T4: Comparable<T4>,
        T5: Comparable<T5>,
        T6: Comparable<T6>
    >(
        lhs: &(T1, T2, T3, T4, T5, T6),
        rhs: &(T1, T2, T3, T4, T5, T6)
    ) -> Ordering {
        lexicographic_cmp!(lhs.0, rhs.0);
        lexicographic_cmp!(lhs.1, rhs.1);
        lexicographic_cmp!(lhs.2, rhs.2);
        lexicographic_cmp!(lhs.3, rhs.3);
        lexicographic_cmp!(lhs.4, rhs.4);
        lexicographic_cmp!(lhs.5, rhs.5);
        Ordering::Equal
    }

    #[inline]
    fn hash<
        T1: Hashable<T1, H>,
        T2: Hashable<T2, H>,
        T3: Hashable<T3, H>,
        T4: Hashable<T4, H>,
        T5: Hashable<T5, H>,
        T6: Hashable<T6, H>,
        H: Hasher<H>
    >(lhs: &(T1, T2, T3, T4, T5, T6), h: &mut H) {
        lhs.0.hash(h);
        lhs.1.hash(h);
        lhs.2.hash(h);
        lhs.3.hash(h);
        lhs.4.hash(h);
        lhs.5.hash(h);
    }

    mixin<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>,
        T4: Equatable<T4>,
        T5: Equatable<T5>,
        T6: Equatable<T6>
    > Equatable<(T1, T2, T3, T4, T5, T6)>;

    mixin<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>,
        T4: Comparable<T4>,
        T5: Comparable<T5>,
        T6: Comparable<T6>
    > Comparable<(T1, T2, T3, T4, T5, T6)>;
}

#[lang(builtin_tuple_7)]
struct tuple_7 {}
impl tuple_7 {
    #[inline]
    fn equals<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>,
        T4: Equatable<T4>,
        T5: Equatable<T5>,
        T6: Equatable<T6>,
        T7: Equatable<T7>
    >(
        lhs: &(T1, T2, T3, T4, T5, T6, T7),
        rhs: &(T1, T2, T3, T4, T5, T6, T7)
    ) -> bool {
        lhs.0.equals(&rhs.0) &&
            lhs.1.equals(&rhs.1) &&
            lhs.2.equals(&rhs.2) &&
            lhs.3.equals(&rhs.3) &&
            lhs.4.equals(&rhs.4) &&
            lhs.5.equals(&rhs.5) &&
            lhs.6.equals(&rhs.6)
    }

    #[inline]
    fn compare<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>,
        T4: Comparable<T4>,
        T5: Comparable<T5>,
        T6: Comparable<T6>,
        T7: Comparable<T7>
    >(
        lhs: &(T1, T2, T3, T4, T5, T6, T7),
        rhs: &(T1, T2, T3, T4, T5, T6, T7)
    ) -> Ordering {
        lexicographic_cmp!(lhs.0, rhs.0);
        lexicographic_cmp!(lhs.1, rhs.1);
        lexicographic_cmp!(lhs.2, rhs.2);
        lexicographic_cmp!(lhs.3, rhs.3);
        lexicographic_cmp!(lhs.4, rhs.4);
        lexicographic_cmp!(lhs.5, rhs.5);
        lexicographic_cmp!(lhs.6, rhs.6);
        Ordering::Equal
    }

    #[inline]
    fn hash<
        T1: Hashable<T1, H>,
        T2: Hashable<T2, H>,
        T3: Hashable<T3, H>,
        T4: Hashable<T4, H>,
        T5: Hashable<T5, H>,
        T6: Hashable<T6, H>,
        T7: Hashable<T7, H>,
        H: Hasher<H>
    >(lhs: &(T1, T2, T3, T4, T5, T6, T7), h: &mut H) {
        lhs.0.hash(h);
        lhs.1.hash(h);
        lhs.2.hash(h);
        lhs.3.hash(h);
        lhs.4.hash(h);
        lhs.5.hash(h);
        lhs.6.hash(h);
    }

    mixin<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>,
        T4: Equatable<T4>,
        T5: Equatable<T5>,
        T6: Equatable<T6>,
        T7: Equatable<T7>
    > Equatable<(T1, T2, T3, T4, T5, T6, T7)>;

    mixin<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>,
        T4: Comparable<T4>,
        T5: Comparable<T5>,
        T6: Comparable<T6>,
        T7: Comparable<T7>
    > Comparable<(T1, T2, T3, T4, T5, T6, T7)>;
}

#[lang(builtin_tuple_8)]
struct tuple_8 {}
impl tuple_8 {
    #[inline]
    fn equals<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>,
        T4: Equatable<T4>,
        T5: Equatable<T5>,
        T6: Equatable<T6>,
        T7: Equatable<T7>,
        T8: Equatable<T8>
    >(
        lhs: &(T1, T2, T3, T4, T5, T6, T7, T8),
        rhs: &(T1, T2, T3, T4, T5, T6, T7, T8)
    ) -> bool {
        lhs.0.equals(&rhs.0) &&
            lhs.1.equals(&rhs.1) &&
            lhs.2.equals(&rhs.2) &&
            lhs.3.equals(&rhs.3) &&
            lhs.4.equals(&rhs.4) &&
            lhs.5.equals(&rhs.5) &&
            lhs.6.equals(&rhs.6) &&
            lhs.7.equals(&rhs.7)
    }

    #[inline]
    fn compare<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>,
        T4: Comparable<T4>,
        T5: Comparable<T5>,
        T6: Comparable<T6>,
        T7: Comparable<T7>,
        T8: Comparable<T8>
    >(
        lhs: &(T1, T2, T3, T4, T5, T6, T7, T8),
        rhs: &(T1, T2, T3, T4, T5, T6, T7, T8)
    ) -> Ordering {
        lexicographic_cmp!(lhs.0, rhs.0);
        lexicographic_cmp!(lhs.1, rhs.1);
        lexicographic_cmp!(lhs.2, rhs.2);
        lexicographic_cmp!(lhs.3, rhs.3);
        lexicographic_cmp!(lhs.4, rhs.4);
        lexicographic_cmp!(lhs.5, rhs.5);
        lexicographic_cmp!(lhs.6, rhs.6);
        lexicographic_cmp!(lhs.7, rhs.7);
        Ordering::Equal
    }

    #[inline]
    fn hash<
        T1: Hashable<T1, H>,
        T2: Hashable<T2, H>,
        T3: Hashable<T3, H>,
        T4: Hashable<T4, H>,
        T5: Hashable<T5, H>,
        T6: Hashable<T6, H>,
        T7: Hashable<T7, H>,
        T8: Hashable<T8, H>,
        H: Hasher<H>
    >(lhs: &(T1, T2, T3, T4, T5, T6, T7, T8), h: &mut H) {
        lhs.0.hash(h);
        lhs.1.hash(h);
        lhs.2.hash(h);
        lhs.3.hash(h);
        lhs.4.hash(h);
        lhs.5.hash(h);
        lhs.6.hash(h);
        lhs.7.hash(h);
    }

    mixin<
        T1: Equatable<T1>,
        T2: Equatable<T2>,
        T3: Equatable<T3>,
        T4: Equatable<T4>,
        T5: Equatable<T5>,
        T6: Equatable<T6>,
        T7: Equatable<T7>,
        T8: Equatable<T8>
    > Equatable<(T1, T2, T3, T4, T5, T6, T7, T8)>;

    mixin<
        T1: Comparable<T1>,
        T2: Comparable<T2>,
        T3: Comparable<T3>,
        T4: Comparable<T4>,
        T5: Comparable<T5>,
        T6: Comparable<T6>,
        T7: Comparable<T7>,
        T8: Comparable<T8>
    > Comparable<(T1, T2, T3, T4, T5, T6, T7, T8)>;
}
