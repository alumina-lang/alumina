//! Run time glue code (program entrypoint, tests, ...)

/// Returns `true` when evaluated in a const context and `false` otherwise.
///
/// ## Example
/// ```
/// use std::runtime::in_const_context;
///
/// const IN_CONST_CONTEXT: bool = in_const_context();
///
/// assert!(IN_CONST_CONTEXT);
/// assert!(!in_const_context());
/// ```
#[inline(ir)]
fn in_const_context() -> bool {
    intrinsics::in_const_context()
}

#[cfg(not(output_type = "library"))]
mod internal {
    use builtins::{return_type_of, arguments_of, NamedFunction};
    use mem::slice;

    #[cfg(all(test))]
    {
        /// Discovered unit test cases.
        ///
        /// `test_cases()` call can be lowered at at any point during the IR lowering processed, ensure
        /// it is called during static initialization, which happens last so that all test cases will have
        /// been discovered.
        const TEST_CASES = intrinsics::test_cases();

        /// Test case metadata
        ///
        /// Contains the module path, name, attributes and the function pointer
        /// to invoke the test.
        #[lang(test_case_meta)]
        struct TestCaseMeta {
            path: &[u8],
            name: &[u8],
            attributes: &[u8],
            test: fn(),
        }

        impl TestCaseMeta {
            #[lang(test_case_meta_new)]
            #[inline(ir)]
            fn new(path: &[u8], name: &[u8], attributes: &[u8], test: fn()) -> TestCaseMeta {
                TestCaseMeta {
                    path: path,
                    name: name,
                    attributes: attributes,
                    test: test,
                }
            }
        }
    }

    /// Maximum number of program arguments that can be stack-allocated.
    ///
    /// See [allocate_args] for details.
    const STACK_ARGS_MAX: usize = 1024;

    /// Allocates the space for program arguments
    ///
    /// It allocates the memory for the slice on the stack, hence a macro. This is done to avoid
    /// a dependency on `malloc` for simple programs, but it is potentially problematic if a large
    /// number of arguments is passed as a significant portion of the stack space will be consumed.
    /// The size of the slice is `argc * sizeof(usize) * 2` as only the pointers and lengths are
    /// stored in the slice, the contents of the arguments stays in the memory region pointed to by
    /// `argv`.
    ///
    /// If number of arguments exceeds [STACK_ARGS_MAX], the function will fall back to using malloc.
    ///
    /// This is not great and probably a reason why Rust has `env::args()` instead of an argument
    /// to the `main` function, but I kind of like the C-style arguments to main, so for now this
    /// is the approach.
    macro allocate_args($argc) {
        use intrinsics::{codegen_func, size_of};
        let argc = $argc as usize;

        if argc > STACK_ARGS_MAX {
            // Cannot use __builtin_alloca_with_align as it may not be valid until the end of the function
            slice::from_raw(codegen_func::<&mut void>("__builtin_alloca", size_of::<&[u8]>() * argc) as &mut &[u8], argc)
        } else {
            mem::slice::alloc::<&[u8]>(argc)
        }
    }

    #[cfg(not(custom_entrypoint))]
    {
        /// Program entrypoint glue.
        ///
        /// This is equivalent to C's `main`, not `_start` as we still want to use the C runtime for
        /// invoking the static constructors.
        ///
        /// It converts the `argc` and `argv` arguments to a slice of strings, initializes the main thread
        /// associated data (if threading is enabled) and then invokes the user-defined `main` function.
        #[export]
        #[cfg_attr(target_os="macos", link_name("_main"))]
        #[cfg_attr(not(target_os="macos"), link_name("main"))]
        #[lang(entrypoint_glue)]
        fn entrypoint<UserMain: NamedFunction>(argc: libc::c_int, argv: &&libc::c_char) -> libc::c_int {
            let func = std::util::unit::<UserMain>();

            #[cfg(threading)]
            std::thread::internal::threading_init();

            let ret = when arguments_of<UserMain>: (&[&[u8]]) {
                let args = allocate_args!(argc);
                for i in 0usize..(argc as usize) {
                    args[i] = slice::from_raw(*(argv + i) as &u8, libc::strlen(*(argv + i)) as usize);
                }

                func(args)
            } else when arguments_of<UserMain>: () {
                func()
            } else {
                compile_fail!("invalid signature for the main function")
            };


            when return_type_of<UserMain>: ! {
                std::intrinsics::unreachable()
            } else when return_type_of<UserMain>: void {
                libc::EXIT_SUCCESS
            } else when return_type_of<UserMain>: builtins::Integer {
                ret as libc::c_int
            } else {
                compile_fail!("invalid signature for the main function")
            }
        }
    }
}
