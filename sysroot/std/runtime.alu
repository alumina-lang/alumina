//! Run time glue code (entrypoints, tests, ...)

#[cfg(not(output_type = "library"))]
mod internal {
    use std::intrinsics::{aligned_alloca, size_of, align_of};
    use builtins::{return_type_of, arguments_of};
    use std::mem::slice;
    use std::builtins::Callable;

    #[cfg(all(test))]
    {
        /// Minimal support for testing in the compiler. 
        ///
        /// During AST construction, compiler will collect all the methods with #[test] attribute and
        /// make them available via this intrinsic.
        extern "intrinsic" fn test_cases() -> &[TestCaseMeta];

        // `test_cases()` call can be lowered at at any point during the IR lowering processed, ensure
        // it is called during static initialization, which happens last so that all test cases are
        // discovered.
        static TEST_CASES: &[TestCaseMeta] = test_cases();

        #[lang(test_case_meta)]
        struct TestCaseMeta { 
            path: &[u8],
            name: &[u8],
            attributes: &[&[u8]],
            test: fn(),
        }

        impl TestCaseMeta {
            #[lang(test_case_meta_new)]
            fn new(path: &[u8], name: &[u8], attributes: &[&[u8]], test: fn()) -> TestCaseMeta {
                TestCaseMeta {
                    path: path,
                    name: name,
                    attributes: attributes,
                    test: test,
                }
            }
        }
    }

    macro argc_argv_to_slice($argc, $argv) {
        let argc = $argc as usize;
        let argv = $argv as &&u8;
        let args = aligned_alloca(size_of::<&[u8]>() * (argc), align_of::<&[u8]>() * 8) as &mut &[u8];
        let args_ptr = args;
        while *argv != null {
            *args_ptr = slice::from_raw(*argv, libc::strlen(*argv as &libc::c_char) as usize);
            argv += 1;
            args_ptr += 1;
        }
        slice::from_raw(args as &&[u8], argc)
    }

    #[cfg(not(custom_entrypoint))]
    {
        /// Program entrypoint glue.
        ///
        /// This is the entrypoint for the program. It is called by the C runtime after static
        /// initialization. It converts the `argc` and `argv` arguments to a slice of strings 
        /// and calls the user-defined `main` function.
        #[export]
        #[codegen(c_main)]
        #[lang(entrypoint_glue)]
        fn main<UserMain>(argc: libc::c_int, argv: &&libc::c_char) -> libc::c_int {
            let func: UserMain;

            let ret = when arguments_of<UserMain>: (&[&[u8]]) {
                func(argc_argv_to_slice!(argc, argv))
            } else when arguments_of<UserMain>: () {
                func()
            } else {
                compile_fail!("invalid signature for the main function")
            };


            when return_type_of<UserMain>: ! {
                std::intrinsics::unreachable()
            } else when return_type_of<UserMain>: void {
                libc::EXIT_SUCCESS
            } else when return_type_of<UserMain>: builtins::Integer {
                ret as libc::c_int
            } else {
                compile_fail!("invalid signature for the main function")
            }
        }
    }
}
