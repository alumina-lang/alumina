//! String functions
//!
//! Alumina "strings" are simply byte slices (`&[u8]`) without any assumed encoding.
//! An exception to this are string literals in code. They are treated as UTF-8
//! (but not required to be valid UTF-8), e.g.
//!
//! ```
//! assert_eq!("ðŸ˜Š", "\xf0\x9f\x98\x8a");
//! assert_eq!("\u{1f60a}", "\xf0\x9f\x98\x8a");
//! "\xe2\x82\x28\x00\xf0\x01\x02"; // Not valid UTF-8, but a valid string literal
//! ```
//!
//! This module contains various functions for working with strings, a heap-allocated
//! string type ([StringBuf]). Unicode-specific functionality is provided by the
//! [unicode] module.
use option::Option;

/// Digit characters for up to base 36.
const RADIX_DIGITS = "0123456789abcdefghijklmnopqrstuvwxyz";

/// A heap-allocated string.
///
/// It is a wrapper around a [collections::Vector] of bytes. In addition to the
/// methods provided by [collections::Vector], it provides protocol implementations
/// for [fmt::Formatter] (allowing it to be a sink for [fmt::write]), [hash::Hashable],
/// [cmp::Equatable] and [cmp::Comparable].
struct StringBuf {
    _inner: collections::Vector<u8>,
}

impl StringBuf {
    use collections::Vector;

    /// Create an empty string buffer.
    ///
    /// This will not allocate until the first byte is inserted.
    fn new() -> StringBuf {
        from_vector(Vector::new())
    }

    /// Create a string buffer from an existing vector.
    fn from_vector(vector: Vector<u8>) -> StringBuf {
        StringBuf {
            _inner: vector
        }
    }

    /// Create a string buffer from a raw slice and a length.
    ///
    /// The slice must be allocated with [mem::slice::alloc] and its length must be greater
    /// than or equal to `length`.
    #[inline]
    fn from_raw(data: &mut [u8], length: usize) -> StringBuf {
        from_vector(Vector::from_raw(data, length))
    }

    /// Create a string buffer that can hold up to `capacity` bytes without reallocating.
    #[inline]
    fn with_capacity(capacity: usize) -> StringBuf {
        from_vector(Vector::with_capacity(capacity))
    }

    /// Create a string buffer from a slice, copying the bytes.
    ///
    /// ## Example
    /// ```
    /// use std::string::StringBuf;
    ///
    /// let str = StringBuf::from_slice("Hello, world!");
    /// assert_eq!(str.len(), 13);
    /// assert_eq!(str[..] as &[u8], "Hello, world!");
    /// ```
    #[inline]
    fn from_slice(slice: &[u8]) -> StringBuf {
        from_vector(Vector::from_slice(slice))
    }

    /// Create a string buffer from an iterator of bytes.
    ///
    /// See also [iter::IteratorExt::to_vector] for a chainable version.
    ///
    /// ## Example
    /// ```
    /// use std::string::StringBuf;
    ///
    /// let str = StringBuf::from_iter(&('A'..='F'));
    /// assert_eq!(str.len(), 6);
    /// assert_eq!(str[..] as &[u8], "ABCDEF");
    /// ```
    #[inline]
    fn from_iter<I: iter::Iterator<I, u8>>(iter: &mut I) -> StringBuf {
        from_vector(Vector::from_iter::<u8, I>(iter))
    }

    /// Reserve capacity for at least `additional` bytes.
    #[inline]
    fn reserve(self: &mut StringBuf, additional: usize) {
        self._inner.reserve(additional);
    }

    /// Extend the string buffer with the bytes from a slice.
    ///
    /// ## Example
    /// ```
    /// use std::string::StringBuf;
    ///
    /// let str = StringBuf::new();
    /// str.extend_from_slice("Hello, ");
    /// str.extend_from_slice("world!");
    /// assert_eq!(str.len(), 13);
    /// assert_eq!(str[..] as &[u8], "Hello, world!");
    /// ```
    #[inline]
    fn extend_from_slice(self: &mut StringBuf, value: &[u8]) {
        self._inner.extend_from_slice(value);
    }

    /// Extend the string buffer with the bytes from an iterator.
    #[inline]
    fn extend<I: iter::Iterator<I, u8>>(self: &mut StringBuf, iter: &mut I) {
        self._inner.extend(iter);
    }

    /// Insert an byte at the given index, shifting all bytes after it.
    ///
    /// ## Example
    /// ```
    /// use std::string::StringBuf;
    ///
    /// let str = StringBuf::from_slice("luck");
    /// str.insert(0, 'p');
    /// assert_eq!(str.len(), 5);
    /// assert_eq!(str[..] as &[u8], "pluck");
    /// ```
    #[inline]
    fn insert(self: &mut StringBuf, index: usize, value: u8) {
        self._inner.insert(index, value);
    }

    /// Get the byte at the given index.
    ///
    /// If the index is out of bounds, it returns `Option::none()`.
    #[inline]
    fn get(self: &StringBuf, index: usize) -> Option<u8> {
        self._inner.get(index)
    }

    /// @ mem::AsSlice::as_slice
    #[inline]
    fn as_slice(self: &StringBuf) -> &[u8] {
        self._inner.as_slice()
    }

    /// @ mem::AsSliceMut::as_slice_mut
    #[inline]
    fn as_slice_mut(self: &mut StringBuf) -> &mut [u8] {
        self._inner.as_slice_mut()
    }

    /// Push an byte to the end of the string buffer.
    #[inline]
    fn push(self: &mut StringBuf, value: u8) {
        self._inner.push(value);
    }

    /// Pop an byte from the end of the string buffer.
    ///
    /// If the string buffer is empty, it returns `Option::none()`.
    #[inline]
    fn pop(self: &mut StringBuf) -> Option<u8> {
        self._inner.pop()
    }

    /// Return the length of the string buffer.
    #[inline]
    fn len(self: &StringBuf) -> usize {
        self._inner.len()
    }

    /// Return the size of the underlying buffer.
    #[inline]
    fn capacity(self: &StringBuf) -> usize {
        self._inner.capacity()
    }

    /// Returns a region of memory "after the last byte".
    ///
    /// This can be used to efficiently append bytes to the string buffer. The memory
    /// may not be initialized.
    #[inline]
    fn spare_capacity(self: &mut StringBuf) -> &mut [u8] {
        self._inner.spare_capacity()
    }

    /// Returns `true` if the string buffer is empty, `false` otherwise.
    #[inline]
    fn is_empty(self: &StringBuf) -> bool {
        self._inner.is_empty()
    }

    /// Clear the string buffer, removing all bytes.
    ///
    /// Does not remove excess capacity, call [shrink_to_fit] afterwards, if this
    /// is desired.
    #[inline]
    fn clear(self: &mut StringBuf) {
        self._inner.clear()
    }

    /// Truncate the string buffer, removing all but the first `new_size` bytes.
    ///
    /// `new_size` should not be greater than the current capacity of the string buffer, but it may be
    /// greater than the current length of the string buffer. In this case the string buffer will grow to the
    /// specified capacity.
    ///
    /// `str.truncate(0)` is equivalent to `str.clear()`.
    #[inline]
    fn truncate(self: &mut StringBuf, new_size: usize) {
        self._inner.truncate(new_size);
    }

    /// @ iter::Iterable::iter
    #[inline]
    fn iter(self: &StringBuf) -> mem::SliceIterator<&u8> {
        self._inner.iter()
    }

    /// @ iter::IterableRef::iter_ref
    #[inline]
    fn iter_ref(self: &StringBuf) -> mem::SliceRefIterator<&u8> {
        self._inner.iter_ref()
    }

    /// @ iter::IterableMut::iter_mut
    #[inline]
    fn iter_mut(self: &mut StringBuf) -> mem::SliceRefIterator<&mut u8> {
        self._inner.iter_mut()
    }

    /// Shrink the underlying buffer to the length of the string buffer.
    fn shrink_to_fit(self: &mut StringBuf) {
        self._inner.shrink_to_fit();
    }

    /// @ std::mem::Freeable::free
    fn free(self: &mut StringBuf) {
        self._inner.free();
    }

    /// @ std::mem::Movable::move
    fn move(self: &mut StringBuf) -> StringBuf {
        StringBuf::from_vector(self._inner.move())
    }

    /// @ mem::Clonable::clone
    fn clone(self: &StringBuf) -> StringBuf {
        StringBuf::from_vector(self._inner.clone())
    }

    /// @ std::fmt::Formatter::write_str
    #[inline]
    fn write_str(self: &mut StringBuf, buf: &[u8]) -> Result<(), fmt::Error> {
        self.extend_from_slice(buf);
        Result::ok(())
    }

    /// @ std::fmt::Formatter::write_byte
    #[inline]
    fn write_byte(self: &mut StringBuf, c: u8) -> Result<(), fmt::Error> {
        self.push(c);
        Result::ok(())
    }

    /// @ std::fmt::Formattable::fmt
    #[inline]
    fn fmt<F: fmt::Formatter<F>>(self: &StringBuf, fmt: &mut F) -> Result<(), fmt::Error> {
        fmt.write_str(self[..])
    }

    /// @ std::fmt::DebugFormattable::debug_fmt
    #[inline]
    fn debug_fmt<F: fmt::Formatter<F>>(self: &StringBuf, fmt: &mut F) -> Result<(), fmt::Error> {
        use fmt::debug;
        fmt::write!(fmt, "{}", self[..].debug())
    }

    /// @ std::cmp::Equatable::equals
    #[inline]
    fn equals(self: &StringBuf, other: &StringBuf) -> bool {
        self[..] == other[..]
    }

    /// @ std::cmp::Comparable::compare
    #[inline]
    fn compare(self: &StringBuf, other: &StringBuf) -> cmp::Ordering {
        self[..].compare(&other[..])
    }

    /// @ std::hash::Hashable::hash
    #[inline]
    fn hash<H: hash::Hasher<H>>(self: &StringBuf, state: &mut H) {
        self[..].hash(state)
    }

    /// @ std::mem::Borrowable::borrow
    #[inline]
    fn borrow(self: &StringBuf) -> &[u8] {
        self._inner.borrow()
    }

    /// @ std::mem::BorrowableMut::borrow_mut
    #[inline]
    fn borrow_mut(self: &mut StringBuf) -> &mut [u8] {
        self._inner.borrow_mut()
    }

    mixin cmp::Equatable<StringBuf>;
    mixin cmp::Comparable<StringBuf>;
    mixin<H: hash::Hasher<H>> hash::Hashable<StringBuf, H>;
}

/// Returns `true` if character is an ASCII whitespace character, `false` otherwise.
fn is_whitespace(c: u8) -> bool {
    c == 0x20 || c == 0x85 || c == 0xa0 || (c >= 0x09 && c <= 0x0D)
}

/// Returns `true` if character is a decimal digit, `false` otherwise.
fn is_digit(c: u8) -> bool {
    c >= '0' && c <= '9'
}

/// Convert character to lower case.
///
/// If character is not an ASCII uppercase letter, returns the same character.
fn to_lower(self: u8) -> u8 {
    if self >= 'A' && self <= 'Z' {
        self + 0x20
    } else {
        self
    }
}

/// Convert character to upper case.
///
/// If character is not an ASCII lowercase letter, returns the same character.
fn to_upper(self: u8) -> u8 {
    if self >= 'a' && self <= 'z' {
        self - 0x20
    } else {
        self
    }
}

/// Returns `true` if string starts with the given prefix, `false` otherwise.
///
/// ## Example
/// ```
/// use std::string::starts_with;
///
/// assert!("hello world".starts_with("hello"));
/// assert!(!"hello world".starts_with("world"));
/// ```
fn starts_with(self: &[u8], prefix: &[u8]) -> bool {
    if self.len() < prefix.len() {
        return false;
    }
    self[..prefix.len()] == prefix
}

/// Returns `true` if string ends with the given suffix, `false` otherwise.
///
/// ## Example
/// ```
/// use std::string::ends_with;
///
/// assert!("hello world".ends_with("world"));
/// assert!(!"hello world".ends_with("hello"));
/// ```
fn ends_with(self: &[u8], suffix: &[u8]) -> bool {
    if self.len() < suffix.len() {
        return false;
    }
    self[self.len() - suffix.len()..] == suffix
}

/// Return string without the given prefix.
///
/// If the string does not start with the given prefix, returns the string unchanged.
///
/// ## Example
/// ```
/// use std::string::trim_prefix;
///
/// assert_eq!("hello world".trim_prefix("hello"), " world");
/// assert_eq!("hello world".trim_prefix("world"), "hello world");
/// ```
fn trim_prefix(self: &[u8], prefix: &[u8]) -> &[u8] {
    if self.starts_with(prefix) {
        self[prefix.len()..]
    } else {
        self
    }
}

/// Return string without the given suffix.
///
/// If the string does not end with the given suffix, returns the string unchanged.
///
/// ## Example
/// ```
/// use std::string::trim_suffix;
///
/// assert_eq!("hello world".trim_suffix("world"), "hello ");
/// assert_eq!("hello world".trim_suffix("hello"), "hello world");
/// ```
fn trim_suffix(self: &[u8], suffix: &[u8]) -> &[u8] {
    if self.ends_with(suffix) {
        self[..self.len() - suffix.len()]
    } else {
        self
    }
}

/// Finds a substring in a string.
///
/// It returns the index of the first occurrence of `needle` in `haystack`, or `Option::none()` if
/// `needle` is not part of `haystack`.
///
/// ## Example
/// ```
/// use std::string::find;
///
/// assert_eq!("hello world".find("world"), Option::some(6usize));
/// assert_eq!("hello world".find("worldx"), Option::none());
/// ```
fn find(self: &[u8], needle: &[u8]) -> Option<usize> {
    if needle.len() == 0 {
        return Option::some(0usize);
    }

    if self.len() == 0 {
        return Option::none();
    }

    let ret = libc::memmem(
        &self[0] as &void,
        self.len(),
        &needle[0] as &void,
        needle.len()
    );

    if ret == null {
        Option::none()
    } else {
        Option::some(((ret as &u8) - &self[0]) as usize)
    }
}

/// Finds the index of the first occurrence of a character in a string.
///
/// ## Example
/// ```
/// use std::string::find_char;
///
/// assert_eq!("hello world".find_char('o'), Option::some(4usize));
/// assert_eq!("hello world".find_char('x'), Option::none());
/// ```
fn find_char(self: &[u8], needle: u8) -> Option<usize> {
    if self.len() == 0 {
        return Option::none();
    }

    let p = libc::memchr(
        &self[0] as &void,
        needle as libc::c_int,
        self.len(),
    );

    if p == null {
        Option::none()
    } else {
        Option::some(p as usize - (&self[0] as usize))
    }
}

/// Returns `true` if `needle` is a substring of self, `false` otherwise.
///
/// ## Example
/// ```
/// use std::string::contains;
///
/// assert!("hello world".contains("world"));
/// assert!(!"hello world".contains("chtulhu"));
/// ```
fn contains(self: &[u8], needle: &[u8]) -> bool {
    self.find(needle).is_some()
}

/// Trims ASCII whitespace from the start of the string.
///
/// ## Example
/// ```
/// use std::string::trim_start;
///
/// assert_eq!("  hello world   ".trim_start(), "hello world   ");
/// ```
fn trim_start(self: &[u8]) -> &[u8] {
    let i = 0usize;
    while i < self.len() && self[i].is_whitespace() {
        i += 1;
    }
    self[i..]
}

/// Trims ASCII whitespace from the end of the string.
///
/// ## Example
/// ```
/// use std::string::trim_end;
///
/// assert_eq!("  hello world   ".trim_end(), "  hello world");
/// ```
fn trim_end(self: &[u8]) -> &[u8] {
    let i = self.len();
    while i > 0 && self[i - 1].is_whitespace() {
        i -= 1;
    }
    self[..i]
}

/// Trims the whitespace from the start and end of the string.
///
/// ## Example
/// ```
/// use std::string::trim;
///
/// assert_eq!("  hello world   ".trim(), "hello world");
/// ```
fn trim(self: &[u8]) -> &[u8] {
    self.trim_start().trim_end()
}


/// Iterator over parts of a string split by a delimiter.
///
/// See [split] for details.
struct SplitIterator {
    data: &[u8],
    sep: &[u8],
    done: bool
}

impl SplitIterator {
    fn new(data: &[u8], sep: &[u8]) -> SplitIterator {
        SplitIterator {
            data: data,
            sep: sep,
            done: false
        }
    }

    /// @ std::iter::Iterator::next
    fn next(self: &mut SplitIterator) -> Option<&[u8]> {
        if self.done {
            return Option::none();
        }

        let pos = self.data.find(self.sep);
        if pos.is_none() {
            self.done = true;
            return Option::some(self.data);
        }

        let pos = pos.unwrap();
        let ret = Option::some(self.data[..pos]);
        self.data = self.data[pos + self.sep.len()..];

        ret
    }

    mixin iter::Iterator<SplitIterator, &[u8]>;
    mixin iter::IteratorExt<SplitIterator, &[u8]>;
}

/// Returns an iterator over the parts of the string split by the given delimiter.
///
/// ## Example
/// ```
/// use std::string::split;
///
/// let iter = "192.168.0.1".split(".");
/// assert_eq!(iter.next(), Option::some("192"));
/// assert_eq!(iter.next(), Option::some("168"));
/// assert_eq!(iter.next(), Option::some("0"));
/// assert_eq!(iter.next(), Option::some("1"));
/// assert_eq!(iter.next(), Option::none());
/// ```
fn split(self: &[u8], sep: &[u8]) -> SplitIterator {
    SplitIterator::new(self, sep)
}

/// Non-allocating formattable object that replaces all occurrences of `needle` with `replacement`.
///
/// See [replace_fmt] for details.
struct ReplaceAdapter {
    inner: &[u8],
    needle: &[u8],
    replacement: &[u8],
}

impl ReplaceAdapter {
    use fmt::{Error, Formatter};

    fn fmt<F: Formatter<F>>(self: &ReplaceAdapter, f: &mut F) -> Result<(), Error> {
        let first = true;
        for chunk in self.inner.split(self.needle) {
            if first {
                first = false;
            } else {
                f.write_str(self.replacement)?;
            }
            f.write_str(chunk)?;
        }
        Result::ok(())
    }
}

/// Replaces all occurrences of `needle` with `replacement`, returning a new string.
///
/// See also [replace_fmt] for a non-allocating variant.
fn replace(self: &[u8], needle: &[u8], replacement: &[u8]) -> StringBuf {
    let ret = StringBuf::new();
    self.replace_fmt(needle, replacement).fmt(&ret).unwrap();
    ret
}

/// Returns an object that formats to the string with all `needle` occurrences replaced with
/// `replacement`.
///
/// ## Example
/// ```
/// use std::string::replace_fmt;
///
/// // Prints "I like cake"
/// println!("{}", "I like pie".replace_fmt("pie", "cake"));
/// ```
fn replace_fmt(self: &[u8], needle: &[u8], replacement: &[u8]) -> ReplaceAdapter {
    ReplaceAdapter { inner: self, needle: needle, replacement: replacement }
}

/// Non-allocating formattable object that joins the parts of a string with the given delimiter.
///
/// See [join_fmt] for details.
struct JoinAdapter<It: iter::Iterator<It, &[u8]>> {
    separator: &[u8],
    inner: &mut It,
}

impl JoinAdapter<It: iter::Iterator<It, &[u8]>> {
    use fmt::{Error, Formatter};

    fn fmt<F: Formatter<F>>(self: &JoinAdapter<It>, f: &mut F) -> Result<(), Error> {
        let first = true;
        for chunk in self.inner {
            if first {
                first = false;
            } else {
                f.write_str(self.separator)?;
            }
            f.write_str(chunk)?;
        }
        Result::ok(())
    }
}

/// Join the parts of a string with the given delimiter, returning a new string.
///
/// See also [join_fmt] for a non-allocating string formatting adapter.
fn join<It: iter::Iterator<It, &[u8]>>(self: &[u8], iter: &mut It) -> StringBuf {
    let ret = StringBuf::new();
    self.join_fmt(iter).fmt(&ret).unwrap();
    ret
}


/// Returns an object that formats to parts joined with the separartor.
///
/// ## Example
/// ```
/// use std::string::join_fmt;
///
/// // Prints 192.168.0.1
/// println!("{}", ".".join_fmt(&["192", "168", "0", "1"].iter()));
/// ```
fn join_fmt<It: iter::Iterator<It, &[u8]>>(self: &[u8], iter: &mut It) -> JoinAdapter<It> {
    JoinAdapter { separator: self, inner: iter }
}

/// Parses an integer with the given radix.
///
/// See also [std::builtins::internal::IntegerParsable], a mixin available on all integer types
fn parse_integer<T: builtins::Integer>(s: &[u8], radix: u16) -> Option<T> {
    assert!(radix >= 2 && radix <= 36);

    const RADIX_LOOKUP: [u8; 256] = [
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
        0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
        0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    ];

    use builtins::unsigned_of;
    use option::try;

    if s.len() == 0 {
        return Option::none();
    }

    let negative = when typing::is_signed::<T>() {
        if s[0] == '-' {
            s = s[1..];
            true
        } else {
            false
        }
    } else {
        false
    };

    let result: unsigned_of<T> = 0;
    let radix = radix as unsigned_of<T>;
    for ch in s {
        let digit = RADIX_LOOKUP[ch as usize] as unsigned_of<T>;
        if digit >= radix {
            return Option::none();
        }
        result = result
            .checked_mul(radix)?
            .checked_add(digit)?;
    }

    when typing::is_signed::<T>() {
        // We only need to check for unsigned-to-signed conversion overflow, other
        // cases have already been handled.
        if negative {
            if result > (T::max_value() as unsigned_of<T>) + 1 {
                Option::none()
            } else {
                Option::some(-(result as T))
            }
        } else {
            if result > T::max_value() as unsigned_of<T> {
                Option::none()
            } else {
                Option::some(result as T)
            }
        }
    } else {
        Option::some(result)
    }
}

/// Parses a floating-point number.
///
/// See also [f64::parse] and [f32::parse] associated methods
fn parse_float<T: builtins::FloatingPoint>(s: &[u8]) -> Option<T> {
    let res = when typing::matches::<T, f64>() {
        fmt::ryu::parse64(s)
    } else {
        fmt::ryu::parse32(s)
    };

    if res.is_ok() {
        return Option::some(res.unwrap());
    }

    if res.unwrap_err() == fmt::ryu::Error::MalformedInput {
        // Some special cases on the slow path
        if s == "inf" || s == "Inf" || s == "INF" {
            return Option::some(T::infinity());
        } else if s == "-inf" || s == "-Inf" || s == "-INF" {
            return Option::some(T::neg_infinity());
        } else if s == "nan" || s == "NaN" || s == "NAN" {
            return Option::some(T::nan());
        }
    }

    Option::none()
}


#[cfg(all(test, test_std))]
#[docs(hide)]
mod tests {
    #[test]
    fn starts_with_positive() {
        assert!("".starts_with(""));
        assert!("hello world".starts_with("hello world"));
        assert!("hello world".starts_with("hello"));
        assert!("hello world".starts_with(""));
    }

    #[test]
    fn starts_with_negative() {
        assert!(!"".starts_with("world"));
        assert!(!"hello world".starts_with("world"));
        assert!(!"hello world".starts_with("hello world hello world"));
    }

    #[test]
    fn find_positive() {
        assert_eq!("needle".find("needle"), Option::some(0usize));
        assert_eq!("needle".find("dle"), Option::some(3usize));
        assert_eq!("needle".find(""), Option::some(0usize));
        assert_eq!("".find(""), Option::some(0usize));
    }

    #[test]
    fn find_negative() {
        assert_eq!("needle".find("weedle"), Option::none());
        assert_eq!("needle".find("superlongstring"), Option::none());
    }

    #[test]
    fn test_parse_integer() {
        assert_eq!(parse_integer::<usize>("0", 10), Option::some(0usize));
        assert_eq!(parse_integer::<isize>("0", 10), Option::some(0isize));

        assert_eq!(parse_integer::<usize>("-0", 10), Option::none());
        assert_eq!(parse_integer::<isize>("-0", 10), Option::some(0isize));

        assert_eq!(parse_integer::<usize>("24601", 10), Option::some(24601usize));
        assert_eq!(parse_integer::<isize>("-24601", 10), Option::some(-24601isize));

        assert_eq!(parse_integer::<usize>("", 10), Option::none());
        assert_eq!(parse_integer::<usize>("abcdes", 10), Option::none());
        assert_eq!(parse_integer::<usize>("-243", 10), Option::none());

        // Unsigned overflow
        assert_eq!(parse_integer::<u8>("256", 10), Option::none());
        assert_eq!(parse_integer::<u8>("255", 10), Option::some(255u8));

        assert_eq!(parse_integer::<u16>("65535", 10), Option::some(0xffffu16));
        assert_eq!(parse_integer::<u16>("65536", 10), Option::none());

        // Signed overflow
        assert_eq!(parse_integer::<i8>("127", 10), Option::some(127i8));
        assert_eq!(parse_integer::<i8>("128", 10), Option::none());
        assert_eq!(parse_integer::<i8>("-128", 10), Option::some(-128 as i8));
        assert_eq!(parse_integer::<i8>("-129", 10), Option::none());
        assert_eq!(
            parse_integer::<i128>("170141183460469231731687303715884105727", 10),
            Option::some(170141183460469231731687303715884105727i128)
        );
        assert_eq!(
            parse_integer::<i128>("170141183460469231731687303715884105728", 10),
            Option::none()
        );
    }

    #[test]
    fn test_parse_integer_radix() {
        assert_eq!(parse_integer::<u8>("ff", 16), Option::some(255u8));
        assert_eq!(parse_integer::<u32>("11111111111111111111111111111111", 2), Option::some(u32::max_value()));
        assert_eq!(parse_integer::<u32>("DeAdBeEf", 16), Option::some(3735928559u32));

        assert_eq!(parse_integer::<u8>("ff", 10), Option::none());
    }

    #[test]
    fn test_parse_float() {
        /// Basic sanity tests only. Comprehensive tests are in the `std::fmt::ryu` module.

        assert_eq!(parse_float::<f64>("3.1415"), Option::some(3.1415));
        assert_eq!(parse_float::<f32>("3.1415"), Option::some(3.1415f32));

        assert_eq!(parse_float::<f64>("inf"), Option::some(f64::infinity()));
        assert_eq!(parse_float::<f64>("-inf"), Option::some(f64::neg_infinity()));
        assert!(parse_float::<f64>("NaN").unwrap().is_nan());

        assert_eq!(parse_float::<f32>("inf"), Option::some(f32::infinity()));
        assert_eq!(parse_float::<f32>("-inf"), Option::some(f32::neg_infinity()));
        assert!(parse_float::<f32>("NaN").unwrap().is_nan());

        assert_eq!(parse_float::<f64>(""), Option::none());
        assert_eq!(parse_float::<f64>("bad"), Option::none());
        assert_eq!(parse_float::<f32>(""), Option::none());
        assert_eq!(parse_float::<f32>("bad"), Option::none());
    }


    #[test]
    fn test_trim_start() {
        assert_eq!("".trim_start(), "");
        assert_eq!("hello world".trim_start(), "hello world");
        assert_eq!("  hello world".trim_start(), "hello world");
        assert_eq!("\t\t\thello world".trim_start(), "hello world");
        assert_eq!("\n\n\nhello world".trim_start(), "hello world");
        assert_eq!("\r\r\rhello world".trim_start(), "hello world");
    }

    #[test]
    fn test_trim_end() {
        assert_eq!("".trim_end(), "");
        assert_eq!("hello world".trim_end(), "hello world");
        assert_eq!("hello world  ".trim_end(), "hello world");
        assert_eq!("hello world\t\t\t".trim_end(), "hello world");
        assert_eq!("hello world\n\n\n".trim_end(), "hello world");
        assert_eq!("hello world\r\r\r".trim_end(), "hello world");
    }

    #[test]
    fn test_trim() {
        assert_eq!("".trim(), "");
        assert_eq!("hello world".trim(), "hello world");
        assert_eq!("  hello world   ".trim(), "hello world");
        assert_eq!("\t\t\thello world \n\t ".trim(), "hello world");
        assert_eq!("\n\n\nhello world".trim(), "hello world");
        assert_eq!("\r\r\rhello world".trim(), "hello world");
    }

    #[test]
    fn test_split() {
        let iter = "".split(".");
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::none());

        let iter = "192.168.0.1".split(".");
        assert_eq!(iter.next(), Option::some("192"));
        assert_eq!(iter.next(), Option::some("168"));
        assert_eq!(iter.next(), Option::some("0"));
        assert_eq!(iter.next(), Option::some("1"));
        assert_eq!(iter.next(), Option::none());

        let iter = "192.168.0.1".split("%");
        assert_eq!(iter.next(), Option::some("192.168.0.1"));
        assert_eq!(iter.next(), Option::none());

        let iter = "192.168.0.1".split("");
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::some(""));
        // ...

        let iter = "  ab c ".split(" ");
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::some("ab"));
        assert_eq!(iter.next(), Option::some("c"));
        assert_eq!(iter.next(), Option::some(""));
        assert_eq!(iter.next(), Option::none());
        // ...
    }

    #[test]
    fn test_join() {
        let vec = ".".join(&["192", "168", "0", "1"].iter());
        defer vec.free();
        assert_eq!(vec[..] as &[u8], "192.168.0.1");

        let vec = "".join(&["192", "168", "0", "1"].iter());
        defer vec.free();
        assert_eq!(vec[..] as &[u8], "19216801");

        let vec = "%".join(&["192.168.0.1"].iter());
        defer vec.free();
        assert_eq!(vec[..] as &[u8], "192.168.0.1");
    }

    #[test]
    fn test_replace() {
        let f = "192.168.0.1".replace(".", "::");
        defer f.free();

        assert_eq!(f[..] as &[u8], "192::168::0::1");
    }
}
