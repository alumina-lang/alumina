//! Panic support macros and functions

/// Ungracefully terminate the thread or process with an error message.
///
/// Use this macro to bail on conditions that the program cannot reasonably be expected to
/// recover from (e.g. when a condition means a certain programming bug).
///
/// Since panics usually cannot be recovered from, prefer to use [structured error handling](std::result::Result) as
/// a general purpose failure handling mechanism.
///
/// Panicking in Alumina does not perform any stack unwinding.
///
/// See also [thread::spawn] for details on how panics are handled in a multithreaded program.
///
/// When compiled in debug mode, `panic` prints the provided message along with the stack trace (on platforms
/// that support it)
///
/// ## Example
/// ```
/// let value = 42;
/// switch value % 2 {
///     0 => println!("even"),
///     1 => println!("odd"),
///     _ => panic!("{} is somehow neither odd nor even", value),
/// }
/// ```
///
/// Expressions that unconditionally panic have a [never type](std::builtins::never).
macro panic($reason, $args...) {
    internal::panic_impl(
        file!(),
        line!(),
        column!(),
        &fmt::format_args!(
            fmt::internal::dyn_format_args,
            $reason,
            $args...
        )
    )
}

struct PanicInfo {
    file: &[u8],
    line: i32,
    column: i32,
    args: &[&dyn fmt::Formattable<Self, internal::PanicFormatter>]
}

#[docs(no_index)]
mod internal {
    use fmt::{Formatter, Formattable};
    use sync::{Atomic, Ordering};

    // libc runtime backtrace support
    #[cfg(all(debug, not(no_backtrace), not(target_os = "android")))]
    {
        extern "C" fn backtrace(buffer: &mut &mut void, size: libc::c_int) -> libc::c_int;
        extern "C" fn backtrace_symbols(buffer: &mut &void, size: libc::c_int) -> &mut &mut libc::c_char;
        extern "C" fn backtrace_symbols_fd(buffer: &mut &void, size: libc::c_int, fd: libc::c_int);
    }

    /// Small formatter with as few dependencies as possible.
    ///
    /// PanicFormatter has no buffering, no checking for unwritten bytes. It just writes
    /// directly to fd 2. This is both for reliability, to allow higher-level IO
    /// code to panic safely but also to break potential circular dependencies in static
    /// initialization.
    struct PanicFormatter {}
    impl PanicFormatter {
        fn write_str(self: &mut PanicFormatter, buf: &[u8]) -> Result<(), fmt::Error> {
            if libc::write(libc::STDERR_FILENO, &buf[0] as &void, buf.len()) < 0 {
                Result::err(fmt::Error::new())
            } else {
                Result::ok(())
            }
        }
        mixin Formatter<PanicFormatter>;
    }

    #[thread_local] static PANICKING: bool;
    #[thread_local] static PANIC_HOOK: Option<(&mut void, fn(&mut void, &PanicInfo))>;

    fn set_panic_hook(arg: &mut void, f: fn(&mut void, &PanicInfo)) {
        PANIC_HOOK = Option::some((arg, f));
    }

    #[inline(never)]
    fn print_panic_message(info: &PanicInfo) -> Result<(), fmt::Error> {
        let formatter = PanicFormatter {};
        fmt::write!(
            &formatter,
            "panic at {}:{}:{}: ",
            info.file, info.line, info.column
        )?;
        let _ = fmt::internal::write_fmt(info.args, &formatter);
        formatter.write_byte('\n')?;

        #[cfg(all(debug, use_libbacktrace, not(no_backtrace)))]
        {
            // Preferably use libbacktrace to print a backtrace.
            use ffi::CString;
            use runtime::backtrace::{backtrace_create_state, backtrace_full};

            fn backtrace_error_callback(
                state: &mut void,
                message: &libc::c_char,
                _errno: libc::c_int
            ) {
                let formatter = state as &mut PanicFormatter;
                let msg = CString::from_raw(message);
                let _ = fmt::write!(formatter, "error while printing backtrace: {}\n", msg);
            }

            fn demangle_alumina(name: &[u8]) -> Option<&[u8]> {
                use string::{starts_with, is_digit};
                use option::try;

                if name.starts_with("_AL0") {
                    return Option::some("<anonymous>");
                }

                if !name.starts_with("_AL")
                    || name.len() < 5
                    || !name[3].is_digit() {
                    return Option::none();
                }

                let end_index = 3usize;
                while name[end_index].is_digit() {
                    end_index += 1;
                    if end_index == name.len() {
                        return Option::none();
                    }
                }

                let len = usize::parse(name[3..end_index])?;
                Option::some(name[end_index..end_index + len])
            }

            fn backtrace_callback(
                state: &mut void,
                _pc: usize,
                filename: &libc::c_char,
                lineno: libc::c_int,
                function: &libc::c_char
            ) -> libc::c_int {
                let formatter = state as &mut PanicFormatter;
                let res = if filename != null && function != null {
                    let function = ffi::CString::from_raw(function)[..];
                    let filename = ffi::CString::from_raw(filename)[..];

                    let demangled = demangle_alumina(function)
                        .unwrap_or(function);

                    fmt::writeln!(formatter, "--> {} at {}:{}", demangled, filename, lineno)
                } else {
                    fmt::writeln!(formatter, "--> <unknown>")
                };

                res.is_err() as libc::c_int
            }


            #[cfg(threading)]
            let state = backtrace_create_state(null, 1, backtrace_error_callback, null);
            #[cfg(not(threading))]
            let state = backtrace_create_state(null, 0, backtrace_error_callback, null);

            if state != null {
                fmt::writeln!(&formatter, "stack backtrace:")?;
                let ret = backtrace_full(
                    state,
                    2, // skip this function and panic_impl
                    backtrace_callback,
                    backtrace_error_callback,
                    &formatter as &mut void
                );
                if ret != 0 {
                    return Result::err(fmt::Error::new());
                }
            }
        }

        #[cfg(all(debug, not(use_libbacktrace), not(no_backtrace), not(target_os = "android")))]
        {
            // Fallback use glibc's backtrace
            let buf: [&mut void; 128];
            let size = backtrace(&buf[0], 128);
            backtrace_symbols_fd(&buf[0] as &mut &void, size, libc::STDERR_FILENO);
        }

        Result::ok(())
    }

    #[cold]
    #[inline(never)]
    fn panic_impl(
        file: &[u8],
        line: i32,
        column: i32,
        args: &[&dyn Formattable<Self, PanicFormatter>]
    ) -> ! {
        #[cfg(panic_trap)]
        std::intrinsics::trap();

        #[cfg(panic_abort)]
        libc::abort();

        #[cfg(all(not(panic_trap), not(panic_abort)))] {
            if mem::replace(&PANICKING, true) {
                // If we panic during a panic handler, nuclear abort.
                std::intrinsics::trap();
            }

            let panic_info = PanicInfo {
                file: file,
                line: line,
                column: column,
                args: args
            };

            if PANIC_HOOK.is_some() {
                let (state, callback) = PANIC_HOOK.unwrap();
                callback(state, &panic_info);
            }

            // Swallow errors from print_panic_message, because at this point, what can we do, panic?
            // We still bail early if it fails.
            let _ = print_panic_message(&panic_info);
            libc::abort();
        }
    }
}
