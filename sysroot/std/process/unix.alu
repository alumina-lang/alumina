use io::{Error, Result, Pipe};
use io::unix::errno_try;

/// Iterator over the environment variables.
///
/// See [std::process::env] for usage.
struct EnvIterator {
    ptr: &&libc::c_char
}

impl EnvIterator {
    use ffi::CString;
    use string::find_char;

    /// @ std::iter::Iterator::next
    fn next(self: &mut EnvIterator) -> Option<(&[u8], &[u8])> {
        loop {
            if *self.ptr == null {
                break Option::none();
            }

            let env_str = CString::from_raw(*self.ptr).as_slice();
            self.ptr += 1;

            if env_str.len == 0 {
                continue;
            }

            // Empty environment variable name is consider not valid, so allow
            // it to start with '='
            let sep = env_str[1..].find_char('=');
            if !sep.is_some {
                continue;
            }

            break Option::some((env_str[0..sep.inner + 1], env_str[sep.inner + 2..]));
        }
    }

    mixin iter::Iterator<EnvIterator, (&[u8], &[u8])>;
    mixin iter::IteratorExt<EnvIterator, (&[u8], &[u8])>;
}

/// Return environment variables of the current process.
fn env() -> EnvIterator {
    EnvIterator {
        ptr: unix::internal::environ
    }
}

/// Captured output of a child process.
struct Output {
    status: i32,
    stdout: string::StringBuf,
    stderr: string::StringBuf,
}

impl Output {
    /// @ mem::Movable::move
    fn move(self: &mut Output) -> Output {
        Output {
            status: self.status,
            stdout: self.stdout.move(),
            stderr: self.stderr.move()
        }
    }

    /// @ mem::Freeable::free
    fn free(self: &mut Output) {
        self.stdout.free();
        self.stderr.free();
    }
}

/// Child process
struct Child {
    pid: libc::pid_t,
    stdin: option::Option<io::FileDescriptor>,
    stdout: option::Option<io::FileDescriptor>,
    stderr: option::Option<io::FileDescriptor>,
}

impl Child {
    use string::StringBuf;

    /// Construct `Child` from a given process id.
    fn from_pid(pid: libc::pid_t) -> Child {
        Child {
            pid: pid,
            stdin: Option::none(),
            stdout: Option::none(),
            stderr: Option::none()
        }
    }

    /// Wait for child to exit, reading stdout and stderr if I/O redirection is requested.
    fn wait_with_output(self: &mut Child) -> Result<Output> {
        let stdin = self.stdin.move();
        if stdin.is_some {
            stdin.inner.close()?;
        }

        let stdout : StringBuf = StringBuf::new();
        defer stdout.free();

        let stderr : StringBuf = StringBuf::new();
        defer stderr.free();

        if self.stdout.is_some && self.stderr.is_some {
            internal::read_to_end_2(
                &self.stdout.inner,
                &stdout,
                &self.stderr.inner,
                &stderr
            )?;
        } else if self.stdout.is_some {
            self.stdout.inner.read_to_end(&stdout)?;
        } else if self.stderr.is_some {
            self.stderr.inner.read_to_end(&stderr)?;
        }

        // Close all the pipes if we were able to read them
        // to end. If any of the ?'s above bailed early,
        // we leave them open, as it may have been something
        // transient and a retry might succeed.
        self.close();

        let status: libc::c_int = 0;
        errno_try!(libc::waitpid(self.pid, &status, 0));

        let res = Output {
            status: status as i32,
            stdout: stdout.move(),
            stderr: stderr.move()
        };

        Result::ok(res)
    }

    /// Wait for child to exit, returning the exit status.
    fn wait(self: &mut Child) -> Result<i32> {
        let stdin = self.stdin.move();
        if stdin.is_some {
            stdin.inner.close()?;
        }

        let status: libc::c_int = 0;
        errno_try!(libc::waitpid(self.pid, &status, 0));

        Result::ok(status as i32)
    }

    /// Kill the child process.
    fn kill(self: &mut Child) -> Result<()> {
        errno_try!(libc::kill(self.pid, libc::SIGKILL));
        Result::ok(())
    }

    /// Close all pipes.
    fn close(self: &mut Child) -> Result<()> {
        let stdin = self.stdin.move();
        if stdin.is_some {
            stdin.inner.close()?;
        }

        let stdout = self.stdout.move();
        if stdout.is_some {
            stdout.inner.close()?;
        }

        let stderr = self.stderr.move();
        if stderr.is_some {
            stderr.inner.close()?;
        }

        Result::ok(())
    }
}

/// Builder for creating a forked process.
struct Forked {
    _stdin: Stdio,
    _stdout: Stdio,
    _stderr: Stdio
}

impl Forked {
    use internal::ChildStdio;

    fn new() -> Forked {
        Forked {
            _stdin: Stdio::Inherit,
            _stdout: Stdio::Inherit,
            _stderr: Stdio::Inherit
        }
    }

    /// Set the stdin redirection type
    fn stdin(self: &mut Forked, stdin: Stdio) -> &mut Forked {
        self._stdin = stdin;
        self
    }

    /// Set the stdout redirection type
    fn stdout(self: &mut Forked, stdout: Stdio) -> &mut Forked {
        self._stdout = stdout;
        self
    }

    /// Set the stderr redirection type
    fn stderr(self: &mut Forked, stderr: Stdio) -> &mut Forked {
        self._stderr = stderr;
        self
    }

    /// Fork the process.
    ///
    /// Returns Option::none() in the child and a `Child` value in the
    /// parent.
    fn spawn(self: &Forked) -> Result<Option<Child>> {
        let stdin = ChildStdio::new(true, self._stdin)?;
        defer stdin.close();

        let stdout = ChildStdio::new(false, self._stdout)?;
        defer stdout.close();

        let stderr = ChildStdio::new(false, self._stderr)?;
        defer stderr.close();

        let pid = errno_try!(std::libc::fork());
        if pid == 0 {
            // If we forked a child thread, we want the panic to
            // abort the whole process.
            std::panicking::internal::PANIC_HOOK = mem::zeroed();

            // If any of these fail, abort
            stdin.install(libc::STDIN_FILENO).unwrap();
            stdout.install(libc::STDOUT_FILENO).unwrap();
            stderr.install(libc::STDERR_FILENO).unwrap();

            // We have forked
            Result::ok(Option::none())
        } else {
            Result::ok(Option::some(Child {
                pid: pid,
                stdin: stdin.into_inner(),
                stdout: stdout.into_inner(),
                stderr: stderr.into_inner(),
            }))
        }
    }
}

/// Builder for creating a process.
///
/// ## Example
/// ```
/// use std::process::{Stdio, Command};
/// use std::string::trim;
/// use std::fs::Path;
///
/// let command = Command::new(Path::new("/usr/bin/uname"))
///     .stdout(Stdio::Piped)
///     .args(&["-s"]);
///
/// let output = command.spawn()
///     .unwrap()
///     .wait_with_output()
///     .unwrap();
/// defer output.free();
///
/// // Prints "Running on Linux"
/// println!("Running on {}", output.stdout.as_slice().trim());
/// ```
struct Command {
    _path: fs::Path,
    _args: &[&[u8]],
    _environ: Option<&[(&[u8], &[u8])]>,
    _stdin: Stdio,
    _stdout: Stdio,
    _stderr: Stdio
}

impl Command {
    use internal::ChildStdio;
    use ffi::CString;
    use fs::Path;
    use collections::{Vector, free_all};

    fn new(path: Path) -> Command {
        Command {
            _path: path,
            _args: mem::slice::empty(),
            _environ: Option::none(),
            _stdin: Stdio::Inherit,
            _stdout: Stdio::Inherit,
            _stderr: Stdio::Inherit
        }
    }

    /// Set command line arguments.
    fn args(self: &mut Command, args: &[&[u8]]) -> &mut Command {
        self._args = args;
        self
    }

    /// Set environment variables.
    fn env(self: &mut Command, environ: &[(&[u8], &[u8])]) -> &mut Command {
        self._environ = Option::some(environ);
        self
    }

    /// Set the stdin redirection type
    fn stdin(self: &mut Command, stdin: Stdio) -> &mut Command {
        self._stdin = stdin;
        self
    }

    /// Set the stdout redirection type
    fn stdout(self: &mut Command, stdout: Stdio) -> &mut Command {
        self._stdout = stdout;
        self
    }

    /// Set the stderr redirection type
    fn stderr(self: &mut Command, stderr: Stdio) -> &mut Command {
        self._stderr = stderr;
        self
    }

    /// Spawn a process.
    fn spawn(self: &Command) -> Result<Child> {
        let exec_params = internal::ExecParams::new(self);
        defer exec_params.free();

        let stdin = ChildStdio::new(true, self._stdin)?;
        defer stdin.close();

        let stdout = ChildStdio::new(false, self._stdout)?;
        defer stdout.close();

        let stderr = ChildStdio::new(false, self._stderr)?;
        defer stderr.close();

        let (fail_rx, fail_tx) = Pipe::anonymous()?;
        defer fail_rx.close();

        let pid = errno_try!(std::libc::fork());
        if pid == 0 {
            std::panicking::internal::PANIC_HOOK = mem::zeroed();

            stdin.install(libc::STDIN_FILENO).unwrap();
            stdout.install(libc::STDOUT_FILENO).unwrap();
            stderr.install(libc::STDERR_FILENO).unwrap();

            if !self._environ.is_some {
                libc::execv(exec_params.name(), exec_params.argv());
            } else {
                libc::execve(exec_params.name(), exec_params.argv(), exec_params.envp());
            }

            // If we are here, it means exec failed, send the error back to the
            // parrent over the pipe and exit
            let error = Error::from_errno();
            let msg = mem::slice::from_raw(&error as &u8, mem::size_of::<Error>());
            fail_tx.write_all(msg).unwrap();
            libc::_exit(1);
        } else {
            fail_tx.close().unwrap();

            let exec_err: Error;
            if fail_rx.read_exact(
                mem::slice::from_raw(&exec_err as &mut u8, mem::size_of::<Error>())
            ).is_ok {
                return Result::err(exec_err);
            }

            Result::ok(Child {
                pid: pid,
                stdin: stdin.into_inner(),
                stdout: stdout.into_inner(),
                stderr: stderr.into_inner(),
            })
        }
    }
}

mod internal {
    use io::{Readable, AsFileDescriptor};
    use fs::Path;
    use std::io::unix::{ErrorKind, errno_try};
    use string::StringBuf;

    extern "C" static environ: &&libc::c_char;

    fn maybe_read_to_end<S1: Readable<S1>>(src: &mut S1, dst: &mut StringBuf) -> Result<bool> {
        let maybe_n = src.read_to_end(dst);
        if maybe_n.is_ok {
            Result::ok(true)
        } else {
            let error = maybe_n.unwrap_err();
            let as_errno = error.as_errno();

            if as_errno == Option::some(libc::EWOULDBLOCK) ||
                as_errno == Option::some(libc::EAGAIN) {
                Result::ok(false)
            } else {
                Result::err(error)
            }
        }
    }

    /// Reads two pipes (or any other stream) into respecitve buffers at the same time.
    ///
    /// It uses [libc::poll] to make sure one pipe is not blocked by the other.
    fn read_to_end_2<
        S1: Readable<S1> + AsFileDescriptor<S1>,
        S2: Readable<S2> + AsFileDescriptor<S2>,
    >(
        src1: &mut S1,
        dst1: &mut StringBuf,
        src2: &mut S2,
        dst2: &mut StringBuf
    ) -> Result<()> {
        let s1 = src1.as_fd();
        let s2 = src2.as_fd();

        s1.set_nonblocking(true)?;
        s2.set_nonblocking(true)?;

        let fds: [libc::pollfd; 2] = mem::zeroed();
        fds[0].fd = s1.value;
        fds[0].events = libc::POLLIN;
        fds[1].fd = s2.value;
        fds[1].events = libc::POLLIN;

        loop {
            errno_try!(libc::poll(&fds[0], 2, -1));

            if fds[0].revents != 0 {
                if src1.maybe_read_to_end(dst1)? {
                    s2.set_nonblocking(false)?;
                    return src2.read_to_end(dst2).map(util::discard::<usize>);
                }
            }

            if fds[1].revents != 0 {
                if src2.maybe_read_to_end(dst2)? {
                    s1.set_nonblocking(false)?;
                    return src1.read_to_end(dst1).map(util::discard::<usize>);
                }
            }
        }
    }

    struct ChildStdio {
        ours: Option<io::FileDescriptor>,
        theirs: Option<io::FileDescriptor>
    }

    impl ChildStdio {
        fn new(is_stdin: bool, kind: Stdio) -> Result<ChildStdio> {
            let fds = switch kind {
                Stdio::Piped => {
                    let (rx, tx) = Pipe::anonymous()?;
                    if is_stdin {
                        (Option::some(tx.as_fd()), Option::some(rx.as_fd()))
                    } else {
                        (Option::some(rx.as_fd()), Option::some(tx.as_fd()))
                    }
                },
                Stdio::Inherit => {
                    (Option::none(), Option::none())
                },
                Stdio::Null => {
                    let dev_null = fs::File::open_with(
                        Path::new("/dev/null"),
                        fs::OpenOptions::new()
                            .read(is_stdin)
                            .write(!is_stdin)
                    )?;

                    (Option::none(), Option::some(dev_null.as_fd()))
                }
                _ => unreachable!()
            }

            let res = ChildStdio {
                ours: fds.0,
                theirs: fds.1
            };

            Result::ok(res)
        }

        fn close(self: &mut ChildStdio) -> Result<()> {
            if self.ours.is_some {
                self.ours.inner.close()?;
            }

            if self.theirs.is_some {
                self.theirs.inner.close()?;
            }

            Result::ok(())
        }

        fn install(self: &mut ChildStdio, fd: libc::c_int) -> Result<()> {
            use std::fs::{File, OpenOptions};
            if self.theirs.is_some {
                errno_try!(libc::dup2(self.theirs.inner.value, fd));
            }
            Result::ok(())
        }

        fn into_inner(self: &mut ChildStdio) -> Option<io::FileDescriptor> {
            self.ours.move()
        }
    }

    /// Holder for `execve` args converted to C-strings.
    ///
    /// Needs to be allocated before we fork as we should not call `malloc` after
    /// fork in multithreaded programs.
    struct ExecParams {
        _chars: collections::Vector<u8>,
        _ptrs: collections::Vector<&u8>,
        _argc: usize,
    }

    impl ExecParams {
        use collections::Vector;

        fn new(command: &Command) -> ExecParams {
            let storage: Vector<u8> = Vector::new();
            defer storage.free();
            let args_idxs: Vector<usize> = Vector::new();
            defer args_idxs.free();
            let env_idxs: Vector<usize> = Vector::new();
            defer env_idxs.free();

            args_idxs.push(0usize);
            storage.extend_from_slice(command._path.inner);
            storage.push('\0');
            for arg in command._args {
                args_idxs.push(storage.len());
                storage.extend_from_slice(arg);
                storage.push('\0');
            }

            if command._environ.is_some {
                for (key, value) in command._environ.inner {
                    env_idxs.push(storage.len());
                    storage.extend_from_slice(key);
                    storage.push('=');
                    storage.extend_from_slice(value);
                    storage.push('\0');
                }
            }

            let ptr = &storage.as_slice()[0];
            let ptrs: Vector<&u8> = args_idxs
                .iter()
                .map(|&ptr, idx: usize| -> &u8 { ptr + idx })
                .chain(&iter::once(null as &u8))
                .chain(&env_idxs
                    .iter()
                    .map(|&ptr, idx: usize| -> &u8 { ptr + idx })
                )
                .chain(&iter::once(null as &u8))
                .to_vector();

            ExecParams {
                _chars: storage.move(),
                _ptrs: ptrs,
                _argc: args_idxs.len(),
            }
        }

        fn name(self: &ExecParams) -> &libc::c_char {
            &self._chars.as_slice()[0] as &libc::c_char
        }

        fn argv(self: &ExecParams) -> &&libc::c_char {
            &self._ptrs.as_slice()[0] as &&libc::c_char
        }

        fn envp(self: &ExecParams) -> &&libc::c_char {
            &self._ptrs.as_slice()[self._argc + 1] as &&libc::c_char
        }

        fn free(self: &mut ExecParams) {
            self._chars.free();
            self._ptrs.free();
        }
    }
}


#[cfg(all(test, test_std))]
mod tests {
    use fs::Path;

    #[test]
    fn test_spawn_args() {
        let child = Command::new(Path::new("/bin/echo"))
            .args(&["Hello, World!"])
            .stdout(Stdio::Piped)
            .stderr(Stdio::Piped)
            .spawn()
            .unwrap();

        let output = child.wait_with_output().unwrap();
        defer output.free();

        assert_eq!(output.status, 0);
        assert_eq!(output.stdout.as_slice(), "Hello, World!\n");
        assert_eq!(output.stderr.as_slice(), &[]);
    }

    #[test]
    fn test_spawn_env() {
        let child = Command::new(Path::new("/usr/bin/env"))
            .env(&[
                ("HELLO", "world"),
                ("FOO", "bar")
            ])
            .stdout(Stdio::Piped)
            .stderr(Stdio::Piped)
            .spawn()
            .unwrap();

        let output = child.wait_with_output().unwrap();
        defer output.free();

        assert_eq!(output.status, 0);
        assert_eq!(output.stdout.as_slice(), "HELLO=world\nFOO=bar\n");
        assert_eq!(output.stderr.as_slice(), &[]);
    }

    #[test]
    fn spawn_fails_on_exec_failure() {
        let child = Command::new(Path::new("some nonexistent program hopefully"))
            //.stdout(Stdio::Piped)
            //.stderr(Stdio::Piped)
            .spawn();

        assert!(!child.is_ok);
        assert_eq!(child.unwrap_err().inner.errno, libc::ENOENT);
    }

    #[cfg(any(target_os = "linux"))]
    #[test]
    fn test_kill() {
        let child = Command::new(Path::new("/bin/sleep"))
            .args(&["10000"])
            .spawn()
            .unwrap();

        child.kill().unwrap();

        let status = child.wait().unwrap();
        assert_eq!(status, libc::SIGKILL);
    }


    #[test]
    fn test_fork() {
        let child = Forked::new()
            .stdout(Stdio::Piped)
            .stderr(Stdio::Piped)
            .spawn()
            .unwrap();

        if !child.is_some {
            print!("Hello");
            eprint!("World");
            exit(123);
        } else {
            let output = child.inner.wait_with_output().unwrap();
            defer output.free();

            assert_eq!((output.status & 0xff00) >> 8, 123);
            assert_eq!(output.stdout.as_slice(), "Hello");
            assert_eq!(output.stderr.as_slice(), "World");
        }
    }

    #[test]
    fn test_fork_starvation() {
        use fmt::repeat;

        let child = Forked::new()
            .stdout(Stdio::Piped)
            .stderr(Stdio::Piped)
            .spawn()
            .unwrap();

        if !child.is_some {
            // Write to both pipes and fill up the buffer. Naive implementation would
            // block on write eventually when the pipe capacity is reached. But our's
            // don't!
            for i in 0..1024 {
                print!("{}", "A".repeat(1024));
                eprint!("{}", "B".repeat(1024));
            }
            exit(123);
        } else {
            let output = child.inner.wait_with_output().unwrap();
            defer output.free();

            assert_eq!((output.status & 0xff00) >> 8, 123);
            assert_eq!(output.stdout.len(), 1024 * 1024);
            assert_eq!(output.stderr.len(), 1024 * 1024);
        }
    }
}
