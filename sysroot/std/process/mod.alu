//! A module for working with processes.

#[cfg(any(target_os="linux", target_os="macos", target_os="android"))]
{
    use unix::{
        ExitStatus, Command, Forked, Output, Child, EnvVars, env,
        current_dir, set_current_dir
    };
}

/// Exits the process with a given return code.
///
/// This is a graceful exit (`atexit` handlers will run). For an immediate abort,
/// see `libc::_exit` or `libc::abort`.
///
/// ## Examples
/// ```
/// use std::process::exit;
///
/// exit(0); // Exit with success
/// ```
/// ```no_run
/// use std::process::exit;
///
/// exit(1); // Exit with error
/// ```
fn exit(code: i32) -> ! {
    libc::exit(code as libc::c_int)
}

/// Standard I/O stream redirection type
enum Stdio {
    /// A new pipe should be arranged to connect the parent and child processes.
    Piped,
    /// Null stream
    ///
    /// When used on the input stream, the child will receive an end of file
    /// immediately. When used on the output or error stream, the output will be
    /// discarded.
    Null,
    /// This stream should be inherited from the parent.
    Inherit,
}
