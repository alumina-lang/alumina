//! FFI bindings to the standard C math library.

extern "C" fn acos(x: f64) -> f64;
extern "C" fn acosf(x: f32) -> f32;
extern "C" fn acosh(x: f64) -> f64;
extern "C" fn acoshf(x: f32) -> f32;
extern "C" fn asin(x: f64) -> f64;
extern "C" fn asinf(x: f32) -> f32;
extern "C" fn asinh(x: f64) -> f64;
extern "C" fn asinhf(x: f32) -> f32;
extern "C" fn atan(x: f64) -> f64;
extern "C" fn atan2(y: f64, x: f64) -> f64;
extern "C" fn atan2f(y: f32, x: f32) -> f32;
extern "C" fn atanf(x: f32) -> f32;
extern "C" fn atanh(x: f64) -> f64;
extern "C" fn atanhf(x: f32) -> f32;
extern "C" fn cbrt(x: f64) -> f64;
extern "C" fn cbrtf(x: f32) -> f32;
extern "C" fn ceil(x: f64) -> f64;
extern "C" fn ceilf(x: f32) -> f32;
extern "C" fn copysign(x: f64, y: f64) -> f64;
extern "C" fn copysignf(x: f32, y: f32) -> f32;
extern "C" fn cos(x: f64) -> f64;
extern "C" fn cosf(x: f32) -> f32;
extern "C" fn cosh(x: f64) -> f64;
extern "C" fn coshf(x: f32) -> f32;
extern "C" fn erf(x: f64) -> f64;
extern "C" fn erfc(x: f64) -> f64;
extern "C" fn erff(x: f32) -> f32;
extern "C" fn erfcf(x: f32) -> f32;
extern "C" fn exp(x: f64) -> f64;
extern "C" fn expf(x: f32) -> f32;
extern "C" fn expm1(x: f64) -> f64;
extern "C" fn expm1f(x: f32) -> f32;
extern "C" fn fabs(x: f64) -> f64;
extern "C" fn fabsf(x: f32) -> f32;
extern "C" fn fdim(x: f64, y: f64) -> f64;
extern "C" fn fdimf(x: f32, y: f32) -> f32;
extern "C" fn floor(x: f64) -> f64;
extern "C" fn floorf(x: f32) -> f32;
extern "C" fn fma(x: f64, y: f64, z: f64) -> f64;
extern "C" fn fmaf(x: f32, y: f32, z: f32) -> f32;
extern "C" fn fmax(x: f64, y: f64) -> f64;
extern "C" fn fmaxf(x: f32, y: f32) -> f32;
extern "C" fn fmin(x: f64, y: f64) -> f64;
extern "C" fn fminf(x: f32, y: f32) -> f32;
extern "C" fn fmod(x: f64, y: f64) -> f64;
extern "C" fn fmodf(x: f32, y: f32) -> f32;
extern "C" fn frexp(x: f64, exp: &mut i32) -> f64;
extern "C" fn frexpf(x: f32, exp: &mut i32) -> f32;
extern "C" fn hypot(x: f64, y: f64) -> f64;
extern "C" fn hypotf(x: f32, y: f32) -> f32;
extern "C" fn ilogb(x: f64) -> i32;
extern "C" fn ilogbf(x: f32) -> i32;
extern "C" fn ldexp(x: f64, n: i32) -> f64;
extern "C" fn ldexpf(x: f32, n: i32) -> f32;
extern "C" fn lgamma(x: f64) -> f64;
extern "C" fn lgammaf(x: f32) -> f32;
extern "C" fn log(x: f64) -> f64;
extern "C" fn log10(x: f64) -> f64;
extern "C" fn log10f(x: f32) -> f32;
extern "C" fn log1p(x: f64) -> f64;
extern "C" fn log1pf(x: f32) -> f32;
extern "C" fn log2(x: f64) -> f64;
extern "C" fn log2f(x: f32) -> f32;
extern "C" fn logf(x: f32) -> f32;
extern "C" fn modf(x: f64, iptr: &mut f64) -> f64;
extern "C" fn modff(x: f32, iptr: &mut f32) -> f32;
extern "C" fn nextafter(x: f64, y: f64) -> f64;
extern "C" fn nextafterf(x: f32, y: f32) -> f32;
extern "C" fn pow(x: f64, y: f64) -> f64;
extern "C" fn powf(x: f32, y: f32) -> f32;
extern "C" fn remainder(x: f64, y: f64) -> f64;
extern "C" fn remainderf(x: f32, y: f32) -> f32;
extern "C" fn remquo(x: f64, y: f64, quo: &mut i32) -> f64;
extern "C" fn remquof(x: f32, y: f32, quo: &mut i32) -> f32;
extern "C" fn round(x: f64) -> f64;
extern "C" fn roundf(x: f32) -> f32;
extern "C" fn scalbn(x: f64, n: i32) -> f64;
extern "C" fn scalbnf(x: f32, n: i32) -> f32;
extern "C" fn sin(x: f64) -> f64;
extern "C" fn sinf(x: f32) -> f32;
extern "C" fn sinh(x: f64) -> f64;
extern "C" fn sinhf(x: f32) -> f32;
extern "C" fn sqrt(x: f64) -> f64;
extern "C" fn sqrtf(x: f32) -> f32;
extern "C" fn tan(x: f64) -> f64;
extern "C" fn tanf(x: f32) -> f32;
extern "C" fn tanh(x: f64) -> f64;
extern "C" fn tanhf(x: f32) -> f32;
extern "C" fn tgamma(x: f64) -> f64;
extern "C" fn tgammaf(x: f32) -> f32;
extern "C" fn trunc(x: f64) -> f64;
extern "C" fn truncf(x: f32) -> f32;


#[cfg(all(test, test_std))]
mod tests {
    #[test]
    fn test_libm_fns() {
        // This test does not test much, it's more so to assert that appropriate libm functions are present
        // and can be linked in.

        let v_f32: f32 = 2.7182;
        let v_f64: f64 = 2.7182;

        acos(v_f64);
        acosf(v_f32);
        acosh(v_f64);
        acoshf(v_f32);
        asin(v_f64);
        asinf(v_f32);
        asinh(v_f64);
        asinhf(v_f32);
        atan(v_f64);
        atanf(v_f32);
        atanh(v_f64);
        atanhf(v_f32);
        cbrt(v_f64);
        cbrtf(v_f32);
        ceil(v_f64);
        ceilf(v_f32);
        cos(v_f64);
        cosf(v_f32);
        cosh(v_f64);
        coshf(v_f32);
        erf(v_f64);
        erfc(v_f64);
        erff(v_f32);
        erfcf(v_f32);
        exp(v_f64);
        expf(v_f32);
        expm1(v_f64);
        expm1f(v_f32);
        fabs(v_f64);
        fabsf(v_f32);
        floor(v_f64);
        floorf(v_f32);
        sin(v_f64);
        sinf(v_f32);
        sinh(v_f64);
        sinhf(v_f32);
        sqrt(v_f64);
        sqrtf(v_f32);
        tan(v_f64);
        tanf(v_f32);
        tanh(v_f64);
        tanhf(v_f32);
        tgamma(v_f64);
        tgammaf(v_f32);
        trunc(v_f64);
        truncf(v_f32);
        log(v_f64);
        log10(v_f64);
        log10f(v_f32);
        log1p(v_f64);
        log1pf(v_f32);
        log2(v_f64);
        log2f(v_f32);
        logf(v_f32);
        round(v_f64);
        roundf(v_f32);
        ilogb(v_f64);
        ilogbf(v_f32);
        lgamma(v_f64);
        lgammaf(v_f32);

        let u_f32: f32 = 3.7182;
        let u_f64: f64 = 3.7182;

        atan2(u_f64, v_f64);
        atan2f(u_f32, v_f32);
        copysign(v_f64, u_f64);
        copysignf(v_f32, u_f32);
        fdim(v_f64, u_f64);
        fdimf(v_f32, u_f32);
        fmax(v_f64, u_f64);
        fmaxf(v_f32, u_f32);
        fmin(v_f64, u_f64);
        fminf(v_f32, u_f32);
        fmod(v_f64, u_f64);
        fmodf(v_f32, u_f32);
        hypot(v_f64, u_f64);
        hypotf(v_f32, u_f32);

        nextafter(v_f64, u_f64);
        nextafterf(v_f32, u_f32);
        pow(v_f64, u_f64);
        powf(v_f32, u_f32);
        remainder(v_f64, u_f64);
        remainderf(v_f32, u_f32);

        let w_f32: f32 = 4.7182;
        let w_f64: f64 = 4.7182;
        fma(v_f64, u_f64, w_f64);
        fmaf(v_f32, u_f32, w_f32);

        let v_i32 = 2;
        ldexp(v_f64, v_i32);
        ldexpf(v_f32, v_i32);
        scalbn(v_f64, v_i32);
        scalbnf(v_f32, v_i32);

        let out_i32: i32;
        frexp(v_f64, &out_i32);
        frexpf(v_f32, &out_i32);

        remquo(v_f64, u_f64, &out_i32);
        remquof(v_f32, u_f32, &out_i32);

        let out_f32: f32;
        let out_f64: f64;

        modf(v_f64, &out_f64);
        modff(v_f32, &out_f32);
    }
}
