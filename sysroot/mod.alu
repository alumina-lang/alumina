//! #! Alumina programming language
//!
//! Welcome to the Alumina programming language! Alumina is an imperative, general-purpose,
//! statically typed, compiled system programming language. It is heavily inspired by Rust, but
//! it keeps C-style manual memory management and memory unsafety.
//!
//! ```bare
//! fn main() {
//!     println!("Hello, world!");
//! }
//! ```
//!
//! See [Alumina GitHub page](https://github.com/alumina-lang/alumina), the
//! [language guide](https://github.com/alumina-lang/alumina/blob/master/docs/lang_guide.md) and
//! [the online compiler playground](https://play.alumina-lang.net) to get started with Alumina.
//!
//! # Standard library structure
//! This is the root module (`::`) of the standard library, all the code contained in its submodules
//! modules is always available to programs and libraries written in Alumina. It consists of
//! [std], which is the bulk of the library and a couple of auxillary modules, such as [libc] for
//! bindings to the C standard library and [test] for the built-in unit test runner.
//!
//! # About the documentation
//! The documentation is automatically generated from the comments in the source code using
//! the [alumina-doc tool](https://github.com/alumina-lang/alumina/tree/master/tools/alumina-doc).
//!
//! Contributions to the documentation are most welcome! Fork
//! [the repository](https://github.com/alumina-lang/alumina) and submit a pull request. CI will
//! ensure that the documentation is built and all examples compile (and optionally run) successfully.

#[cfg(not(no_prelude))]
use std::prelude::*;
