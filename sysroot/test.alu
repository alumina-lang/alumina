//! Unit testing mini-framework.
//!
//! When `--cfg test` is provided as an argument to the compiler, this module will override
//! the `main` entrypoint with the test runner which will run all the test cases defined in 
//! the code that is being compiled.
//!
//! Nothing prevents you from writing your own framework, just compile with 
//! `--cfg custom_test_framework` and use the test support glue in [std::runtime] to get the test
//! cases.

#[cfg(all(test, not(custom_test_framework))] 
{
    use std::io::{StringWriter, copy, Error};
    use std::process::{Command, Stdio, Forked};
    use std::collections::{Vector, free_all, sort_by};
    use std::string::StringBuf;
    use std::runtime::internal::{TEST_CASES, TestCaseMeta};
    use std::time::{Instant, Duration};

    /// Holder for the results of a test case.
    struct TestResult {
        test: TestCaseMeta,
        duration: Duration,
        success: bool,
        stdout: StringBuf,
        stderr: StringBuf,
        status: i32
    }

    impl TestResult {
        fn free(self: &mut TestResult) {
            self.stdout.free();
            self.stderr.free();
        }
    }

    /// Whether a failure (non-0 exit code) is expected for this test.
    fn should_fail(test: &TestCaseMeta) -> bool {
        for attr in test.attributes {
            if attr == "(should_fail)" {
                return true;
            }
        }
        return false;
    }

    /// Whether a test should be ignored.
    fn ignored(test: &TestCaseMeta) -> bool {
        for attr in test.attributes {
            if attr == "(ignore)" {
                return true;
            }
        }
        return false;
    }

    /// Run a single test case in a forked process and collect output. 
    fn run(test: &TestCaseMeta) -> TestResult {
        let should_fail = test.should_fail();
        let start_time = Instant::now();
        let child = Forked::new()
            .stdin(Stdio::Null)
            .stdout(Stdio::Piped)
            .stderr(Stdio::Piped)
            .spawn()
            .unwrap();
    
        if !child.is_some {
            test.test();
            if should_fail {
                eprintln!("note: test function completed successfully")
            }
            process::exit(0);
        }

        let child = child.unwrap();
        let output = child.wait_with_output().unwrap();
        let end_time = Instant::now();

        defer output.free();

        TestResult {
            test: *test,
            duration: end_time.duration_since(&start_time),
            success: should_fail ^ (output.status == 0),
            stdout: output.stdout.move(),
            stderr: output.stderr.move(),
            status: output.status
        }
    }

    struct Args {
        prefix: Option<&[u8]>,
        filter: Option<&[u8]>,
        timings: bool,
    }

    impl Args {
        fn default() -> Args {
            Args {
                prefix: Option::none(),
                filter: Option::none(),
                timings: false
            }
        }
    }
    
    enum State {
        Normal, 
        Prefix,
        Filter
    }

    fn print_help_string(args: &[&[u8]]) -> ! {
        eprintln!("usage: {} [--prefix <PREFIX>] [--filter <FILTER>] [--timings]", args[0]);
        process::exit(1);
    }

    /// Parse command line arguments.
    fn parse_args(args: &[&[u8]]) -> Args {
        let state = State::Normal;
        let res = Args::default();

        if args.len == 0 {
            return res;
        }

        for arg in args[1..] {
            state = switch state {
                State::Normal => switch arg {
                    "--prefix", "-p" => State::Prefix,
                    "--filter", "-f" => State::Filter,
                    "--timings" => {
                        res.timings = true;
                        State::Normal
                    },
                    _ => print_help_string(args)
                },
                State::Prefix => {
                    res.prefix = Option::some(arg);
                    State::Normal
                },
                State::Filter => {
                    res.filter = Option::some(arg);
                    State::Normal
                },
                _ => unreachable!()
            };
        }

        if state != State::Normal {
            print_help_string(args);
        }

        res
    }

    /// Filter tests based on user-provided criteria (e.g. path prefix).
    fn filter_tests(args: Args) -> (Vector<TestCaseMeta>, usize) {
        use string::{starts_with, contains};

        let test_cases: Vector<TestCaseMeta> = Vector::new();
        defer test_cases.free();

        for test in TEST_CASES {
            if args.prefix.is_some && !test.path[2..].starts_with(args.prefix.inner) {
                continue
            }

            if args.filter.is_some && !test.name.contains(args.filter.inner) {
                continue
            }

            test_cases.push(test);
        }

        test_cases
            .as_slice_mut()
            .sort_by(|m: &TestCaseMeta| -> (&[u8], &[u8]) { 
                (m.path, m.name) 
            });

        let filtered_count = TEST_CASES.len - test_cases.len();

        (test_cases.move(), filtered_count)
    }

    #[test_main]
    fn main(args: &[&[u8]]) -> i32 {
        let args = parse_args(args);
        let start_time = Instant::now();
        
        let results: Vector<TestResult> = Vector::new();
        defer results.free_all();

        let num_failed = 0;
        let num_passed = 0;
        let num_ignored = 0;

        let (test_cases, filtered_count) = filter_tests(args);
        defer test_cases.free();

        eprintln!("running {} tests ({} filtered out)", test_cases.len(), filtered_count);
        for test in test_cases {
            eprint!("test {}::{} ... ", test.path[2..], test.name);
            if test.ignored() {
                eprintln!("\x1b[0;33mignored\x1b[0m.");
                num_ignored += 1;
                continue;
            }
            let result = test.run();
            results.push(result);

            let message = if result.success {
                num_passed += 1;
                "\x1b[0;32mok\x1b[0m"
            } else {
                num_failed += 1;
                "\x1b[0;31mFAILED\x1b[0m"
            };

            if args.timings {
                eprintln!("{} [{}].", message, result.duration);
            } else {
                eprintln!("{}.", message);
            }
        }

        let end_time = Instant::now();
        let elapsed = end_time.duration_since(&start_time);

        if num_failed > 0 {
            eprintln!("");
            eprintln!("failures:");
            eprintln!("");
            for result in results {
                if !result.success {
                    if result.status != 0 {
                        eprintln!("{}::{} exited with status: {}", result.test.path[2..], result.test.name, result.status);
                        eprintln!("");
                    }
                    if result.stdout.len() > 0 {
                        eprintln!("---- {}::{} stdout ----", result.test.path[2..], result.test.name);
                        eprintln!("{}", result.stdout.as_slice());
                        eprintln!("");
                    }
                    if result.stderr.len() > 0 {
                        eprintln!("---- {}::{} stderr ----", result.test.path[2..], result.test.name);
                        eprintln!("{}", result.stderr.as_slice());
                        eprintln!("");
                    }
                }
            }
            eprintln!("test result: \x1b[0;31mFAILED\x1b[0m. {} passed; {} failed; {} ignored; finished in {}", 
                num_passed, 
                num_failed, 
                num_ignored,
                elapsed
            );
            1
        } else {
            eprintln!("");
            eprintln!("test result: \x1b[0;32mok\x1b[0m. {} passed; {} failed; {} ignored; finished in {}", 
                num_passed, 
                num_failed, 
                num_ignored, 
                elapsed
            );
            0
        }
    }
    
    /// Quis testabitur ipsos testes
    #[cfg(test_std)] {
        #[test]
        fn regular_test() {
        }
        
        #[test(ignore)]
        fn ignored_test() {}
        
        #[test(should_fail)]
        fn should_fail_test() {
            panic!("oops")
        }
    }
}
