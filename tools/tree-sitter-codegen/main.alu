//! This tool generates strongly-typed Tree-Sitter node types for the self-hosting compiler
//! (to avoid matching by string) and visitor protocols.

use std::collections::{Vector, HashMap, HashSet};
use tree_sitter::{TSLanguage, TSSymbolType, TSSymbol, Parser};
use std::fmt::{writeln, Formatter};
use std::fs::{PathBuf, Path, FileAttr, PathSegmentKind, File};
use std::io::{StdioStream, Writable, BufferedWriter, DEFAULT_BUFFER_SIZE, Result};

extern "C" fn tree_sitter_alumina() -> &TSLanguage;

struct SanitizedIdentifier {
    inner: &[u8],
    pascal_case: bool
}

impl SanitizedIdentifier {
    fn default(identifier: &[u8]) -> SanitizedIdentifier {
        SanitizedIdentifier {
            inner: identifier,
            pascal_case: false
        }
    }

    fn pascal(identifier: &[u8]) -> SanitizedIdentifier {
        SanitizedIdentifier {
            inner: identifier,
            pascal_case: true
        }
    }

    fn fmt<F: Formatter<F>>(self: &SanitizedIdentifier, f: &mut F) -> std::fmt::Result {
        let first_char = true;

        for ch in self.inner {
            if (ch >= 'a' && ch <= 'z') ||
                (ch >= 'A' && ch <= 'Z') ||
                (ch >= '0' && ch <= '9') || ch == '_' {
                    // Convert to PascalCase
                    if self.pascal_case {
                        if ch >= 'a' && ch <= 'z' {
                            if first_char {
                                ch += 'A' - 'a';
                                first_char = false;
                            }
                        } else {
                            first_char = true;
                        }
                        if ch != '_' {
                            f.write_byte(ch)?;
                        }
                    } else {
                        f.write_byte(ch)?;
                    }
                    continue;
            }
            let replacement = switch ch {
                '~' => "TILDE",
                '`' => "BQUOTE",
                '!' => "BANG",
                '@' => "AT",
                '#' => "POUND",
                '$' => "DOLLAR",
                '%' => "PERCENT",
                '^' => "CARET",
                '&' => "AMP",
                '*' => "STAR",
                '(' => "LPAREN",
                ')' => "RPAREN",
                '-' => "DASH",
                '+' => "PLUS",
                '=' => "EQ",
                '{' => "LBRACE",
                '}' => "RBRACE",
                '[' => "LBRACK",
                ']' => "RBRACK",
                '\\' => "BSLASH",
                '|' => "PIPE",
                ':' => "COLON",
                ';' => "SEMI",
                '\"' => "DQUOTE",
                '\'' => "SQUOTE",
                '<' => "LT",
                '>' => "GT",
                ',' => "COMMA",
                '.' => "DOT",
                '?' => "QMARK",
                '/' => "SLASH",
                '\n' => "LF",
                '\r' => "CR",
                '\t' => "TAB",
                _ => continue
            };

            f.write_str(replacement)?;
        }

        Result::ok(())
    }
}

fn generate(output_filename: Option<Path>) -> Result<()> {
    let stream: &mut dyn Writable<Self> = if output_filename.is_some() {
        let file = File::create(output_filename.unwrap())?;
        defer file.close();

        &file
    } else {
        &StdioStream::stdout()
    };

    let buffered = BufferedWriter::new(&stream, DEFAULT_BUFFER_SIZE);
    defer buffered.free();

    fn to_io_err(_x: std::fmt::Error) -> std::io::Error {
        std::io::Error::custom("cannot write to file")
    }
    macro wln($args...) {
        writeln!(&buffered, $args$...).map_err(to_io_err)
    }

    let language = tree_sitter_alumina();
    let unique_symbol_names : HashSet<&[u8]> = HashSet::new();

    let max_symbol_id = 0 as TSSymbol;
    for symbol in language.symbols() {
        if language.symbol_type(symbol) != TSSymbolType::Regular {
            continue;
        }
        let name = language.symbol_name(symbol);
        unique_symbol_names.insert(name);
        max_symbol_id = std::cmp::max(max_symbol_id, symbol);
    }
    wln!("// @generated")?;
    wln!("")?;
    wln!("use std::collections::HashMap;")?;
    wln!("use tree_sitter::{{TSSymbol, Node}};")?;
    wln!("")?;
    wln!("enum NodeKind {{")?;
    wln!("    Invalid,")?;
    for name in unique_symbol_names {
        wln!("    {},", SanitizedIdentifier::pascal(name))?;
    }
    wln!("}}")?;
    wln!("")?;
    wln!("enum FieldKind {{")?;
    for field in language.fields() {
        let name = language.field_name(field);
        wln!("    {} = {}u16,", SanitizedIdentifier::pascal(name), field)?;
    }
    wln!("}}")?;
    wln!("")?;
    wln!("const NODE_KINDS: [NodeKind; {}] = [", language.symbols().size_hint().unwrap() + 1)?;
    for symbol in (0 as TSSymbol)..(max_symbol_id + 1) {
        if symbol == 0 || language.symbol_type(symbol) != TSSymbolType::Regular {
            wln!("    NodeKind::Invalid,")?;
            continue;
        }

        let name = language.symbol_name(symbol);
        wln!("    NodeKind::{},", SanitizedIdentifier::pascal(name))?;
    }
    wln!("];")?;
    wln!("protocol NodeVisitor<Self, ReturnType> {{")?;
    for name in unique_symbol_names {
        wln!("    fn visit_{}(self: &mut Self, _node: Node) -> ReturnType {{", SanitizedIdentifier::default(name))?;
        wln!("        panic!(\"unimplemented: visit_{}\");", SanitizedIdentifier::default(name))?;
        wln!("    }}")?;
    }

    wln!("    fn visit_unknown(self: &mut Self, _node: Node) -> ReturnType {{")?;
    wln!("        panic!(\"unimplemented: visit unknown\");")?;
    wln!("    }}")?;

    wln!("    fn visit(self: &mut Self, node: Node) -> ReturnType {{")?;
    wln!("        switch NODE_KINDS[node.symbol() as usize] {{")?;
    for name in unique_symbol_names {
        wln!("            NodeKind::{} => self.visit_{}(node),",
            SanitizedIdentifier::pascal(name),
            SanitizedIdentifier::default(name)
        )?;
    }
    wln!("            _ => self.visit_unknown(node),")?;
    wln!("        }}")?;
    wln!("    }}")?;
    wln!("}}")?;

    buffered.flush()?;

    Result::ok(())
}

fn main(args: &[&[u8]]) -> i32 {
    macro usage() {
        eprintln!("Usage: {} [-o <FILENAME>]", args[0]);
        process::exit(1)
    }

    enum State {
        Normal,
        Output,
    }

    let output_filename: Option<Path> = Option::none();

    let state = State::Normal;
    for arg in args.iter().skip(1) {
        state = switch state {
            State::Normal => switch arg {
                "-o", "--output" => State::Output,
                _ => usage!(),
            },
            State::Output => {
                output_filename = Option::some(Path::new(arg));
                State::Normal
            }
            _ => unreachable!()
        }
    }

    if state != State::Normal {
        usage!()
    }

    let ret = generate(output_filename);
    if ret.is_err() {
        eprintln!("error: {}", ret.unwrap_err());
        1
    } else {
        0
    }
}

