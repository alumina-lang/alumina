//! Markdown-ish renderer.

use std::string::{split, StringBuf, starts_with, trim_prefix, trim_start, trim};
use std::fmt::{Formatter, Formattable, Result, write, writeln, Error};
use alumina_doc::common::{LinkContext, Path, DoctestWriter};

enum State {
    Normal,
    MaybeItalic,
    Italic,
    BoldEnd,
    Bold,
    Code,
    LinkTitle,
    LinkUrlStart,
    LinkUrl,
}

struct InlineMarkdownState {
    kind: State,
    link_text: StringBuf,
    link_url: StringBuf,
}

impl InlineMarkdownState {
    fn default() -> InlineMarkdownState {
        InlineMarkdownState {
            kind: State::Normal,
            link_text: StringBuf::new(),
            link_url: StringBuf::new()
        }
    }

    fn reset(self: &mut InlineMarkdownState) -> ::Result<(), Error> {
        if self.kind != State::Normal {
            return Result::err(Error::new())
        }
        self.free();
        *self = InlineMarkdownState::default();
        Result::ok(())
    }

    fn move(self: &mut InlineMarkdownState) -> InlineMarkdownState {
        InlineMarkdownState {
            kind: self.kind,
            link_text: self.link_text.move(),
            link_url: self.link_url.move()
        }
    }

    fn free(self: &mut InlineMarkdownState) {
        self.link_text.free();
        self.link_url.free();
    }
}

/// A very tiny subset of Markdown is supported, just inline code, bold, italic and links
/// without nesting.
struct InlineMarkdown {
    inner: &[u8],
    state: &mut InlineMarkdownState,
    link_context: &LinkContext,
}

impl InlineMarkdown {
    fn new(inner: &[u8], state: &mut InlineMarkdownState, link_context: &LinkContext) -> InlineMarkdown {
        InlineMarkdown {
            inner: inner,
            state: state,
            link_context: link_context,
        }
    }

    fn write_link<F: Formatter<F>>(self: &InlineMarkdown, f: &mut F) -> Result {
        let (text, link, class) = if self.state.link_url.is_empty() {
            (
                self.state.link_text.as_slice().split("::").last().unwrap(),
                self.state.link_text.as_slice(),
                "path-link"
            )
        } else {
            (self.state.link_text.as_slice(), self.state.link_url.as_slice(), "")
        };

        let link = if link.starts_with("http") {
            link
        } else {
            let path = Path::from_str(link);
            defer path.free();
            let link = self.link_context.resolve_link(&path).unwrap();
            defer link.free();

            link.as_slice()
        }

        write!(f,
            "<a class=\"{}\" href=\"{}\">{}</a>",
            class,
            link,
            HtmlEscaped::str(text)
        )?;

        self.state.link_url.clear();
        self.state.link_text.clear();

        Result::ok(())
    }

    fn fmt<F: Formatter<F>>(self: &InlineMarkdown, f: &mut F) -> Result {
        use std::fmt::write;

        for ch in self.inner {
            switch self.state.kind {
                State::Normal => switch ch {
                    '*' => self.state.kind = State::MaybeItalic,
                    '`' => {
                        write!(f, "<code>")?;
                        self.state.kind = State::Code;
                    },
                    '[' => self.state.kind = State::LinkTitle,
                    _ => write!(f, "{}", HtmlEscaped::char(&ch))?,
                },
                State::MaybeItalic => switch ch {
                    '*' => {
                        self.state.kind = State::Bold;
                        write!(f, "<b>")?;
                    }
                    _ => {
                        self.state.kind = State::Italic;
                        write!(f, "<i>")?;
                        write!(f, "{}", HtmlEscaped::char(&ch))?;
                    }
                },
                State::Italic => switch ch {
                    '*' => {
                        write!(f, "</i>")?;
                        self.state.kind = State::Normal;
                    },
                    _ => write!(f, "{}", HtmlEscaped::char(&ch))?,
                },
                State::Bold => switch ch {
                    '*' => {
                        write!(f, "</b>")?;
                        self.state.kind = State::BoldEnd;
                    },
                    _ => write!(f, "{}", HtmlEscaped::char(&ch))?,
                },
                State::BoldEnd => switch ch {
                    '*' => {
                        self.state.kind = State::Normal;
                    },
                    _ => return Result::err(Error::new())
                },
                State::Code => switch ch {
                    '`' => {
                        write!(f, "</code>")?;
                        self.state.kind = State::Normal;
                    },
                    _ => write!(f, "{}", HtmlEscaped::char(&ch))?,
                },
                State::LinkTitle => switch ch {
                    ']' => self.state.kind = State::LinkUrlStart,
                    _ => self.state.link_text.push(ch),
                },
                State::LinkUrlStart => switch ch {
                    '(' => self.state.kind = State::LinkUrl,
                    _ => {
                        self.write_link(f)?;
                        write!(f, "{}", HtmlEscaped::char(&ch))?;
                        self.state.kind = State::Normal;
                    },
                },
                State::LinkUrl => switch ch {
                    ')' => {
                        self.write_link(f)?;
                        self.state.kind = State::Normal;
                    },
                    _ => self.state.link_url.push(ch),
                },
            }
        }

        Result::ok(())
    }
}

struct HtmlEscaped {
    inner: &[u8]
}

impl HtmlEscaped {
    fn str(inner: &[u8]) -> HtmlEscaped {
        HtmlEscaped { inner: inner }
    }

    fn char(inner: &u8) -> HtmlEscaped {
        HtmlEscaped { inner: std::mem::slice::from_raw(inner, 1) }
    }

    fn fmt<F: Formatter<F>>(self: &HtmlEscaped, f: &mut F) -> Result {
        for ch in self.inner {
            switch ch {
                '&' => f.write_str("&amp;")?,
                '<' => f.write_str("&lt;")?,
                '>' => f.write_str("&gt;")?,
                _ => f.write_char(ch)?
            }
        }

        Result::ok(())
    }
}


/// A hacky mini-markdown subset parser
fn write_docstring<T: std::io::Writable<T>>(
    writer: &mut T,
    doc_comment: &[u8],
    tagline_only: bool,
    link_context: &LinkContext,
    doctest_item: &common::Item,
    doctest_writer: &mut DoctestWriter
) -> Result {
    if doc_comment.len() == 0 {
        return Result::ok(());
    }

    // Redirects
    if doc_comment.starts_with("/// @") {
        let path = Path::from_str(doc_comment.trim_prefix("/// @").trim());
        defer path.free();

        let item = link_context.item_bag.resolve(link_context.path, &path, true).unwrap();
        let link_context = LinkContext::new(link_context.item_bag, &item.defined_in);

        return write_docstring(
            writer,
            item.doc_comment.as_slice(),
            tagline_only,
            &link_context,
            null, // Redirects should not have additional doctests
            doctest_writer
        );
    }

    if !tagline_only {
        writeln!(writer, "<p>");
    }

    let in_a_code_block = false;
    let no_doctest = false;
    let no_doctest_run = false;
    let bare = false;
    let md_state = InlineMarkdownState::default();
    defer md_state.free();

    let doctest_source: StringBuf = StringBuf::new();
    defer doctest_source.free();

    for i in doc_comment.split("\n") {
        let docline =  if i.starts_with("///") {
            i.trim_prefix("///").trim_prefix(" ")
        } else {
            i.trim_prefix("//!").trim_prefix(" ")
        };

        if docline.trim().starts_with("```") {
            if in_a_code_block {
                if !no_doctest && !tagline_only {
                    use std::string::join;

                    if doctest_item != null && doctest_item.path == doctest_item.defined_in {
                        let name = "_".join(&doctest_item.defined_in.as_slice().iter());
                        doctest_writer.write_test(name.as_slice(), doctest_source.as_slice(), no_doctest_run);
                        name.free();
                    }

                }
                write!(writer, "</code>");

                if !no_doctest && !tagline_only {
                    let code: StringBuf = StringBuf::new();
                    let parts: &[&[u8]] = if bare {
                        [doctest_source.as_slice()].as_slice()
                    } else {
                        ["fn main() {\n", doctest_source.as_slice(), "\n}\n"].as_slice()
                    };

                    for part in parts {
                        for c in part {
                            use std::fmt::hex;
                            if c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' {
                                code.push(c);
                            } else {
                                write!(&code, "%{}", c.hex().zero_pad(2));
                            }
                        }
                    }
                    write!(writer, "<a class=\"playground-link\" target=\"_blank\" href=\"https://play.alumina-lang.net/?q={}\">Run this example</a>", code);
                    code.free();
                }

                writeln!(writer, "</pre>");
            } else {
                doctest_source.clear();
                no_doctest = docline.trim() == "```notest";
                no_doctest_run = docline.trim() == "```norun";
                bare = docline.trim() == "```bare";

                if no_doctest || tagline_only {
                    write!(writer, "<pre>");
                } else {
                    write!(writer, "<pre class=\"with-playground-link\">");
                }
                write!(writer, "<code class=\"language-alumina\">");
            };
            in_a_code_block = !in_a_code_block;
        } else if !in_a_code_block {
            docline = docline.trim_start();
            if docline.len() == 0 {
                md_state.reset()?;
                if tagline_only {
                    return Result::ok(());
                } else {
                    writeln!(writer, "</p><p>");
                }
            } else if docline.starts_with("###") {
                md_state.reset()?;
                writeln!(writer, "</p>");
                writeln!(writer, "<h4>{}</h4>", InlineMarkdown::new(
                    docline.trim_prefix("###"), &md_state,
                    link_context
                ));
                md_state.reset()?;
                writeln!(writer, "<p>");
            } else if docline.starts_with("##") {
                md_state.reset()?;
                writeln!(writer, "</p>");
                writeln!(writer, "<h3>{}</h3>", InlineMarkdown::new(
                    docline.trim_prefix("##"), &md_state,
                    link_context
                ));
                md_state.reset()?;
                writeln!(writer, "<p>");
            } else if docline.starts_with("#!") {
                md_state.reset()?;
                writeln!(writer, "</p>");
                writeln!(writer, "<h1>{}</h1>", InlineMarkdown::new(
                    docline.trim_prefix("#!"), &md_state,
                    link_context
                ));
                md_state.reset()?;
                writeln!(writer, "<p>");
            } else if docline.starts_with("#") {
                md_state.reset()?;
                writeln!(writer, "</p>");
                writeln!(writer, "<h2>{}</h2>", InlineMarkdown::new(
                    docline.trim_prefix("#"), &md_state,
                    link_context
                ));
                md_state.reset()?;
                writeln!(writer, "<p>");
            } else {
                writeln!(writer, "{}", InlineMarkdown::new(
                    docline,
                    &md_state,
                    link_context
                ));
            }
        } else {
            if bare {
                writeln!(&doctest_source, "{}", docline);
            } else {
                writeln!(&doctest_source, "   {}", docline);
            }
            writeln!(writer, "{}", HtmlEscaped::str(docline));
        }
    }

    if in_a_code_block {
        return Result::err(Error::new());
    }

    if !tagline_only {
        writeln!(writer, "</p>");
    }
    Result::ok(())
}
