use std::string::StringBuf;

type Result<T> = std::result::Result<T, Error>;

struct Error {
    inner: StringBuf,
}

impl Error {
    use std::fmt::{Formatter, write};

    fn new(msg: &[u8]) -> Error {
        Error {
            inner: StringBuf::from_slice(msg),
        }
    }

    fn from<T>(err: T) -> Error {
        anywho!("{}", err)
    }

    fn fmt<F: Formatter<F>>(self: &Error, f: &mut F) -> std::fmt::Result {
        write!(f, "{}", self.inner.as_slice())
    }

    fn free(self: &mut Error) {
        self.inner.free();
    }

    fn move(self: &mut Error) -> Error {
        Error { inner: self.inner.move() }
    }
}

macro from_io($a) {
    $a.map_err(Error::from::<std::io::Error>)
}

macro from_fmt($a) {
    $a.map_err(Error::from::<std::fmt::Error>)
}

macro anywho($fmt, $args...) {
    use std::fmt::format;
    Error { inner: format!($fmt, $args$...).unwrap() }
}

macro bail($fmt, $args...) {
    return Result::err(anywho!($fmt, $args$...));
}
