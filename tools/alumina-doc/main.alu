use std::fs::File;
use std::fmt::format;
use std::collections::Vector;
use std::cmp::sort_by;
use std::string::{StringBuf, split, join, trim_prefix, starts_with, join_fmt, replace, trim, trim_start};

use tree_sitter::{TSLanguage, Node, Parser, TSTreeCursor, TSFieldId};

use aluminac::lib::common::{NodeVisitorExt, child_by, children_by};
use aluminac::lib::arena::Arena;
use aluminac::lib::node_kinds::{NodeVisitor, FieldKind};

use alumina_doc::error::{Error, Result, anywho, bail, from_io, from_fmt};
use alumina_doc::common::{Item, ItemKind, Path, ParseContext, DoctestWriter, ItemBag, LinkContext};
use alumina_doc::visitors::{TopLevelVisitor, CodePrinter};
use alumina_doc::markdown::write_docstring;
use std::collections::HashSet;

extern "C" fn tree_sitter_alumina() -> &TSLanguage;

macro w($self, $fmt, $args...) {
    std::fmt::write!($self.writer, $fmt, $args$...).from_fmt!()?
}

macro wln($self, $fmt, $args...) {
    std::fmt::writeln!($self.writer, $fmt, $args$...).from_fmt!()?
}


struct PageWriter<T: std::io::Writable<T>> {
    processor: &Processor,
    item_bag: &ItemBag,
    writer: &mut T
}

impl PageWriter<T: std::io::Writable<T>> {
    fn write_breadcrumbs(self: &PageWriter<T>, item: &Item, with_kind: bool) -> Result<()> {
        let link_context = LinkContext::new(self.item_bag, &item.defined_in);

        if item.path.segments.is_empty() {
            wln!(self, "<h1>{}</h1>", item.kind);
            return Result::ok(());
        }

        if with_kind {
            w!(self, "<div class=\"main-title\"><h1>{} ", item.kind);
        } else {
            w!(self, "<h1>");
        }

        for (idx, segment) in item.path.segments.iter().enumerate() {
            let partial_path = Path::new(Vector::from_slice(item.path.as_slice()[..idx + 1]));
            let link = link_context.resolve_link(&partial_path, true).unwrap();

            if idx == 0 {
                w!(self, "<a class=\"breadcrumbs\" href=\"{}\">{}</a>", link.as_slice(), segment);
            } else {
                w!(self, "::<a class=\"breadcrumbs\" href=\"{}\">{}</a>", link.as_slice(), segment);
            }

            partial_path.free();
            link.free();
        }
        wln!(self, "</h1>");
        if with_kind {
            wln!(self, "</h1>");
            if item.path != item.defined_in {
                let link = link_context.resolve_link(&item.defined_in, true).unwrap();
                defer link.free();
                wln!(self, "<div class=\"defined-in badge\">Re-export from <a href=\"{}\">{}</a></div>", link.as_slice(), item.defined_in);
            }
            wln!(self, "</div>");
        } else {
            wln!(self, "</h1>");
        }
        Result::ok(())
    }

    fn write_signature(self: &PageWriter<T>, item: &Item, top_level: bool) -> Result<()> {
        let link_context = LinkContext::new(self.item_bag, &item.defined_in);

        if !top_level {
            let name = item.path.last().unwrap();
            if item.cfg_index == 0 {
                wln!(self, "<div class=\"signature\" id=\"item.{}\">", name);
            } else {
                wln!(self, "<div class=\"signature\" id=\"item.{}.{}\">", name, item.cfg_index);
            }
        } else {
            wln!(self, "<div class=\"signature\" data-nosnippet>");
        }

        wln!(self, "{}", if top_level { "<h3>" } else { "<h4>" });
        if item.has_cfg {
            wln!(self, "<span class=\"badge\">#[cfg]</span>");
        }
        let printer = CodePrinter::new(item.parse_context, &link_context, self.writer);
        printer.visit(item.node)?;

        child_by!(item.node, FieldKind::TypeArguments)
            .map(|=self, &printer, node: Node| -> Result<()> {
                let cursor = node.walk();
                defer cursor.free();

                printer.protocol_bounds = true;

                for child in children_by!(node, FieldKind::Argument, &cursor) {
                    if !child_by!(child, FieldKind::Bound).is_some() {
                        continue;
                    }
                    wln!(self, "<div class=\"protocol-bound\">");
                    printer.visit(child)?;
                    wln!(self, "</div>");
                }

                Result::ok(())
            })
            .transpose()?;

        wln!(self, "{}", if top_level { "</h3>" } else { "</h4>" });
        if item.kind.show_source_link() {
            let file = item.parse_context.filename.as_path();
            let start = item.node.start_point();
            let end = item.node.end_point();
            wln!(self, "<div class=\"source-link\">");
            wln!(
                self,
                "<a href=\"https://github.com/alumina-lang/alumina/blob/master/{}#L{}-L{}\"/>source</a>",
                file,
                start.row + 1,
                end.row + 1
            );
            wln!(self, "</div>");
        }
        wln!(self, "</div>");

        Result::ok(())
    }

    fn write_impl_header(self: &PageWriter<T>, item: &Item, node: Option<Node>, first: bool) -> Result<()> {
        use aluminac::lib::node_kinds::{NODE_KINDS, NodeKind};

        if !node.is_some() || NODE_KINDS[node.unwrap().symbol() as usize] != NodeKind::ImplBlock {
            return Result::ok(());
        }

        let node = node.unwrap();
        let link_context = LinkContext::new(self.item_bag, &item.defined_in);

        if first {
            wln!(self, "<div class=\"signature impl-header\"><h3>");
        } else {
            wln!(self, "<div class=\"signature impl-header not-first\"><h3>");
        }

        let printer = CodePrinter::new(item.parse_context, &link_context, self.writer);
        printer.visit(node)?;

        child_by!(node, FieldKind::TypeArguments)
            .map(|=self, &printer, node: Node| -> Result<()> {
                let cursor = node.walk();
                defer cursor.free();

                printer.protocol_bounds = true;

                for child in children_by!(node, FieldKind::Argument, &cursor) {
                    if !child_by!(child, FieldKind::Bound).is_some() {
                        continue;
                    }
                    wln!(self, "<div class=\"protocol-bound\">");
                    printer.visit(child)?;
                    wln!(self, "</div>");
                }

                Result::ok(())
            })
            .transpose()?;

        wln!(self, "</h3></div>");

        Result::ok(())
    }

    fn write_item_short(self: &PageWriter<T>, item: &Item) -> Result<()> {
        let link_context = LinkContext::new(self.item_bag, &item.defined_in);
        let name = item.path.last().unwrap();
        let link = link_context.link_for_item(item, false, false).unwrap();
        defer link.free();

        if item.cfg_index == 0 {
            wln!(self, "<div class=\"row\" id=\"item.{}\">", name);
        } else {
            wln!(self, "<div class=\"row\" id=\"item.{}.{}\">", name, item.cfg_index);
        }
        wln!(self, "<div class=\"cell-name\">");
        if item.has_cfg {
            wln!(self, "<span class=\"badge\">#[cfg]</span>");
        }
        wln!(self, "<a href=\"{}\">{}</a>", link, name);
        wln!(self, "</div>");
        w!(self, "<div class=\"cell-doc\">");
        write_docstring(self.writer, item.doc_comment.as_slice(), true, &link_context, item, self.processor.doctest_writer)
        .from_fmt!()?;
        wln!(self, "</div>");
        wln!(self, "</div>");

        Result::ok(())
    }

    fn write_item_full(self: &PageWriter<T>, item: &Item, mixed_in: bool) -> Result<()> {
        let link_context = LinkContext::new(self.item_bag, &item.defined_in);
        wln!(self, "<li>");
        self.write_signature(item, false)?;

        wln!(self, "<div class=\"item-doc\">");

        // Do not duplicate doctests for mixed in methods
        let doctest_item = if !mixed_in {
            item
        } else {
            null
        };

        write_docstring(
            self.writer,
            item.doc_comment.as_slice(),
            false,
            &link_context,
            doctest_item,
            self.processor.doctest_writer
        )
        .from_fmt!()?;

        wln!(self, "</div>");
        wln!(self, "</li>");

        Result::ok(())
    }

    fn expand_mixin(self: &PageWriter<T>, item: &Item, methods: &mut HashSet<&[u8]>) -> Result<()> {
        use aluminac::lib::common::child_by;
        use aluminac::lib::node_kinds::FieldKind;

        let proto_path = item.node
            .child_by!(FieldKind::Protocol)
            .unwrap();

        let proto_path = Path::from_str(proto_path
            .child_by!(FieldKind::Type)
            .unwrap_or(proto_path)
            .text(item.parse_context.source()));
        defer proto_path.free();

        let proto = self.item_bag.resolve(
            &item.defined_in,
            &proto_path,
            true
        ).unwrap();

        let mixin_methods = self.item_bag
            .filtered(|&proto, =methods, v: &Item| -> bool {
                v.kind == ItemKind::ProvidedMethod
                    && v.is_public()
                    && v.path.len() == proto.defined_in.len() + 1
                    && v.path.starts_with(&proto.defined_in)
                    && v.node.child_by!(FieldKind::Body).is_some() // Only methods with body
                    && methods.insert(v.path.last().unwrap())    // Mixin methods do not shadow other methods
            });
        defer mixin_methods.free();

        if !mixin_methods.is_empty() {
            wln!(self, "<ul class=\"mixin-methods\">");
            for method in mixin_methods {
                self.write_item_full(method, true)?;
            }
            wln!(self, "</ul>");
        }

        Result::ok(())
    }

    fn write_page(
        self: &PageWriter<T>,
        nav_item: &Item,
        top_level: &Item,
        nav_items: &Vector<&Item>,
        main_items: &Vector<&Item>
    ) -> Result<()> {
        let link_context = LinkContext::new(self.item_bag, &top_level.defined_in);

        wln!(self, "<!DOCTYPE html>");
        wln!(self, "<html lang=\"en\">");
        wln!(self, "<head>");
        wln!(self, "<meta charset=\"utf-8\">");
        if top_level.path.segments.len() == 0 {
            wln!(self, "<title>Alumina Docs</title>");
        } else {
            wln!(self, "<title>{} - Alumina Docs</title>", top_level.path);
        }

        wln!(self, "<link rel=\"stylesheet\" href=\"/static/styles.css\">");
        wln!(self, "<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">");
        wln!(self, "<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>");
        wln!(self, "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />");

        let tagline = clean_doc_comment(&link_context, top_level.doc_comment.as_slice());
        defer tagline.free();
        wln!(self, "<meta name=\"description\" content=\"{}\" />", tagline);

        wln!(self, "<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/static/apple-touch-icon.png\" />");
        wln!(self, "<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/static/favicon-32x32.png\" />");
        wln!(self, "<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/static/favicon-16x16.png\" />");
        wln!(self, "<link rel=\"manifest\" href=\"/static/manifest.json\" />");
        wln!(self, "<link rel=\"mask-icon\" href=\"/static/safari-pinned-tab.svg\" color=\"#5bbad5\" />");
        wln!(self, "<link rel=\"shortcut icon\" href=\"/static/favicon.ico\" />");

        if self.processor.base_domain.is_some() {
            let link = link_context.resolve_link(&top_level.defined_in, true).unwrap();
            defer link.free();
            wln!(
                self,
                "<link rel=\"canonical\" href=\"{}{}\" />",
                self.processor.base_domain.unwrap(),
                link
            );
        }

        wln!(self, "<meta name=\"msapplication-TileColor\" content=\"#da532c\" />");
        wln!(self, "<meta name=\"msapplication-config\" content=\"/static/browserconfig.xml\" />");
        wln!(self, "<meta name=\"description\" content=\"Documentation for the Alumina standard library\" />");
        wln!(self, "<script src=\"/static/site.js\"></script>");
        wln!(self, "<script src=\"/search_index.js\" async></script>");
        wln!(self, "<link href=\"https://fonts.googleapis.com/css2?family=Fira+Sans:wght@400;500&family=Source+Code+Pro:wght@400;600&family=Source+Serif+4:opsz,wght@8..60,400;8..60,700&display=swap\" rel=\"stylesheet\">");
        wln!(self, "</head>");
        wln!(self, "<body>");

        // Left sidebar

        wln!(self, "<nav>");
        wln!(self, "<a href=\"/\">");
        wln!(self, "<img width=\"100px\" height=\"100px\" class=\"logo\" src=\"/static/logo.svg\" alt=\"Alumina Docs\">");
        wln!(self, "</a>");

        if nav_item.path.last().is_some() {
            self.write_breadcrumbs(nav_item, false)?;
        }

        for grp in nav_items
            .iter()
            .filter(|i: &Item| -> bool { i.kind.should_show_in_sidebar() && !i.hide_from_index })
            .group_by(|i: &Item| -> ItemKind { i.kind }) {
            wln!(self, "<h2>{}s</h2>", grp.key);
            wln!(self, "<ul>");

            for item in grp {
                let link_context = LinkContext::new(self.item_bag, &item.defined_in);
                let link = link_context.link_for_item(item, false, false).unwrap();
                wln!(self, "<li>");
                wln!(self, "<a href=\"{}\">{}</a>", link, item.path.last().unwrap());
                wln!(self, "</li>");
                link.free();
            }
            wln!(self, "</ul>");
        }
        wln!(self, "</nav>");

        // Main section

        wln!(self, "<div class=\"main-container\">");
        wln!(self, "<div id=\"search-container\">");
        wln!(self, "<a class=\"mobile-only\" href=\"/\">");
        wln!(self, "<img width=\"40px\" height=\"40px\" class=\"logo\" src=\"/static/logo.svg\" alt=\"Alumina Docs\">");
        wln!(self, "</a>");
        wln!(self, "<input id=\"search-input\" class=\"search-input\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Search the documentation...\" type=\"search\"></input>");
        wln!(self, "</div>");
        wln!(self, "<div id=\"search-results\"></div>");
        wln!(self, "<main id=\"main-content\">");

        if top_level.path.segments.len() > 0 {
            self.write_breadcrumbs(top_level, true)?;
        }

        if top_level.kind.show_signature() {
            self.write_signature(top_level, true)?;
        }

        write_docstring(
            self.writer,
            top_level.doc_comment.as_slice(),
            false,
            &link_context,
            top_level,
            self.processor.doctest_writer
        )
        .from_fmt!()?;

        let methods: HashSet<&[u8]> = HashSet::new();
        defer methods.free();

        if top_level.kind.has_own_page() {
            for grp in main_items.iter()
                .filter(|i: &Item| -> bool { !i.hide_from_index })
                .group_by(|i: &Item| -> ItemKind { i.kind }) {
                wln!(self, "<h2 id=\"{}\">{}s</h2>", grp.key, grp.key);

                let first = true;

                for impl_grp in grp.group_by(|i: &Item| -> Option<Node> { i.group_node }) {
                    self.write_impl_header(top_level, impl_grp.key, first)?;
                    first = false;

                    if grp.key.has_own_page() {
                        wln!(self, "<div class=\"item-short-table\">");
                        for item in impl_grp {
                            self.write_item_short(item)?;
                        }
                        wln!(self, "</div>");

                    } else {
                        wln!(self, "<ul>");
                        for item in impl_grp {
                            if item.kind == ItemKind::Method {
                                methods.insert(item.path.last().unwrap());
                            }
                            self.write_item_full(item, false)?;
                            if item.kind == ItemKind::Mixin {
                                self.expand_mixin(item, &methods)?;
                            }
                        }

                        wln!(self, "</ul>");
                    }
                }
            }
        }

        wln!(self, "</main>");
        wln!(self, "</div>");

        w!(self, "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/prism.min.js\" ");
        w!(self, "integrity=\"sha512-RDQSW3KoqJMiX0L/UBgwBmH1EmRYp8LBOiLaA8rBHIy+7OGP/7Gxg8vbt8wG4ZYd29P0Fnoq6+LOytCqx3cyoQ==\" ");
        wln!(self, "crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>");
        wln!(self, "<script src=\"/static/prism-alumina.js\"></script>");

        wln!(self, "</body>");
        wln!(self, "</html>");

        Result::ok(())
    }
}


fn clean_doc_comment(link_context: &LinkContext, doc_comment: &[u8]) -> StringBuf {
    use std::string::{trim_prefix, trim, starts_with, replace};
    use std::mem::replace as x;

    if doc_comment.starts_with("/// @") {
        let path = Path::from_str(doc_comment.trim_prefix("/// @").trim());
        defer path.free();

        let item = link_context.item_bag.resolve(link_context.path, &path, true).unwrap();
        let link_context = LinkContext::new(link_context.item_bag, &item.defined_in);

        return clean_doc_comment(
            &link_context,
            item.doc_comment.as_slice(),
        );
    }

    let tag_line = doc_comment.split("\n").next().unwrap_or("").trim();
    let tag_line = if tag_line.starts_with("///") {
        tag_line.trim_prefix("///")
    } else {
        tag_line.trim_prefix("//!")
    };

    let result = StringBuf::from_slice(tag_line);
    x(&result, result.as_slice().replace("\\", "\\\\")).free();
    x(&result, result.as_slice().replace("\n", "\\n")).free();
    x(&result, result.as_slice().replace("\"", "\\\"")).free();
    result
}

struct Processor {
    parser: Parser,
    arena: Arena,
    items: ItemBag,
    parse_contexts: Vector<&mut ParseContext>,
    base_domain: Option<&[u8]>,
    output_dir: std::fs::PathBuf,
    doctest_writer: &mut DoctestWriter,
}

impl Processor {
    fn new(output_dir: std::fs::PathBuf, doctest_writer: &mut DoctestWriter) -> Processor {
        let parser = Parser::new();
        parser.set_language(tree_sitter_alumina()).unwrap();

        Processor {
            parser: parser,
            items: ItemBag::new(),
            arena: Arena::new(),
            parse_contexts: Vector::new(),
            base_domain: Option::none(),
            output_dir: output_dir,
            doctest_writer: doctest_writer
        }
    }

    fn free(self: &mut Processor) {
        use std::collections::free_all;

        self.parser.free();
        self.arena.free();
        self.items.free();
        self.parse_contexts.free_all();
    }

    fn move(self: &mut Processor) -> Processor {
        Processor {
            parser: self.parser.move(),
            items: self.items.move(),
            arena: self.arena.move(),
        }
    }

    fn process_file(self: &mut Processor, module_path: &[u8], filename: std::fs::Path) -> Result<()> {
        let parse_context = self.arena.alloc(ParseContext::from_file(&self.parser, filename)?);
        self.parse_contexts.push(parse_context);

        let path = Path::from_str(module_path);
        defer path.free();

        let visitor = TopLevelVisitor::new(parse_context, path.clone(), &self.items);
        defer visitor.free();

        visitor.visit(parse_context.root_node())?;

        Result::ok(())
    }

    fn write_page(self: &Processor, top_level: &Item) -> Result<()> {
        use std::string::trim_prefix;

        let link_context = LinkContext::new(&self.items, &top_level.defined_in);

        let filename = self.output_dir.with_suffix(std::fs::Path::new("html"));
        defer filename.free();

        filename.push(std::fs::Path::new({
            let l = link_context.link_for_item(top_level, false, true).unwrap();
            defer l.free();
            l.as_slice().trim_prefix("/")
        }));

        let filename = filename.as_path();

        std::fs::DirBuilder::new().recursive(true).create(filename.parent().unwrap())
            .from_io!()?;

        let file = std::fs::File::create(filename).from_io!()?;
        defer file.close();

        let writer = std::io::BufferedWriter::new(&file, 1024);
        defer {
            writer.flush().from_io!()?;
            writer.free();
        };

        let main_items = self.items
            .filtered(|&top_level, v: &Item| -> bool {
                v.is_public() && v.path.len() == top_level.path.len() + 1
                    && v.path.starts_with(&top_level.path)
            });
        defer main_items.free();

        let (nav_item, nav_items) = if !top_level.kind.show_siblings() {
            (top_level, &main_items)
        } else {
            let nav_items = self.items
                .filtered(|&top_level, v: &Item| -> bool {
                    v.is_public() && v.path.len() == top_level.path.len() &&
                        v.path.as_slice()[..v.path.len() - 1] ==
                            top_level.path.as_slice()[..v.path.len() - 1]
                });

            defer nav_items.free();

            let parent_path = top_level.path.clone();
            defer parent_path.free();
            parent_path.pop();

            let parent = self.items.get(&parent_path).unwrap();
            (parent, &nav_items)
        };

        let page_writer = PageWriter { processor: self, writer: &writer, item_bag: &self.items };
        page_writer.write_page(nav_item, top_level, nav_items, &main_items)
    }

    fn write_pages(self: &Processor) -> Result<()> {
        for top_level in self.items.all().filter(|v: &Item| -> bool {  v.is_public() && v.kind.has_own_page() }) {
            self.write_page(top_level)
                .map_err(|=top_level, e: Error| -> Error {
                    defer e.free();
                    anywho!("Error while processing {}: {}", top_level.path, e)
                })?;
        }

        Result::ok(())
    }

    fn write_index(self: &Processor) -> Result<()> {
        use std::fmt::{write, writeln};

        let filename = self.output_dir.with_suffix(std::fs::Path::new("html/search_index.js"));
        defer filename.free();

        std::fs::DirBuilder::new().recursive(true).create(filename.as_path().parent().unwrap())
            .from_io!()?;

        let file = std::fs::File::create(filename.as_path())
            .from_io!()?;

        defer file.close();

        let writer = std::io::BufferedWriter::new(&file, 1024);
        defer {
            writer.flush().from_io!()?;
            writer.free();
        };

        write!(&writer, "const index = [").from_fmt!()?;
        for item in self.items.all().filter(|v: &Item| -> bool {  v.is_public() && v.kind.is_indexed() && !v.hide_from_index }) {
            let link_context = LinkContext::new(&self.items, &item.path);
            let link = link_context.link_for_item(item, false, false).unwrap();
            let doc = clean_doc_comment(&link_context, item.doc_comment.as_slice());

            write!(&writer, "[\"{}\",\"{}\",\"{}\"],",
                item.path,
                doc.as_slice(),
                link
            ).from_fmt!()?;

            link.free();
            doc.free();
        }
        writeln!(&writer, "];").from_fmt!()?;
        writeln!(&writer,
            "if (typeof window.loadSearchIndex !== \"undefined\") {{ window.loadSearchIndex(index); }}"
        ).from_fmt!()?;

        Result::ok(())
    }
}

fn main_inner(args: &[&[u8]]) -> Result<()> {
    let output_dir = std::fs::PathBuf::from_str(std::process::env()
        .get("ALUMINA_DOC_OUTPUT_DIR")
        .unwrap()
    );
    defer output_dir.free();

    let doctest_path = output_dir.with_suffix(std::fs::Path::new("doctest.alu"));
    defer doctest_path.free();

    let doctest = File::create(doctest_path.as_path())
        .from_io!()?;
    defer doctest.close();

    let processor = Processor::new(output_dir.move(), &DoctestWriter::new(&doctest));
    defer processor.free();

    processor.base_domain = std::process::env().get("ALUMINA_DOC_BASE_PATH");

    let inputs = args
        .iter()
        .skip(1)
        .filter_map(|s: &[u8]| -> Option<(&[u8], std::fs::Path)> {
            use std::option::try;

            let segments = s.split("=");
            let module_path = segments.next()?;
            let filename = std::fs::Path::new(segments.next()?);

            Option::some((module_path, filename))
        });

    for (module_path, filename) in inputs {
        processor.process_file(module_path, filename)?;
    }

    processor.items.resolve_all();
    processor.items.sort();

    processor.write_pages()?;
    processor.write_index()?;

    Result::ok(())
}

fn main(args: &[&[u8]]) -> i32 {
    let res = main_inner(args);
    if res.is_err() {
        let err = res.unwrap_err();
        defer err.free();

        println!("{}", err);
        1
    } else {
        0
    }
}


