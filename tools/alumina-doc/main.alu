use std::fs::File;
use std::fmt::format;
use std::collections::{Vector, sort_by};
use std::string::{StringBuf, split, join, trim_prefix, starts_with, join_fmt, replace, trim, trim_start};

use tree_sitter::{TSLanguage, Node, Parser, TSTreeCursor, TSFieldId};

use aluminac::lib::common::{NodeVisitorExt, child_by, children_by};
use aluminac::lib::arena::Arena;
use aluminac::lib::node_kinds::{NodeVisitor, FieldKind};

use alumina_doc::error::{Error, Result};
use alumina_doc::common::{Item, ItemKind, Path, ParseContext, ItemBag, LinkContext};
use alumina_doc::visitors::{TopLevelVisitor, CodePrinter};
use alumina_doc::markdown::write_docstring;

extern "C" fn tree_sitter_alumina() -> &TSLanguage;

macro w($self, $fmt, $args...) {
    std::fmt::write!($self.writer, $fmt, $args...).map_err(Error::from::<std::fmt::Error>)?
}

macro wln($self, $fmt, $args...) {
    std::fmt::writeln!($self.writer, $fmt, $args...).map_err(Error::from::<std::fmt::Error>)?
}

struct Processor {
    parser: Parser,
    arena: Arena,
    items: ItemBag,
    parse_contexts: Vector<&mut ParseContext>
}

impl Processor {
    fn new() -> Processor {
        let parser = Parser::new(); 
        parser.set_language(tree_sitter_alumina()).unwrap();

        Processor {
            parser: parser,
            items: ItemBag::new(),
            arena: Arena::new(),
            parse_contexts: Vector::new(),
        }
    }

    fn free(self: &mut Processor) {
        use std::collections::free_all;

        self.parser.free();
        self.arena.free();
        self.items.free();
        self.parse_contexts.free_all();
    }
    
    fn move(self: &mut Processor) -> Processor {
        Processor { 
            parser: self.parser.move(), 
            items: self.items.move(), 
            arena: self.arena.move(),
        }
    }

    fn process_file(self: &mut Processor, module_path: &[u8], filename: std::fs::Path) -> Result<()> {
        let parse_context = self.arena.alloc(ParseContext::from_file(&self.parser, filename)?);
        self.parse_contexts.push(parse_context);
            
        let path = Path::from_str(module_path);
        defer path.free();

        let visitor = TopLevelVisitor::new(parse_context, path.clone(), &self.items);
        defer visitor.free();

        visitor.visit(parse_context.root_node());

        self.items.add_item(Item {
            kind: ItemKind::Module,
            has_cfg: false,
            defined_in: path.clone(),
            path: path.move(),
            cfg_index: 0,
            node: parse_context.root_node(),
            parse_context: parse_context,
            group_node: Option::none(),
            doc_comment: visitor.file_doc_comment.move(),
        });

        Result::ok(())
    }

}

struct PageWriter<T: std::io::Writable<T>> {
    item_bag: &ItemBag,
    writer: &mut T
}

impl PageWriter<T: std::io::Writable<T>> {
    fn write_breadcrumbs(self: &PageWriter<T>, item: &Item, with_kind: bool) -> Result<()> {
        let link_context = LinkContext::new(self.item_bag, &item.path);

        if item.path.segments.empty() {
            wln!(self, "<h1>{}</h1>", item.kind);
            return Result::ok(());
        } 
        
        if with_kind {
            w!(self, "<h1>{} ", item.kind);
        } else {
            w!(self, "<h1>");
        }

        for (idx, segment) in item.path.segments.iter().enumerate() {
            let partial_path = Path::new(Vector::from_slice(item.path.as_slice()[..idx + 1]));
            let link = link_context.resolve_link(&partial_path).unwrap();

            if idx == 0 {
                w!(self, "<a class=\"breadcrumbs\" href=\"{}\">{}</a>", link.as_slice(), segment);
            } else {
                w!(self, "::<a class=\"breadcrumbs\" href=\"{}\">{}</a>", link.as_slice(), segment);
            }

            partial_path.free();
            link.free();
        }
        wln!(self, "</h1>");
        Result::ok(())
    }

    fn write_signature(self: &PageWriter<T>, item: &Item, top_level: bool) -> Result<()> {
        let link_context = LinkContext::new(self.item_bag, &item.defined_in);
        
        if !top_level {
            let name = item.path.last().unwrap();
            if item.cfg_index == 0 {
                wln!(self, "<div class=\"signature\" id=\"item.{}\">", name);
            } else {
                wln!(self, "<div class=\"signature\" id=\"item.{}.{}\">", name, item.cfg_index);
            }
        } else {
            wln!(self, "<div class=\"signature\">");
        }
        
        wln!(self, "{}", if top_level { "<h3>" } else { "<h4>" });
        if item.has_cfg {
            wln!(self, "<span class=\"badge\">#[cfg]</span>");
        }
        let printer = CodePrinter::new(item.parse_context, &link_context, self.writer);
        printer.visit(item.node);
        
        child_by!(item.node, FieldKind::TypeArguments)
            .map(|=self, &printer, node: Node| -> Result<()> {
                let cursor = node.walk();
                defer cursor.free();
                
                printer.protocol_bounds = true;
                
                for (idx, child) in children_by!(node, FieldKind::Argument, &cursor).enumerate() {
                    if !child_by!(child, FieldKind::Bound).is_some {
                        continue;
                    }
                    wln!(self, "<div class=\"protocol-bound\">");
                    printer.visit(child);
                    wln!(self, "</div>");
                }
                
                Result::ok(())
            })
            .transpose()?;
        
        wln!(self, "{}", if top_level { "</h3>" } else { "</h4>" });
        if item.kind.show_source_link() {
            let file = item.parse_context.filename.as_path().strip_prefix(std::fs::Path::new("./")).unwrap();
            let start = item.node.start_point();
            let end = item.node.end_point();
            wln!(self, "<div class=\"source-link\">");
            wln!(
                self, 
                "<a href=\"https://github.com/tibordp/alumina/blob/master/{}#L{}-L{}\"/>source</a>",
                file, 
                start.row + 1,
                end.row + 1
            );
            wln!(self, "</div>");
        }
        wln!(self, "</div>");
        
        Result::ok(())
    }

    fn write_impl_header(self: &PageWriter<T>, item: &Item, node: Option<Node>, first: bool) -> Result<()> {
        use aluminac::lib::node_kinds::{NODE_KINDS, NodeKind};

        if !node.is_some || NODE_KINDS[node.inner.symbol() as usize] != NodeKind::ImplBlock {
            return Result::ok(());
        }

        let node = node.inner;
        let link_context = LinkContext::new(self.item_bag, &item.defined_in);

        if first {
            wln!(self, "<div class=\"signature impl-header\"><h3>");
        } else {
            wln!(self, "<div class=\"signature impl-header not-first\"><h3>");
        }
        
        let printer = CodePrinter::new(item.parse_context, &link_context, self.writer);
        printer.visit(node);
        child_by!(node, FieldKind::TypeArguments)
            .map(|=self, &printer, node: Node| -> Result<()> {
                let cursor = node.walk();
                defer cursor.free();
                
                printer.protocol_bounds = true;
                
                for (idx, child) in children_by!(node, FieldKind::Argument, &cursor).enumerate() {
                    if !child_by!(child, FieldKind::Bound).is_some {
                        continue;
                    }
                    wln!(self, "<div class=\"protocol-bound\">");
                    printer.visit(child);
                    wln!(self, "</div>");
                } 
                
                Result::ok(())
            })
            .transpose()?;
        
        wln!(self, "</h3></div>");

        Result::ok(())
    }
    
    fn write_page(
        self: &PageWriter<T>, 
        nav_item: &Item, 
        top_level: &Item, 
        nav_items: &Vector<&Item>, 
        main_items: &Vector<&Item>
    ) -> Result<()> {
        let link_context = LinkContext::new(self.item_bag, &top_level.defined_in);
        
        wln!(self, "<!DOCTYPE html>");
        wln!(self, "<html lang=\"en\">");
        wln!(self, "<head>");
        wln!(self, "<meta charset=\"utf-8\">");
        if top_level.path.segments.len() == 0 {
            wln!(self, "<title>Alumina Docs</title>");
        } else {
            wln!(self, "<title>{} - Alumina Docs</title>", top_level.path);
        }
        
        wln!(self, "<link rel=\"stylesheet\" href=\"/static/styles.css\">");
        wln!(self, "<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">");
        wln!(self, "<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>");
        wln!(self, "<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />");
        wln!(self, "<script src=\"/static/site.js\"></script>");
        wln!(self, "<script src=\"/search_index.js\" async></script>");
        wln!(self, "<link href=\"https://fonts.googleapis.com/css2?family=Fira+Sans:wght@400;500&family=Source+Code+Pro:wght@400;600&family=Source+Serif+4:opsz,wght@8..60,400;8..60,700&display=swap\" rel=\"stylesheet\">");
        wln!(self, "</head>");
        wln!(self, "<body>");
        
        // Left sidebar
        
        wln!(self, "<nav>");
        wln!(self, "<a href=\"/\">");
        wln!(self, "<img width=\"100px\" height=\"100px\" class=\"logo\" src=\"/static/logo.svg\" alt=\"Alumina Docs\">");
        wln!(self, "</a>");

        if nav_item.path.last().is_some {
            self.write_breadcrumbs(nav_item, false)?;
        }
        
        for grp in nav_items
            .iter()
            .filter(|i: &Item| -> bool { i.kind.should_show_in_sidebar() })
            .group_by(|i: &Item| -> ItemKind { i.kind }) {
            wln!(self, "<h2>{}s</h2>", grp.key);
            wln!(self, "<ul>");
            
            for item in grp {
                let link_context = LinkContext::new(self.item_bag, &item.path);
                let link = link_context.link_for_item(item).unwrap();
                wln!(self, "<li>");
                wln!(self, "<a href=\"{}\">{}</a>", link, item.path.last().unwrap());
                wln!(self, "</li>");
                link.free();
            }
            wln!(self, "</ul>");
        }
        wln!(self, "</nav>");
        
        // Main section
        
        wln!(self, "<div class=\"main-container\">");
        wln!(self, "<div id=\"search-container\">");
        wln!(self, "<a class=\"mobile-only\" href=\"/\">");
        wln!(self, "<img width=\"40px\" height=\"40px\" class=\"logo\" src=\"/static/logo.svg\" alt=\"Alumina Docs\">");
        wln!(self, "</a>");
        wln!(self, "<input id=\"search-input\" class=\"search-input\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Search the documentation...\" type=\"search\"></input>");
        wln!(self, "</div>");
        wln!(self, "<div id=\"search-results\"></div>");    
        wln!(self, "<main id=\"main-content\">");
        
        if top_level.path.segments.len() > 0 {
            self.write_breadcrumbs(top_level, true)?;
        }
        
        if top_level.kind.show_signature() {
            self.write_signature(top_level, true)?;
        }
        
        write_docstring(self.writer, top_level.doc_comment.as_slice(), false, &link_context)
        .map_err(Error::from::<std::fmt::Error>)?;    
        
        if top_level.kind.has_own_page() {
            for grp in main_items.iter().group_by(|i: &Item| -> ItemKind { i.kind }) {
                wln!(self, "<h2 id=\"{}\">{}s</h2>", grp.key, grp.key);
                
                let first = true;

                for impl_grp in grp.group_by(|i: &Item| -> Option<Node> { i.group_node }) {

                    self.write_impl_header(top_level, impl_grp.key, first)?;
                    first = false;
                    
                    if grp.key.has_own_page() {
                        wln!(self, "<div class=\"item-short-table\">");
                        for item in impl_grp {
                            let link_context = LinkContext::new(self.item_bag, &item.defined_in);
                            let name = item.path.last().unwrap();
                            let link = link_context.link_for_item(item).unwrap();
                            
                            if item.cfg_index == 0 {
                                wln!(self, "<div class=\"row\" id=\"item.{}\">", name);
                            } else {
                                wln!(self, "<div class=\"row\" id=\"item.{}.{}\">", name, item.cfg_index);
                            }
                            wln!(self, "<div class=\"cell-name\">");
                            if item.has_cfg {
                                wln!(self, "<span class=\"badge\">#[cfg]</span>");
                            }
                            wln!(self, "<a href=\"{}\">{}</a>", link, name);
                            wln!(self, "</div>");
                            w!(self, "<div class=\"cell-doc\">");
                            write_docstring(self.writer, item.doc_comment.as_slice(), true, &link_context)
                            .map_err(Error::from::<std::fmt::Error>)?;  
                            wln!(self, "</div>");
                            wln!(self, "</div>");
                            
                            link.free();
                        }
                        wln!(self, "</div>");
                        
                    } else {
                        wln!(self, "<ul>");
                        for item in impl_grp {
                            let link_context = LinkContext::new(self.item_bag, &item.defined_in);
                            wln!(self, "<li>");                  
                            self.write_signature(item, false)?;
                            
                            wln!(self, "<div class=\"item-doc\">");
                            write_docstring(self.writer, item.doc_comment.as_slice(), false, &link_context)
                                .map_err(Error::from::<std::fmt::Error>)?;  
                            wln!(self, "</div>");
                            wln!(self, "</li>");
                        }
                        
                        wln!(self, "</ul>");
                    }
                }
            }
        }

        wln!(self, "</main>");
        wln!(self, "</div>");
        wln!(self, "</body>");
        wln!(self, "</html>");

        Result::ok(())
    }
}


fn write_page(items: &ItemBag, top_level: &Item) -> Result<()> {
    let filename = std::fs::PathBuf::from_str("./build/docs");
    defer filename.free();


    if top_level.path.segments.empty() {
        filename.push(std::fs::Path::new("index.html"));
    } else {
        for (idx, s) in top_level.path.segments.iter().enumerate() {
            if idx == top_level.path.segments.len() - 1 {
                let formatted = if top_level.cfg_index == 0 {
                    format!("{}.html", s).unwrap()
                } else {
                    format!("{}.{}.html", s, top_level.cfg_index).unwrap()
                };

                filename.push(std::fs::Path::new(formatted.as_slice()));
                formatted.free();
            } else {
                filename.push(std::fs::Path::new(s));    
            }
        }
    }

    let filename = filename.as_path();

    std::fs::DirBuilder::new().recursive(true).create(filename.parent().unwrap())
        .map_err(Error::from_io)?;

    let file = std::fs::File::create(filename).map_err(Error::from_io)?;
    defer file.close();

    let writer = std::io::BufferedWriter::new(&file, 1024);
    defer {
        writer.flush();
        writer.free();
    };
    
    let main_items = items
        .filtered(|&top_level, v: &Item| -> bool { 
            v.is_public() && v.path.len() == top_level.path.len() + 1 
                && v.path.starts_with(&top_level.path)
        });
    defer main_items.free();

    let (nav_item, nav_items) = if !top_level.kind.show_siblings() {
        (top_level, &main_items)
    } else {
        let nav_items = items
            .filtered(|&top_level, v: &Item| -> bool { 
                v.is_public() && v.path.len() == top_level.path.len() && 
                    v.path.as_slice()[..v.path.len() - 1] == 
                        top_level.path.as_slice()[..v.path.len() - 1]
            });
        
        defer nav_items.free();
        
        let parent_path = top_level.path.clone();
        defer parent_path.free();
        parent_path.pop();

        let parent = items.get(&parent_path).unwrap();
        (parent, &nav_items)
    };

    let page_writer = PageWriter { writer: &writer, item_bag: items };
    page_writer.write_page(nav_item, top_level, nav_items, &main_items)
} 

fn write_html(items: &ItemBag) -> Result<()> { 
    use std::string::join_fmt;
    use std::fmt::format;

    for top_level in items.all().filter(|v: &Item| -> bool {  v.is_public() && v.kind.has_own_page() }) {
        write_page(items, top_level)?;
    }

    Result::ok(())
}

fn clean_doc_comment(doc_comment: &[u8]) -> StringBuf {
    use std::string::{trim_prefix, trim, starts_with, replace};
    use std::mem::replace as x;

    let tag_line = doc_comment.split("\n").next().unwrap_or("").trim();
    let tag_line = if tag_line.starts_with("///") {
        tag_line.trim_prefix("///")
    } else {
        tag_line.trim_prefix("//!")
    };

    let result: StringBuf = StringBuf::from_slice(tag_line);
    x(&result, result.as_slice().replace("\\", "\\\\")).free();
    x(&result, result.as_slice().replace("\n", "\\n")).free();
    x(&result, result.as_slice().replace("\"", "\\\"")).free();
    result 
}

fn write_index(items: &ItemBag) -> Result<()> { 
    use std::fmt::{write, writeln};
    use std::string::replace_fmt;

    let filename = std::fs::Path::new("./build/docs/search_index.js");
    std::fs::DirBuilder::new().recursive(true).create(filename.parent().unwrap())
        .map_err(Error::from_io)?;

    let file = std::fs::File::create(filename).map_err(Error::from_io)?;
    defer file.close();

    let writer = std::io::BufferedWriter::new(&file, 1024);
    defer {
        writer.flush();
        writer.free();
    };

    write!(&writer, "const index = [");
    for item in items.all().filter(|v: &Item| -> bool {  v.is_public() && v.kind.is_indexed() }) {
        let link_context = LinkContext::new(items, &item.path);
        let link = link_context.link_for_item(item).unwrap();
        let doc = clean_doc_comment(item.doc_comment.as_slice());

        writeln!(&writer, "[\"{}\",\"{}\",\"{}\"],", 
            item.path, 
            doc.as_slice(), 
            link
        ).map_err(Error::from::<std::fmt::Error>)?;
        
        link.free();
        doc.free();
    }
    writeln!(&writer, "];");
    writeln!(&writer, "if (typeof window.loadSearchIndex !== \"undefined\") {{ window.loadSearchIndex(index); }}");

    Result::ok(())
}

fn main_inner(args: &[&[u8]]) -> Result<()> {
    let processor = Processor::new();
    defer processor.free();

    let inputs = args
        .iter()
        .skip(1)
        .filter_map(|s: &[u8]| -> Option<(&[u8], std::fs::Path)> {
            use std::option::try;

            let segments = s.split("=");
            let module_path = segments.next()?
            let filename = std::fs::Path::new(segments.next()?);

            Option::some((module_path, filename))
        });

    for (module_path, filename) in inputs {
        processor.process_file(module_path, filename)?;
    }

    processor.items.resolve_all();
    processor.items.sort();

    write_html(&processor.items)?;
    write_index(&processor.items)?;
        
    Result::ok(())
}

fn main(args: &[&[u8]]) -> i32 {
    let res = main_inner(args);
    if !res.is_ok {
        println!("{}", res.unwrap_err());
        1
    } else {
        0
    }
}


