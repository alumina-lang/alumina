//! Target information


enum LLVMByteOrdering {
    LLVMBigEndian = 0,
    LLVMLittleEndian = 1,
}

enum LLVMOpaqueTargetData {}

type LLVMTargetDataRef = &mut LLVMOpaqueTargetData;

enum LLVMOpaqueTargetLibraryInfotData {}

type LLVMTargetLibraryInfoRef = &mut LLVMOpaqueTargetLibraryInfotData;

extern "C" fn LLVMInitializeAMDGPUTargetInfo();
extern "C" fn LLVMInitializeAMDGPUTarget();
extern "C" fn LLVMInitializeAMDGPUTargetMC();
extern "C" fn LLVMInitializeAMDGPUAsmPrinter();
extern "C" fn LLVMInitializeAMDGPUAsmParser();
// Disassembler?

extern "C" fn LLVMInitializeSystemZTargetInfo();
extern "C" fn LLVMInitializeSystemZTarget();
extern "C" fn LLVMInitializeSystemZTargetMC();
extern "C" fn LLVMInitializeSystemZAsmPrinter();
extern "C" fn LLVMInitializeSystemZAsmParser();
extern "C" fn LLVMInitializeSystemZDisassembler();

extern "C" fn LLVMInitializeHexagonTargetInfo();
extern "C" fn LLVMInitializeHexagonTarget();
extern "C" fn LLVMInitializeHexagonTargetMC();
extern "C" fn LLVMInitializeHexagonAsmPrinter();
// AsmParser?
extern "C" fn LLVMInitializeHexagonDisassembler();

extern "C" fn LLVMInitializeNVPTXTargetInfo();
extern "C" fn LLVMInitializeNVPTXTarget();
extern "C" fn LLVMInitializeNVPTXTargetMC();
extern "C" fn LLVMInitializeNVPTXAsmPrinter();
// AsmParser?

extern "C" fn LLVMInitializeMSP430TargetInfo();
extern "C" fn LLVMInitializeMSP430Target();
extern "C" fn LLVMInitializeMSP430TargetMC();
extern "C" fn LLVMInitializeMSP430AsmPrinter();
// AsmParser?

extern "C" fn LLVMInitializeXCoreTargetInfo();
extern "C" fn LLVMInitializeXCoreTarget();
extern "C" fn LLVMInitializeXCoreTargetMC();
extern "C" fn LLVMInitializeXCoreAsmPrinter();
// AsmParser?
extern "C" fn LLVMInitializeXCoreDisassembler();

extern "C" fn LLVMInitializeMipsTargetInfo();
extern "C" fn LLVMInitializeMipsTarget();
extern "C" fn LLVMInitializeMipsTargetMC();
extern "C" fn LLVMInitializeMipsAsmPrinter();
extern "C" fn LLVMInitializeMipsAsmParser();
extern "C" fn LLVMInitializeMipsDisassembler();

extern "C" fn LLVMInitializeAArch64TargetInfo();
extern "C" fn LLVMInitializeAArch64Target();
extern "C" fn LLVMInitializeAArch64TargetMC();
extern "C" fn LLVMInitializeAArch64AsmPrinter();
extern "C" fn LLVMInitializeAArch64AsmParser();
extern "C" fn LLVMInitializeAArch64Disassembler();

extern "C" fn LLVMInitializeARMTargetInfo();
extern "C" fn LLVMInitializeARMTarget();
extern "C" fn LLVMInitializeARMTargetMC();
extern "C" fn LLVMInitializeARMAsmPrinter();
extern "C" fn LLVMInitializeARMAsmParser();
extern "C" fn LLVMInitializeARMDisassembler();

extern "C" fn LLVMInitializePowerPCTargetInfo();
extern "C" fn LLVMInitializePowerPCTarget();
extern "C" fn LLVMInitializePowerPCTargetMC();
extern "C" fn LLVMInitializePowerPCAsmPrinter();
extern "C" fn LLVMInitializePowerPCAsmParser();
extern "C" fn LLVMInitializePowerPCDisassembler();

extern "C" fn LLVMInitializeSparcTargetInfo();
extern "C" fn LLVMInitializeSparcTarget();
extern "C" fn LLVMInitializeSparcTargetMC();
extern "C" fn LLVMInitializeSparcAsmPrinter();
extern "C" fn LLVMInitializeSparcAsmParser();
extern "C" fn LLVMInitializeSparcDisassembler();

extern "C" fn LLVMInitializeX86TargetInfo();
extern "C" fn LLVMInitializeX86Target();
extern "C" fn LLVMInitializeX86TargetMC();
extern "C" fn LLVMInitializeX86AsmPrinter();
extern "C" fn LLVMInitializeX86AsmParser();
extern "C" fn LLVMInitializeX86Disassembler();

extern "C" fn LLVMInitializeBPFTargetInfo();
extern "C" fn LLVMInitializeBPFTarget();
extern "C" fn LLVMInitializeBPFTargetMC();
extern "C" fn LLVMInitializeBPFAsmPrinter();
// No AsmParser
extern "C" fn LLVMInitializeBPFDisassembler();

extern "C" fn LLVMInitializeLanaiTargetInfo();
extern "C" fn LLVMInitializeLanaiTarget();
extern "C" fn LLVMInitializeLanaiTargetMC();
extern "C" fn LLVMInitializeLanaiAsmPrinter();
extern "C" fn LLVMInitializeLanaiAsmParser();
extern "C" fn LLVMInitializeLanaiDisassembler();

extern "C" fn LLVMInitializeRISCVTargetInfo();
extern "C" fn LLVMInitializeRISCVTarget();
extern "C" fn LLVMInitializeRISCVTargetMC();
// No AsmPrinter
// No AsmParser
// No Disassembler

extern "C" fn LLVMInitializeWebAssemblyTargetInfo();
extern "C" fn LLVMInitializeWebAssemblyTarget();
extern "C" fn LLVMInitializeWebAssemblyTargetMC();
extern "C" fn LLVMInitializeWebAssemblyAsmPrinter();
extern "C" fn LLVMInitializeWebAssemblyAsmParser();
extern "C" fn LLVMInitializeWebAssemblyDisassembler();


/// Get the data layout for a module.
extern "C" fn LLVMGetModuleDataLayout(M: LLVMModuleRef) -> LLVMTargetDataRef;
/// Set the data layout for a module.
extern "C" fn LLVMSetModuleDataLayout(M: LLVMModuleRef, R: LLVMTargetDataRef);
/// Create target data from a target layout string.
extern "C" fn LLVMCreateTargetData(StringRep: &libc::c_char) -> LLVMTargetDataRef;
extern "C" fn LLVMAddTargetLibraryInfo(TLI: LLVMTargetLibraryInfoRef, PM: LLVMPassManagerRef);
extern "C" fn LLVMCopyStringRepOfTargetData(TD: LLVMTargetDataRef) -> &mut libc::c_char;
extern "C" fn LLVMByteOrder(TD: LLVMTargetDataRef) -> LLVMByteOrdering;
extern "C" fn LLVMPointerSize(TD: LLVMTargetDataRef) -> libc::c_uint;
extern "C" fn LLVMPointerSizeForAS(TD: LLVMTargetDataRef, AS: libc::c_uint) -> libc::c_uint;
extern "C" fn LLVMIntPtrType(TD: LLVMTargetDataRef) -> LLVMTypeRef;
extern "C" fn LLVMIntPtrTypeForAS(TD: LLVMTargetDataRef, AS: libc::c_uint) -> LLVMTypeRef;
extern "C" fn LLVMIntPtrTypeInContext(C: LLVMContextRef, TD: LLVMTargetDataRef) -> LLVMTypeRef;
extern "C" fn LLVMIntPtrTypeForASInContext(
    C: LLVMContextRef,
    TD: LLVMTargetDataRef,
    AS: libc::c_uint,
) -> LLVMTypeRef;
extern "C" fn LLVMSizeOfTypeInBits(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> libc::c_ulonglong;
extern "C" fn LLVMStoreSizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> libc::c_ulonglong;
extern "C" fn LLVMABISizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> libc::c_ulonglong;
extern "C" fn LLVMABIAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> libc::c_uint;
extern "C" fn LLVMCallFrameAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> libc::c_uint;
extern "C" fn LLVMPreferredAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef) -> libc::c_uint;
extern "C" fn LLVMPreferredAlignmentOfGlobal(
    TD: LLVMTargetDataRef,
    GlobalVar: LLVMValueRef,
) -> libc::c_uint;
extern "C" fn LLVMElementAtOffset(
    TD: LLVMTargetDataRef,
    StructTy: LLVMTypeRef,
    Offset: libc::c_ulonglong,
) -> libc::c_uint;
extern "C" fn LLVMOffsetOfElement(
    TD: LLVMTargetDataRef,
    StructTy: LLVMTypeRef,
    Element: libc::c_uint,
) -> libc::c_ulonglong;
extern "C" fn LLVMDisposeTargetData(TD: LLVMTargetDataRef);


// Functions from our target wrappers, since the C interface defines them with
// macros (wrappers/target.c).

extern "C" fn LLVM_InitializeAllTargetInfos();
extern "C" fn LLVM_InitializeAllTargets();
extern "C" fn LLVM_InitializeAllTargetMCs();
extern "C" fn LLVM_InitializeAllAsmPrinters();
extern "C" fn LLVM_InitializeAllAsmParsers();
extern "C" fn LLVM_InitializeAllDisassemblers();

/// Returns 1 on failure.
extern "C" fn LLVM_InitializeNativeTarget() -> LLVMBool;
/// Returns 1 on failure.
extern "C" fn LLVM_InitializeNativeAsmParser() -> LLVMBool;
/// Returns 1 on failure.
extern "C" fn LLVM_InitializeNativeAsmPrinter() -> LLVMBool;
/// Returns 1 on failure.
extern "C" fn LLVM_InitializeNativeDisassembler() -> LLVMBool;

