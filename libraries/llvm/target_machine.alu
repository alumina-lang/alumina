//! Target machine information, to generate assembly or object files.

use target::LLVMTargetDataRef;

enum LLVMOpaqueTargetMachine {}

type LLVMTargetMachineRef = &mut LLVMOpaqueTargetMachine;

enum LLVMTarget {}

type LLVMTargetRef = &mut LLVMTarget;

enum LLVMCodeGenOptLevel {
    LLVMCodeGenLevelNone = 0,
    LLVMCodeGenLevelLess = 1,
    LLVMCodeGenLevelDefault = 2,
    LLVMCodeGenLevelAggressive = 3,
}

enum LLVMRelocMode {
    LLVMRelocDefault = 0,
    LLVMRelocStatic = 1,
    LLVMRelocPIC = 2,
    LLVMRelocDynamicNoPic = 3,
    LLVMRelocROPI = 4,
    LLVMRelocRWPI = 5,
    LLVMRelocROPI_RWPI = 6,
}

enum LLVMCodeModel {
    LLVMCodeModelDefault = 0,
    LLVMCodeModelJITDefault = 1,
    LLVMCodeModelTiny = 2,
    LLVMCodeModelSmall = 3,
    LLVMCodeModelKernel = 4,
    LLVMCodeModelMedium = 5,
    LLVMCodeModelLarge = 6,
}

enum LLVMCodeGenFileType {
    LLVMAssemblyFile = 0,
    LLVMObjectFile = 1,
}

extern "C" fn LLVMGetFirstTarget() -> LLVMTargetRef;
extern "C" fn LLVMGetNextTarget(T: LLVMTargetRef) -> LLVMTargetRef;
extern "C" fn LLVMGetTargetFromName(Name: &libc::c_char) -> LLVMTargetRef;
extern "C" fn LLVMGetTargetFromTriple(
    Triple: &libc::c_char,
    T: &mut LLVMTargetRef,
    ErrorMessage: &mut &mut libc::c_char,
) -> LLVMBool;
extern "C" fn LLVMGetTargetName(T: LLVMTargetRef) -> &libc::c_char;
extern "C" fn LLVMGetTargetDescription(T: LLVMTargetRef) -> &libc::c_char;
extern "C" fn LLVMTargetHasJIT(T: LLVMTargetRef) -> LLVMBool;
extern "C" fn LLVMTargetHasTargetMachine(T: LLVMTargetRef) -> LLVMBool;
extern "C" fn LLVMTargetHasAsmBackend(T: LLVMTargetRef) -> LLVMBool;
extern "C" fn LLVMCreateTargetMachine(
    T: LLVMTargetRef,
    Triple: &libc::c_char,
    CPU: &libc::c_char,
    Features: &libc::c_char,
    Level: LLVMCodeGenOptLevel,
    Reloc: LLVMRelocMode,
    CodeModel: LLVMCodeModel,
) -> LLVMTargetMachineRef;
extern "C" fn LLVMDisposeTargetMachine(T: LLVMTargetMachineRef);
extern "C" fn LLVMGetTargetMachineTarget(T: LLVMTargetMachineRef) -> LLVMTargetRef;
extern "C" fn LLVMGetTargetMachineTriple(T: LLVMTargetMachineRef) -> &mut libc::c_char;
extern "C" fn LLVMGetTargetMachineCPU(T: LLVMTargetMachineRef) -> &mut libc::c_char;
extern "C" fn LLVMGetTargetMachineFeatureString(T: LLVMTargetMachineRef) -> &mut libc::c_char;
/// Create a DataLayout based on the target machine.
extern "C" fn LLVMCreateTargetDataLayout(T: LLVMTargetMachineRef) -> LLVMTargetDataRef;
extern "C" fn LLVMSetTargetMachineAsmVerbosity(T: LLVMTargetMachineRef, VerboseAsm: LLVMBool);
extern "C" fn LLVMTargetMachineEmitToFile(
    T: LLVMTargetMachineRef,
    M: LLVMModuleRef,
    Filename: &mut libc::c_char,
    codegen: LLVMCodeGenFileType,
    ErrorMessage: &mut &mut libc::c_char,
) -> LLVMBool;
extern "C" fn LLVMTargetMachineEmitToMemoryBuffer(
    T: LLVMTargetMachineRef,
    M: LLVMModuleRef,
    codegen: LLVMCodeGenFileType,
    ErrorMessage: &mut &mut libc::c_char,
    OutMemBuf: &mut LLVMMemoryBufferRef,
) -> LLVMBool;

extern "C" fn LLVMGetDefaultTargetTriple() -> &mut libc::c_char;
/// Normalize a target triple. The result needs to be disposed with LLVMDisposeMessage.
extern "C" fn LLVMNormalizeTargetTriple(triple: &libc::c_char) -> &mut libc::c_char;
/// Get the host CPU as a string. The result needs to be disposed with LLVMDisposeMessage.
extern "C" fn LLVMGetHostCPUName() -> &mut libc::c_char;
/// Get the host CPU's features as a string. The result needs to be disposed with LLVMDisposeMessage.
extern "C" fn LLVMGetHostCPUFeatures() -> &mut libc::c_char;

extern "C" fn LLVMAddAnalysisPasses(T: LLVMTargetMachineRef, PM: LLVMPassManagerRef);
