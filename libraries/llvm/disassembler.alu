//! A disassembler library.

enum LLVMOpaqueDisasmContext {}

type LLVMDisasmContextRef = &mut LLVMOpaqueDisasmContext;

type LLVMOpInfoCallback = fn(
        &mut void,
        u64,
        u64,
        u64,
        libc::c_int,
        &mut void,
    ) -> libc::c_int;

struct LLVMOpInfoSymbol1 {
    /// 1 if this symbol is present.
    Present: u64,
    /// Symbol name if not NULL.
    Name: &libc::c_char,
    /// Symbol value if name is NULL.
    Value: u64,
}

struct Struct_LLVMOpInfo1 {
    AddSymbol: LLVMOpInfoSymbol1,
    SubtractSymbol: LLVMOpInfoSymbol1,
    Value: u64,
    VariantKind: u64,
}

const LLVMDisassembler_VariantKind_None: u64 = 0;
const LLVMDisassembler_VariantKind_ARM_HI16: u64 = 1;
const LLVMDisassembler_VariantKind_ARM_LO16: u64 = 2;
const LLVMDisassembler_VariantKind_ARM64_PAGE: u64 = 1;
const LLVMDisassembler_VariantKind_ARM64_PAGEOFF: u64 = 2;
const LLVMDisassembler_VariantKind_ARM64_GOTPAGE: u64 = 3;
const LLVMDisassembler_VariantKind_ARM64_GOTPAGEOFF: u64 = 4;
const LLVMDisassembler_VariantKind_ARM64_TLVP: u64 = 5;
const LLVMDisassembler_VariantKind_ARM64_TLVOFF: u64 = 6;

/// No input reference type or no output reference type.
const LLVMDisassembler_ReferenceType_InOut_None: u64 = 0;

/// The input reference is from a branch instruction.
const LLVMDisassembler_ReferenceType_In_Branch: u64 = 1;
/// The input reference is from a PC relative load instruction.
const LLVMDisassembler_ReferenceType_In_PCrel_Load: u64 = 2;

/// The input reference is from an ARM64::ADRP instruction.
const LLVMDisassembler_ReferenceType_In_ARM64_ADRP: u64 = 0x100000001;
/// The input reference is from an ARM64::ADDXri instruction.
const LLVMDisassembler_ReferenceType_In_ARM64_ADDXri: u64 = 0x100000002;
/// The input reference is from an ARM64::LDRXui instruction.
const LLVMDisassembler_ReferenceType_In_ARM64_LDRXui: u64 = 0x100000003;
/// The input reference is from an ARM64::LDRXl instruction.
const LLVMDisassembler_ReferenceType_In_ARM64_LDRXl: u64 = 0x100000004;
/// The input reference is from an ARM64::ADR instruction.
const LLVMDisassembler_ReferenceType_In_ARM64_ADR: u64 = 0x100000005;

/// The output reference is to as symbol stub.
const LLVMDisassembler_ReferenceType_Out_SymbolStub: u64 = 1;
/// The output reference is to a symbol address in a literal pool.
const LLVMDisassembler_ReferenceType_Out_LitPool_SymAddr: u64 = 2;
/// The output reference is to a cstring address in a literal pool.
const LLVMDisassembler_ReferenceType_Out_LitPool_CstrAddr: u64 = 3;

/// The output reference is to a Objective-C CoreFoundation string.
const LLVMDisassembler_ReferenceType_Out_Objc_CFString_Ref: u64 = 4;
/// The output reference is to a Objective-C message.
const LLVMDisassembler_ReferenceType_Out_Objc_Message: u64 = 5;
/// The output reference is to a Objective-C message ref.
const LLVMDisassembler_ReferenceType_Out_Objc_Message_Ref: u64 = 6;
/// The output reference is to a Objective-C selector ref.
const LLVMDisassembler_ReferenceType_Out_Objc_Selector_Ref: u64 = 7;
/// The output reference is to a Objective-C class ref.
const LLVMDisassembler_ReferenceType_Out_Objc_Class_Ref: u64 = 8;
/// The output reference is to a C++ symbol name.
const LLVMDisassembler_ReferenceType_DeMangled_Name: u64 = 9;

/// The option to produce marked up assembly.
const LLVMDisassembler_Option_UseMarkup: u64 = 1;
/// The option to print immediates as hex.
const LLVMDisassembler_Option_PrintImmHex: u64 = 2;
/// The option use the other assembler printer variant
const LLVMDisassembler_Option_AsmPrinterVariant: u64 = 4;
/// The option to set comment on instructions
const LLVMDisassembler_Option_SetInstrComments: u64 = 8;
/// The option to print latency information alongside instructions
const LLVMDisassembler_Option_PrintLatency: u64 = 16;

type LLVMSymbolLookupCallback = fn(
        &mut void,
        u64,
        &mut u64,
        u64,
        &mut &libc::c_char,
    ) -> &libc::c_char;

extern "C" fn LLVMCreateDisasm(
    TripleName: &libc::c_char,
    DisInfo: &mut void,
    TagType: libc::c_int,
    GetOpInfo: LLVMOpInfoCallback,
    SymbolLookUp: LLVMSymbolLookupCallback,
) -> LLVMDisasmContextRef;
extern "C" fn LLVMCreateDisasmCPU(
    Triple: &libc::c_char,
    CPU: &libc::c_char,
    DisInfo: &mut void,
    TagType: libc::c_int,
    GetOpInfo: LLVMOpInfoCallback,
    SymbolLookUp: LLVMSymbolLookupCallback,
) -> LLVMDisasmContextRef;
extern "C" fn LLVMCreateDisasmCPUFeatures(
    Triple: &libc::c_char,
    CPU: &libc::c_char,
    Features: &libc::c_char,
    DisInfo: &mut void,
    TagType: libc::c_int,
    GetOpInfo: LLVMOpInfoCallback,
    SymbolLookUp: LLVMSymbolLookupCallback,
) -> LLVMDisasmContextRef;
extern "C" fn LLVMSetDisasmOptions(DC: LLVMDisasmContextRef, Options: u64) -> libc::c_int;
extern "C" fn LLVMDisasmDispose(DC: LLVMDisasmContextRef);
extern "C" fn LLVMDisasmInstruction(
    DC: LLVMDisasmContextRef,
    Bytes: &mut u8,
    BytesSize: u64,
    PC: u64,
    OutString: &mut libc::c_char,
    OutStringSize: libc::size_t,
) -> libc::size_t;
