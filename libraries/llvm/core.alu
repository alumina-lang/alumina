//! The LLVM intermediate representation.

// Core
extern "C" fn LLVMShutdown();
extern "C" fn LLVMCreateMessage(Message: &libc::c_char) -> &mut libc::c_char;
extern "C" fn LLVMDisposeMessage(Message: &mut libc::c_char);


// Core->Contexts
extern "C" fn LLVMContextCreate() -> LLVMContextRef;
extern "C" fn LLVMGetGlobalContext() -> LLVMContextRef;
extern "C" fn LLVMContextSetDiagnosticHandler(
    C: LLVMContextRef,
    Handler: LLVMDiagnosticHandler,
    DiagnosticContext: &mut void,
);
/// Get the diagnostic handler of this context.
extern "C" fn LLVMContextGetDiagnosticHandler(C: LLVMContextRef) -> LLVMDiagnosticHandler;
/// Get the diagnostic context of this context.
extern "C" fn LLVMContextGetDiagnosticContext(C: LLVMContextRef) -> &mut void;
extern "C" fn LLVMContextSetYieldCallback(
    C: LLVMContextRef,
    Callback: LLVMYieldCallback,
    OpaqueHandle: &mut void,
);
extern "C" fn LLVMContextShouldDiscardValueNames(C: LLVMContextRef) -> LLVMBool;
extern "C" fn LLVMContextSetDiscardValueNames(C: LLVMContextRef, Discard: LLVMBool);
extern "C" fn LLVMContextDispose(C: LLVMContextRef);
extern "C" fn LLVMGetDiagInfoDescription(DI: LLVMDiagnosticInfoRef) -> &mut libc::c_char;
extern "C" fn LLVMGetDiagInfoSeverity(DI: LLVMDiagnosticInfoRef) -> LLVMDiagnosticSeverity;
extern "C" fn LLVMGetMDKindIDInContext(
    C: LLVMContextRef,
    Name: &libc::c_char,
    SLen: libc::c_uint,
) -> libc::c_uint;
extern "C" fn LLVMGetMDKindID(Name: &libc::c_char, SLen: libc::c_uint) -> libc::c_uint;

/// Return a unique id given the name of an enum attribute, or 0 if no attribute
/// by that name exists.
///
/// See http://llvm.org/docs/LangRef.html#parameter-attributes
/// and http://llvm.org/docs/LangRef.html#function-attributes
/// for the list of available attributes.
///
/// Note that attribute names and IDs are not subject to the same stability
/// guarantees as this API.
extern "C" fn LLVMGetEnumAttributeKindForName(
    Name: &libc::c_char,
    SLen: libc::size_t,
) -> libc::c_uint;
extern "C" fn LLVMGetLastEnumAttributeKind() -> libc::c_uint;

/// Create an enum attribute.
extern "C" fn LLVMCreateEnumAttribute(
    C: LLVMContextRef,
    KindID: libc::c_uint,
    Val: u64,
) -> LLVMAttributeRef;
/// Get the unique id corresponding to the provided enum attribute.
extern "C" fn LLVMGetEnumAttributeKind(A: LLVMAttributeRef) -> libc::c_uint;
/// Get the value of an enum attribute.
///
/// Returns 0 if none exists.
extern "C" fn LLVMGetEnumAttributeValue(A: LLVMAttributeRef) -> u64;

/// Create a type attribute.
extern "C" fn LLVMCreateTypeAttribute(
    C: LLVMContextRef,
    KindID: libc::c_uint,
    type_ref: LLVMTypeRef,
) -> LLVMAttributeRef;
/// Get the type attribute's value.
extern "C" fn LLVMGetTypeAttributeValue(A: LLVMAttributeRef) -> LLVMTypeRef;

/// Create a string attribute.
extern "C" fn LLVMCreateStringAttribute(
    C: LLVMContextRef,
    K: &libc::c_char,
    KLength: libc::c_uint,
    V: &libc::c_char,
    VLength: libc::c_uint,
) -> LLVMAttributeRef;
/// Get a string attribute's kind.
extern "C" fn LLVMGetStringAttributeKind(
    A: LLVMAttributeRef,
    Length: &mut libc::c_uint,
) -> &libc::c_char;
/// Get a string attribute's value.
extern "C" fn LLVMGetStringAttributeValue(
    A: LLVMAttributeRef,
    Length: &mut libc::c_uint,
) -> &libc::c_char;
extern "C" fn LLVMIsEnumAttribute(A: LLVMAttributeRef) -> LLVMBool;
extern "C" fn LLVMIsStringAttribute(A: LLVMAttributeRef) -> LLVMBool;
extern "C" fn LLVMIsTypeAttribute(A: LLVMAttributeRef) -> LLVMBool;

/// Obtain a Type from a context by its registered name.
extern "C" fn LLVMGetTypeByName2(C: LLVMContextRef, Name: &libc::c_char) -> LLVMTypeRef;

// Core->Modules

extern "C" fn LLVMModuleCreateWithName(ModuleID: &libc::c_char) -> LLVMModuleRef;
extern "C" fn LLVMModuleCreateWithNameInContext(
    ModuleID: &libc::c_char,
    C: LLVMContextRef,
) -> LLVMModuleRef;
extern "C" fn LLVMCloneModule(M: LLVMModuleRef) -> LLVMModuleRef;
extern "C" fn LLVMDisposeModule(M: LLVMModuleRef);
/// Get the identifier of a module.
///
/// `Len` is written to contains the length of the returned string.
extern "C" fn LLVMGetModuleIdentifier(
    M: LLVMModuleRef,
    Len: &mut libc::size_t,
) -> &libc::c_char;
/// Set the identifier of a module.
///
/// `Len` is the length of the string pointed to by `Ident`.
extern "C" fn LLVMSetModuleIdentifier(
    M: LLVMModuleRef,
    Ident: &libc::c_char,
    Len: libc::size_t,
);

/// Obtain the module's original source file name.
///
/// Len holds the length of the returned string, returns the original source file name of M.
extern "C" fn LLVMGetSourceFileName(
    M: LLVMModuleRef,
    Len: &mut libc::size_t,
) -> &libc::c_char;
/// Set the original source file name of a module to a string Name with length Len.
extern "C" fn LLVMSetSourceFileName(
    M: LLVMModuleRef,
    Name: &libc::c_char,
    Len: libc::size_t,
);

#[deprecated(since = "3.9", note = "Confusingly named. Use LLVMGetDataLayoutStr.")]
extern "C" fn LLVMGetDataLayout(M: LLVMModuleRef) -> &libc::c_char;
/// Obtain the data layout for a module.
extern "C" fn LLVMGetDataLayoutStr(M: LLVMModuleRef) -> &libc::c_char;
extern "C" fn LLVMSetDataLayout(M: LLVMModuleRef, DataLayoutStr: &libc::c_char);
extern "C" fn LLVMGetTarget(M: LLVMModuleRef) -> &libc::c_char;
extern "C" fn LLVMSetTarget(M: LLVMModuleRef, Triple: &libc::c_char);

/// Returns the module flags as an array of flag-key-value triples.  The caller is responsible for freeing this array by calling LLVMDisposeModuleFlagsMetadata.
extern "C" fn LLVMCopyModuleFlagsMetadata(
    M: LLVMModuleRef,
    Len: &mut libc::size_t,
) -> &mut LLVMModuleFlagEntry;
/// Destroys module flags metadata entries.
extern "C" fn LLVMDisposeModuleFlagsMetadata(Entries: &mut LLVMModuleFlagEntry);
/// Returns the flag behavior for a module flag entry at a specific index.
extern "C" fn LLVMModuleFlagEntriesGetFlagBehavior(
    Entries: &mut LLVMModuleFlagEntry,
    Index: libc::c_uint,
) -> LLVMModuleFlagBehavior;
/// Returns the key for a module flag entry at a specific index.
extern "C" fn LLVMModuleFlagEntriesGetKey(
    Entries: &mut LLVMModuleFlagEntry,
    Index: libc::c_uint,
    Len: &mut libc::size_t,
) -> &libc::c_char;
/// Returns the metadata for a module flag entry at a specific index.
extern "C" fn LLVMModuleFlagEntriesGetMetadata(
    Entries: &mut LLVMModuleFlagEntry,
    Index: libc::c_uint,
) -> LLVMMetadataRef;
/// Add a module-level flag to the module-level flags metadata if it doesn't already exist.
extern "C" fn LLVMGetModuleFlag(
    M: LLVMModuleRef,
    Key: &libc::c_char,
    KeyLen: libc::size_t,
) -> LLVMMetadataRef;
/// Add a module-level flag to the module-level flags metadata if it doesn't already exist.
extern "C" fn LLVMAddModuleFlag(
    M: LLVMModuleRef,
    Behavior: LLVMModuleFlagBehavior,
    Key: &libc::c_char,
    KeyLen: libc::size_t,
    Val: LLVMMetadataRef,
);

extern "C" fn LLVMDumpModule(M: LLVMModuleRef);
extern "C" fn LLVMPrintModuleToFile(
    M: LLVMModuleRef,
    Filename: &libc::c_char,
    ErrorMessage: &mut &mut libc::c_char,
) -> LLVMBool;
extern "C" fn LLVMPrintModuleToString(M: LLVMModuleRef) -> &mut libc::c_char;

extern "C" fn LLVMGetModuleInlineAsm(
    M: LLVMModuleRef,
    Len: &mut libc::size_t,
) -> &libc::c_char;

#[deprecated(since = "7.0", note = "Use LLVMSetModuleInlineAsm2 instead")]
extern "C" fn LLVMSetModuleInlineAsm(M: LLVMModuleRef, Asm: &libc::c_char);
extern "C" fn LLVMSetModuleInlineAsm2(
    M: LLVMModuleRef,
    Asm: &libc::c_char,
    Len: libc::size_t,
);
extern "C" fn LLVMAppendModuleInlineAsm(
    M: LLVMModuleRef,
    Asm: &libc::c_char,
    Len: libc::size_t,
);
extern "C" fn LLVMGetInlineAsm(
    Ty: LLVMTypeRef,
    AsmString: &mut libc::c_char,
    AsmStringSize: libc::size_t,
    Constraints: &mut libc::c_char,
    ConstraintsSize: libc::size_t,
    HasSideEffects: LLVMBool,
    IsAlignStack: LLVMBool,
    Dialect: LLVMInlineAsmDialect,
    CanThrow: LLVMBool,
) -> LLVMValueRef;

extern "C" fn LLVMGetModuleContext(M: LLVMModuleRef) -> LLVMContextRef;
#[deprecated(since = "12.0.0", note = "Use LLVMGetTypeByName2 instead")]
extern "C" fn LLVMGetTypeByName(M: LLVMModuleRef, Name: &libc::c_char) -> LLVMTypeRef;
extern "C" fn LLVMGetFirstNamedMetadata(M: LLVMModuleRef) -> LLVMNamedMDNodeRef;
extern "C" fn LLVMGetLastNamedMetadata(M: LLVMModuleRef) -> LLVMNamedMDNodeRef;
extern "C" fn LLVMGetNextNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef) -> LLVMNamedMDNodeRef;
extern "C" fn LLVMGetPreviousNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef) -> LLVMNamedMDNodeRef;
extern "C" fn LLVMGetNamedMetadata(
    M: LLVMModuleRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
) -> LLVMNamedMDNodeRef;
extern "C" fn LLVMGetOrInsertNamedMetadata(
    M: LLVMModuleRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
) -> LLVMNamedMDNodeRef;
extern "C" fn LLVMGetNamedMetadataName(
    NamedMD: LLVMNamedMDNodeRef,
    NameLen: &libc::size_t,
) -> &libc::c_char;
extern "C" fn LLVMGetNamedMetadataNumOperands(
    M: LLVMModuleRef,
    name: &libc::c_char,
) -> libc::c_uint;
extern "C" fn LLVMGetNamedMetadataOperands(
    M: LLVMModuleRef,
    name: &libc::c_char,
    Dest: &mut LLVMValueRef,
);
extern "C" fn LLVMAddNamedMetadataOperand(
    M: LLVMModuleRef,
    name: &libc::c_char,
    Val: LLVMValueRef,
);
extern "C" fn LLVMGetDebugLocDirectory(
    Val: LLVMValueRef,
    Length: &mut libc::c_uint,
) -> &libc::c_char;
extern "C" fn LLVMGetDebugLocFilename(
    Val: LLVMValueRef,
    Length: &mut libc::c_uint,
) -> &libc::c_char;
extern "C" fn LLVMGetDebugLocLine(Val: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMGetDebugLocColumn(Val: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMAddFunction(
    M: LLVMModuleRef,
    Name: &libc::c_char,
    FunctionTy: LLVMTypeRef,
) -> LLVMValueRef;
extern "C" fn LLVMGetNamedFunction(M: LLVMModuleRef, Name: &libc::c_char) -> LLVMValueRef;
extern "C" fn LLVMGetFirstFunction(M: LLVMModuleRef) -> LLVMValueRef;
extern "C" fn LLVMGetLastFunction(M: LLVMModuleRef) -> LLVMValueRef;
extern "C" fn LLVMGetNextFunction(Fn: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMGetPreviousFunction(Fn: LLVMValueRef) -> LLVMValueRef;


// Core->Types
extern "C" fn LLVMGetTypeKind(Ty: LLVMTypeRef) -> LLVMTypeKind;
extern "C" fn LLVMTypeIsSized(Ty: LLVMTypeRef) -> LLVMBool;
extern "C" fn LLVMGetTypeContext(Ty: LLVMTypeRef) -> LLVMContextRef;
extern "C" fn LLVMDumpType(Val: LLVMTypeRef);
extern "C" fn LLVMPrintTypeToString(Val: LLVMTypeRef) -> &mut libc::c_char;

// Core->Types->Integer
extern "C" fn LLVMInt1TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMInt8TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMInt16TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMInt32TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMInt64TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMInt128TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMIntTypeInContext(C: LLVMContextRef, NumBits: libc::c_uint) -> LLVMTypeRef;
extern "C" fn LLVMInt1Type() -> LLVMTypeRef;
extern "C" fn LLVMInt8Type() -> LLVMTypeRef;
extern "C" fn LLVMInt16Type() -> LLVMTypeRef;
extern "C" fn LLVMInt32Type() -> LLVMTypeRef;
extern "C" fn LLVMInt64Type() -> LLVMTypeRef;
extern "C" fn LLVMInt128Type() -> LLVMTypeRef;
extern "C" fn LLVMIntType(NumBits: libc::c_uint) -> LLVMTypeRef;
extern "C" fn LLVMGetIntTypeWidth(IntegerTy: LLVMTypeRef) -> libc::c_uint;

// Core->Types->Floating-Point
extern "C" fn LLVMHalfTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMBFloatTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMFloatTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMDoubleTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMX86FP80TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMFP128TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMPPCFP128TypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMHalfType() -> LLVMTypeRef;
extern "C" fn LLVMBFloatType() -> LLVMTypeRef;
extern "C" fn LLVMFloatType() -> LLVMTypeRef;
extern "C" fn LLVMDoubleType() -> LLVMTypeRef;
extern "C" fn LLVMX86FP80Type() -> LLVMTypeRef;
extern "C" fn LLVMFP128Type() -> LLVMTypeRef;
extern "C" fn LLVMPPCFP128Type() -> LLVMTypeRef;

// Core->Types->Function
extern "C" fn LLVMFunctionType(
    ReturnType: LLVMTypeRef,
    ParamTypes: &mut LLVMTypeRef,
    ParamCount: libc::c_uint,
    IsVarArg: LLVMBool,
) -> LLVMTypeRef;
extern "C" fn LLVMIsFunctionVarArg(FunctionTy: LLVMTypeRef) -> LLVMBool;
extern "C" fn LLVMGetReturnType(FunctionTy: LLVMTypeRef) -> LLVMTypeRef;
extern "C" fn LLVMCountParamTypes(FunctionTy: LLVMTypeRef) -> libc::c_uint;
extern "C" fn LLVMGetParamTypes(FunctionTy: LLVMTypeRef, Dest: &mut LLVMTypeRef);

// Core->Types->Struct
extern "C" fn LLVMStructTypeInContext(
    C: LLVMContextRef,
    ElementTypes: &mut LLVMTypeRef,
    ElementCount: libc::c_uint,
    Packed: LLVMBool,
) -> LLVMTypeRef;
extern "C" fn LLVMStructType(
    ElementTypes: &mut LLVMTypeRef,
    ElementCount: libc::c_uint,
    Packed: LLVMBool,
) -> LLVMTypeRef;
extern "C" fn LLVMStructCreateNamed(C: LLVMContextRef, Name: &libc::c_char) -> LLVMTypeRef;
extern "C" fn LLVMGetStructName(Ty: LLVMTypeRef) -> &libc::c_char;
extern "C" fn LLVMStructSetBody(
    StructTy: LLVMTypeRef,
    ElementTypes: &mut LLVMTypeRef,
    ElementCount: libc::c_uint,
    Packed: LLVMBool,
);
extern "C" fn LLVMCountStructElementTypes(StructTy: LLVMTypeRef) -> libc::c_uint;
extern "C" fn LLVMGetStructElementTypes(StructTy: LLVMTypeRef, Dest: &mut LLVMTypeRef);
/// Get the type of the element at the given index in a structure.
///
/// Added in LLVM 3.7.
extern "C" fn LLVMStructGetTypeAtIndex(StructTy: LLVMTypeRef, i: libc::c_uint) -> LLVMTypeRef;
/// Determine whether a structure is packed.
extern "C" fn LLVMIsPackedStruct(StructTy: LLVMTypeRef) -> LLVMBool;
extern "C" fn LLVMIsOpaqueStruct(StructTy: LLVMTypeRef) -> LLVMBool;
extern "C" fn LLVMIsLiteralStruct(StructTy: LLVMTypeRef) -> LLVMBool;

// Core->Types->Sequential
extern "C" fn LLVMGetElementType(Ty: LLVMTypeRef) -> LLVMTypeRef;
/// Get the subtypes of the given type.
extern "C" fn LLVMGetSubtypes(Tp: LLVMTypeRef, Arr: &mut LLVMTypeRef);
/// Return the number of types in the derived type.
extern "C" fn LLVMGetNumContainedTypes(Tp: LLVMTypeRef) -> libc::c_uint;
extern "C" fn LLVMArrayType(ElementType: LLVMTypeRef, ElementCount: libc::c_uint) -> LLVMTypeRef;
extern "C" fn LLVMGetArrayLength(ArrayTy: LLVMTypeRef) -> libc::c_uint;
extern "C" fn LLVMPointerType(ElementType: LLVMTypeRef, AddressSpace: libc::c_uint) -> LLVMTypeRef;
extern "C" fn LLVMGetPointerAddressSpace(PointerTy: LLVMTypeRef) -> libc::c_uint;
extern "C" fn LLVMVectorType(ElementType: LLVMTypeRef, ElementCount: libc::c_uint) -> LLVMTypeRef;
/// Create a vector type that contains a defined type and has a scalable
/// number of elements.
///
/// The created type will exist in the context that its element type
/// exists in.
extern "C" fn LLVMScalableVectorType(
    ElementType: LLVMTypeRef,
    ElementCount: libc::c_uint,
) -> LLVMTypeRef;
/// Obtain the (possibly scalable) number of elements in a vector type.
extern "C" fn LLVMGetVectorSize(VectorTy: LLVMTypeRef) -> libc::c_uint;

// Core->Types->Other
extern "C" fn LLVMVoidTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMLabelTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMX86MMXTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMX86AMXTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMTokenTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMMetadataTypeInContext(C: LLVMContextRef) -> LLVMTypeRef;
extern "C" fn LLVMVoidType() -> LLVMTypeRef;
extern "C" fn LLVMLabelType() -> LLVMTypeRef;
extern "C" fn LLVMX86MMXType() -> LLVMTypeRef;
extern "C" fn LLVMX86AMXType() -> LLVMTypeRef;


// Core->Values

// Core->Values->General
// Get the enumerated kind of a Value instance.
extern "C" fn LLVMGetValueKind(Val: LLVMValueRef) -> LLVMValueKind;
extern "C" fn LLVMTypeOf(Val: LLVMValueRef) -> LLVMTypeRef;

#[deprecated(since = "7.0", note = "Use LLVMGetValueName2 instead")]
extern "C" fn LLVMGetValueName(Val: LLVMValueRef) -> &libc::c_char;
extern "C" fn LLVMGetValueName2(
    Val: LLVMValueRef,
    Length: &mut libc::size_t,
) -> &libc::c_char;
#[deprecated(since = "7.0", note = "Use LLVMSetValueName2 instead")]
extern "C" fn LLVMSetValueName(Val: LLVMValueRef, Name: &libc::c_char);
extern "C" fn LLVMSetValueName2(
    Val: LLVMValueRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
);

extern "C" fn LLVMDumpValue(Val: LLVMValueRef);
extern "C" fn LLVMPrintValueToString(Val: LLVMValueRef) -> &mut libc::c_char;
extern "C" fn LLVMReplaceAllUsesWith(OldVal: LLVMValueRef, NewVal: LLVMValueRef);
/// Determine whether the specified value instance is constant.
extern "C" fn LLVMIsConstant(Val: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMIsUndef(Val: LLVMValueRef) -> LLVMBool;
/// Determine whether a value instance is poisonous.
extern "C" fn LLVMIsPoison(Val: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMIsAMDNode(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAMDString(Val: LLVMValueRef) -> LLVMValueRef;

// Core->Values->Usage
extern "C" fn LLVMGetFirstUse(Val: LLVMValueRef) -> LLVMUseRef;
extern "C" fn LLVMGetNextUse(U: LLVMUseRef) -> LLVMUseRef;
extern "C" fn LLVMGetUser(U: LLVMUseRef) -> LLVMValueRef;
extern "C" fn LLVMGetUsedValue(U: LLVMUseRef) -> LLVMValueRef;

// Core->Values->User value
extern "C" fn LLVMGetOperand(Val: LLVMValueRef, Index: libc::c_uint) -> LLVMValueRef;
extern "C" fn LLVMGetOperandUse(Val: LLVMValueRef, Index: libc::c_uint) -> LLVMUseRef;
extern "C" fn LLVMSetOperand(User: LLVMValueRef, Index: libc::c_uint, Val: LLVMValueRef);
extern "C" fn LLVMGetNumOperands(Val: LLVMValueRef) -> libc::c_int;

// Core->Values->Constants
extern "C" fn LLVMConstNull(Ty: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstAllOnes(Ty: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMGetUndef(Ty: LLVMTypeRef) -> LLVMValueRef;
/// Obtain a constant value referring to a poison value of a type.
extern "C" fn LLVMGetPoison(Ty: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMIsNull(Val: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMConstPointerNull(Ty: LLVMTypeRef) -> LLVMValueRef;

// Core->Values->Constants->Scalar
extern "C" fn LLVMConstInt(
    IntTy: LLVMTypeRef,
    N: libc::c_ulonglong,
    SignExtend: LLVMBool,
) -> LLVMValueRef;
extern "C" fn LLVMConstIntOfArbitraryPrecision(
    IntTy: LLVMTypeRef,
    NumWords: libc::c_uint,
    Words: &u64,
) -> LLVMValueRef;
extern "C" fn LLVMConstIntOfString(
    IntTy: LLVMTypeRef,
    Text: &libc::c_char,
    Radix: u8,
) -> LLVMValueRef;
extern "C" fn LLVMConstIntOfStringAndSize(
    IntTy: LLVMTypeRef,
    Text: &libc::c_char,
    SLen: libc::c_uint,
    Radix: u8,
) -> LLVMValueRef;
extern "C" fn LLVMConstReal(RealTy: LLVMTypeRef, N: libc::c_double) -> LLVMValueRef;
extern "C" fn LLVMConstRealOfString(RealTy: LLVMTypeRef, Text: &libc::c_char) -> LLVMValueRef;
extern "C" fn LLVMConstRealOfStringAndSize(
    RealTy: LLVMTypeRef,
    Text: &libc::c_char,
    SLen: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMConstIntGetZExtValue(ConstantVal: LLVMValueRef) -> libc::c_ulonglong;
extern "C" fn LLVMConstIntGetSExtValue(ConstantVal: LLVMValueRef) -> libc::c_longlong;
extern "C" fn LLVMConstRealGetDouble(
    ConstantVal: LLVMValueRef,
    losesInfo: &mut LLVMBool,
) -> libc::c_double;

// Core->Values->Constants->Composite
extern "C" fn LLVMConstStringInContext(
    C: LLVMContextRef,
    Str: &libc::c_char,
    Length: libc::c_uint,
    DontNullTerminate: LLVMBool,
) -> LLVMValueRef;
extern "C" fn LLVMConstString(
    Str: &libc::c_char,
    Length: libc::c_uint,
    DontNullTerminate: LLVMBool,
) -> LLVMValueRef;
extern "C" fn LLVMIsConstantString(c: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMGetAsString(C: LLVMValueRef, Length: &mut libc::size_t) -> &libc::c_char;
extern "C" fn LLVMConstStructInContext(
    C: LLVMContextRef,
    ConstantVals: &mut LLVMValueRef,
    Count: libc::c_uint,
    Packed: LLVMBool,
) -> LLVMValueRef;
extern "C" fn LLVMConstStruct(
    ConstantVals: &mut LLVMValueRef,
    Count: libc::c_uint,
    Packed: LLVMBool,
) -> LLVMValueRef;
extern "C" fn LLVMConstArray(
    ElementTy: LLVMTypeRef,
    ConstantVals: &mut LLVMValueRef,
    Length: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMConstNamedStruct(
    StructTy: LLVMTypeRef,
    ConstantVals: &mut LLVMValueRef,
    Count: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMGetElementAsConstant(C: LLVMValueRef, idx: libc::c_uint) -> LLVMValueRef;
extern "C" fn LLVMConstVector(
    ScalarConstantVals: &mut LLVMValueRef,
    Size: libc::c_uint,
) -> LLVMValueRef;

// Core->Values->Constants->Constant expressions
extern "C" fn LLVMGetConstOpcode(ConstantVal: LLVMValueRef) -> LLVMOpcode;
extern "C" fn LLVMAlignOf(Ty: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMSizeOf(Ty: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstNeg(ConstantVal: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstNSWNeg(ConstantVal: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstNUWNeg(ConstantVal: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstFNeg(ConstantVal: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstNot(ConstantVal: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstNSWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstNUWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstFAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstNSWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstNUWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstFSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstNSWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstNUWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstFMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstUDiv(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstExactUDiv(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef)
    -> LLVMValueRef;
extern "C" fn LLVMConstSDiv(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstExactSDiv(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef)
    -> LLVMValueRef;
extern "C" fn LLVMConstFDiv(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstURem(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstSRem(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstFRem(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstAnd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstOr(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstXor(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstICmp(
    Predicate: LLVMIntPredicate,
    LHSConstant: LLVMValueRef,
    RHSConstant: LLVMValueRef,
) -> LLVMValueRef;
extern "C" fn LLVMConstFCmp(
    Predicate: LLVMRealPredicate,
    LHSConstant: LLVMValueRef,
    RHSConstant: LLVMValueRef,
) -> LLVMValueRef;
extern "C" fn LLVMConstShl(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstLShr(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstAShr(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMConstGEP(
    ConstantVal: LLVMValueRef,
    ConstantIndices: &mut LLVMValueRef,
    NumIndices: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMConstGEP2(
    Ty: LLVMTypeRef,
    ConstantVal: LLVMValueRef,
    ConstantIndices: &mut LLVMValueRef,
    NumIndices: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMConstInBoundsGEP(
    ConstantVal: LLVMValueRef,
    ConstantIndices: &mut LLVMValueRef,
    NumIndices: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMConstInBoundsGEP2(
    Ty: LLVMTypeRef,
    ConstantVal: LLVMValueRef,
    ConstantIndices: &mut LLVMValueRef,
    NumIndices: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMConstTrunc(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstSExt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstZExt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstFPTrunc(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstFPExt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstUIToFP(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstSIToFP(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstFPToUI(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstFPToSI(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstPtrToInt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstIntToPtr(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstAddrSpaceCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstZExtOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstSExtOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstTruncOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstPointerCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstIntCast(
    ConstantVal: LLVMValueRef,
    ToType: LLVMTypeRef,
    isSigned: LLVMBool,
) -> LLVMValueRef;
extern "C" fn LLVMConstFPCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef) -> LLVMValueRef;
extern "C" fn LLVMConstSelect(
    ConstantCondition: LLVMValueRef,
    ConstantIfTrue: LLVMValueRef,
    ConstantIfFalse: LLVMValueRef,
) -> LLVMValueRef;
extern "C" fn LLVMConstExtractElement(
    VectorConstant: LLVMValueRef,
    IndexConstant: LLVMValueRef,
) -> LLVMValueRef;
extern "C" fn LLVMConstInsertElement(
    VectorConstant: LLVMValueRef,
    ElementValueConstant: LLVMValueRef,
    IndexConstant: LLVMValueRef,
) -> LLVMValueRef;
extern "C" fn LLVMConstShuffleVector(
    VectorAConstant: LLVMValueRef,
    VectorBConstant: LLVMValueRef,
    MaskConstant: LLVMValueRef,
) -> LLVMValueRef;
extern "C" fn LLVMConstExtractValue(
    AggConstant: LLVMValueRef,
    IdxList: &mut libc::c_uint,
    NumIdx: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMConstInsertValue(
    AggConstant: LLVMValueRef,
    ElementValueConstant: LLVMValueRef,
    IdxList: &mut libc::c_uint,
    NumIdx: libc::c_uint,
) -> LLVMValueRef;
#[deprecated(since = "7.0", note = "Use LLVMGetInlineAsm instead")]
extern "C" fn LLVMConstInlineAsm(
    Ty: LLVMTypeRef,
    AsmString: &libc::c_char,
    Constraints: &libc::c_char,
    HasSideEffects: LLVMBool,
    IsAlignStack: LLVMBool,
) -> LLVMValueRef;
extern "C" fn LLVMBlockAddress(F: LLVMValueRef, BB: LLVMBasicBlockRef) -> LLVMValueRef;

// Core->Values->Constants->Global Values
extern "C" fn LLVMGetGlobalParent(Global: LLVMValueRef) -> LLVMModuleRef;
extern "C" fn LLVMIsDeclaration(Global: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMGetLinkage(Global: LLVMValueRef) -> LLVMLinkage;
extern "C" fn LLVMSetLinkage(Global: LLVMValueRef, Linkage: LLVMLinkage);
extern "C" fn LLVMGetSection(Global: LLVMValueRef) -> &libc::c_char;
extern "C" fn LLVMSetSection(Global: LLVMValueRef, Section: &libc::c_char);
extern "C" fn LLVMGetVisibility(Global: LLVMValueRef) -> LLVMVisibility;
extern "C" fn LLVMSetVisibility(Global: LLVMValueRef, Viz: LLVMVisibility);
extern "C" fn LLVMGetDLLStorageClass(Global: LLVMValueRef) -> LLVMDLLStorageClass;
extern "C" fn LLVMSetDLLStorageClass(Global: LLVMValueRef, Class: LLVMDLLStorageClass);

extern "C" fn LLVMGetUnnamedAddress(Global: LLVMValueRef) -> LLVMUnnamedAddr;
extern "C" fn LLVMSetUnnamedAddress(Global: LLVMValueRef, UnnamedAddr: LLVMUnnamedAddr);
extern "C" fn LLVMGlobalGetValueType(Global: LLVMValueRef) -> LLVMTypeRef;
#[deprecated(since = "7.0", note = "Use LLVMGetUnnamedAddress instead")]
extern "C" fn LLVMHasUnnamedAddr(Global: LLVMValueRef) -> LLVMBool;
#[deprecated(since = "7.0", note = "Use LLVMSetUnnamedAddress instead")]
extern "C" fn LLVMSetUnnamedAddr(Global: LLVMValueRef, HasUnnamedAddr: LLVMBool);

extern "C" fn LLVMGetAlignment(V: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMSetAlignment(V: LLVMValueRef, Bytes: libc::c_uint);

extern "C" fn LLVMGlobalSetMetadata(Global: LLVMValueRef, Kind: libc::c_uint, MD: LLVMMetadataRef);
extern "C" fn LLVMGlobalEraseMetadata(Global: LLVMValueRef, Kind: libc::c_uint);
extern "C" fn LLVMGlobalClearMetadata(Global: LLVMValueRef);
extern "C" fn LLVMGlobalCopyAllMetadata(
    Value: LLVMValueRef,
    NumEntries: &mut libc::size_t,
) -> &mut LLVMValueMetadataEntry;
extern "C" fn LLVMDisposeValueMetadataEntries(Entries: &mut LLVMValueMetadataEntry);
extern "C" fn LLVMValueMetadataEntriesGetKind(
    Entries: &mut LLVMValueMetadataEntry,
    Index: libc::c_uint,
) -> libc::c_uint;
extern "C" fn LLVMValueMetadataEntriesGetMetadata(
    Entries: &mut LLVMValueMetadataEntry,
    Index: libc::c_uint,
) -> LLVMMetadataRef;

// Core->Values->Constants->Global Variables
extern "C" fn LLVMAddGlobal(
    M: LLVMModuleRef,
    Ty: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMAddGlobalInAddressSpace(
    M: LLVMModuleRef,
    Ty: LLVMTypeRef,
    Name: &libc::c_char,
    AddressSpace: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMGetNamedGlobal(M: LLVMModuleRef, Name: &libc::c_char) -> LLVMValueRef;
extern "C" fn LLVMGetFirstGlobal(M: LLVMModuleRef) -> LLVMValueRef;
extern "C" fn LLVMGetLastGlobal(M: LLVMModuleRef) -> LLVMValueRef;
extern "C" fn LLVMGetNextGlobal(GlobalVar: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMGetPreviousGlobal(GlobalVar: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMDeleteGlobal(GlobalVar: LLVMValueRef);
extern "C" fn LLVMGetInitializer(GlobalVar: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMSetInitializer(GlobalVar: LLVMValueRef, ConstantVal: LLVMValueRef);
extern "C" fn LLVMIsThreadLocal(GlobalVar: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMSetThreadLocal(GlobalVar: LLVMValueRef, IsThreadLocal: LLVMBool);
extern "C" fn LLVMIsGlobalConstant(GlobalVar: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMSetGlobalConstant(GlobalVar: LLVMValueRef, IsConstant: LLVMBool);
extern "C" fn LLVMGetThreadLocalMode(GlobalVar: LLVMValueRef) -> LLVMThreadLocalMode;
extern "C" fn LLVMSetThreadLocalMode(GlobalVar: LLVMValueRef, Mode: LLVMThreadLocalMode);
extern "C" fn LLVMIsExternallyInitialized(GlobalVar: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMSetExternallyInitialized(GlobalVar: LLVMValueRef, IsExtInit: LLVMBool);

// Core->Values->Constants->Global Aliases
/// Obtain a GlobalAlias value from a Module by its name.
///
/// The returned value corresponds to a llvm::GlobalAlias value.
extern "C" fn LLVMGetNamedGlobalAlias(
    M: LLVMModuleRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
) -> LLVMValueRef;
/// Obtain an iterator to the first GlobalAlias in a Module.
extern "C" fn LLVMGetFirstGlobalAlias(M: LLVMModuleRef) -> LLVMValueRef;
/// Obtain an iterator to the last GlobalAlias in a Module.
extern "C" fn LLVMGetLastGlobalAlias(M: LLVMModuleRef) -> LLVMValueRef;
/// Advance a GlobalAlias iterator to the next GlobalAlias.
///
/// Returns NULL if the iterator was already at the end and there are no more global aliases.
extern "C" fn LLVMGetNextGlobalAlias(GA: LLVMValueRef) -> LLVMValueRef;
/// Decrement a GlobalAlias iterator to the previous GlobalAlias.
///
/// Returns NULL if the iterator was already at the beginning and there are no previous global aliases.
extern "C" fn LLVMGetPreviousGlobalAlias(GA: LLVMValueRef) -> LLVMValueRef;
/// Retrieve the target value of an alias.
extern "C" fn LLVMAliasGetAliasee(Alias: LLVMValueRef) -> LLVMValueRef;
/// Set the target value of an alias.
extern "C" fn LLVMAliasSetAliasee(Alias: LLVMValueRef, Aliasee: LLVMValueRef);

extern "C" fn LLVMAddAlias(
    M: LLVMModuleRef,
    Ty: LLVMTypeRef,
    Aliasee: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;

// ..->Function Values
extern "C" fn LLVMDeleteFunction(Fn: LLVMValueRef);
/// Check whether the given function has a personality function.
extern "C" fn LLVMHasPersonalityFn(Fn: LLVMValueRef) -> LLVMBool;
/// Obtain the personality function attached to the function.
///
/// Added in LLVM 3.7.
extern "C" fn LLVMGetPersonalityFn(Fn: LLVMValueRef) -> LLVMValueRef;
/// Set the personality function attached to the function.
///
/// Added in LLVM 3.7.
extern "C" fn LLVMSetPersonalityFn(Fn: LLVMValueRef, PersonalityFn: LLVMValueRef);
/// Obtain the intrinsic ID number which matches the given function name.
extern "C" fn LLVMLookupIntrinsicID(
    Name: &libc::c_char,
    NameLen: libc::size_t,
) -> libc::c_uint;
/// Obtain the ID number from a function instance.
extern "C" fn LLVMGetIntrinsicID(Fn: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMGetIntrinsicDeclaration(
    Mod: LLVMModuleRef,
    ID: libc::c_uint,
    ParamTypes: &mut LLVMTypeRef,
    ParamCount: libc::size_t,
) -> LLVMValueRef;
extern "C" fn LLVMIntrinsicGetType(
    Ctx: LLVMContextRef,
    ParamTypes: &mut LLVMTypeRef,
    ParamCount: libc::size_t,
) -> LLVMTypeRef;
extern "C" fn LLVMIntrinsicGetName(
    ID: libc::c_uint,
    NameLength: &mut libc::size_t,
) -> &libc::c_char;
#[deprecated = "Use LLVMIntrinsicCopyOverloadedName2 instead."]
extern "C" fn LLVMIntrinsicCopyOverloadedName(
    ID: libc::c_uint,
    ParamTypes: &mut LLVMTypeRef,
    ParamCount: libc::size_t,
    NameLength: &mut libc::size_t,
) -> &libc::c_char;
extern "C" fn LLVMIntrinsicCopyOverloadedName2(
    Mod: LLVMModuleRef,
    ID: libc::c_uint,
    ParamTypes: &mut LLVMTypeRef,
    ParamCount: libc::size_t,
    NameLength: &mut libc::size_t,
) -> &libc::c_char;
extern "C" fn LLVMIntrinsicIsOverloaded(ID: libc::c_uint) -> LLVMBool;
extern "C" fn LLVMGetFunctionCallConv(Fn: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMSetFunctionCallConv(Fn: LLVMValueRef, CC: libc::c_uint);
extern "C" fn LLVMGetGC(Fn: LLVMValueRef) -> &libc::c_char;
extern "C" fn LLVMSetGC(Fn: LLVMValueRef, Name: &libc::c_char);
extern "C" fn LLVMAddAttributeAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef);
extern "C" fn LLVMGetAttributeCountAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex)
    -> libc::c_uint;
extern "C" fn LLVMGetAttributesAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    Attrs: &mut LLVMAttributeRef,
);
extern "C" fn LLVMGetEnumAttributeAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    KindID: libc::c_uint,
) -> LLVMAttributeRef;
extern "C" fn LLVMGetStringAttributeAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    K: &libc::c_char,
    KLen: libc::c_uint,
) -> LLVMAttributeRef;
extern "C" fn LLVMRemoveEnumAttributeAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    KindID: libc::c_uint,
);
extern "C" fn LLVMRemoveStringAttributeAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    K: &libc::c_char,
    KLen: libc::c_uint,
);
extern "C" fn LLVMAddTargetDependentFunctionAttr(
    Fn: LLVMValueRef,
    A: &libc::c_char,
    V: &libc::c_char,
);

// ..->Function Values->Function Parameters
extern "C" fn LLVMCountParams(Fn: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMGetParams(Fn: LLVMValueRef, Params: &mut LLVMValueRef);
extern "C" fn LLVMGetParam(Fn: LLVMValueRef, Index: libc::c_uint) -> LLVMValueRef;
extern "C" fn LLVMGetParamParent(Inst: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMGetFirstParam(Fn: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMGetLastParam(Fn: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMGetNextParam(Arg: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMGetPreviousParam(Arg: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMSetParamAlignment(Arg: LLVMValueRef, Align: libc::c_uint);

// Core->Metadata

#[deprecated(since = "LLVM 9.0", note = "Use LLVMMDStringInContext2 instead.")]
extern "C" fn LLVMMDStringInContext(
    C: LLVMContextRef,
    Str: &libc::c_char,
    SLen: libc::c_uint,
) -> LLVMValueRef;
#[deprecated(since = "LLVM 9.0", note = "Use LLVMMDStringInContext2 instead.")]
extern "C" fn LLVMMDString(Str: &libc::c_char, SLen: libc::c_uint) -> LLVMValueRef;
#[deprecated(since = "LLVM 9.0", note = "Use LLVMMDNodeInContext2 instead.")]
extern "C" fn LLVMMDNodeInContext(
    C: LLVMContextRef,
    Vals: &mut LLVMValueRef,
    Count: libc::c_uint,
) -> LLVMValueRef;
#[deprecated(since = "LLVM 9.0", note = "Use LLVMMDNodeInContext2 instead.")]
extern "C" fn LLVMMDNode(Vals: &mut LLVMValueRef, Count: libc::c_uint) -> LLVMValueRef;

/// Add a global indirect function to a module under a specified name.
extern "C" fn LLVMAddGlobalIFunc(
    M: LLVMModuleRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    Ty: LLVMTypeRef,
    AddrSpace: libc::c_uint,
    Resolver: LLVMValueRef,
) -> LLVMValueRef;

/// Obtain a GlobalIFunc value from a Module by its name.
extern "C" fn LLVMGetNamedGlobalIFunc(
    M: LLVMModuleRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
) -> LLVMValueRef;

/// Obtain an iterator to the first GlobalIFunc in a Module.
extern "C" fn LLVMGetFirstGlobalIFunc(M: LLVMModuleRef) -> LLVMValueRef;

/// Obtain an iterator to the last GlobalIFunc in a Module.
extern "C" fn LLVMGetLastGlobalIFunc(M: LLVMModuleRef) -> LLVMValueRef;

/// Advance a GlobalIFunc iterator to the next GlobalIFunc.
extern "C" fn LLVMGetNextGlobalIFunc(IFunc: LLVMValueRef) -> LLVMValueRef;

/// Decrement a GlobalIFunc iterator to the previous GlobalIFunc.
extern "C" fn LLVMGetPreviousGlobalIFunc(IFunc: LLVMValueRef) -> LLVMValueRef;

/// Retrieves the resolver function associated with this indirect function, or
/// NULL if it doesn't not exist.
extern "C" fn LLVMGetGlobalIFuncResolver(IFunc: LLVMValueRef) -> LLVMValueRef;

/// Sets the resolver function associated with this indirect function.
extern "C" fn LLVMSetGlobalIFuncResolver(IFunc: LLVMValueRef, Resolver: LLVMValueRef);

/// Remove a global indirect function from its parent module and delete it.
extern "C" fn LLVMEraseGlobalIFunc(IFunc: LLVMValueRef);

/// Remove a global indirect function from its parent module.
extern "C" fn LLVMRemoveGlobalIFunc(IFunc: LLVMValueRef);

/// Create an MDString value from a given string value.
extern "C" fn LLVMMDStringInContext2(
    C: LLVMContextRef,
    Str: &libc::c_char,
    SLen: libc::size_t,
) -> LLVMMetadataRef;

/// Create an MDNode value with the given array of operands.
extern "C" fn LLVMMDNodeInContext2(
    C: LLVMContextRef,
    MDs: &mut LLVMMetadataRef,
    Count: libc::size_t,
) -> LLVMMetadataRef;

/// Obtain Metadata as a Value.
extern "C" fn LLVMMetadataAsValue(C: LLVMContextRef, MD: LLVMMetadataRef) -> LLVMValueRef;
/// Obtain a Value as Metadata.
extern "C" fn LLVMValueAsMetadata(Val: LLVMValueRef) -> LLVMMetadataRef;
/// Obtain the underlying string from a MDString value.
///
/// `Len` is written to contain the length of the returned string.
extern "C" fn LLVMGetMDString(V: LLVMValueRef, Len: &mut libc::c_uint) -> &libc::c_char;
extern "C" fn LLVMGetMDNodeNumOperands(V: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMGetMDNodeOperands(V: LLVMValueRef, Dest: &mut LLVMValueRef);

// Core->Basic Block
extern "C" fn LLVMBasicBlockAsValue(BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern "C" fn LLVMValueIsBasicBlock(Val: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMValueAsBasicBlock(Val: LLVMValueRef) -> LLVMBasicBlockRef;
/// Get the string name of a basic block.
extern "C" fn LLVMGetBasicBlockName(BB: LLVMBasicBlockRef) -> &libc::c_char;
extern "C" fn LLVMGetBasicBlockParent(BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern "C" fn LLVMGetBasicBlockTerminator(BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern "C" fn LLVMCountBasicBlocks(Fn: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMGetBasicBlocks(Fn: LLVMValueRef, BasicBlocks: &mut LLVMBasicBlockRef);
extern "C" fn LLVMGetFirstBasicBlock(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
extern "C" fn LLVMGetLastBasicBlock(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
extern "C" fn LLVMGetNextBasicBlock(BB: LLVMBasicBlockRef) -> LLVMBasicBlockRef;
extern "C" fn LLVMGetPreviousBasicBlock(BB: LLVMBasicBlockRef) -> LLVMBasicBlockRef;
extern "C" fn LLVMGetEntryBasicBlock(Fn: LLVMValueRef) -> LLVMBasicBlockRef;
/// Insert the given basic block after the insertion point of the given builder.
extern "C" fn LLVMInsertExistingBasicBlockAfterInsertBlock(
    Builder: LLVMBuilderRef,
    BB: LLVMBasicBlockRef,
);
/// Append the given basic block to the basic block list of the given function.
extern "C" fn LLVMAppendExistingBasicBlock(Fn: LLVMValueRef, BB: LLVMBasicBlockRef);
extern "C" fn LLVMCreateBasicBlockInContext(
    C: LLVMContextRef,
    Name: &libc::c_char,
) -> LLVMBasicBlockRef;
extern "C" fn LLVMAppendBasicBlockInContext(
    C: LLVMContextRef,
    Fn: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMBasicBlockRef;
extern "C" fn LLVMAppendBasicBlock(Fn: LLVMValueRef, Name: &libc::c_char)
    -> LLVMBasicBlockRef;
extern "C" fn LLVMInsertBasicBlockInContext(
    C: LLVMContextRef,
    BB: LLVMBasicBlockRef,
    Name: &libc::c_char,
) -> LLVMBasicBlockRef;
extern "C" fn LLVMInsertBasicBlock(
    InsertBeforeBB: LLVMBasicBlockRef,
    Name: &libc::c_char,
) -> LLVMBasicBlockRef;
extern "C" fn LLVMDeleteBasicBlock(BB: LLVMBasicBlockRef);
extern "C" fn LLVMRemoveBasicBlockFromParent(BB: LLVMBasicBlockRef);
extern "C" fn LLVMMoveBasicBlockBefore(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef);
extern "C" fn LLVMMoveBasicBlockAfter(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef);
extern "C" fn LLVMGetFirstInstruction(BB: LLVMBasicBlockRef) -> LLVMValueRef;
extern "C" fn LLVMGetLastInstruction(BB: LLVMBasicBlockRef) -> LLVMValueRef;


// Core->Instructions

extern "C" fn LLVMHasMetadata(Val: LLVMValueRef) -> libc::c_int;
extern "C" fn LLVMGetMetadata(Val: LLVMValueRef, KindID: libc::c_uint) -> LLVMValueRef;
extern "C" fn LLVMSetMetadata(Val: LLVMValueRef, KindID: libc::c_uint, Node: LLVMValueRef);
extern "C" fn LLVMInstructionGetAllMetadataOtherThanDebugLoc(
    Instr: LLVMValueRef,
    NumEntries: &mut libc::size_t,
) -> &mut LLVMValueMetadataEntry;
extern "C" fn LLVMGetInstructionParent(Inst: LLVMValueRef) -> LLVMBasicBlockRef;
extern "C" fn LLVMGetNextInstruction(Inst: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMGetPreviousInstruction(Inst: LLVMValueRef) -> LLVMValueRef;
/// Remove the given instruction from its containing building block but
/// kept alive.
extern "C" fn LLVMInstructionRemoveFromParent(Inst: LLVMValueRef);
/// Remove the given instruction from its containing building block and
/// delete it.
extern "C" fn LLVMInstructionEraseFromParent(Inst: LLVMValueRef);
extern "C" fn LLVMGetInstructionOpcode(Inst: LLVMValueRef) -> LLVMOpcode;
extern "C" fn LLVMGetICmpPredicate(Inst: LLVMValueRef) -> LLVMIntPredicate;
extern "C" fn LLVMGetFCmpPredicate(Inst: LLVMValueRef) -> LLVMRealPredicate;
extern "C" fn LLVMInstructionClone(Inst: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsATerminatorInst(Inst: LLVMValueRef) -> LLVMValueRef;

// Instructions->Call Sites and Invocations
// Obtain the argument count for a call instruction.
//
// The provided value should be either a CallInst, InvokeInst or FuncletPadInst.
extern "C" fn LLVMGetNumArgOperands(Instr: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMSetInstructionCallConv(Instr: LLVMValueRef, CC: libc::c_uint);
extern "C" fn LLVMGetInstructionCallConv(Instr: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMSetInstrParamAlignment(
    Instr: LLVMValueRef,
    index: libc::c_uint,
    Align: libc::c_uint,
);
extern "C" fn LLVMAddCallSiteAttribute(C: LLVMValueRef, Idx: LLVMAttributeIndex, A: LLVMAttributeRef);
extern "C" fn LLVMGetCallSiteAttributeCount(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
) -> libc::c_uint;
extern "C" fn LLVMGetCallSiteAttributes(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    Attrs: &mut LLVMAttributeRef,
);
extern "C" fn LLVMGetCallSiteEnumAttribute(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    KindID: libc::c_uint,
) -> LLVMAttributeRef;
extern "C" fn LLVMGetCallSiteStringAttribute(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    K: &libc::c_char,
    KLen: libc::c_uint,
) -> LLVMAttributeRef;
extern "C" fn LLVMRemoveCallSiteEnumAttribute(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    KindID: libc::c_uint,
);
extern "C" fn LLVMRemoveCallSiteStringAttribute(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    K: &libc::c_char,
    KLen: libc::c_uint,
);
extern "C" fn LLVMGetCalledFunctionType(C: LLVMValueRef) -> LLVMTypeRef;
/// Get a pointer to the function invoked by this instruction.
///
/// The provided value should be a CallInst or InvokeInst.
extern "C" fn LLVMGetCalledValue(Instr: LLVMValueRef) -> LLVMValueRef;
/// Get whether a call instruction is a tail call.
extern "C" fn LLVMIsTailCall(CallInst: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMSetTailCall(CallInst: LLVMValueRef, IsTailCall: LLVMBool);
/// Return the normal destination basic block of an invoke instruction.
extern "C" fn LLVMGetNormalDest(InvokeInst: LLVMValueRef) -> LLVMBasicBlockRef;
/// Return the unwind destination basic block.
extern "C" fn LLVMGetUnwindDest(InvokeInst: LLVMValueRef) -> LLVMBasicBlockRef;
/// Set the normal destination basic block.
extern "C" fn LLVMSetNormalDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef);
/// Set the unwind destination basic block.
extern "C" fn LLVMSetUnwindDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef);

// Instructions->Terminators
extern "C" fn LLVMGetNumSuccessors(Term: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMGetSuccessor(Term: LLVMValueRef, i: libc::c_uint) -> LLVMBasicBlockRef;
extern "C" fn LLVMSetSuccessor(Term: LLVMValueRef, i: libc::c_uint, block: LLVMBasicBlockRef);
extern "C" fn LLVMIsConditional(Branch: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMGetCondition(Branch: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMSetCondition(Branch: LLVMValueRef, Cond: LLVMValueRef);
extern "C" fn LLVMGetSwitchDefaultDest(SwitchInstr: LLVMValueRef) -> LLVMBasicBlockRef;

// Instructions->Allocas
// Obtain the type being allocated by an alloca instruction.
extern "C" fn LLVMGetAllocatedType(Alloca: LLVMValueRef) -> LLVMTypeRef;

// Instructions->GEPs
// Check whether the given GEP instruction is inbounds.
extern "C" fn LLVMIsInBounds(GEP: LLVMValueRef) -> LLVMBool;
/// Set the given GEP instruction to be inbounds or not.
extern "C" fn LLVMSetIsInBounds(GEP: LLVMValueRef, InBounds: LLVMBool);

// Instruction->PHI Nodes
extern "C" fn LLVMAddIncoming(
    PhiNode: LLVMValueRef,
    IncomingValues: &mut LLVMValueRef,
    IncomingBlocks: &mut LLVMBasicBlockRef,
    Count: libc::c_uint,
);
extern "C" fn LLVMCountIncoming(PhiNode: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMGetIncomingValue(PhiNode: LLVMValueRef, Index: libc::c_uint) -> LLVMValueRef;
extern "C" fn LLVMGetIncomingBlock(PhiNode: LLVMValueRef, Index: libc::c_uint) -> LLVMBasicBlockRef;


// Core->Values again; these don't appear in Doxygen because they're macro-generated.

extern "C" fn LLVMIsAArgument(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsABasicBlock(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAInlineAsm(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAUser(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstant(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsABlockAddress(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantAggregateZero(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantArray(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantDataSequential(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantDataArray(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantDataVector(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantExpr(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantFP(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantInt(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantPointerNull(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantStruct(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantTokenNone(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAConstantVector(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAGlobalValue(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAGlobalAlias(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAGlobalIFunc(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAGlobalObject(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAFunction(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAGlobalVariable(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAUndefValue(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAPoisonValue(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAInstruction(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAUnaryOperator(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsABinaryOperator(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsACallInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAIntrinsicInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsADbgInfoIntrinsic(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsADbgVariableIntrinsic(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsADbgDeclareInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsADbgLabelInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAMemIntrinsic(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAMemCpyInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAMemMoveInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAMemSetInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsACmpInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAFCmpInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAICmpInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAExtractElementInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAGetElementPtrInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAInsertElementInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAInsertValueInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsALandingPadInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAPHINode(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsASelectInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAShuffleVectorInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAStoreInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsABranchInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAIndirectBrInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAInvokeInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAReturnInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsASwitchInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAUnreachableInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAResumeInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsACleanupReturnInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsACatchReturnInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsACatchSwitchInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsACallBrInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAFuncletPadInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsACatchPadInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsACleanupPadInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAUnaryInstruction(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAAllocaInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsACastInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAAddrSpaceCastInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsABitCastInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAFPExtInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAFPToSIInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAFPToUIInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAFPTruncInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAIntToPtrInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAPtrToIntInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsASExtInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsASIToFPInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsATruncInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAUIToFPInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAZExtInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAExtractValueInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsALoadInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAVAArgInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAFreezeInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAAtomicCmpXchgInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAAtomicRMWInst(Val: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMIsAFenceInst(Val: LLVMValueRef) -> LLVMValueRef;


// Core->Extract/Insert Value
/// Get the number of indices on an ExtractValue, InsertValue or GEP instruction.
extern "C" fn LLVMGetNumIndices(Inst: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMGetIndices(Inst: LLVMValueRef) -> &libc::c_uint;


// Core->Instruction Builders
extern "C" fn LLVMCreateBuilderInContext(C: LLVMContextRef) -> LLVMBuilderRef;
extern "C" fn LLVMCreateBuilder() -> LLVMBuilderRef;
extern "C" fn LLVMPositionBuilder(
    Builder: LLVMBuilderRef,
    Block: LLVMBasicBlockRef,
    Instr: LLVMValueRef,
);
extern "C" fn LLVMPositionBuilderBefore(Builder: LLVMBuilderRef, Instr: LLVMValueRef);
extern "C" fn LLVMPositionBuilderAtEnd(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef);
extern "C" fn LLVMGetInsertBlock(Builder: LLVMBuilderRef) -> LLVMBasicBlockRef;
extern "C" fn LLVMClearInsertionPosition(Builder: LLVMBuilderRef);
extern "C" fn LLVMInsertIntoBuilder(Builder: LLVMBuilderRef, Instr: LLVMValueRef);
extern "C" fn LLVMInsertIntoBuilderWithName(
    Builder: LLVMBuilderRef,
    Instr: LLVMValueRef,
    Name: &libc::c_char,
);
extern "C" fn LLVMDisposeBuilder(Builder: LLVMBuilderRef);

// Metadata
/// Get location information used by debugging information.
extern "C" fn LLVMGetCurrentDebugLocation2(Builder: LLVMBuilderRef) -> LLVMMetadataRef;
/// Set location information used by debugging information.
extern "C" fn LLVMSetCurrentDebugLocation2(Builder: LLVMBuilderRef, Loc: LLVMMetadataRef);
/// Attempts to set the debug location for the given instruction using the
/// current debug location for the given builder.  If the builder has no current
/// debug location, this function is a no-op.
extern "C" fn LLVMSetInstDebugLocation(Builder: LLVMBuilderRef, Inst: LLVMValueRef);
/// Get the dafult floating-point math metadata for a given builder.
extern "C" fn LLVMBuilderGetDefaultFPMathTag(Builder: LLVMBuilderRef) -> LLVMMetadataRef;
/// Set the default floating-point math metadata for the given builder.
extern "C" fn LLVMBuilderSetDefaultFPMathTag(Builder: LLVMBuilderRef, FPMathTag: LLVMMetadataRef);
#[deprecated(since = "LLVM 9.0", note = "Use LLVMGetCurrentDebugLocation2 instead.")]
extern "C" fn LLVMSetCurrentDebugLocation(Builder: LLVMBuilderRef, L: LLVMValueRef);
extern "C" fn LLVMGetCurrentDebugLocation(Builder: LLVMBuilderRef) -> LLVMValueRef;

// Terminators
extern "C" fn LLVMBuildRetVoid(arg1: LLVMBuilderRef) -> LLVMValueRef;
extern "C" fn LLVMBuildRet(arg1: LLVMBuilderRef, V: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMBuildAggregateRet(
    arg1: LLVMBuilderRef,
    RetVals: &mut LLVMValueRef,
    N: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMBuildBr(arg1: LLVMBuilderRef, Dest: LLVMBasicBlockRef) -> LLVMValueRef;
extern "C" fn LLVMBuildCondBr(
    arg1: LLVMBuilderRef,
    If: LLVMValueRef,
    Then: LLVMBasicBlockRef,
    Else: LLVMBasicBlockRef,
) -> LLVMValueRef;
extern "C" fn LLVMBuildSwitch(
    arg1: LLVMBuilderRef,
    V: LLVMValueRef,
    Else: LLVMBasicBlockRef,
    NumCases: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMBuildIndirectBr(
    B: LLVMBuilderRef,
    Addr: LLVMValueRef,
    NumDests: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMBuildInvoke(
    arg1: LLVMBuilderRef,
    Fn: LLVMValueRef,
    Args: &mut LLVMValueRef,
    NumArgs: libc::c_uint,
    Then: LLVMBasicBlockRef,
    Catch: LLVMBasicBlockRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildInvoke2(
    arg1: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Fn: LLVMValueRef,
    Args: &mut LLVMValueRef,
    NumArgs: libc::c_uint,
    Then: LLVMBasicBlockRef,
    Catch: LLVMBasicBlockRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildUnreachable(B: LLVMBuilderRef) -> LLVMValueRef;

extern "C" fn LLVMBuildResume(B: LLVMBuilderRef, Exn: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMBuildLandingPad(
    B: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    PersFn: LLVMValueRef,
    NumClauses: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildCleanupRet(
    B: LLVMBuilderRef,
    CatchPad: LLVMValueRef,
    BB: LLVMBasicBlockRef,
) -> LLVMValueRef;
extern "C" fn LLVMBuildCatchRet(
    B: LLVMBuilderRef,
    CatchPad: LLVMValueRef,
    BB: LLVMBasicBlockRef,
) -> LLVMValueRef;
extern "C" fn LLVMBuildCatchPad(
    B: LLVMBuilderRef,
    ParentPad: LLVMValueRef,
    Args: &mut LLVMValueRef,
    NumArgs: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildCleanupPad(
    B: LLVMBuilderRef,
    ParentPad: LLVMValueRef,
    Args: &mut LLVMValueRef,
    NumArgs: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildCatchSwitch(
    B: LLVMBuilderRef,
    ParentPad: LLVMValueRef,
    UnwindBB: LLVMBasicBlockRef,
    NumHandler: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;

/// Add a case to a `switch` instruction
extern "C" fn LLVMAddCase(Switch: LLVMValueRef, OnVal: LLVMValueRef, Dest: LLVMBasicBlockRef);

/// Add a destination to an `indirectbr` instruction
extern "C" fn LLVMAddDestination(IndirectBr: LLVMValueRef, Dest: LLVMBasicBlockRef);

/// Get the number of clauses on a landingpad instruction.
extern "C" fn LLVMGetNumClauses(LandingPad: LLVMValueRef) -> libc::c_uint;

/// Get the value of the clause with the given index on a landingpad instruction.
extern "C" fn LLVMGetClause(LandingPad: LLVMValueRef, Idx: libc::c_uint) -> LLVMValueRef;

/// Add a catch or filter clause to a `landingpad` instruction
extern "C" fn LLVMAddClause(LandingPad: LLVMValueRef, ClauseVal: LLVMValueRef);

/// Get the cleanup flag in a landingpad instruction.
extern "C" fn LLVMIsCleanup(LandingPad: LLVMValueRef) -> LLVMBool;

/// Set the cleanup flag in a `landingpad` instruction.
extern "C" fn LLVMSetCleanup(LandingPad: LLVMValueRef, Val: LLVMBool);

/// Add a destination to the catchswitch instruction
extern "C" fn LLVMAddHandler(CatchSwitch: LLVMValueRef, Dest: LLVMBasicBlockRef);

/// Get the number of handlers on the catchswitch instruction
extern "C" fn LLVMGetNumHandlers(CatchSwitch: LLVMValueRef) -> libc::c_uint;

/// Obtain the basic blocks acting as handlers for a catchswitch instruction.
///
/// The Handlers parameter should point to a pre-allocated array of LLVMBasicBlockRefs at least LLVMGetNumHandlers() large. On return, the first LLVMGetNumHandlers() entries in the array will be populated with LLVMBasicBlockRef instances.
extern "C" fn LLVMGetHandlers(CatchSwitch: LLVMValueRef, Handlers: &mut LLVMBasicBlockRef);

// Funclets
/// Get the number of funcletpad arguments.
extern "C" fn LLVMGetArgOperand(Funclet: LLVMValueRef, i: libc::c_uint) -> LLVMValueRef;

/// Set a funcletpad argument at the given index.
extern "C" fn LLVMSetArgOperand(Funclet: LLVMValueRef, i: libc::c_uint, value: LLVMValueRef);

/// Get the parent catchswitch instruction of a catchpad instruction.
///
/// This only works on llvm::CatchPadInst instructions.
extern "C" fn LLVMGetParentCatchSwitch(CatchPad: LLVMValueRef) -> LLVMValueRef;

/// Set the parent catchswitch instruction of a catchpad instruction.
/// This only works on llvm::CatchPadInst instructions.
extern "C" fn LLVMSetParentCatchSwitch(CatchPad: LLVMValueRef, CatchSwitch: LLVMValueRef);

// Arithmetic
extern "C" fn LLVMBuildAdd(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildNSWAdd(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildNUWAdd(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFAdd(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildSub(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildNSWSub(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildNUWSub(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFSub(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildMul(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildNSWMul(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildNUWMul(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFMul(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildUDiv(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildExactUDiv(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildSDiv(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildExactSDiv(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFDiv(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildURem(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildSRem(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFRem(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildShl(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildLShr(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildAShr(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildAnd(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildOr(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildXor(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildBinOp(
    B: LLVMBuilderRef,
    Op: LLVMOpcode,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildNeg(
    arg1: LLVMBuilderRef,
    V: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildNSWNeg(
    B: LLVMBuilderRef,
    V: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildNUWNeg(
    B: LLVMBuilderRef,
    V: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFNeg(
    arg1: LLVMBuilderRef,
    V: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildNot(
    arg1: LLVMBuilderRef,
    V: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;

// Memory
extern "C" fn LLVMBuildMalloc(
    arg1: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildArrayMalloc(
    arg1: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Val: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildMemSet(
    B: LLVMBuilderRef,
    Ptr: LLVMValueRef,
    Val: LLVMValueRef,
    Len: LLVMValueRef,
    Align: libc::c_uint,
) -> LLVMValueRef;
extern "C" fn LLVMBuildMemCpy(
    B: LLVMBuilderRef,
    Dst: LLVMValueRef,
    DstAlign: libc::c_uint,
    Src: LLVMValueRef,
    SrcAlign: libc::c_uint,
    Size: LLVMValueRef,
) -> LLVMValueRef;
extern "C" fn LLVMBuildMemMove(
    B: LLVMBuilderRef,
    Dst: LLVMValueRef,
    DstAlign: libc::c_uint,
    Src: LLVMValueRef,
    SrcAlign: libc::c_uint,
    Size: LLVMValueRef,
) -> LLVMValueRef;
extern "C" fn LLVMBuildAlloca(
    arg1: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildArrayAlloca(
    arg1: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Val: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFree(arg1: LLVMBuilderRef, PointerVal: LLVMValueRef) -> LLVMValueRef;
extern "C" fn LLVMBuildLoad(
    arg1: LLVMBuilderRef,
    PointerVal: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildLoad2(
    arg1: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    PointerVal: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildStore(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    Ptr: LLVMValueRef,
) -> LLVMValueRef;
extern "C" fn LLVMBuildGEP(
    B: LLVMBuilderRef,
    Pointer: LLVMValueRef,
    Indices: &mut LLVMValueRef,
    NumIndices: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildInBoundsGEP(
    B: LLVMBuilderRef,
    Pointer: LLVMValueRef,
    Indices: &mut LLVMValueRef,
    NumIndices: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildStructGEP(
    B: LLVMBuilderRef,
    Pointer: LLVMValueRef,
    Idx: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildGEP2(
    B: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Pointer: LLVMValueRef,
    Indices: &mut LLVMValueRef,
    NumIndices: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildInBoundsGEP2(
    B: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Pointer: LLVMValueRef,
    Indices: &mut LLVMValueRef,
    NumIndices: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildStructGEP2(
    B: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Pointer: LLVMValueRef,
    Idx: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildGlobalString(
    B: LLVMBuilderRef,
    Str: &libc::c_char,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildGlobalStringPtr(
    B: LLVMBuilderRef,
    Str: &libc::c_char,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMGetVolatile(MemoryAccessInst: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMSetVolatile(MemoryAccessInst: LLVMValueRef, IsVolatile: LLVMBool);
extern "C" fn LLVMGetWeak(CmpXchgInst: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMSetWeak(CmpXchgInst: LLVMValueRef, IsWeak: LLVMBool);
extern "C" fn LLVMGetOrdering(MemoryAccessInst: LLVMValueRef) -> LLVMAtomicOrdering;
extern "C" fn LLVMSetOrdering(MemoryAccessInst: LLVMValueRef, Ordering: LLVMAtomicOrdering);
extern "C" fn LLVMGetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef) -> LLVMAtomicRMWBinOp;
extern "C" fn LLVMSetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef, BinOp: LLVMAtomicRMWBinOp);

// Casts
extern "C" fn LLVMBuildTrunc(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildZExt(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildSExt(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFPToUI(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFPToSI(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildUIToFP(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildSIToFP(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFPTrunc(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFPExt(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildPtrToInt(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildIntToPtr(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildBitCast(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildAddrSpaceCast(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildZExtOrBitCast(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildSExtOrBitCast(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildTruncOrBitCast(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildCast(
    B: LLVMBuilderRef,
    Op: LLVMOpcode,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildPointerCast(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildIntCast(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildIntCast2(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    IsSigned: LLVMBool,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFPCast(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;

// Comparisons
extern "C" fn LLVMBuildICmp(
    arg1: LLVMBuilderRef,
    Op: LLVMIntPredicate,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFCmp(
    arg1: LLVMBuilderRef,
    Op: LLVMRealPredicate,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;

// Miscellaneous instructions
extern "C" fn LLVMBuildPhi(
    arg1: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildCall(
    arg1: LLVMBuilderRef,
    Fn: LLVMValueRef,
    Args: &mut LLVMValueRef,
    NumArgs: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildCall2(
    arg1: LLVMBuilderRef,
    arg2: LLVMTypeRef,
    Fn: LLVMValueRef,
    Args: &mut LLVMValueRef,
    NumArgs: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildSelect(
    arg1: LLVMBuilderRef,
    If: LLVMValueRef,
    Then: LLVMValueRef,
    Else: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildVAArg(
    arg1: LLVMBuilderRef,
    List: LLVMValueRef,
    Ty: LLVMTypeRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildExtractElement(
    arg1: LLVMBuilderRef,
    VecVal: LLVMValueRef,
    Index: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildInsertElement(
    arg1: LLVMBuilderRef,
    VecVal: LLVMValueRef,
    EltVal: LLVMValueRef,
    Index: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildShuffleVector(
    arg1: LLVMBuilderRef,
    V1: LLVMValueRef,
    V2: LLVMValueRef,
    Mask: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildExtractValue(
    arg1: LLVMBuilderRef,
    AggVal: LLVMValueRef,
    Index: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildInsertValue(
    arg1: LLVMBuilderRef,
    AggVal: LLVMValueRef,
    EltVal: LLVMValueRef,
    Index: libc::c_uint,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFreeze(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildIsNull(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildIsNotNull(
    arg1: LLVMBuilderRef,
    Val: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildPtrDiff(
    arg1: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildFence(
    B: LLVMBuilderRef,
    ordering: LLVMAtomicOrdering,
    singleThread: LLVMBool,
    Name: &libc::c_char,
) -> LLVMValueRef;
extern "C" fn LLVMBuildAtomicRMW(
    B: LLVMBuilderRef,
    op: LLVMAtomicRMWBinOp,
    PTR: LLVMValueRef,
    Val: LLVMValueRef,
    ordering: LLVMAtomicOrdering,
    singleThread: LLVMBool,
) -> LLVMValueRef;
extern "C" fn LLVMBuildAtomicCmpXchg(
    B: LLVMBuilderRef,
    Ptr: LLVMValueRef,
    Cmp: LLVMValueRef,
    New: LLVMValueRef,
    SuccessOrdering: LLVMAtomicOrdering,
    FailureOrdering: LLVMAtomicOrdering,
    SingleThread: LLVMBool,
) -> LLVMValueRef;
extern "C" fn LLVMGetNumMaskElements(ShuffleVectorInst: LLVMValueRef) -> libc::c_uint;
extern "C" fn LLVMGetUndefMaskElem() -> libc::c_int;
extern "C" fn LLVMGetMaskValue(ShuffleVectorInst: LLVMValueRef, Elt: libc::c_uint) -> libc::c_int;
extern "C" fn LLVMIsAtomicSingleThread(AtomicInst: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMSetAtomicSingleThread(AtomicInst: LLVMValueRef, SingleThread: LLVMBool);
extern "C" fn LLVMGetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef) -> LLVMAtomicOrdering;
extern "C" fn LLVMSetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering);
extern "C" fn LLVMGetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef) -> LLVMAtomicOrdering;
extern "C" fn LLVMSetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering);


// Core->Module Providers
extern "C" fn LLVMCreateModuleProviderForExistingModule(M: LLVMModuleRef) -> LLVMModuleProviderRef;
extern "C" fn LLVMDisposeModuleProvider(M: LLVMModuleProviderRef);


// Core->Memory Buffers
extern "C" fn LLVMCreateMemoryBufferWithContentsOfFile(
    Path: &libc::c_char,
    OutMemBuf: &mut LLVMMemoryBufferRef,
    OutMessage: &mut &mut libc::c_char,
) -> LLVMBool;
extern "C" fn LLVMCreateMemoryBufferWithSTDIN(
    OutMemBuf: &mut LLVMMemoryBufferRef,
    OutMessage: &mut &mut libc::c_char,
) -> LLVMBool;
extern "C" fn LLVMCreateMemoryBufferWithMemoryRange(
    InputData: &libc::c_char,
    InputDataLength: libc::size_t,
    BufferName: &libc::c_char,
    RequiresNullTerminator: LLVMBool,
) -> LLVMMemoryBufferRef;
extern "C" fn LLVMCreateMemoryBufferWithMemoryRangeCopy(
    InputData: &libc::c_char,
    InputDataLength: libc::size_t,
    BufferName: &libc::c_char,
) -> LLVMMemoryBufferRef;
extern "C" fn LLVMGetBufferStart(MemBuf: LLVMMemoryBufferRef) -> &libc::c_char;
extern "C" fn LLVMGetBufferSize(MemBuf: LLVMMemoryBufferRef) -> libc::size_t;
extern "C" fn LLVMDisposeMemoryBuffer(MemBuf: LLVMMemoryBufferRef);


// Core->pass registry
extern "C" fn LLVMGetGlobalPassRegistry() -> LLVMPassRegistryRef;


// Core->Pass managers
extern "C" fn LLVMCreatePassManager() -> LLVMPassManagerRef;
extern "C" fn LLVMCreateFunctionPassManagerForModule(M: LLVMModuleRef) -> LLVMPassManagerRef;
extern "C" fn LLVMCreateFunctionPassManager(MP: LLVMModuleProviderRef) -> LLVMPassManagerRef;
extern "C" fn LLVMRunPassManager(PM: LLVMPassManagerRef, M: LLVMModuleRef) -> LLVMBool;
extern "C" fn LLVMInitializeFunctionPassManager(FPM: LLVMPassManagerRef) -> LLVMBool;
extern "C" fn LLVMRunFunctionPassManager(FPM: LLVMPassManagerRef, F: LLVMValueRef) -> LLVMBool;
extern "C" fn LLVMFinalizeFunctionPassManager(FPM: LLVMPassManagerRef) -> LLVMBool;
extern "C" fn LLVMDisposePassManager(PM: LLVMPassManagerRef);


// Core->Threading
/// Deprecated: LLVM threading is configured at compile-time with `LLVM_ENABLE_THREADS`
extern "C" fn LLVMStartMultithreaded() -> LLVMBool;
/// Deprecated: LLVM threading is configured at compile-time with `LLVM_ENABLE_THREADS`
extern "C" fn LLVMStopMultithreaded();
extern "C" fn LLVMIsMultithreaded() -> LLVMBool;
