use error::LLVMErrorRef;
use target_machine::LLVMTargetMachineRef;

enum LLVMOpaquePassBuilderOptions {}
type LLVMPassBuilderOptionsRef = &mut LLVMOpaquePassBuilderOptions;

extern "C" fn LLVMRunPasses(
    M: LLVMModuleRef,
    Passes: &libc::c_char,
    TM: LLVMTargetMachineRef,
    Options: LLVMPassBuilderOptionsRef,
) -> LLVMErrorRef;
extern "C" fn LLVMCreatePassBuilderOptions() -> LLVMPassBuilderOptionsRef;
extern "C" fn LLVMPassBuilderOptionsSetVerifyEach(
    Options: LLVMPassBuilderOptionsRef,
    VerifyEach: LLVMBool,
);
extern "C" fn LLVMPassBuilderOptionsSetDebugLogging(
    Options: LLVMPassBuilderOptionsRef,
    DebugLogging: LLVMBool,
);
extern "C" fn LLVMPassBuilderOptionsSetLoopInterleaving(
    Options: LLVMPassBuilderOptionsRef,
    LoopInterleaving: LLVMBool,
);
extern "C" fn LLVMPassBuilderOptionsSetLoopVectorization(
    Options: LLVMPassBuilderOptionsRef,
    LoopVectorization: LLVMBool,
);
extern "C" fn LLVMPassBuilderOptionsSetSLPVectorization(
    Options: LLVMPassBuilderOptionsRef,
    SLPVectorization: LLVMBool,
);
extern "C" fn LLVMPassBuilderOptionsSetLoopUnrolling(
    Options: LLVMPassBuilderOptionsRef,
    LoopUnrolling: LLVMBool,
);
extern "C" fn LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll(
    Options: LLVMPassBuilderOptionsRef,
    ForgetAllSCEVInLoopUnroll: LLVMBool,
);
extern "C" fn LLVMPassBuilderOptionsSetLicmMssaOptCap(
    Options: LLVMPassBuilderOptionsRef,
    LicmMssaOptCap: libc::c_uint,
);
extern "C" fn LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap(
    Options: LLVMPassBuilderOptionsRef,
    LicmMssaNoAccForPromotionCap: libc::c_uint,
);
extern "C" fn LLVMPassBuilderOptionsSetCallGraphProfile(
    Options: LLVMPassBuilderOptionsRef,
    CallGraphProfile: LLVMBool,
);
extern "C" fn LLVMPassBuilderOptionsSetMergeFunctions(
    Options: LLVMPassBuilderOptionsRef,
    MergeFunctions: LLVMBool,
);
extern "C" fn LLVMDisposePassBuilderOptions(Options: LLVMPassBuilderOptionsRef);

