//! Generation of DWARF debug info.

// Debug info flags.
type LLVMDIFlags = libc::c_int;
const LLVMDIFlagZero: LLVMDIFlags = 0;
const LLVMDIFlagPrivate: LLVMDIFlags = 1;
const LLVMDIFlagProtected: LLVMDIFlags = 2;
const LLVMDIFlagPublic: LLVMDIFlags = 3;
const LLVMDIFlagFwdDecl: LLVMDIFlags = 1 << 2;
const LLVMDIFlagAppleBlock: LLVMDIFlags = 1 << 3;
const LLVMDIFlagReservedBit4: LLVMDIFlags = 1 << 4;
const LLVMDIFlagVirtual: LLVMDIFlags = 1 << 5;
const LLVMDIFlagArtificial: LLVMDIFlags = 1 << 6;
const LLVMDIFlagExplicit: LLVMDIFlags = 1 << 7;
const LLVMDIFlagPrototyped: LLVMDIFlags = 1 << 8;
const LLVMDIFlagObjcClassComplete: LLVMDIFlags = 1 << 9;
const LLVMDIFlagObjectPointer: LLVMDIFlags = 1 << 10;
const LLVMDIFlagVector: LLVMDIFlags = 1 << 11;
const LLVMDIFlagStaticMember: LLVMDIFlags = 1 << 12;
const LLVMDIFlagLValueReference: LLVMDIFlags = 1 << 13;
const LLVMDIFlagRValueReference: LLVMDIFlags = 1 << 14;
const LLVMDIFlagReserved: LLVMDIFlags = 1 << 15;
const LLVMDIFlagSingleInheritance: LLVMDIFlags = 1 << 16;
const LLVMDIFlagMultipleInheritance: LLVMDIFlags = 2 << 16;
const LLVMDIFlagVirtualInheritance: LLVMDIFlags = 3 << 16;
const LLVMDIFlagIntroducedVirtual: LLVMDIFlags = 1 << 18;
const LLVMDIFlagBitField: LLVMDIFlags = 1 << 19;
const LLVMDIFlagNoReturn: LLVMDIFlags = 1 << 20;
const LLVMDIFlagTypePassByValue: LLVMDIFlags = 1 << 22;
const LLVMDIFlagTypePassByReference: LLVMDIFlags = 1 << 23;
const LLVMDIFlagEnumClass: LLVMDIFlags = 1 << 24;
const LLVMDIFlagThunk: LLVMDIFlags = 1 << 25;
const LLVMDIFlagNonTrivial: LLVMDIFlags = 1 << 26;
const LLVMDIFlagBigendian: LLVMDIFlags = 1 << 27;
const LLVMDIFlagLittleEndian: LLVMDIFlags = 1 << 28;
const LLVMDIFlagIndirectVirtualBase: LLVMDIFlags = (1 << 2) | (1 << 5);
const LLVMDIFlagAccessibility: LLVMDIFlags =
    LLVMDIFlagProtected | LLVMDIFlagPrivate | LLVMDIFlagPublic;
const LLVMDIFlagPtrToMemberRep: LLVMDIFlags =
    LLVMDIFlagSingleInheritance | LLVMDIFlagMultipleInheritance | LLVMDIFlagVirtualInheritance;

/// Source languages known by DWARF.
enum LLVMDWARFSourceLanguage {
    LLVMDWARFSourceLanguageC89,
    LLVMDWARFSourceLanguageC,
    LLVMDWARFSourceLanguageAda83,
    LLVMDWARFSourceLanguageC_plus_plus,
    LLVMDWARFSourceLanguageCobol74,
    LLVMDWARFSourceLanguageCobol85,
    LLVMDWARFSourceLanguageFortran77,
    LLVMDWARFSourceLanguageFortran90,
    LLVMDWARFSourceLanguagePascal83,
    LLVMDWARFSourceLanguageModula2,
    // New in DWARF v3:
    LLVMDWARFSourceLanguageJava,
    LLVMDWARFSourceLanguageC99,
    LLVMDWARFSourceLanguageAda95,
    LLVMDWARFSourceLanguageFortran95,
    LLVMDWARFSourceLanguagePLI,
    LLVMDWARFSourceLanguageObjC,
    LLVMDWARFSourceLanguageObjC_plus_plus,
    LLVMDWARFSourceLanguageUPC,
    LLVMDWARFSourceLanguageD,
    // New in DWARF v4:
    LLVMDWARFSourceLanguagePython,
    // New in DWARF v5:
    LLVMDWARFSourceLanguageOpenCL,
    LLVMDWARFSourceLanguageGo,
    LLVMDWARFSourceLanguageModula3,
    LLVMDWARFSourceLanguageHaskell,
    LLVMDWARFSourceLanguageC_plus_plus_03,
    LLVMDWARFSourceLanguageC_plus_plus_11,
    LLVMDWARFSourceLanguageOCaml,
    LLVMDWARFSourceLanguageRust,
    LLVMDWARFSourceLanguageC11,
    LLVMDWARFSourceLanguageSwift,
    LLVMDWARFSourceLanguageJulia,
    LLVMDWARFSourceLanguageDylan,
    LLVMDWARFSourceLanguageC_plus_plus_14,
    LLVMDWARFSourceLanguageFortran03,
    LLVMDWARFSourceLanguageFortran08,
    LLVMDWARFSourceLanguageRenderScript,
    LLVMDWARFSourceLanguageBLISS,
    // Vendor extensions:
    LLVMDWARFSourceLanguageMips_Assembler,
    LLVMDWARFSourceLanguageGOOGLE_RenderScript,
    LLVMDWARFSourceLanguageBORLAND_Delphi,
}

/// The amount of debug information to emit.
enum LLVMDWARFEmissionKind {
    LLVMDWARFEmissionKindNone = 0,
    LLVMDWARFEmissionKindFull,
    LLVMDWARFEmissionKindLineTablesOnly,
}

enum LLVMMetadataKind {
    LLVMMDStringMetadataKind,
    LLVMConstantAsMetadataMetadataKind,
    LLVMLocalAsMetadataMetadataKind,
    LLVMDistinctMDOperandPlaceholderMetadataKind,
    LLVMMDTupleMetadataKind,
    LLVMDILocationMetadataKind,
    LLVMDIExpressionMetadataKind,
    LLVMDIGlobalVariableExpressionMetadataKind,
    LLVMGenericDINodeMetadataKind,
    LLVMDISubrangeMetadataKind,
    LLVMDIEnumeratorMetadataKind,
    LLVMDIBasicTypeMetadataKind,
    LLVMDIDerivedTypeMetadataKind,
    LLVMDICompositeTypeMetadataKind,
    LLVMDISubroutineTypeMetadataKind,
    LLVMDIFileMetadataKind,
    LLVMDICompileUnitMetadataKind,
    LLVMDISubprogramMetadataKind,
    LLVMDILexicalBlockMetadataKind,
    LLVMDILexicalBlockFileMetadataKind,
    LLVMDINamespaceMetadataKind,
    LLVMDIModuleMetadataKind,
    LLVMDITemplateTypeParameterMetadataKind,
    LLVMDITemplateValueParameterMetadataKind,
    LLVMDIGlobalVariableMetadataKind,
    LLVMDILocalVariableMetadataKind,
    LLVMDILabelMetadataKind,
    LLVMDIObjCPropertyMetadataKind,
    LLVMDIImportedEntityMetadataKind,
    LLVMDIMacroMetadataKind,
    LLVMDIMacroFileMetadataKind,
    LLVMDICommonBlockMetadataKind,
    LLVMDIStringTypeMetadataKind,
    LLVMDIGenericSubrangeMetadataKind,
    LLVMDIArgListMetadataKind,
}

type LLVMDWARFTypeEncoding = libc::c_uint;

enum LLVMDWARFMacinfoRecordType {
    LLVMDWARFMacinfoRecordTypeDefine = 0x01,
    LLVMDWARFMacinfoRecordTypeMacro = 0x02,
    LLVMDWARFMacinfoRecordTypeStartFile = 0x03,
    LLVMDWARFMacinfoRecordTypeEndFile = 0x04,
    LLVMDWARFMacinfoRecordTypeVendorExt = 0xff,
}

/// The current debug metadata version number.
extern "C" fn LLVMDebugMetadataVersion() -> libc::c_uint;
/// The version of debug metadata that's present in the provided Module.
extern "C" fn LLVMGetModuleDebugMetadataVersion(Module: LLVMModuleRef) -> libc::c_uint;
/// Strip debug info in the module if it exists.
extern "C" fn LLVMStripModuleDebugInfo(Module: LLVMModuleRef) -> LLVMBool;
/// Construct a builder for a module, do not allow unresolved nodes.
extern "C" fn LLVMCreateDIBuilderDisallowUnresolved(M: LLVMModuleRef) -> LLVMDIBuilderRef;
/// Construct a builder for a module and collect unresolved nodes.
extern "C" fn LLVMCreateDIBuilder(M: LLVMModuleRef) -> LLVMDIBuilderRef;
/// Deallocate a builder and everything it owns.
///
/// The builder must be finalized before this.
extern "C" fn LLVMDisposeDIBuilder(Builder: LLVMDIBuilderRef);
/// Construct any deferred debug info descriptors.
extern "C" fn LLVMDIBuilderFinalize(Builder: LLVMDIBuilderRef);
extern "C" fn LLVMDIBuilderCreateCompileUnit(
    Builder: LLVMDIBuilderRef,
    Lang: LLVMDWARFSourceLanguage,
    FileRef: LLVMMetadataRef,
    Producer: &libc::c_char,
    ProducerLen: libc::size_t,
    isOptimized: LLVMBool,
    Flags: &libc::c_char,
    FlagsLen: libc::size_t,
    RuntimeVer: libc::c_uint,
    SplitName: &libc::c_char,
    SplitNameLen: libc::size_t,
    Kind: LLVMDWARFEmissionKind,
    DWOId: libc::c_uint,
    SplitDebugInlining: LLVMBool,
    DebugInfoForProfiling: LLVMBool,
    SysRoot: &libc::c_char,
    SysRootLen: libc::size_t,
    SDK: &libc::c_char,
    SDKLen: libc::size_t,
) -> LLVMMetadataRef;
/// Create a file descriptor to hold debugging information for a file.
extern "C" fn LLVMDIBuilderCreateFile(
    Builder: LLVMDIBuilderRef,
    Filename: &libc::c_char,
    FilenameLen: libc::size_t,
    Directory: &libc::c_char,
    DirectoryLen: libc::size_t,
) -> LLVMMetadataRef;

/// Creates a new descriptor for a module with the specified parent scope.
extern "C" fn LLVMDIBuilderCreateModule(
    Builder: LLVMDIBuilderRef,
    ParentScope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    ConfigMacros: &libc::c_char,
    ConfigMacrosLen: libc::size_t,
    IncludePath: &libc::c_char,
    IncludePathLen: libc::size_t,
    APINotesFile: &libc::c_char,
    APINotesFileLen: libc::size_t,
) -> LLVMMetadataRef;

/// Creates a new descriptor for a namespace with the specified parent scope.
extern "C" fn LLVMDIBuilderCreateNameSpace(
    Builder: LLVMDIBuilderRef,
    ParentScope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    ExportSymbols: LLVMBool,
) -> LLVMMetadataRef;

/// Create a new descriptor for the specified subprogram.
extern "C" fn LLVMDIBuilderCreateFunction(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    LinkageName: &libc::c_char,
    LinkageNameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNo: libc::c_uint,
    Ty: LLVMMetadataRef,
    IsLocalToUnit: LLVMBool,
    IsDefinition: LLVMBool,
    ScopeLine: libc::c_uint,
    Flags: LLVMDIFlags,
    IsOptimized: LLVMBool,
) -> LLVMMetadataRef;

/// Create a descriptor for a lexical block with the specified parent context.
extern "C" fn LLVMDIBuilderCreateLexicalBlock(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    File: LLVMMetadataRef,
    Line: libc::c_uint,
    Column: libc::c_uint,
) -> LLVMMetadataRef;

/// Create a descriptor for a lexical block with a new file attached.
extern "C" fn LLVMDIBuilderCreateLexicalBlockFile(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    File: LLVMMetadataRef,
    Discriminator: libc::c_uint,
) -> LLVMMetadataRef;

/// Create a descriptor for an imported namespace. Suitable for e.g. C++ using declarations.
extern "C" fn LLVMDIBuilderCreateImportedModuleFromNamespace(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    NS: LLVMMetadataRef,
    File: LLVMMetadataRef,
    Line: libc::c_uint,
) -> LLVMMetadataRef;

/// Create a descriptor for an imported module that aliases another imported entity descriptor.
extern "C" fn LLVMDIBuilderCreateImportedModuleFromAlias(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    ImportedEntity: LLVMMetadataRef,
    File: LLVMMetadataRef,
    Line: libc::c_uint,
) -> LLVMMetadataRef;

/// Create a descriptor for an imported module.
extern "C" fn LLVMDIBuilderCreateImportedModuleFromModule(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    M: LLVMMetadataRef,
    File: LLVMMetadataRef,
    Line: libc::c_uint,
) -> LLVMMetadataRef;

/// Create a descriptor for an imported function, type, or variable.
///
/// Suitable for e.g. FORTRAN-style USE declarations.
extern "C" fn LLVMDIBuilderCreateImportedDeclaration(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Decl: LLVMMetadataRef,
    File: LLVMMetadataRef,
    Line: libc::c_uint,
    Name: &libc::c_char,
    NameLen: libc::size_t,
) -> LLVMMetadataRef;

/// Creates a new DebugLocation that describes a source location.
extern "C" fn LLVMDIBuilderCreateDebugLocation(
    Ctx: LLVMContextRef,
    Line: libc::c_uint,
    Column: libc::c_uint,
    Scope: LLVMMetadataRef,
    InlinedAt: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Get the line number of this debug location.
extern "C" fn LLVMDILocationGetLine(Location: LLVMMetadataRef) -> libc::c_uint;

/// Get the column number of this debug location.
extern "C" fn LLVMDILocationGetColumn(Location: LLVMMetadataRef) -> libc::c_uint;

/// Get the local scope associated with this debug location.
extern "C" fn LLVMDILocationGetScope(Location: LLVMMetadataRef) -> LLVMMetadataRef;

/// Get the "inline at" location associated with this debug location.
extern "C" fn LLVMDILocationGetInlinedAt(Location: LLVMMetadataRef) -> LLVMMetadataRef;

/// Get the metadata of the file associated with a given scope.
extern "C" fn LLVMDIScopeGetFile(Scope: LLVMMetadataRef) -> LLVMMetadataRef;

/// Get the directory of a given file.
extern "C" fn LLVMDIFileGetDirectory(
    File: LLVMMetadataRef,
    Len: &mut libc::c_uint,
) -> &libc::c_char;

/// Get the name of a given file.
extern "C" fn LLVMDIFileGetFilename(
    File: LLVMMetadataRef,
    Len: &mut libc::c_uint,
) -> &libc::c_char;

/// Get the source of a given file.
extern "C" fn LLVMDIFileGetSource(
    File: LLVMMetadataRef,
    Len: &mut libc::c_uint,
) -> &libc::c_char;

/// Create a type array.
extern "C" fn LLVMDIBuilderGetOrCreateTypeArray(
    Builder: LLVMDIBuilderRef,
    Data: &mut LLVMMetadataRef,
    NumElements: libc::size_t,
) -> LLVMMetadataRef;

/// Create subroutine type.
extern "C" fn LLVMDIBuilderCreateSubroutineType(
    Builder: LLVMDIBuilderRef,
    File: LLVMMetadataRef,
    ParameterTypes: &mut LLVMMetadataRef,
    NumParameterTypes: libc::c_uint,
    Flags: LLVMDIFlags,
) -> LLVMMetadataRef;

extern "C" fn LLVMDIBuilderCreateMacro(
    Builder: LLVMDIBuilderRef,
    ParentMacroFile: LLVMMetadataRef,
    Line: libc::c_uint,
    RecordType: LLVMDWARFMacinfoRecordType,
    Name: &libc::c_char,
    NameLen: usize,
    Value: &libc::c_char,
    ValueLen: usize,
) -> LLVMMetadataRef;

extern "C" fn LLVMDIBuilderCreateTempMacroFile(
    Builder: LLVMDIBuilderRef,
    ParentMacroFile: LLVMMetadataRef,
    Line: libc::c_uint,
    File: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Create debugging information entry for an enumerator.
extern "C" fn LLVMDIBuilderCreateEnumerator(
    Builder: LLVMDIBuilderRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    Value: i64,
    IsUnsigned: LLVMBool,
) -> LLVMMetadataRef;

/// Create debugging information entry for an enumeration.
extern "C" fn LLVMDIBuilderCreateEnumerationType(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNumber: libc::c_uint,
    SizeInBits: u64,
    AlignInBits: u32,
    Elements: &mut LLVMMetadataRef,
    NumElements: libc::c_uint,
    ClassTy: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Create debugging information entry for a union.
extern "C" fn LLVMDIBuilderCreateUnionType(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNumber: libc::c_uint,
    SizeInBits: u64,
    AlignInBits: u32,
    Flags: LLVMDIFlags,
    Elements: &mut LLVMMetadataRef,
    NumElements: libc::c_uint,
    RunTimeLang: libc::c_uint,
    UniqueId: &libc::c_char,
    UniqueIdLen: libc::size_t,
) -> LLVMMetadataRef;

/// Create debugging information entry for an array.
extern "C" fn LLVMDIBuilderCreateArrayType(
    Builder: LLVMDIBuilderRef,
    Size: u64,
    AlignInBits: u32,
    Ty: LLVMMetadataRef,
    Subscripts: &mut LLVMMetadataRef,
    NumSubscripts: libc::c_uint,
) -> LLVMMetadataRef;

/// Create debugging information entry for a vector type.
extern "C" fn LLVMDIBuilderCreateVectorType(
    Builder: LLVMDIBuilderRef,
    Size: u64,
    AlignInBits: u32,
    Ty: LLVMMetadataRef,
    Subscripts: &mut LLVMMetadataRef,
    NumSubscripts: libc::c_uint,
) -> LLVMMetadataRef;

/// Create a DWARF unspecified type.
extern "C" fn LLVMDIBuilderCreateUnspecifiedType(
    Builder: LLVMDIBuilderRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
) -> LLVMMetadataRef;

/// Create debugging information entry for a basic type.
extern "C" fn LLVMDIBuilderCreateBasicType(
    Builder: LLVMDIBuilderRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    SizeInBits: u64,
    Encoding: LLVMDWARFTypeEncoding,
    Flags: LLVMDIFlags,
) -> LLVMMetadataRef;

/// Create debugging information entry for a pointer.
extern "C" fn LLVMDIBuilderCreatePointerType(
    Builder: LLVMDIBuilderRef,
    PointeeTy: LLVMMetadataRef,
    SizeInBits: u64,
    AlignInBits: u32,
    AddressSpace: libc::c_uint,
    Name: &libc::c_char,
    NameLen: libc::size_t,
) -> LLVMMetadataRef;

/// Create debugging information entry for a struct.
extern "C" fn LLVMDIBuilderCreateStructType(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNumber: libc::c_uint,
    SizeInBits: u64,
    AlignInBits: u32,
    Flags: LLVMDIFlags,
    DerivedFrom: LLVMMetadataRef,
    Elements: &mut LLVMMetadataRef,
    NumElements: libc::c_uint,
    RunTimeLang: libc::c_uint,
    VTableHolder: LLVMMetadataRef,
    UniqueId: &libc::c_char,
    UniqueIdLen: libc::size_t,
) -> LLVMMetadataRef;

/// Create debugging information entry for a member.
extern "C" fn LLVMDIBuilderCreateMemberType(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNo: libc::c_uint,
    SizeInBits: u64,
    AlignInBits: u32,
    OffsetInBits: u64,
    Flags: LLVMDIFlags,
    Ty: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Create debugging information entry for a C++ static data member.
extern "C" fn LLVMDIBuilderCreateStaticMemberType(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNumber: libc::c_uint,
    Type: LLVMMetadataRef,
    Flags: LLVMDIFlags,
    ConstantVal: LLVMValueRef,
    AlignInBits: u32,
) -> LLVMMetadataRef;

/// Create debugging information entry for a pointer to member.
extern "C" fn LLVMDIBuilderCreateMemberPointerType(
    Builder: LLVMDIBuilderRef,
    PointeeType: LLVMMetadataRef,
    ClassType: LLVMMetadataRef,
    SizeInBits: u64,
    AlignInBits: u32,
    Flags: LLVMDIFlags,
) -> LLVMMetadataRef;

/// Create debugging information entry for Objective-C instance variable.
extern "C" fn LLVMDIBuilderCreateObjCIVar(
    Builder: LLVMDIBuilderRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNo: libc::c_uint,
    SizeInBits: u64,
    AlignInBits: u32,
    OffsetInBits: u64,
    Flags: LLVMDIFlags,
    Ty: LLVMMetadataRef,
    PropertyNode: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Create debugging information entry for Objective-C property.
extern "C" fn LLVMDIBuilderCreateObjCProperty(
    Builder: LLVMDIBuilderRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNo: libc::c_uint,
    GetterName: &libc::c_char,
    GetterNameLen: libc::size_t,
    SetterName: &libc::c_char,
    SetterNameLen: libc::size_t,
    PropertyAttributes: libc::c_uint,
    Ty: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Create a uniqued DIType* clone with FlagObjectPointer and FlagArtificial set.
extern "C" fn LLVMDIBuilderCreateObjectPointerType(
    Builder: LLVMDIBuilderRef,
    Type: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Create debugging information entry for a qualified type, e.g. 'const int'.
extern "C" fn LLVMDIBuilderCreateQualifiedType(
    Builder: LLVMDIBuilderRef,
    Tag: libc::c_uint,
    Type: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Create debugging information entry for a c++ style reference or rvalue reference type.
extern "C" fn LLVMDIBuilderCreateReferenceType(
    Builder: LLVMDIBuilderRef,
    Tag: libc::c_uint,
    Type: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Create C++11 nullptr type.
extern "C" fn LLVMDIBuilderCreateNullPtrType(Builder: LLVMDIBuilderRef) -> LLVMMetadataRef;

/// Create debugging information entry for a typedef.
extern "C" fn LLVMDIBuilderCreateTypedef(
    Builder: LLVMDIBuilderRef,
    Type: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNo: libc::c_uint,
    Scope: LLVMMetadataRef,
    AlignInBits: u32,
) -> LLVMMetadataRef;

/// Create debugging information entry to establish inheritance relationship between two types.
extern "C" fn LLVMDIBuilderCreateInheritance(
    Builder: LLVMDIBuilderRef,
    Ty: LLVMMetadataRef,
    BaseTy: LLVMMetadataRef,
    BaseOffset: u64,
    VBPtrOffset: u32,
    Flags: LLVMDIFlags,
) -> LLVMMetadataRef;

/// Create a permanent forward-declared type.
extern "C" fn LLVMDIBuilderCreateForwardDecl(
    Builder: LLVMDIBuilderRef,
    Tag: libc::c_uint,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    Scope: LLVMMetadataRef,
    File: LLVMMetadataRef,
    Line: libc::c_uint,
    RuntimeLang: libc::c_uint,
    SizeInBits: u64,
    AlignInBits: u32,
    UniqueIdentifier: &libc::c_char,
    UniqueIdentifierLen: libc::size_t,
) -> LLVMMetadataRef;

/// Create a temporary forward-declared type.
extern "C" fn LLVMDIBuilderCreateReplaceableCompositeType(
    Builder: LLVMDIBuilderRef,
    Tag: libc::c_uint,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    Scope: LLVMMetadataRef,
    File: LLVMMetadataRef,
    Line: libc::c_uint,
    RuntimeLang: libc::c_uint,
    SizeInBits: u64,
    AlignInBits: u32,
    Flags: LLVMDIFlags,
    UniqueIdentifier: &libc::c_char,
    UniqueIdentifierLen: libc::size_t,
) -> LLVMMetadataRef;

/// Create debugging information entry for a bit field member.
extern "C" fn LLVMDIBuilderCreateBitFieldMemberType(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNumber: libc::c_uint,
    SizeInBits: u64,
    OffsetInBits: u64,
    StorageOffsetInBits: u64,
    Flags: LLVMDIFlags,
    Type: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Create debugging information entry for a class.
extern "C" fn LLVMDIBuilderCreateClassType(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNumber: libc::c_uint,
    SizeInBits: u64,
    AlignInBits: u32,
    OffsetInBits: u64,
    Flags: LLVMDIFlags,
    DerivedFrom: LLVMMetadataRef,
    Elements: &mut LLVMMetadataRef,
    NumElements: libc::c_uint,
    VTableHolder: LLVMMetadataRef,
    TemplateParamsNode: LLVMMetadataRef,
    UniqueIdentifier: &libc::c_char,
    UniqueIdentifierLen: libc::size_t,
) -> LLVMMetadataRef;

/// Create a uniqued DIType* clone with FlagArtificial set.
extern "C" fn LLVMDIBuilderCreateArtificialType(
    Builder: LLVMDIBuilderRef,
    Type: LLVMMetadataRef,
) -> LLVMMetadataRef;

/// Get the name of this DIType.
extern "C" fn LLVMDITypeGetName(
    DType: LLVMMetadataRef,
    Length: &mut libc::size_t,
) -> &libc::c_char;

/// Get the size of this DIType in bits.
extern "C" fn LLVMDITypeGetSizeInBits(DType: LLVMMetadataRef) -> u64;

/// Get the offset of this DIType in bits.
extern "C" fn LLVMDITypeGetOffsetInBits(DType: LLVMMetadataRef) -> u64;

/// Get the alignment of this DIType in bits.
extern "C" fn LLVMDITypeGetAlignInBits(DType: LLVMMetadataRef) -> u32;

/// Get the source line where this DIType is declared.
extern "C" fn LLVMDITypeGetLine(DType: LLVMMetadataRef) -> libc::c_uint;

/// Get the flags associated with this DIType.
extern "C" fn LLVMDITypeGetFlags(DType: LLVMMetadataRef) -> LLVMDIFlags;

/// Create a descriptor for a value range.
extern "C" fn LLVMDIBuilderGetOrCreateSubrange(
    Builder: LLVMDIBuilderRef,
    LowerBound: i64,
    Count: i64,
) -> LLVMMetadataRef;

/// Create an array of DI Nodes.
extern "C" fn LLVMDIBuilderGetOrCreateArray(
    Builder: LLVMDIBuilderRef,
    Data: &mut LLVMMetadataRef,
    NumElements: libc::size_t,
) -> LLVMMetadataRef;

/// Create a new descriptor for the specified variable which has a complex
extern "C" fn LLVMDIBuilderCreateExpression(
    Builder: LLVMDIBuilderRef,
    Addr: &mut i64,
    Length: libc::size_t,
) -> LLVMMetadataRef;

/// Create a new descriptor for the specified variable that does not have an
extern "C" fn LLVMDIBuilderCreateConstantValueExpression(
    Builder: LLVMDIBuilderRef,
    Value: i64,
) -> LLVMMetadataRef;

/// Create a new descriptor for the specified variable.
extern "C" fn LLVMDIBuilderCreateGlobalVariableExpression(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    Linkage: &libc::c_char,
    LinkLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNo: libc::c_uint,
    Ty: LLVMMetadataRef,
    LocalToUnit: LLVMBool,
    Expr: LLVMMetadataRef,
    Decl: LLVMMetadataRef,
    AlignInBits: u32,
) -> LLVMMetadataRef;

/// Retrieves the DIVariable associated with this global variable expression.
extern "C" fn LLVMDIGlobalVariableExpressionGetVariable(GVE: LLVMMetadataRef) -> LLVMMetadataRef;

/// Retrieves the DIExpression associated with this global variable expression.
extern "C" fn LLVMDIGlobalVariableExpressionGetExpression(GVE: LLVMMetadataRef) -> LLVMMetadataRef;

///Get the metadata of the file associated with a given variable.
extern "C" fn LLVMDIVariableGetFile(Var: LLVMMetadataRef) -> LLVMMetadataRef;

/// Get the metadata of the scope associated with a given variable.
extern "C" fn LLVMDIVariableGetScope(Var: LLVMMetadataRef) -> LLVMMetadataRef;

/// Get the source line where this \c DIVariable is declared.
extern "C" fn LLVMDIVariableGetLine(Var: LLVMMetadataRef) -> libc::c_uint;

/// Create a new temporary \c MDNode.  Suitable for use in constructing cyclic
extern "C" fn LLVMTemporaryMDNode(
    Ctx: LLVMContextRef,
    Data: &mut LLVMMetadataRef,
    NumElements: libc::size_t,
) -> LLVMMetadataRef;

/// Deallocate a temporary node.
extern "C" fn LLVMDisposeTemporaryMDNode(TempNode: LLVMMetadataRef);

/// Replace all uses of temporary metadata.
extern "C" fn LLVMMetadataReplaceAllUsesWith(
    TempTargetMetadata: LLVMMetadataRef,
    Replacement: LLVMMetadataRef,
);

/// Create a new descriptor for the specified global variable that is temporary
extern "C" fn LLVMDIBuilderCreateTempGlobalVariableFwdDecl(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    Linkage: &libc::c_char,
    LnkLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNo: libc::c_uint,
    Ty: LLVMMetadataRef,
    LocalToUnit: LLVMBool,
    Decl: LLVMMetadataRef,
    AlignInBits: u32,
) -> LLVMMetadataRef;

/// Insert a new llvm.dbg.declare intrinsic call before the given instruction.
extern "C" fn LLVMDIBuilderInsertDeclareBefore(
    Builder: LLVMDIBuilderRef,
    Storage: LLVMValueRef,
    VarInfo: LLVMMetadataRef,
    Expr: LLVMMetadataRef,
    DebugLoc: LLVMMetadataRef,
    Instr: LLVMValueRef,
) -> LLVMValueRef;

/// Insert a new llvm.dbg.declare intrinsic call at the end of the given basic block. If the basic block has a terminator instruction, the intrinsic is inserted before that terminator instruction.
extern "C" fn LLVMDIBuilderInsertDeclareAtEnd(
    Builder: LLVMDIBuilderRef,
    Storage: LLVMValueRef,
    VarInfo: LLVMMetadataRef,
    Expr: LLVMMetadataRef,
    DebugLoc: LLVMMetadataRef,
    Block: LLVMBasicBlockRef,
) -> LLVMValueRef;

/// Insert a new llvm.dbg.value intrinsic call before the given instruction.
extern "C" fn LLVMDIBuilderInsertDbgValueBefore(
    Builder: LLVMDIBuilderRef,
    Val: LLVMValueRef,
    VarInfo: LLVMMetadataRef,
    Expr: LLVMMetadataRef,
    DebugLoc: LLVMMetadataRef,
    Instr: LLVMValueRef,
) -> LLVMValueRef;

/// Insert a new llvm.dbg.value intrinsic call at the end of the given basic block. If the basic block has a terminator instruction, the intrinsic is inserted before that terminator instruction.
extern "C" fn LLVMDIBuilderInsertDbgValueAtEnd(
    Builder: LLVMDIBuilderRef,
    Val: LLVMValueRef,
    VarInfo: LLVMMetadataRef,
    Expr: LLVMMetadataRef,
    DebugLoc: LLVMMetadataRef,
    Block: LLVMBasicBlockRef,
) -> LLVMValueRef;

/// Create a new descriptor for a local auto variable.
extern "C" fn LLVMDIBuilderCreateAutoVariable(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    File: LLVMMetadataRef,
    LineNo: libc::c_uint,
    Ty: LLVMMetadataRef,
    AlwaysPreserve: LLVMBool,
    Flags: LLVMDIFlags,
    AlignInBits: u32,
) -> LLVMMetadataRef;

/// Create a new descriptor for a function parameter variable.
extern "C" fn LLVMDIBuilderCreateParameterVariable(
    Builder: LLVMDIBuilderRef,
    Scope: LLVMMetadataRef,
    Name: &libc::c_char,
    NameLen: libc::size_t,
    ArgNo: libc::c_uint,
    File: LLVMMetadataRef,
    LineNo: libc::c_uint,
    Ty: LLVMMetadataRef,
    AlwaysPreserve: LLVMBool,
    Flags: LLVMDIFlags,
) -> LLVMMetadataRef;

/// Get the metadata of the subprogram attached to a function.
extern "C" fn LLVMGetSubprogram(Func: LLVMValueRef) -> LLVMMetadataRef;

/// Set the subprogram attached to a function.
extern "C" fn LLVMSetSubprogram(Func: LLVMValueRef, SP: LLVMMetadataRef);

/// Get the line associated with a given subprogram.
extern "C" fn LLVMDISubprogramGetLine(Subprogram: LLVMMetadataRef) -> libc::c_uint;

/// Get the debug location for the given instruction.
extern "C" fn LLVMInstructionGetDebugLoc(Inst: LLVMValueRef) -> LLVMMetadataRef;

/// Set the debug location for the given instruction.
extern "C" fn LLVMInstructionSetDebugLoc(Inst: LLVMValueRef, Loc: LLVMMetadataRef);

/// Obtain the enumerated type of a metadata instance.
extern "C" fn LLVMGetMetadataKind(Metadata: LLVMMetadataRef) -> LLVMMetadataKind;
