//! OrcV2

use error::LLVMErrorRef;
use target_machine::LLVMTargetMachineRef;

/// Represents an address in the executor process.
type LLVMOrcJITTargetAddress = u64;

/// Represents an address in the executor process
type LLVMOrcExecutorAddress = u64;

/// Generic linkage flags for a symbol definition.
enum LLVMJITSymbolGenericFlags {
    LLVMJITSymbolGenericFlagsExported = 1,
    LLVMJITSymbolGenericFlagsWeak = 2,
    LLVMJITSymbolGenericFlagsCallable = 4,
    LLVMJITSymbolGenericFlagsMaterializationSideEffectsOnly = 8,
}

/// Target specific flags for a symbol definition.
type LLVMJITSymbolTargetFlags = u8;

/// Linkage flags for a symbol definition.
struct LLVMJITSymbolFlags {
    GenericFlags: u8,
    TargetFlags: u8,
}

/// An evaluated symbol address and flags.
struct LLVMJITEvaluatedSymbol {
    Address: LLVMOrcExecutorAddress,
    Flags: LLVMJITSymbolFlags,
}

enum LLVMOrcOpaqueExecutionSession {}
type LLVMOrcExecutionSessionRef = &mut LLVMOrcOpaqueExecutionSession;

/// Error reporter function.
type LLVMOrcErrorReporterFunction = fn(&mut void, LLVMErrorRef);

enum LLVMOrcOpaqueSymbolStringPool {}
/// A reference to an orc::SymbolStringPool.
type LLVMOrcSymbolStringPoolRef = &mut LLVMOrcOpaqueSymbolStringPool;

enum LLVMOrcOpaqueSymbolStringPoolEntry {}
type LLVMOrcSymbolStringPoolEntryRef = &mut LLVMOrcOpaqueSymbolStringPoolEntry;

/// A pair of a symbol name and LLVMJITSymbolFlags.
struct LLVMOrcCSymbolFlagsMapPair {
    Name: LLVMOrcSymbolStringPoolEntryRef,
    Flags: LLVMJITSymbolFlags,
}

type LLVMOrcCSymbolFlagsMapPairs = &mut LLVMOrcCSymbolFlagsMapPair;

/// A pair of a symbol name and an evaluated symbol.
struct LLVMJITCSymbolMapPair {
    Name: LLVMOrcSymbolStringPoolEntryRef,
    Sym: LLVMJITEvaluatedSymbol,
}

/// A list of (SymbolStringPtr, JITEvaluatedSymbol) pairs that can be
/// used to construct a SymbolMap.
type LLVMOrcCSymbolMapPairs = &mut LLVMJITCSymbolMapPair;

struct LLVMOrcCSymbolAliasMapEntry {
    Name: LLVMOrcSymbolStringPoolEntryRef,
    Flags: LLVMJITSymbolFlags,
}

struct LLVMOrcCSymbolAliasMapPair {
    Name: LLVMOrcSymbolStringPoolEntryRef,
    Entry: LLVMOrcCSymbolAliasMapEntry,
}

type LLVMOrcCSymbolAliasMapPairs = &mut LLVMOrcCSymbolAliasMapPair;

enum LLVMOrcOpaqueJITDylib {}
type LLVMOrcJITDylibRef = &mut LLVMOrcOpaqueJITDylib;

struct LLVMOrcCSymbolsList {
    Symbols: &mut LLVMOrcSymbolStringPoolEntryRef,
    Length: libc::size_t,
}

struct LLVMOrcCDependenceMapPair {
    JD: LLVMOrcJITDylibRef,
    Names: LLVMOrcCSymbolsList,
}

type LLVMOrcCDependenceMapPairs = &mut LLVMOrcCDependenceMapPair;

/// Lookup kind. This can be used by definition generators when deciding whether
/// to produce a definition for a requested symbol.
enum LLVMOrcLookupKind {
    LLVMOrcLookupKindStatic,
    LLVMOrcLookupKindDLSym,
}

/// JITDylib lookup flags. This can be used by definition generators when
/// deciding whether to produce a definition for a requested symbol.
enum LLVMOrcJITDylibLookupFlags {
    LLVMOrcJITDylibLookupFlagsMatchExportedSymbolsOnly,
    LLVMOrcJITDylibLookupFlagsMatchAllSymbols,
}

/// Symbol lookup flags for lookup sets.
enum LLVMOrcSymbolLookupFlags {
    LLVMOrcSymbolLookupFlagsRequiredSymbol,
    LLVMOrcSymbolLookupFlagsWeaklyReferencedSymbol,
}

/// An element type for a symbol lookup set.
struct LLVMOrcCLookupSetElement {
    Name: LLVMOrcSymbolStringPoolEntryRef,
    LookupFlags: LLVMOrcSymbolLookupFlags,
}

/// A set of symbols to look up / generate.
///
/// The list is terminated with an element containing a null pointer for the
/// Name field.
///
/// The creator is responsible for freeing the set and ensuring all strings
/// are retained for the set's lifetime.
type LLVMOrcCLookupSet = &mut LLVMOrcCLookupSetElement;

enum LLVMOrcOpaqueMaterializationUnit {}
type LLVMOrcMaterializationUnitRef = &mut LLVMOrcOpaqueMaterializationUnit;

enum LLVMOrcOpaqueMaterializationResponsibility {}
type LLVMOrcMaterializationResponsibilityRef = &mut LLVMOrcOpaqueMaterializationResponsibility;

type LLVMOrcMaterializationUnitMaterializeFunction =
    fn(&mut void, LLVMOrcMaterializationResponsibilityRef);

type LLVMOrcMaterializationUnitDiscardFunction = fn(
    &mut void,
    LLVMOrcJITDylibRef,
    LLVMOrcSymbolStringPoolEntryRef,
);

type LLVMOrcMaterializationUnitDestroyFunction = fn(&mut void);

enum LLVMOrcOpaqueResourceTracker {}
type LLVMOrcResourceTrackerRef = &mut LLVMOrcOpaqueResourceTracker;

enum LLVMOrcOpaqueDefinitionGenerator {}
type LLVMOrcDefinitionGeneratorRef = &mut LLVMOrcOpaqueDefinitionGenerator;

enum LLVMOrcOpaqueLookupState {}
type LLVMOrcLookupStateRef = &mut LLVMOrcOpaqueLookupState;

type LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction = fn(
    LLVMOrcDefinitionGeneratorRef,
    &mut void,
    &mut LLVMOrcLookupStateRef,
    LLVMOrcLookupKind,
    LLVMOrcJITDylibRef,
    LLVMOrcJITDylibLookupFlags,
    LLVMOrcCLookupSet,
    usize,
) -> LLVMErrorRef;

type LLVMOrcSymbolPredicate = fn(&mut void, LLVMOrcSymbolStringPoolEntryRef) -> libc::c_int;

enum LLVMOrcOpaqueThreadSafeContext {}
type LLVMOrcThreadSafeContextRef = &mut LLVMOrcOpaqueThreadSafeContext;

enum LLVMOrcOpaqueThreadSafeModule {}
type LLVMOrcThreadSafeModuleRef = &mut LLVMOrcOpaqueThreadSafeModule;

type LLVMOrcGenericIRModuleOperationFunction = fn(LLVMModuleRef, &mut void) -> LLVMErrorRef;

enum LLVMOrcOpaqueJITTargetMachineBuilder {}
type LLVMOrcJITTargetMachineBuilderRef = &mut LLVMOrcOpaqueJITTargetMachineBuilder;

enum LLVMOrcOpaqueObjectLayer {}
type LLVMOrcObjectLayerRef = &mut LLVMOrcOpaqueObjectLayer;

enum LLVMOrcOpaqueObjectLinkingLayer {}
type LLVMOrcObjectLinkingLayerRef = &mut LLVMOrcOpaqueObjectLayer;

enum LLVMOrcOpaqueIRTransformLayer {}
type LLVMOrcIRTransformLayerRef = &mut LLVMOrcOpaqueIRTransformLayer;

type LLVMOrcIRTransformLayerTransformFunction = fn(
    &mut void,
    &mut LLVMOrcThreadSafeModuleRef,
    LLVMOrcMaterializationResponsibilityRef,
) -> LLVMErrorRef;

enum LLVMOrcOpaqueObjectTransformLayer {}
type LLVMOrcObjectTransformLayerRef = &mut LLVMOrcOpaqueObjectTransformLayer;

type LLVMOrcObjectTransformLayerTransformFunction =
    fn(&mut void, &mut LLVMMemoryBufferRef) -> LLVMErrorRef;

enum LLVMOrcOpaqueIndirectStubsManager {}
type LLVMOrcIndirectStubsManagerRef = &mut LLVMOrcOpaqueIndirectStubsManager;

enum LLVMOrcOpaqueLazyCallThroughManager {}
type LLVMOrcLazyCallThroughManagerRef = &mut LLVMOrcOpaqueLazyCallThroughManager;

enum LLVMOrcOpaqueDumpObjects {}
type LLVMOrcDumpObjectsRef = &mut LLVMOrcOpaqueDumpObjects;

extern "C" fn LLVMOrcExecutionSessionSetErrorReporter(
    ES: LLVMOrcExecutionSessionRef,
    ReportError: LLVMOrcErrorReporterFunction,
    Ctx: &mut void,
);
extern "C" fn LLVMOrcExecutionSessionGetSymbolStringPool(
    ES: LLVMOrcExecutionSessionRef,
) -> LLVMOrcSymbolStringPoolRef;
extern "C" fn LLVMOrcSymbolStringPoolClearDeadEntries(SSP: LLVMOrcSymbolStringPoolRef);
extern "C" fn LLVMOrcExecutionSessionIntern(
    ES: LLVMOrcExecutionSessionRef,
    Name: &libc::c_char,
) -> LLVMOrcSymbolStringPoolEntryRef;
extern "C" fn LLVMOrcRetainSymbolStringPoolEntry(S: LLVMOrcSymbolStringPoolEntryRef);
extern "C" fn LLVMOrcReleaseSymbolStringPoolEntry(S: LLVMOrcSymbolStringPoolEntryRef);
extern "C" fn LLVMOrcSymbolStringPoolEntryStr(
    S: LLVMOrcSymbolStringPoolEntryRef,
) -> &libc::c_char;
extern "C" fn LLVMOrcReleaseResourceTracker(RT: LLVMOrcResourceTrackerRef);
extern "C" fn LLVMOrcResourceTrackerTransferTo(
    SrcRT: LLVMOrcResourceTrackerRef,
    DstRT: LLVMOrcResourceTrackerRef,
);
extern "C" fn LLVMOrcResourceTrackerRemove(RT: LLVMOrcResourceTrackerRef) -> LLVMErrorRef;
extern "C" fn LLVMOrcDisposeDefinitionGenerator(DG: LLVMOrcDefinitionGeneratorRef);
extern "C" fn LLVMOrcDisposeMaterializationUnit(MU: LLVMOrcMaterializationUnitRef);
extern "C" fn LLVMOrcCreateCustomMaterializationUnit(
    Name: &libc::c_char,
    Ctx: &mut void,
    Syms: LLVMOrcCSymbolFlagsMapPairs,
    NumSyms: libc::size_t,
    InitSym: LLVMOrcSymbolStringPoolEntryRef,
    Materialize: LLVMOrcMaterializationUnitMaterializeFunction,
    Discard: LLVMOrcMaterializationUnitDiscardFunction,
    Destroy: LLVMOrcMaterializationUnitDestroyFunction,
) -> LLVMOrcMaterializationUnitRef;
extern "C" fn LLVMOrcAbsoluteSymbols(
    Syms: LLVMOrcCSymbolMapPairs,
    NumPairs: usize,
) -> LLVMOrcMaterializationUnitRef;
extern "C" fn LLVMOrcLazyReexports(
    LCTM: LLVMOrcLazyCallThroughManagerRef,
    ISM: LLVMOrcIndirectStubsManagerRef,
    SourceRef: LLVMOrcJITDylibRef,
    CallableAliases: LLVMOrcCSymbolAliasMapPairs,
    NumPairs: libc::size_t,
) -> LLVMOrcMaterializationUnitRef;
extern "C" fn LLVMOrcDisposeMaterializationResponsibility(MR: LLVMOrcMaterializationResponsibilityRef);
extern "C" fn LLVMOrcMaterializationResponsibilityGetTargetDylib(
    MR: LLVMOrcMaterializationResponsibilityRef,
) -> LLVMOrcJITDylibRef;
extern "C" fn LLVMOrcMaterializationResponsibilityGetExecutionSession(
    MR: LLVMOrcMaterializationResponsibilityRef,
) -> LLVMOrcExecutionSessionRef;
extern "C" fn LLVMOrcMaterializationResponsibilityGetSymbols(
    MR: LLVMOrcMaterializationResponsibilityRef,
    NumPairs: &mut libc::size_t,
) -> LLVMOrcCSymbolFlagsMapPairs;
extern "C" fn LLVMOrcDisposeCSymbolFlagsMap(Pairs: LLVMOrcCSymbolFlagsMapPairs);
extern "C" fn LLVMOrcMaterializationResponsibilityGetInitializerSymbol(
    MR: LLVMOrcMaterializationResponsibilityRef,
) -> LLVMOrcSymbolStringPoolEntryRef;
extern "C" fn LLVMOrcMaterializationResponsibilityGetRequestedSymbols(
    MR: LLVMOrcMaterializationResponsibilityRef,
    NumSymbols: &mut libc::size_t,
) -> &mut LLVMOrcSymbolStringPoolEntryRef;
extern "C" fn LLVMOrcDisposeSymbols(Symbols: &mut LLVMOrcSymbolStringPoolEntryRef);
extern "C" fn LLVMOrcMaterializationResponsibilityNotifyResolved(
    MR: LLVMOrcMaterializationResponsibilityRef,
    Symbols: LLVMOrcCSymbolMapPairs,
    NumPairs: libc::size_t,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcMaterializationResponsibilityNotifyEmitted(
    MR: LLVMOrcMaterializationResponsibilityRef,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcMaterializationResponsibilityDefineMaterializing(
    MR: LLVMOrcMaterializationResponsibilityRef,
    Pairs: LLVMOrcCSymbolFlagsMapPairs,
    NumPairs: libc::size_t,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcMaterializationResponsibilityFailMaterialization(
    MR: LLVMOrcMaterializationResponsibilityRef,
);
extern "C" fn LLVMOrcMaterializationResponsibilityReplace(
    MR: LLVMOrcMaterializationResponsibilityRef,
    MU: LLVMOrcMaterializationUnitRef,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcMaterializationResponsibilityDelegate(
    MR: LLVMOrcMaterializationResponsibilityRef,
    Symbols: &mut LLVMOrcSymbolStringPoolEntryRef,
    NumSymbols: libc::size_t,
    Result: &mut LLVMOrcMaterializationResponsibilityRef,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcMaterializationResponsibilityAddDependencies(
    MR: LLVMOrcMaterializationResponsibilityRef,
    Name: LLVMOrcSymbolStringPoolEntryRef,
    Dependencies: LLVMOrcCDependenceMapPairs,
    NumPairs: libc::size_t,
);
extern "C" fn LLVMOrcMaterializationResponsibilityAddDependenciesForAll(
    MR: LLVMOrcMaterializationResponsibilityRef,
    Dependencies: LLVMOrcCDependenceMapPairs,
    NumPairs: libc::size_t,
);
extern "C" fn LLVMOrcExecutionSessionCreateBareJITDylib(
    ES: LLVMOrcExecutionSessionRef,
    Name: &libc::c_char,
) -> LLVMOrcJITDylibRef;
extern "C" fn LLVMOrcExecutionSessionCreateJITDylib(
    ES: LLVMOrcExecutionSessionRef,
    Result_: &mut LLVMOrcJITDylibRef,
    Name: &libc::c_char,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcExecutionSessionGetJITDylibByName(
    ES: LLVMOrcExecutionSessionRef,
    Name: &libc::c_char,
) -> LLVMOrcJITDylibRef;
extern "C" fn LLVMOrcJITDylibCreateResourceTracker(
    JD: LLVMOrcJITDylibRef,
) -> LLVMOrcResourceTrackerRef;
extern "C" fn LLVMOrcJITDylibGetDefaultResourceTracker(
    JD: LLVMOrcJITDylibRef,
) -> LLVMOrcResourceTrackerRef;
extern "C" fn LLVMOrcJITDylibDefine(
    JD: LLVMOrcJITDylibRef,
    MU: LLVMOrcMaterializationUnitRef,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcJITDylibClear(JD: LLVMOrcJITDylibRef) -> LLVMErrorRef;
extern "C" fn LLVMOrcJITDylibAddGenerator(JD: LLVMOrcJITDylibRef, DG: LLVMOrcDefinitionGeneratorRef);
extern "C" fn LLVMOrcCreateCustomCAPIDefinitionGenerator(
    F: LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction,
    Ctx: &mut void,
) -> LLVMOrcDefinitionGeneratorRef;
extern "C" fn LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess(
    Result: &mut LLVMOrcDefinitionGeneratorRef,
    GlobalPrefix: libc::c_char,
    Filter: LLVMOrcSymbolPredicate,
    FilterCtx: &mut void,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcCreateNewThreadSafeContext() -> LLVMOrcThreadSafeContextRef;
extern "C" fn LLVMOrcThreadSafeContextGetContext(TSCtx: LLVMOrcThreadSafeContextRef)
    -> LLVMContextRef;
extern "C" fn LLVMOrcDisposeThreadSafeContext(TSCtx: LLVMOrcThreadSafeContextRef);
extern "C" fn LLVMOrcCreateNewThreadSafeModule(
    M: LLVMModuleRef,
    TSCtx: LLVMOrcThreadSafeContextRef,
) -> LLVMOrcThreadSafeModuleRef;
extern "C" fn LLVMOrcDisposeThreadSafeModule(TSM: LLVMOrcThreadSafeModuleRef);
extern "C" fn LLVMOrcThreadSafeModuleWithModuleDo(
    TSM: LLVMOrcThreadSafeModuleRef,
    F: LLVMOrcGenericIRModuleOperationFunction,
    Ctx: &mut void,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcJITTargetMachineBuilderDetectHost(
    Result: &mut LLVMOrcJITTargetMachineBuilderRef,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine(
    TM: LLVMTargetMachineRef,
) -> LLVMOrcJITTargetMachineBuilderRef;
extern "C" fn LLVMOrcDisposeJITTargetMachineBuilder(JTMB: LLVMOrcJITTargetMachineBuilderRef);
extern "C" fn LLVMOrcJITTargetMachineBuilderGetTargetTriple(
    JTMB: LLVMOrcJITTargetMachineBuilderRef,
) -> &mut libc::c_char;
extern "C" fn LLVMOrcJITTargetMachineBuilderSetTargetTriple(
    JTMB: LLVMOrcJITTargetMachineBuilderRef,
    TargetTriple: &libc::c_char,
);
extern "C" fn LLVMOrcObjectLayerAddObjectFile(
    ObjLayer: LLVMOrcObjectLayerRef,
    JD: LLVMOrcJITDylibRef,
    ObjBuffer: LLVMMemoryBufferRef,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcObjectLayerAddObjectFileWithRT(
    ObjLayer: LLVMOrcObjectLayerRef,
    RT: LLVMOrcResourceTrackerRef,
    ObjBuffer: LLVMMemoryBufferRef,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcObjectLayerEmit(
    ObjLayer: LLVMOrcObjectLayerRef,
    R: LLVMOrcMaterializationResponsibilityRef,
    ObjBuffer: LLVMMemoryBufferRef,
);
extern "C" fn LLVMOrcDisposeObjectLayer(ObjLayer: LLVMOrcObjectLayerRef);
extern "C" fn LLVMOrcIRTransformLayerEmit(
    IRTransformLayer: LLVMOrcIRTransformLayerRef,
    MR: LLVMOrcMaterializationResponsibilityRef,
    TSM: LLVMOrcThreadSafeModuleRef,
);
extern "C" fn LLVMOrcIRTransformLayerSetTransform(
    IRTransformLayer: LLVMOrcIRTransformLayerRef,
    TransformFunction: LLVMOrcIRTransformLayerTransformFunction,
    Ctx: &mut void,
);
extern "C" fn LLVMOrcObjectTransformLayerSetTransform(
    ObjTransformLayer: LLVMOrcObjectTransformLayerRef,
    TransformFunction: LLVMOrcObjectTransformLayerTransformFunction,
    Ctx: &mut void,
);
extern "C" fn LLVMOrcCreateLocalIndirectStubsManager(
    TargetTriple: &libc::c_char,
) -> LLVMOrcIndirectStubsManagerRef;
extern "C" fn LLVMOrcDisposeIndirectStubsManager(ISM: LLVMOrcIndirectStubsManagerRef);
extern "C" fn LLVMOrcCreateLocalLazyCallThroughManager(
    TargetTriple: &libc::c_char,
    ES: LLVMOrcExecutionSessionRef,
    ErrorHandlerAddr: LLVMOrcJITTargetAddress,
    LCTM: &mut LLVMOrcLazyCallThroughManagerRef,
) -> LLVMErrorRef;
extern "C" fn LLVMOrcDisposeLazyCallThroughManager(LCTM: LLVMOrcLazyCallThroughManagerRef);
extern "C" fn LLVMOrcCreateDumpObjects(
    DumpDir: &libc::c_char,
    IdentifierOverride: &libc::c_char,
) -> LLVMOrcDumpObjectsRef;
extern "C" fn LLVMOrcDisposeDumpObjects(DumpObjects: LLVMOrcDumpObjectsRef);
extern "C" fn LLVMOrcDumpObjects_CallOperator(
    DumpObjects: LLVMOrcDumpObjectsRef,
    ObjBuffer: &mut LLVMMemoryBufferRef,
) -> LLVMErrorRef;
