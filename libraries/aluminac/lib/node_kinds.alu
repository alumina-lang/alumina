// @generated

use std::collections::HashMap;
use tree_sitter::{TSSymbol, Node};

enum NodeKind {
    Invalid,
    SourceFile,
    TupleIndexOf,
    UseDeclaration,
    UseWildcard,
    Mixin,
    AssignmentExpression,
    StructInitializerItem,
    ScopedTypeIdentifier,
    TupleIndexExpression,
    UseList,
    TopLevelBlock,
    ExpressionStatement,
    GenericTypeWithTurbofish,
    BooleanLiteral,
    CompoundAssignmentExpr,
    DeferExpression,
    ParameterTypeList,
    Pattern,
    BlockComment,
    DocComment,
    Turbofish,
    Arguments,
    TryExpression,
    TypeArguments,
    CallExpression,
    BoundIdentifier,
    ContinueExpression,
    MacroDefinition,
    BinaryExpression,
    ProtocolBound,
    DerefOf,
    StructInitializer,
    Block,
    SliceOf,
    TopLevelAttributes,
    FloatLiteral,
    UniversalMacroInvocation,
    ArrayOf,
    ScopedUseList,
    ArrayExpression,
    Attributes,
    MetaArguments,
    TypeCheckExpression,
    RangeExpression,
    WhenType,
    DereferenceExpression,
    FileDocComment,
    MacroParameterList,
    TypeIdentifier,
    MacroInvocation,
    ConstDeclaration,
    StructExpression,
    LoopExpression,
    UseAsClause,
    Parameter,
    ProtocolDefinition,
    FieldExpression,
    PtrLiteral,
    EnumDefinition,
    TupleType,
    ElseClause,
    TypeDefinition,
    TypeCastExpression,
    UnaryExpression,
    GenericType,
    Identifier,
    IndexExpression,
    TypeOf,
    LetDeclaration,
    StaticDeclaration,
    StaticForExpression,
    MacroParameter,
    PrimitiveType,
    ModDefinition,
    NeverType,
    WhileExpression,
    StringLiteral,
    ImplBlock,
    ScopedIdentifier,
    SwitchExpression,
    MacroIdentifier,
    MacroArguments,
    GenericArgument,
    BreakExpression,
    EtCeteraExpression,
    FunctionPointer,
    EmptyStatement,
    SwitchBody,
    ClosureParameters,
    ReferenceExpression,
    MetaItem,
    FunctionProtocol,
    AttributeItem,
    GenericArgumentList,
    EtCeteraOf,
    ReturnExpression,
    DynOf,
    IfExpression,
    LineComment,
    SwitchArm,
    StructDefinition,
    Statement,
    TupleExpression,
    EnumItem,
    YieldExpression,
    PointerOf,
    ParenthesizedExpression,
    CharLiteral,
    ForExpression,
    LambdaExpression,
    IntegerLiteral,
    StructField,
    TopLevelAttributeItem,
    FunctionDefinition,
    ParameterList,
}

enum FieldKind {
    Abi = 1u16,
    Alias = 2u16,
    AllBounds = 3u16,
    Alternative = 4u16,
    AnyBounds = 5u16,
    Argument = 6u16,
    Arguments = 7u16,
    Arm = 8u16,
    Attributes = 9u16,
    Body = 10u16,
    Bound = 11u16,
    ByReference = 12u16,
    ByValue = 13u16,
    Condition = 14u16,
    Consequence = 15u16,
    Coroutine = 16u16,
    Default = 17u16,
    Docstring = 18u16,
    Element = 19u16,
    EtCetera = 20u16,
    Extern = 21u16,
    Field = 22u16,
    Function = 23u16,
    Inclusive = 24u16,
    Index = 25u16,
    Init = 26u16,
    Inner = 27u16,
    Item = 28u16,
    Items = 29u16,
    Kind = 30u16,
    Left = 31u16,
    List = 32u16,
    Lower = 33u16,
    Macro = 34u16,
    Mut = 35u16,
    Name = 36u16,
    Negated = 37u16,
    Operator = 38u16,
    Parameter = 39u16,
    Parameters = 40u16,
    Path = 41u16,
    Pattern = 42u16,
    Placeholder = 43u16,
    Protocol = 44u16,
    Result = 45u16,
    ReturnType = 46u16,
    Right = 47u16,
    Size = 48u16,
    Statements = 49u16,
    Tuple = 50u16,
    Type = 51u16,
    TypeArguments = 52u16,
    Upper = 53u16,
    Value = 54u16,
}

const NODE_KINDS: [NodeKind; 262] = [
    NodeKind::Invalid,
    NodeKind::Identifier,
    NodeKind::DocComment,
    NodeKind::FileDocComment,
    NodeKind::LineComment,
    NodeKind::BlockComment,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Identifier,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::ContinueExpression,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::IntegerLiteral,
    NodeKind::FloatLiteral,
    NodeKind::StringLiteral,
    NodeKind::CharLiteral,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::PtrLiteral,
    NodeKind::MacroIdentifier,
    NodeKind::SourceFile,
    NodeKind::TopLevelAttributes,
    NodeKind::TopLevelAttributeItem,
    NodeKind::Attributes,
    NodeKind::AttributeItem,
    NodeKind::MetaItem,
    NodeKind::MetaArguments,
    NodeKind::Invalid,
    NodeKind::TopLevelBlock,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::ModDefinition,
    NodeKind::FunctionDefinition,
    NodeKind::MacroDefinition,
    NodeKind::MacroParameterList,
    NodeKind::MacroParameter,
    NodeKind::StructDefinition,
    NodeKind::ProtocolDefinition,
    NodeKind::Mixin,
    NodeKind::TypeDefinition,
    NodeKind::EnumDefinition,
    NodeKind::EnumItem,
    NodeKind::StructField,
    NodeKind::ImplBlock,
    NodeKind::UseDeclaration,
    NodeKind::UseWildcard,
    NodeKind::Invalid,
    NodeKind::UseAsClause,
    NodeKind::UseList,
    NodeKind::ScopedUseList,
    NodeKind::Parameter,
    NodeKind::ProtocolBound,
    NodeKind::GenericArgument,
    NodeKind::GenericArgumentList,
    NodeKind::ParameterList,
    NodeKind::ParameterTypeList,
    NodeKind::PointerOf,
    NodeKind::TupleIndexOf,
    NodeKind::EtCeteraOf,
    NodeKind::DerefOf,
    NodeKind::SliceOf,
    NodeKind::DynOf,
    NodeKind::ArrayOf,
    NodeKind::ArrayExpression,
    NodeKind::FunctionPointer,
    NodeKind::FunctionProtocol,
    NodeKind::TypeArguments,
    NodeKind::Invalid,
    NodeKind::TypeOf,
    NodeKind::NeverType,
    NodeKind::TupleType,
    NodeKind::Block,
    NodeKind::LetDeclaration,
    NodeKind::StaticDeclaration,
    NodeKind::ConstDeclaration,
    NodeKind::Statement,
    NodeKind::EmptyStatement,
    NodeKind::Invalid,
    NodeKind::ExpressionStatement,
    NodeKind::ReturnExpression,
    NodeKind::YieldExpression,
    NodeKind::DeferExpression,
    NodeKind::Arguments,
    NodeKind::MacroArguments,
    NodeKind::TupleExpression,
    NodeKind::Turbofish,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::UnaryExpression,
    NodeKind::ReferenceExpression,
    NodeKind::DereferenceExpression,
    NodeKind::TryExpression,
    NodeKind::BinaryExpression,
    NodeKind::FieldExpression,
    NodeKind::TupleIndexExpression,
    NodeKind::UniversalMacroInvocation,
    NodeKind::AssignmentExpression,
    NodeKind::IndexExpression,
    NodeKind::RangeExpression,
    NodeKind::CompoundAssignmentExpr,
    NodeKind::TypeCastExpression,
    NodeKind::TypeCheckExpression,
    NodeKind::CallExpression,
    NodeKind::MacroInvocation,
    NodeKind::StructInitializerItem,
    NodeKind::ScopedIdentifier,
    NodeKind::GenericType,
    NodeKind::ScopedTypeIdentifier,
    NodeKind::GenericTypeWithTurbofish,
    NodeKind::ScopedTypeIdentifier,
    NodeKind::StructInitializer,
    NodeKind::StructExpression,
    NodeKind::ParenthesizedExpression,
    NodeKind::IfExpression,
    NodeKind::WhenType,
    NodeKind::SwitchArm,
    NodeKind::SwitchArm,
    NodeKind::Pattern,
    NodeKind::SwitchExpression,
    NodeKind::SwitchBody,
    NodeKind::ElseClause,
    NodeKind::WhileExpression,
    NodeKind::BreakExpression,
    NodeKind::LoopExpression,
    NodeKind::EtCeteraExpression,
    NodeKind::StaticForExpression,
    NodeKind::ForExpression,
    NodeKind::Invalid,
    NodeKind::LambdaExpression,
    NodeKind::ClosureParameters,
    NodeKind::BoundIdentifier,
    NodeKind::BooleanLiteral,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::Invalid,
    NodeKind::PrimitiveType,
    NodeKind::TypeIdentifier,
];
protocol NodeVisitor<Self, ReturnType> {
    fn visit_source_file(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_source_file");
    }
    fn visit_tuple_index_of(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_tuple_index_of");
    }
    fn visit_use_declaration(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_use_declaration");
    }
    fn visit_use_wildcard(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_use_wildcard");
    }
    fn visit_mixin(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_mixin");
    }
    fn visit_assignment_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_assignment_expression");
    }
    fn visit_struct_initializer_item(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_struct_initializer_item");
    }
    fn visit_scoped_type_identifier(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_scoped_type_identifier");
    }
    fn visit_tuple_index_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_tuple_index_expression");
    }
    fn visit_use_list(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_use_list");
    }
    fn visit_top_level_block(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_top_level_block");
    }
    fn visit_expression_statement(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_expression_statement");
    }
    fn visit_generic_type_with_turbofish(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_generic_type_with_turbofish");
    }
    fn visit_boolean_literal(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_boolean_literal");
    }
    fn visit_compound_assignment_expr(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_compound_assignment_expr");
    }
    fn visit_defer_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_defer_expression");
    }
    fn visit_parameter_type_list(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_parameter_type_list");
    }
    fn visit_pattern(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_pattern");
    }
    fn visit_block_comment(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_block_comment");
    }
    fn visit_doc_comment(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_doc_comment");
    }
    fn visit_turbofish(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_turbofish");
    }
    fn visit_arguments(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_arguments");
    }
    fn visit_try_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_try_expression");
    }
    fn visit_type_arguments(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_type_arguments");
    }
    fn visit_call_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_call_expression");
    }
    fn visit_bound_identifier(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_bound_identifier");
    }
    fn visit_continue_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_continue_expression");
    }
    fn visit_macro_definition(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_macro_definition");
    }
    fn visit_binary_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_binary_expression");
    }
    fn visit_protocol_bound(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_protocol_bound");
    }
    fn visit_deref_of(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_deref_of");
    }
    fn visit_struct_initializer(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_struct_initializer");
    }
    fn visit_block(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_block");
    }
    fn visit_slice_of(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_slice_of");
    }
    fn visit_top_level_attributes(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_top_level_attributes");
    }
    fn visit_float_literal(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_float_literal");
    }
    fn visit_universal_macro_invocation(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_universal_macro_invocation");
    }
    fn visit_array_of(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_array_of");
    }
    fn visit_scoped_use_list(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_scoped_use_list");
    }
    fn visit_array_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_array_expression");
    }
    fn visit_attributes(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_attributes");
    }
    fn visit_meta_arguments(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_meta_arguments");
    }
    fn visit_type_check_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_type_check_expression");
    }
    fn visit_range_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_range_expression");
    }
    fn visit_when_type(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_when_type");
    }
    fn visit_dereference_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_dereference_expression");
    }
    fn visit_file_doc_comment(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_file_doc_comment");
    }
    fn visit_macro_parameter_list(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_macro_parameter_list");
    }
    fn visit_type_identifier(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_type_identifier");
    }
    fn visit_macro_invocation(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_macro_invocation");
    }
    fn visit_const_declaration(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_const_declaration");
    }
    fn visit_struct_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_struct_expression");
    }
    fn visit_loop_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_loop_expression");
    }
    fn visit_use_as_clause(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_use_as_clause");
    }
    fn visit_parameter(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_parameter");
    }
    fn visit_protocol_definition(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_protocol_definition");
    }
    fn visit_field_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_field_expression");
    }
    fn visit_ptr_literal(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_ptr_literal");
    }
    fn visit_enum_definition(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_enum_definition");
    }
    fn visit_tuple_type(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_tuple_type");
    }
    fn visit_else_clause(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_else_clause");
    }
    fn visit_type_definition(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_type_definition");
    }
    fn visit_type_cast_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_type_cast_expression");
    }
    fn visit_unary_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_unary_expression");
    }
    fn visit_generic_type(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_generic_type");
    }
    fn visit_identifier(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_identifier");
    }
    fn visit_index_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_index_expression");
    }
    fn visit_type_of(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_type_of");
    }
    fn visit_let_declaration(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_let_declaration");
    }
    fn visit_static_declaration(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_static_declaration");
    }
    fn visit_static_for_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_static_for_expression");
    }
    fn visit_macro_parameter(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_macro_parameter");
    }
    fn visit_primitive_type(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_primitive_type");
    }
    fn visit_mod_definition(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_mod_definition");
    }
    fn visit_never_type(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_never_type");
    }
    fn visit_while_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_while_expression");
    }
    fn visit_string_literal(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_string_literal");
    }
    fn visit_impl_block(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_impl_block");
    }
    fn visit_scoped_identifier(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_scoped_identifier");
    }
    fn visit_switch_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_switch_expression");
    }
    fn visit_macro_identifier(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_macro_identifier");
    }
    fn visit_macro_arguments(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_macro_arguments");
    }
    fn visit_generic_argument(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_generic_argument");
    }
    fn visit_break_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_break_expression");
    }
    fn visit_et_cetera_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_et_cetera_expression");
    }
    fn visit_function_pointer(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_function_pointer");
    }
    fn visit_empty_statement(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_empty_statement");
    }
    fn visit_switch_body(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_switch_body");
    }
    fn visit_closure_parameters(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_closure_parameters");
    }
    fn visit_reference_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_reference_expression");
    }
    fn visit_meta_item(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_meta_item");
    }
    fn visit_function_protocol(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_function_protocol");
    }
    fn visit_attribute_item(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_attribute_item");
    }
    fn visit_generic_argument_list(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_generic_argument_list");
    }
    fn visit_et_cetera_of(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_et_cetera_of");
    }
    fn visit_return_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_return_expression");
    }
    fn visit_dyn_of(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_dyn_of");
    }
    fn visit_if_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_if_expression");
    }
    fn visit_line_comment(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_line_comment");
    }
    fn visit_switch_arm(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_switch_arm");
    }
    fn visit_struct_definition(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_struct_definition");
    }
    fn visit_statement(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_statement");
    }
    fn visit_tuple_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_tuple_expression");
    }
    fn visit_enum_item(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_enum_item");
    }
    fn visit_yield_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_yield_expression");
    }
    fn visit_pointer_of(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_pointer_of");
    }
    fn visit_parenthesized_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_parenthesized_expression");
    }
    fn visit_char_literal(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_char_literal");
    }
    fn visit_for_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_for_expression");
    }
    fn visit_lambda_expression(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_lambda_expression");
    }
    fn visit_integer_literal(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_integer_literal");
    }
    fn visit_struct_field(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_struct_field");
    }
    fn visit_top_level_attribute_item(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_top_level_attribute_item");
    }
    fn visit_function_definition(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_function_definition");
    }
    fn visit_parameter_list(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit_parameter_list");
    }
    fn visit_unknown(self: &mut Self, _node: Node) -> ReturnType {
        panic!("unimplemented: visit unknown");
    }
    fn visit(self: &mut Self, node: Node) -> ReturnType {
        switch NODE_KINDS[node.symbol() as usize] {
            NodeKind::SourceFile => self.visit_source_file(node),
            NodeKind::TupleIndexOf => self.visit_tuple_index_of(node),
            NodeKind::UseDeclaration => self.visit_use_declaration(node),
            NodeKind::UseWildcard => self.visit_use_wildcard(node),
            NodeKind::Mixin => self.visit_mixin(node),
            NodeKind::AssignmentExpression => self.visit_assignment_expression(node),
            NodeKind::StructInitializerItem => self.visit_struct_initializer_item(node),
            NodeKind::ScopedTypeIdentifier => self.visit_scoped_type_identifier(node),
            NodeKind::TupleIndexExpression => self.visit_tuple_index_expression(node),
            NodeKind::UseList => self.visit_use_list(node),
            NodeKind::TopLevelBlock => self.visit_top_level_block(node),
            NodeKind::ExpressionStatement => self.visit_expression_statement(node),
            NodeKind::GenericTypeWithTurbofish => self.visit_generic_type_with_turbofish(node),
            NodeKind::BooleanLiteral => self.visit_boolean_literal(node),
            NodeKind::CompoundAssignmentExpr => self.visit_compound_assignment_expr(node),
            NodeKind::DeferExpression => self.visit_defer_expression(node),
            NodeKind::ParameterTypeList => self.visit_parameter_type_list(node),
            NodeKind::Pattern => self.visit_pattern(node),
            NodeKind::BlockComment => self.visit_block_comment(node),
            NodeKind::DocComment => self.visit_doc_comment(node),
            NodeKind::Turbofish => self.visit_turbofish(node),
            NodeKind::Arguments => self.visit_arguments(node),
            NodeKind::TryExpression => self.visit_try_expression(node),
            NodeKind::TypeArguments => self.visit_type_arguments(node),
            NodeKind::CallExpression => self.visit_call_expression(node),
            NodeKind::BoundIdentifier => self.visit_bound_identifier(node),
            NodeKind::ContinueExpression => self.visit_continue_expression(node),
            NodeKind::MacroDefinition => self.visit_macro_definition(node),
            NodeKind::BinaryExpression => self.visit_binary_expression(node),
            NodeKind::ProtocolBound => self.visit_protocol_bound(node),
            NodeKind::DerefOf => self.visit_deref_of(node),
            NodeKind::StructInitializer => self.visit_struct_initializer(node),
            NodeKind::Block => self.visit_block(node),
            NodeKind::SliceOf => self.visit_slice_of(node),
            NodeKind::TopLevelAttributes => self.visit_top_level_attributes(node),
            NodeKind::FloatLiteral => self.visit_float_literal(node),
            NodeKind::UniversalMacroInvocation => self.visit_universal_macro_invocation(node),
            NodeKind::ArrayOf => self.visit_array_of(node),
            NodeKind::ScopedUseList => self.visit_scoped_use_list(node),
            NodeKind::ArrayExpression => self.visit_array_expression(node),
            NodeKind::Attributes => self.visit_attributes(node),
            NodeKind::MetaArguments => self.visit_meta_arguments(node),
            NodeKind::TypeCheckExpression => self.visit_type_check_expression(node),
            NodeKind::RangeExpression => self.visit_range_expression(node),
            NodeKind::WhenType => self.visit_when_type(node),
            NodeKind::DereferenceExpression => self.visit_dereference_expression(node),
            NodeKind::FileDocComment => self.visit_file_doc_comment(node),
            NodeKind::MacroParameterList => self.visit_macro_parameter_list(node),
            NodeKind::TypeIdentifier => self.visit_type_identifier(node),
            NodeKind::MacroInvocation => self.visit_macro_invocation(node),
            NodeKind::ConstDeclaration => self.visit_const_declaration(node),
            NodeKind::StructExpression => self.visit_struct_expression(node),
            NodeKind::LoopExpression => self.visit_loop_expression(node),
            NodeKind::UseAsClause => self.visit_use_as_clause(node),
            NodeKind::Parameter => self.visit_parameter(node),
            NodeKind::ProtocolDefinition => self.visit_protocol_definition(node),
            NodeKind::FieldExpression => self.visit_field_expression(node),
            NodeKind::PtrLiteral => self.visit_ptr_literal(node),
            NodeKind::EnumDefinition => self.visit_enum_definition(node),
            NodeKind::TupleType => self.visit_tuple_type(node),
            NodeKind::ElseClause => self.visit_else_clause(node),
            NodeKind::TypeDefinition => self.visit_type_definition(node),
            NodeKind::TypeCastExpression => self.visit_type_cast_expression(node),
            NodeKind::UnaryExpression => self.visit_unary_expression(node),
            NodeKind::GenericType => self.visit_generic_type(node),
            NodeKind::Identifier => self.visit_identifier(node),
            NodeKind::IndexExpression => self.visit_index_expression(node),
            NodeKind::TypeOf => self.visit_type_of(node),
            NodeKind::LetDeclaration => self.visit_let_declaration(node),
            NodeKind::StaticDeclaration => self.visit_static_declaration(node),
            NodeKind::StaticForExpression => self.visit_static_for_expression(node),
            NodeKind::MacroParameter => self.visit_macro_parameter(node),
            NodeKind::PrimitiveType => self.visit_primitive_type(node),
            NodeKind::ModDefinition => self.visit_mod_definition(node),
            NodeKind::NeverType => self.visit_never_type(node),
            NodeKind::WhileExpression => self.visit_while_expression(node),
            NodeKind::StringLiteral => self.visit_string_literal(node),
            NodeKind::ImplBlock => self.visit_impl_block(node),
            NodeKind::ScopedIdentifier => self.visit_scoped_identifier(node),
            NodeKind::SwitchExpression => self.visit_switch_expression(node),
            NodeKind::MacroIdentifier => self.visit_macro_identifier(node),
            NodeKind::MacroArguments => self.visit_macro_arguments(node),
            NodeKind::GenericArgument => self.visit_generic_argument(node),
            NodeKind::BreakExpression => self.visit_break_expression(node),
            NodeKind::EtCeteraExpression => self.visit_et_cetera_expression(node),
            NodeKind::FunctionPointer => self.visit_function_pointer(node),
            NodeKind::EmptyStatement => self.visit_empty_statement(node),
            NodeKind::SwitchBody => self.visit_switch_body(node),
            NodeKind::ClosureParameters => self.visit_closure_parameters(node),
            NodeKind::ReferenceExpression => self.visit_reference_expression(node),
            NodeKind::MetaItem => self.visit_meta_item(node),
            NodeKind::FunctionProtocol => self.visit_function_protocol(node),
            NodeKind::AttributeItem => self.visit_attribute_item(node),
            NodeKind::GenericArgumentList => self.visit_generic_argument_list(node),
            NodeKind::EtCeteraOf => self.visit_et_cetera_of(node),
            NodeKind::ReturnExpression => self.visit_return_expression(node),
            NodeKind::DynOf => self.visit_dyn_of(node),
            NodeKind::IfExpression => self.visit_if_expression(node),
            NodeKind::LineComment => self.visit_line_comment(node),
            NodeKind::SwitchArm => self.visit_switch_arm(node),
            NodeKind::StructDefinition => self.visit_struct_definition(node),
            NodeKind::Statement => self.visit_statement(node),
            NodeKind::TupleExpression => self.visit_tuple_expression(node),
            NodeKind::EnumItem => self.visit_enum_item(node),
            NodeKind::YieldExpression => self.visit_yield_expression(node),
            NodeKind::PointerOf => self.visit_pointer_of(node),
            NodeKind::ParenthesizedExpression => self.visit_parenthesized_expression(node),
            NodeKind::CharLiteral => self.visit_char_literal(node),
            NodeKind::ForExpression => self.visit_for_expression(node),
            NodeKind::LambdaExpression => self.visit_lambda_expression(node),
            NodeKind::IntegerLiteral => self.visit_integer_literal(node),
            NodeKind::StructField => self.visit_struct_field(node),
            NodeKind::TopLevelAttributeItem => self.visit_top_level_attribute_item(node),
            NodeKind::FunctionDefinition => self.visit_function_definition(node),
            NodeKind::ParameterList => self.visit_parameter_list(node),
            _ => self.visit_unknown(node),
        }
    }
}
