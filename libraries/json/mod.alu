use std::iter::{Iterator, IteratorExt};
use std::cmp::Equatable;
use std::fmt::{Formattable, Formatter, write};
use std::string::StringBuf;
use std::collections::{Vector, HashMap};

type Result<T> = std::result::Result<T, Error>;

enum ErrorKind {
    Unexpected,
    UnexpectedToken,
    InvalidEscape,
    InvalidUnicodeEscape,
    NumberNotRepresentable,
    NumberNotRepresentableExactly,
    Formatting,
    Eof,
    Malformed,
}

impl ErrorKind {
    fn equals(self: &ErrorKind, other: &ErrorKind) -> bool {
        *self == *other
    }

    mixin Equatable<ErrorKind>;
}


struct Error {
    kind: ErrorKind,
    token_kind: Option<lexer::TokenKind>,
    position: Option<usize>,
}

impl Error {
    fn new(kind: ErrorKind) -> Error {
        Error {
            kind: kind,
            token_kind: mem::uninitialized(),
            position: Option::none(),
        }
    }

    fn during_lexing(kind: ErrorKind, position: usize) -> Error {
        Error {
            kind: kind,
            token_kind: Option::none(),
            position: Option::some(position),
        }
    }

    fn unexpected_token(token_kind: lexer::TokenKind) -> Error {
        Error {
            kind: ErrorKind::UnexpectedToken,
            token_kind: Option::some(token_kind),
            position: Option::none(),
        }
    }

    fn equals(self: &Error, other: &Error) -> bool {
        self.kind == other.kind
            && self.token_kind == other.token_kind
            && self.position == other.position
    }

    fn fmt<F: Formatter<F>>(self: &Error, f: &mut F) -> std::fmt::Result {
        switch self.kind {
            ErrorKind::Unexpected => write!(f, "unexpected character at position {}", self.position),
            ErrorKind::UnexpectedToken => write!(f, "unexpected token {}", self.token_kind),
            ErrorKind::Eof => write!(f, "unexpected end of input"),
            ErrorKind::Malformed => write!(f, "malformed JSON"),
            ErrorKind::NumberNotRepresentable => write!(f, "number not representable in JSON"),
            ErrorKind::NumberNotRepresentableExactly => write!(f, "number not representable exactly in JSON"),
            ErrorKind::InvalidEscape => write!(f, "invalid escape sequence"),
            ErrorKind::InvalidUnicodeEscape => write!(f, "invalid unicode escape sequence"),
            ErrorKind::Formatting => write!(f, "error while writing JSON"),
            _ => unreachable!(),
        }
    }

    mixin Equatable<Error>;
}

union JsonValueT {
    string: StringBuf,
    number: f64,
    boolean: bool,
    object: HashMap<StringBuf, JsonValue>,
    array: Vector<JsonValue>,
}

enum JsonValueKind {
    String,
    Number,
    Boolean,
    Object,
    Array,
    Null
}

struct JsonValue {
    kind: JsonValueKind,
    inner: JsonValueT,
}

impl JsonValue {
    /// Create a new JSON value from a string buffer
    ///
    /// The string is moved into the JSON value.
    ///
    /// # Example
    /// ```
    /// use std::string::StringBuf;
    /// use json::JsonValue;
    ///
    /// let value = JsonValue::string(StringBuf::from_slice("foo"));
    ///
    /// ```
    fn string(value: StringBuf) -> JsonValue {
        JsonValue {
            kind: JsonValueKind::String,
            inner: JsonValueT {
                string: value,
            },
        }
    }

    fn number<T: builtins::Numeric>(value: T) -> JsonValue {
        JsonValue {
            kind: JsonValueKind::Number,
            inner: JsonValueT {
                number: value as f64,
            },
        }
    }

    fn boolean(value: bool) -> JsonValue {
        JsonValue {
            kind: JsonValueKind::Boolean,
            inner: JsonValueT {
                boolean: value,
            },
        }
    }

    fn object(value: HashMap<StringBuf, JsonValue>) -> JsonValue {
        JsonValue {
            kind: JsonValueKind::Object,
            inner: JsonValueT {
                object: value,
            },
        }
    }

    fn array(value: Vector<JsonValue>) -> JsonValue {
        JsonValue {
            kind: JsonValueKind::Array,
            inner: JsonValueT {
                array: value,
            },
        }
    }

    fn null() -> JsonValue {
        JsonValue {
            kind: JsonValueKind::Null,
            inner: mem::uninitialized()
        }
    }

    fn as_string(self: &JsonValue) -> Option<&StringBuf> {
        switch self.kind {
            JsonValueKind::String => Option::some(&self.inner.string),
            _ => Option::none(),
        }
    }

    fn as_number<T: builtins::Numeric>(self: &JsonValue) -> Option<T> {
        switch self.kind {
            JsonValueKind::Number => Option::some(self.inner.number as T),
            _ => Option::none(),
        }
    }

    fn as_boolean(self: &JsonValue) -> Option<bool> {
        switch self.kind {
            JsonValueKind::Boolean => Option::some(self.inner.boolean),
            _ => Option::none(),
        }
    }

    fn as_object(self: &JsonValue) -> Option<&HashMap<StringBuf, JsonValue>> {
        switch self.kind {
            JsonValueKind::Object => Option::some(&self.inner.object),
            _ => Option::none(),
        }
    }

    fn as_array(self: &JsonValue) -> Option<&Vector<JsonValue>> {
        switch self.kind {
            JsonValueKind::Array => Option::some(&self.inner.array),
            _ => Option::none(),
        }
    }

    fn is_null(self: &JsonValue) -> bool {
        self.kind == JsonValueKind::Null
    }

    fn move(self: &mut JsonValue) -> JsonValue {
        JsonValue {
            kind: std::mem::replace(&self.kind, JsonValueKind::Null),
            inner: self.inner,
        }
    }

    fn free(self: &mut JsonValue) {
        switch self.kind {
            JsonValueKind::String => {
                self.inner.string.free();
            },
            JsonValueKind::Number => {},
            JsonValueKind::Boolean => {},
            JsonValueKind::Object => {
                for (key, value) in self.inner.object {
                    key.free();
                    value.free();
                }
                self.inner.object.free();
            },
            JsonValueKind::Array => {
                self.inner.array.free_all();
            },
            JsonValueKind::Null => {},
            _ => unreachable!()
        }
    }

    fn equals(self: &JsonValue, other: &JsonValue) -> bool {
        if self.kind != other.kind {
            return false;
        }

        switch self.kind {
            JsonValueKind::String => self.inner.string == other.inner.string,
            JsonValueKind::Number => self.inner.number == other.inner.number,
            JsonValueKind::Boolean => self.inner.boolean == other.inner.boolean,
            JsonValueKind::Object => {
                if self.inner.object.len() != other.inner.object.len() {
                    return false;
                }

                for (key, value) in self.inner.object.iter_ref() {
                    let other_value = other.inner.object.get_ref(key);
                    if other_value.is_none() || !value.equals(other_value.unwrap()) {
                        return false;
                    }
                }

                true
            },
            JsonValueKind::Array => {
                if self.inner.array.len() != other.inner.array.len() {
                    return false;
                }

                let it = self.inner.array.iter_ref()
                    .zip(&other.inner.array.iter_ref());

                for (value, other_value) in it {
                    if !value.equals(other_value) {
                        return false;
                    }
                }

                true
            },
            JsonValueKind::Null => true,
            _ => unreachable!()
        }
    }

    fn write<J: writer::JsonWriter<J>>(self: &JsonValue, writer: &mut J) -> Result<()> {
        switch self.kind {
            JsonValueKind::String => writer.write_string(self.inner.string[..]),
            JsonValueKind::Number => writer.write_number(self.inner.number),
            JsonValueKind::Boolean => writer.write_bool(self.inner.boolean),
            JsonValueKind::Object => {
                writer.write_object(
                    &self.inner.object.iter_ref(),
                    |w: &mut J, item: (&StringBuf, &JsonValue)| -> Result<()> {
                        w.write_object_key(item.0[..])?;
                        item.1.write(w)
                    }
                )
            },
            JsonValueKind::Array => {
                writer.write_array(
                    &self.inner.array.iter_ref(),
                    |w: &mut J, item: &JsonValue| -> Result<()> {
                        item.write(w)
                    }
                )
            },
            JsonValueKind::Null => writer.write_null(),
            _ => unreachable!()
        }
    }

    fn fmt<F: std::fmt::Formatter<F>>(self: &JsonValue, f: &mut F) -> std::fmt::Result {
        let writer = writer::JsonFormatter::new(f);
        self.write(&writer).map_err(std::fmt::Error::from::<Error>)
    }

    fn clone(self: &JsonValue) -> JsonValue {
        JsonValue {
            kind: self.kind,
            inner: switch self.kind {
                JsonValueKind::Number, JsonValueKind::Boolean, JsonValueKind::Null => {
                    return *self;
                },
                JsonValueKind::String => {
                    JsonValueT {
                        string: self.inner.string.clone()
                    }
                },
                JsonValueKind::Object => {
                    let object = HashMap::with_capacity::<StringBuf, JsonValue>(self.inner.object.len());
                    for (key, value) in self.inner.object.iter_ref() {
                        object.insert(key.clone(), value.clone());
                    }
                    JsonValueT {
                        object: object
                    }
                },
                JsonValueKind::Array => {
                    let array = Vector::with_capacity::<JsonValue>(self.inner.array.len());
                    for value in self.inner.array.iter_ref() {
                        array.push(value.clone());
                    }
                    JsonValueT {
                        array: array
                    }
                },
                _ => unreachable!()
            }
        }
    }

    mixin std::cmp::Equatable<JsonValue>;
}


#[cfg(test)]
mod tests {
    macro vector($elem...) {
        Vector::from_slice(&[$elem...])
    }

    macro hashmap($elem...) {
        let h = HashMap::new();
        {
            let elem = $elem;
            h.insert(StringBuf::from_slice(elem.0), elem.1);
        }...;
        h
    }

    #[test]
    fn test_json_value() {
        let value = JsonValue::string(StringBuf::from_slice("test"));
        defer value.free();

        assert_eq!(value.as_string().unwrap()[..], "test");
        assert!(value.as_number::<i32>().is_none());
        assert!(value.as_boolean().is_none());
        assert!(value.as_object().is_none());
        assert!(value.as_array().is_none());
        assert!(!value.is_null());

        let value = JsonValue::number(42);
        defer value.free();

        assert!(value.as_string().is_none());
        assert_eq!(value.as_number::<i32>(), Option::some(42));
        assert_eq!(value.as_number::<f64>(), Option::some(42.0));
        assert!(value.as_boolean().is_none());
        assert!(value.as_object().is_none());
        assert!(value.as_array().is_none());
        assert!(!value.is_null());

        let value = JsonValue::number(2.4601);

        assert!(value.as_string().is_none());
        assert_eq!(value.as_number::<i32>(), Option::some(2));
        assert_eq!(value.as_number::<f64>(), Option::some(2.4601));
        assert!(value.as_boolean().is_none());
        assert!(value.as_object().is_none());
        assert!(value.as_array().is_none());
        assert!(!value.is_null());

        let value = JsonValue::boolean(true);
        defer value.free();

        assert!(value.as_string().is_none());
        assert!(value.as_number::<i32>().is_none());
        assert_eq!(value.as_boolean(), Option::some(true));
        assert!(value.as_object().is_none());
        assert!(value.as_array().is_none());
        assert!(!value.is_null());
    }

    #[test]
    fn test_json_value_equals() {
        let a = JsonValue::string(StringBuf::from_slice("test"));
        defer a.free();

        let b = JsonValue::string(StringBuf::from_slice("test"));
        defer b.free();

        let c = JsonValue::string(StringBuf::from_slice("toast"));
        defer c.free();

        assert_eq!(a, b);
        assert_ne!(a, c);

        let a = JsonValue::number(42);
        let b = JsonValue::number(42);
        let c = JsonValue::number(43);

        assert_eq!(a, b);
        assert_ne!(a, c);

        let a = JsonValue::boolean(true);
        let b = JsonValue::boolean(true);
        let c = JsonValue::boolean(false);

        assert_eq!(a, b);
        assert_ne!(a, c);

        let a = JsonValue::null();
        let b = JsonValue::null();

        assert_eq!(a, b);
    }

    #[test]
    fn test_json_value_clone() {
        let a = JsonValue::string(StringBuf::from_slice("test"));
        defer a.free();

        let b = a.clone();
        defer b.free();

        assert_eq!(a, b);
    }

    #[test]
    fn test_json_value_format() {
        let a = JsonValue::string(StringBuf::from_slice("test"));
        defer a.free();

        let b = a.clone();
        defer b.free();

        assert_eq!(a, b);
    }

    #[test]
    fn test_json_value_fmt() {
        let val = JsonValue::object(hashmap!(
            ("a", JsonValue::number(42.0)),
            ("b", JsonValue::array(vector!(
                JsonValue::number(1.0),
                JsonValue::number(2.0),
                JsonValue::number(3.0)
            ))),
            ("c", JsonValue::object(hashmap!(
                ("d", JsonValue::boolean(true)),
                ("e", JsonValue::boolean(false))
            )))
        ));
        defer val.free();

        let formatted = std::fmt::format!("{}", val).unwrap();
        defer formatted.free();

        assert_eq!(formatted[..] as &[u8], "{\"c\":{\"e\":false,\"d\":true},\"b\":[1,2,3],\"a\":42}");
    }
}